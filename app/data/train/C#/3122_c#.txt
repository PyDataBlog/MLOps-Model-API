using System;
using DiaryOfMadman.Identity.Helpers;
using DiaryOfMadman.Identity.Store;
using DiaryOfMadman.Identity.Validators;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace DiaryOfMadman.Identity
{
    public static class IdentityExtensions
    {
        public static IServiceCollection UseSelfIdentity(this IServiceCollection services)
        {
            services.AddIdentity<AppUser, AppUserRole>();

            services.AddSingleton<UserStore<AppUser>>()
                    .AddSingleton<IRoleStore<AppUserRole>, RoleStore<AppUserRole>>()
                    .AddSingleton(CreateUserManager);

            return services;
        }

        private static UserManager<AppUser> CreateUserManager(IServiceProvider provider)
        {
            var store = provider.GetService<UserStore<AppUser>>();

            var optionsAccessor = new OptionsWrapper<IdentityOptions>(new IdentityOptions());

            var passwordHasher = new PasswordHasher<AppUser>();

            var userValidators = new[]
            {
                new AppUserValidator(store)
            };

            var passwordValidators = new[]
            {
                new AppUserPasswordValidator()
            };

            var keyNormalizer = new KeyNormalizer();

            var errors = new IdentityErrorDescriber();

            var logger = new Logger<UserManager<AppUser>>(new LoggerFactory());

            return new UserManager<AppUser>(
                store,
                optionsAccessor,
                passwordHasher,
                userValidators,
                passwordValidators,
                keyNormalizer,
                errors,
                provider,
                logger
            );
        }
    }
}