using System;
using xmljr.math;
using System.ComponentModel;
using uint16 = System.UInt16;
using uint32 = System.UInt32;
namespace DemoGame
{

	[TypeConverter(typeof(ExpandableObjectConverter)),Serializable]
	public class Monster
	{
		public int                                _ActivatedAt;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                ActivatedAt { get { return _ActivatedAt; } set { _ActivatedAt = value; } }
		public int                                _Floor;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                Floor { get { return _Floor; } set { _Floor = value; } }
		public float                              _X;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              X { get { return _X; } set { _X = value; } }
		public float                              _Y;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              Y { get { return _Y; } set { _Y = value; } }
		public bool                               _HasObjective;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public bool                               HasObjective { get { return _HasObjective; } set { _HasObjective = value; } }
		public int                                _GoalX;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                GoalX { get { return _GoalX; } set { _GoalX = value; } }
		public int                                _GoalY;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                GoalY { get { return _GoalY; } set { _GoalY = value; } }
		public bool                               _Angry;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public bool                               Angry { get { return _Angry; } set { _Angry = value; } }
		public double                             _DistanceToGoal;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public double                             DistanceToGoal { get { return _DistanceToGoal; } set { _DistanceToGoal = value; } }
		public Monster                           _NextMonster;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public Monster                           NextMonster { get { return _NextMonster; } set { _NextMonster = value; } }
		public Monster()
		{
			ActivatedAt = 0;
			Floor = 0;
			X = 0.0f;
			Y = 0.0f;
			HasObjective = false;
			GoalX = 0;
			GoalY = 0;
			Angry = false;
			DistanceToGoal = 0.0;
			NextMonster = null;
		}
//WriteXML
		public virtual int WriteXML(xmljr.XmlJrWriter __XW)
		{
#region WriteXML-Monster
		int __idx; __idx = 0; __idx++; __idx--; 
		int __testaddr = __XW.Exist(this);
		if(__testaddr > 0) return __testaddr;
		xmljr.XmlJrBuffer _XB = __XW.NewObject("Monster",this);
//ActivatedAt-stage0
	_XB.write_int("ActivatedAt",ActivatedAt);
//Floor-stage0
	_XB.write_int("Floor",Floor);
//X-stage0
	_XB.write_float("X",X);
//Y-stage0
	_XB.write_float("Y",Y);
//HasObjective-stage0
	_XB.write_bool("HasObjective",HasObjective);
//GoalX-stage0
	_XB.write_int("GoalX",GoalX);
//GoalY-stage0
	_XB.write_int("GoalY",GoalY);
//Angry-stage0
	_XB.write_bool("Angry",Angry);
//DistanceToGoal-stage0
	_XB.write_double("DistanceToGoal",DistanceToGoal);
//NextMonster-stage0
if(NextMonster != null)
	_XB.write_addr("NextMonster",NextMonster.WriteXML(__XW));
		_XB.finish();
		return _XB._Addr;
#endregion
		}
//ReadXML
		public virtual void ReadDetailsXML(xmljr.XmlJrObjectTable __table, xmljr.XmlJrDom  __src)
		{
#region ReadXML-Monster
		 int __idx; __idx = 0; __idx++; __idx--; 
		 int __size; __size = 0; __size++; __size--; 
		foreach(xmljr.XmlJrDom __C in __src._Children)
			{
//ActivatedAt-stageR
if(__C._Name.Equals("ActivatedAt"))
{
ActivatedAt = __C.read_int();
}
//Floor-stageR
if(__C._Name.Equals("Floor"))
{
Floor = __C.read_int();
}
//X-stageR
if(__C._Name.Equals("X"))
{
X = __C.read_float();
}
//Y-stageR
if(__C._Name.Equals("Y"))
{
Y = __C.read_float();
}
//HasObjective-stageR
if(__C._Name.Equals("HasObjective"))
{
HasObjective = __C.read_bool();
}
//GoalX-stageR
if(__C._Name.Equals("GoalX"))
{
GoalX = __C.read_int();
}
//GoalY-stageR
if(__C._Name.Equals("GoalY"))
{
GoalY = __C.read_int();
}
//Angry-stageR
if(__C._Name.Equals("Angry"))
{
Angry = __C.read_bool();
}
//DistanceToGoal-stageR
if(__C._Name.Equals("DistanceToGoal"))
{
DistanceToGoal = __C.read_double();
}
//NextMonster-stageR
if(__C._Name.Equals("NextMonster"))
{
NextMonster = (Monster) __table.LookUpObject(__C.read_int());
}
			}
#endregion
		}
	}

	[TypeConverter(typeof(ExpandableObjectConverter)),Serializable]
	public class Turret
	{
		public int                                _ActivatedAt;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                ActivatedAt { get { return _ActivatedAt; } set { _ActivatedAt = value; } }
		public int                                _Floor;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                Floor { get { return _Floor; } set { _Floor = value; } }
		public int                                _X;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                X { get { return _X; } set { _X = value; } }
		public int                                _Y;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                Y { get { return _Y; } set { _Y = value; } }
		public float                              _TargetX;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              TargetX { get { return _TargetX; } set { _TargetX = value; } }
		public float                              _TargetY;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              TargetY { get { return _TargetY; } set { _TargetY = value; } }
		public double                             _CooldownReset;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public double                             CooldownReset { get { return _CooldownReset; } set { _CooldownReset = value; } }
		public double                             _Cooldown;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public double                             Cooldown { get { return _Cooldown; } set { _Cooldown = value; } }
		public int                             [] _TargetSearch;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                             []  TargetSearch { get { return _TargetSearch; } set { _TargetSearch = value; } }
		public int                                _ActivatedTargets;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                ActivatedTargets { get { return _ActivatedTargets; } set { _ActivatedTargets = value; } }
		public Turret()
		{
			ActivatedAt = 0;
			Floor = 0;
			X = 0;
			Y = 0;
			TargetX = 0.0f;
			TargetY = 0.0f;
			CooldownReset = 0.0;
			Cooldown = 0.0;
			TargetSearch = null;
			ActivatedTargets = 0;
		}
//WriteXML
		public virtual int WriteXML(xmljr.XmlJrWriter __XW)
		{
#region WriteXML-Turret
		int __idx; __idx = 0; __idx++; __idx--; 
		int __testaddr = __XW.Exist(this);
		if(__testaddr > 0) return __testaddr;
		xmljr.XmlJrBuffer _XB = __XW.NewObject("Turret",this);
//ActivatedAt-stage0
	_XB.write_int("ActivatedAt",ActivatedAt);
//Floor-stage0
	_XB.write_int("Floor",Floor);
//X-stage0
	_XB.write_int("X",X);
//Y-stage0
	_XB.write_int("Y",Y);
//TargetX-stage0
	_XB.write_float("TargetX",TargetX);
//TargetY-stage0
	_XB.write_float("TargetY",TargetY);
//CooldownReset-stage0
	_XB.write_double("CooldownReset",CooldownReset);
//Cooldown-stage0
	_XB.write_double("Cooldown",Cooldown);
//TargetSearch-stage0
if(TargetSearch != null)
	{
		_XB.write_array("TargetSearch",TargetSearch.Length);
		for(__idx = 0 ; __idx < TargetSearch.Length; __idx++)
			_XB.write_int("r",TargetSearch[__idx]);
		_XB.finish_array("TargetSearch");
	}
//ActivatedTargets-stage0
	_XB.write_int("ActivatedTargets",ActivatedTargets);
		_XB.finish();
		return _XB._Addr;
#endregion
		}
//ReadXML
		public virtual void ReadDetailsXML(xmljr.XmlJrObjectTable __table, xmljr.XmlJrDom  __src)
		{
#region ReadXML-Turret
		 int __idx; __idx = 0; __idx++; __idx--; 
		 int __size; __size = 0; __size++; __size--; 
		foreach(xmljr.XmlJrDom __C in __src._Children)
			{
//ActivatedAt-stageR
if(__C._Name.Equals("ActivatedAt"))
{
ActivatedAt = __C.read_int();
}
//Floor-stageR
if(__C._Name.Equals("Floor"))
{
Floor = __C.read_int();
}
//X-stageR
if(__C._Name.Equals("X"))
{
X = __C.read_int();
}
//Y-stageR
if(__C._Name.Equals("Y"))
{
Y = __C.read_int();
}
//TargetX-stageR
if(__C._Name.Equals("TargetX"))
{
TargetX = __C.read_float();
}
//TargetY-stageR
if(__C._Name.Equals("TargetY"))
{
TargetY = __C.read_float();
}
//CooldownReset-stageR
if(__C._Name.Equals("CooldownReset"))
{
CooldownReset = __C.read_double();
}
//Cooldown-stageR
if(__C._Name.Equals("Cooldown"))
{
Cooldown = __C.read_double();
}
//TargetSearch-stageR
if(__C._Name.Equals("TargetSearch"))
{
	__size = __C.GetIntParam("size");
	if(__size > 0)
	{
		TargetSearch = new int[__size];
		__idx = 0;
			foreach(xmljr.XmlJrDom sub in __C._Children)
			{
				if(sub._Name.Equals("r"))
				{
					TargetSearch[__idx] = sub.read_int();
					__idx++;
				}
			}
	}
}
//ActivatedTargets-stageR
if(__C._Name.Equals("ActivatedTargets"))
{
ActivatedTargets = __C.read_int();
}
			}
#endregion
		}
	}

	[TypeConverter(typeof(ExpandableObjectConverter)),Serializable]
	public class Projectile
	{
		public int                                _ActivatedAt;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                ActivatedAt { get { return _ActivatedAt; } set { _ActivatedAt = value; } }
		public float                              _X;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              X { get { return _X; } set { _X = value; } }
		public float                              _Y;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              Y { get { return _Y; } set { _Y = value; } }
		public float                              _DeltaX;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              DeltaX { get { return _DeltaX; } set { _DeltaX = value; } }
		public float                              _DeltaY;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              DeltaY { get { return _DeltaY; } set { _DeltaY = value; } }
		public float                              _Lifetime;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public float                              Lifetime { get { return _Lifetime; } set { _Lifetime = value; } }
		public Projectile()
		{
			ActivatedAt = 0;
			X = 0.0f;
			Y = 0.0f;
			DeltaX = 0.0f;
			DeltaY = 0.0f;
			Lifetime = 0.0f;
		}
//WriteXML
		public virtual int WriteXML(xmljr.XmlJrWriter __XW)
		{
#region WriteXML-Projectile
		int __idx; __idx = 0; __idx++; __idx--; 
		int __testaddr = __XW.Exist(this);
		if(__testaddr > 0) return __testaddr;
		xmljr.XmlJrBuffer _XB = __XW.NewObject("Projectile",this);
//ActivatedAt-stage0
	_XB.write_int("ActivatedAt",ActivatedAt);
//X-stage0
	_XB.write_float("X",X);
//Y-stage0
	_XB.write_float("Y",Y);
//DeltaX-stage0
	_XB.write_float("DeltaX",DeltaX);
//DeltaY-stage0
	_XB.write_float("DeltaY",DeltaY);
//Lifetime-stage0
	_XB.write_float("Lifetime",Lifetime);
		_XB.finish();
		return _XB._Addr;
#endregion
		}
//ReadXML
		public virtual void ReadDetailsXML(xmljr.XmlJrObjectTable __table, xmljr.XmlJrDom  __src)
		{
#region ReadXML-Projectile
		 int __idx; __idx = 0; __idx++; __idx--; 
		 int __size; __size = 0; __size++; __size--; 
		foreach(xmljr.XmlJrDom __C in __src._Children)
			{
//ActivatedAt-stageR
if(__C._Name.Equals("ActivatedAt"))
{
ActivatedAt = __C.read_int();
}
//X-stageR
if(__C._Name.Equals("X"))
{
X = __C.read_float();
}
//Y-stageR
if(__C._Name.Equals("Y"))
{
Y = __C.read_float();
}
//DeltaX-stageR
if(__C._Name.Equals("DeltaX"))
{
DeltaX = __C.read_float();
}
//DeltaY-stageR
if(__C._Name.Equals("DeltaY"))
{
DeltaY = __C.read_float();
}
//Lifetime-stageR
if(__C._Name.Equals("Lifetime"))
{
Lifetime = __C.read_float();
}
			}
#endregion
		}
	}

	[TypeConverter(typeof(ExpandableObjectConverter)),Serializable]
	public class Tile
	{
		public int                                _Type;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                Type { get { return _Type; } set { _Type = value; } }
		public int                                _GoalX;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                GoalX { get { return _GoalX; } set { _GoalX = value; } }
		public int                                _GoalY;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                GoalY { get { return _GoalY; } set { _GoalY = value; } }
		public double                             _Distance;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public double                             Distance { get { return _Distance; } set { _Distance = value; } }
		public Monster                           _BestMonster;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public Monster                           BestMonster { get { return _BestMonster; } set { _BestMonster = value; } }
		public Monster                           _WorstMonster;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public Monster                           WorstMonster { get { return _WorstMonster; } set { _WorstMonster = value; } }
		public Tile()
		{
			Type = 0;
			GoalX = 0;
			GoalY = 0;
			Distance = 0.0;
			BestMonster = null;
			WorstMonster = null;
		}
//WriteXML
		public virtual int WriteXML(xmljr.XmlJrWriter __XW)
		{
#region WriteXML-Tile
		int __idx; __idx = 0; __idx++; __idx--; 
		int __testaddr = __XW.Exist(this);
		if(__testaddr > 0) return __testaddr;
		xmljr.XmlJrBuffer _XB = __XW.NewObject("Tile",this);
//Type-stage0
	_XB.write_int("Type",Type);
//GoalX-stage0
	_XB.write_int("GoalX",GoalX);
//GoalY-stage0
	_XB.write_int("GoalY",GoalY);
//Distance-stage0
	_XB.write_double("Distance",Distance);
//BestMonster-stage0
if(BestMonster != null)
	_XB.write_addr("BestMonster",BestMonster.WriteXML(__XW));
//WorstMonster-stage0
if(WorstMonster != null)
	_XB.write_addr("WorstMonster",WorstMonster.WriteXML(__XW));
		_XB.finish();
		return _XB._Addr;
#endregion
		}
//ReadXML
		public virtual void ReadDetailsXML(xmljr.XmlJrObjectTable __table, xmljr.XmlJrDom  __src)
		{
#region ReadXML-Tile
		 int __idx; __idx = 0; __idx++; __idx--; 
		 int __size; __size = 0; __size++; __size--; 
		foreach(xmljr.XmlJrDom __C in __src._Children)
			{
//Type-stageR
if(__C._Name.Equals("Type"))
{
Type = __C.read_int();
}
//GoalX-stageR
if(__C._Name.Equals("GoalX"))
{
GoalX = __C.read_int();
}
//GoalY-stageR
if(__C._Name.Equals("GoalY"))
{
GoalY = __C.read_int();
}
//Distance-stageR
if(__C._Name.Equals("Distance"))
{
Distance = __C.read_double();
}
//BestMonster-stageR
if(__C._Name.Equals("BestMonster"))
{
BestMonster = (Monster) __table.LookUpObject(__C.read_int());
}
//WorstMonster-stageR
if(__C._Name.Equals("WorstMonster"))
{
WorstMonster = (Monster) __table.LookUpObject(__C.read_int());
}
			}
#endregion
		}
	}

	[TypeConverter(typeof(ExpandableObjectConverter)),Serializable]
	public class TileGrid
	{
		public Tile                            [] _Tiles;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public Tile                            []  Tiles { get { return _Tiles; } set { _Tiles = value; } }
		public int                                _Width;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                Width { get { return _Width; } set { _Width = value; } }
		public int                                _Height;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                Height { get { return _Height; } set { _Height = value; } }
		public TileGrid()
		{
			Tiles = null;
			Width = 0;
			Height = 0;
		}
//WriteXML
		public virtual int WriteXML(xmljr.XmlJrWriter __XW)
		{
#region WriteXML-TileGrid
		int __idx; __idx = 0; __idx++; __idx--; 
		int __testaddr = __XW.Exist(this);
		if(__testaddr > 0) return __testaddr;
		xmljr.XmlJrBuffer _XB = __XW.NewObject("TileGrid",this);
//Tiles-stage0
if(Tiles != null)
	{
		_XB.write_array("Tiles",Tiles.Length);
		for(__idx = 0 ; __idx < Tiles.Length; __idx++)
			_XB.write_addr("r",Tiles[__idx].WriteXML(__XW));
		_XB.finish_array("Tiles");
	}
//Width-stage0
	_XB.write_int("Width",Width);
//Height-stage0
	_XB.write_int("Height",Height);
		_XB.finish();
		return _XB._Addr;
#endregion
		}
//ReadXML
		public virtual void ReadDetailsXML(xmljr.XmlJrObjectTable __table, xmljr.XmlJrDom  __src)
		{
#region ReadXML-TileGrid
		 int __idx; __idx = 0; __idx++; __idx--; 
		 int __size; __size = 0; __size++; __size--; 
		foreach(xmljr.XmlJrDom __C in __src._Children)
			{
//Tiles-stageR
if(__C._Name.Equals("Tiles"))
{
	__size = __C.GetIntParam("size");
	if(__size > 0)
	{
		Tiles = new Tile[__size];
		__idx = 0;
			foreach(xmljr.XmlJrDom sub in __C._Children)
			{
				if(sub._Name.Equals("r"))
				{
					Tiles[__idx] = (Tile) __table.LookUpObject(sub.read_int());
					__idx++;
				}
			}
	}
}
//Width-stageR
if(__C._Name.Equals("Width"))
{
Width = __C.read_int();
}
//Height-stageR
if(__C._Name.Equals("Height"))
{
Height = __C.read_int();
}
			}
#endregion
		}
	}

	[TypeConverter(typeof(ExpandableObjectConverter)),Serializable]
	public class TileMark
	{
		public int                                _Floor;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                Floor { get { return _Floor; } set { _Floor = value; } }
		public int                                _X;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                X { get { return _X; } set { _X = value; } }
		public int                                _Y;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                Y { get { return _Y; } set { _Y = value; } }
		public TileMark()
		{
			Floor = 0;
			X = 0;
			Y = 0;
		}
//WriteXML
		public virtual int WriteXML(xmljr.XmlJrWriter __XW)
		{
#region WriteXML-TileMark
		int __idx; __idx = 0; __idx++; __idx--; 
		int __testaddr = __XW.Exist(this);
		if(__testaddr > 0) return __testaddr;
		xmljr.XmlJrBuffer _XB = __XW.NewObject("TileMark",this);
//Floor-stage0
	_XB.write_int("Floor",Floor);
//X-stage0
	_XB.write_int("X",X);
//Y-stage0
	_XB.write_int("Y",Y);
		_XB.finish();
		return _XB._Addr;
#endregion
		}
//ReadXML
		public virtual void ReadDetailsXML(xmljr.XmlJrObjectTable __table, xmljr.XmlJrDom  __src)
		{
#region ReadXML-TileMark
		 int __idx; __idx = 0; __idx++; __idx--; 
		 int __size; __size = 0; __size++; __size--; 
		foreach(xmljr.XmlJrDom __C in __src._Children)
			{
//Floor-stageR
if(__C._Name.Equals("Floor"))
{
Floor = __C.read_int();
}
//X-stageR
if(__C._Name.Equals("X"))
{
X = __C.read_int();
}
//Y-stageR
if(__C._Name.Equals("Y"))
{
Y = __C.read_int();
}
			}
#endregion
		}
	}

	[TypeConverter(typeof(ExpandableObjectConverter)),Serializable]
	public class TileMap
	{
		public TileGrid                        [] _Floors;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public TileGrid                        []  Floors { get { return _Floors; } set { _Floors = value; } }
		public TileMark                          _Start;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public TileMark                          Start { get { return _Start; } set { _Start = value; } }
		public TileMark                          _Exit;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public TileMark                          Exit { get { return _Exit; } set { _Exit = value; } }
		public bool                               _Dirty;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public bool                               Dirty { get { return _Dirty; } set { _Dirty = value; } }
		public TileMap()
		{
			Floors = null;
			Start = null;
			Exit = null;
			Dirty = false;
		}
//WriteXML
		public virtual int WriteXML(xmljr.XmlJrWriter __XW)
		{
#region WriteXML-TileMap
		int __idx; __idx = 0; __idx++; __idx--; 
		int __testaddr = __XW.Exist(this);
		if(__testaddr > 0) return __testaddr;
		xmljr.XmlJrBuffer _XB = __XW.NewObject("TileMap",this);
//Floors-stage0
if(Floors != null)
	{
		_XB.write_array("Floors",Floors.Length);
		for(__idx = 0 ; __idx < Floors.Length; __idx++)
			_XB.write_addr("r",Floors[__idx].WriteXML(__XW));
		_XB.finish_array("Floors");
	}
//Start-stage0
if(Start != null)
	_XB.write_addr("Start",Start.WriteXML(__XW));
//Exit-stage0
if(Exit != null)
	_XB.write_addr("Exit",Exit.WriteXML(__XW));
//Dirty-stage0
	_XB.write_bool("Dirty",Dirty);
		_XB.finish();
		return _XB._Addr;
#endregion
		}
//ReadXML
		public virtual void ReadDetailsXML(xmljr.XmlJrObjectTable __table, xmljr.XmlJrDom  __src)
		{
#region ReadXML-TileMap
		 int __idx; __idx = 0; __idx++; __idx--; 
		 int __size; __size = 0; __size++; __size--; 
		foreach(xmljr.XmlJrDom __C in __src._Children)
			{
//Floors-stageR
if(__C._Name.Equals("Floors"))
{
	__size = __C.GetIntParam("size");
	if(__size > 0)
	{
		Floors = new TileGrid[__size];
		__idx = 0;
			foreach(xmljr.XmlJrDom sub in __C._Children)
			{
				if(sub._Name.Equals("r"))
				{
					Floors[__idx] = (TileGrid) __table.LookUpObject(sub.read_int());
					__idx++;
				}
			}
	}
}
//Start-stageR
if(__C._Name.Equals("Start"))
{
Start = (TileMark) __table.LookUpObject(__C.read_int());
}
//Exit-stageR
if(__C._Name.Equals("Exit"))
{
Exit = (TileMark) __table.LookUpObject(__C.read_int());
}
//Dirty-stageR
if(__C._Name.Equals("Dirty"))
{
Dirty = __C.read_bool();
}
			}
#endregion
		}
	}

	[TypeConverter(typeof(ExpandableObjectConverter)),Serializable]
	public class GameDocument
	{
		public Monster                         [] _Monsters;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public Monster                         []  Monsters { get { return _Monsters; } set { _Monsters = value; } }
		public int                                _ActivatedMonsters;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                ActivatedMonsters { get { return _ActivatedMonsters; } set { _ActivatedMonsters = value; } }
		public Turret                          [] _Turrets;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public Turret                          []  Turrets { get { return _Turrets; } set { _Turrets = value; } }
		public int                                _ActivatedTurrets;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                ActivatedTurrets { get { return _ActivatedTurrets; } set { _ActivatedTurrets = value; } }
		public Projectile                      [] _Projectiles;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public Projectile                      []  Projectiles { get { return _Projectiles; } set { _Projectiles = value; } }
		public int                                _ActivatedProjectiles;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public int                                ActivatedProjectiles { get { return _ActivatedProjectiles; } set { _ActivatedProjectiles = value; } }
		public string                             _RenderScene;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public string                             RenderScene { get { return _RenderScene; } set { _RenderScene = value; } }
		public TileMap                           _CurrentMap;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public TileMap                           CurrentMap { get { return _CurrentMap; } set { _CurrentMap = value; } }
		public TileMark                          _Cursor;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public TileMark                          Cursor { get { return _Cursor; } set { _Cursor = value; } }
		public TileMark                          _CapturedCursor;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public TileMark                          CapturedCursor { get { return _CapturedCursor; } set { _CapturedCursor = value; } }
		public double                             _SpawnTimer;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public double                             SpawnTimer { get { return _SpawnTimer; } set { _SpawnTimer = value; } }
		public double                             _SpawnTimerReset;
		[CategoryAttribute("Uncategorized"),DescriptionAttribute("")]
		public double                             SpawnTimerReset { get { return _SpawnTimerReset; } set { _SpawnTimerReset = value; } }
		public GameDocument()
		{
			Monsters = null;
			ActivatedMonsters = 0;
			Turrets = null;
			ActivatedTurrets = 0;
			Projectiles = null;
			ActivatedProjectiles = 0;
			RenderScene = "";
			CurrentMap = null;
			Cursor = null;
			CapturedCursor = null;
			SpawnTimer = 0.0;
			SpawnTimerReset = 0.0;
		}
//WriteXML
		public virtual int WriteXML(xmljr.XmlJrWriter __XW)
		{
#region WriteXML-GameDocument
		int __idx; __idx = 0; __idx++; __idx--; 
		int __testaddr = __XW.Exist(this);
		if(__testaddr > 0) return __testaddr;
		xmljr.XmlJrBuffer _XB = __XW.NewObject("GameDocument",this);
//Monsters-stage0
if(Monsters != null)
	{
		_XB.write_array("Monsters",Monsters.Length);
		for(__idx = 0 ; __idx < Monsters.Length; __idx++)
			_XB.write_addr("r",Monsters[__idx].WriteXML(__XW));
		_XB.finish_array("Monsters");
	}
//ActivatedMonsters-stage0
	_XB.write_int("ActivatedMonsters",ActivatedMonsters);
//Turrets-stage0
if(Turrets != null)
	{
		_XB.write_array("Turrets",Turrets.Length);
		for(__idx = 0 ; __idx < Turrets.Length; __idx++)
			_XB.write_addr("r",Turrets[__idx].WriteXML(__XW));
		_XB.finish_array("Turrets");
	}
//ActivatedTurrets-stage0
	_XB.write_int("ActivatedTurrets",ActivatedTurrets);
//Projectiles-stage0
if(Projectiles != null)
	{
		_XB.write_array("Projectiles",Projectiles.Length);
		for(__idx = 0 ; __idx < Projectiles.Length; __idx++)
			_XB.write_addr("r",Projectiles[__idx].WriteXML(__XW));
		_XB.finish_array("Projectiles");
	}
//ActivatedProjectiles-stage0
	_XB.write_int("ActivatedProjectiles",ActivatedProjectiles);
//RenderScene-stage0
	_XB.write_fun("RenderScene",RenderScene);
//CurrentMap-stage0
if(CurrentMap != null)
	_XB.write_addr("CurrentMap",CurrentMap.WriteXML(__XW));
//Cursor-stage0
if(Cursor != null)
	_XB.write_addr("Cursor",Cursor.WriteXML(__XW));
//CapturedCursor-stage0
if(CapturedCursor != null)
	_XB.write_addr("CapturedCursor",CapturedCursor.WriteXML(__XW));
//SpawnTimer-stage0
	_XB.write_double("SpawnTimer",SpawnTimer);
//SpawnTimerReset-stage0
	_XB.write_double("SpawnTimerReset",SpawnTimerReset);
		_XB.finish();
		return _XB._Addr;
#endregion
		}
//ReadXML
		public virtual void ReadDetailsXML(xmljr.XmlJrObjectTable __table, xmljr.XmlJrDom  __src)
		{
#region ReadXML-GameDocument
		 int __idx; __idx = 0; __idx++; __idx--; 
		 int __size; __size = 0; __size++; __size--; 
		foreach(xmljr.XmlJrDom __C in __src._Children)
			{
//Monsters-stageR
if(__C._Name.Equals("Monsters"))
{
	__size = __C.GetIntParam("size");
	if(__size > 0)
	{
		Monsters = new Monster[__size];
		__idx = 0;
			foreach(xmljr.XmlJrDom sub in __C._Children)
			{
				if(sub._Name.Equals("r"))
				{
					Monsters[__idx] = (Monster) __table.LookUpObject(sub.read_int());
					__idx++;
				}
			}
	}
}
//ActivatedMonsters-stageR
if(__C._Name.Equals("ActivatedMonsters"))
{
ActivatedMonsters = __C.read_int();
}
//Turrets-stageR
if(__C._Name.Equals("Turrets"))
{
	__size = __C.GetIntParam("size");
	if(__size > 0)
	{
		Turrets = new Turret[__size];
		__idx = 0;
			foreach(xmljr.XmlJrDom sub in __C._Children)
			{
				if(sub._Name.Equals("r"))
				{
					Turrets[__idx] = (Turret) __table.LookUpObject(sub.read_int());
					__idx++;
				}
			}
	}
}
//ActivatedTurrets-stageR
if(__C._Name.Equals("ActivatedTurrets"))
{
ActivatedTurrets = __C.read_int();
}
//Projectiles-stageR
if(__C._Name.Equals("Projectiles"))
{
	__size = __C.GetIntParam("size");
	if(__size > 0)
	{
		Projectiles = new Projectile[__size];
		__idx = 0;
			foreach(xmljr.XmlJrDom sub in __C._Children)
			{
				if(sub._Name.Equals("r"))
				{
					Projectiles[__idx] = (Projectile) __table.LookUpObject(sub.read_int());
					__idx++;
				}
			}
	}
}
//ActivatedProjectiles-stageR
if(__C._Name.Equals("ActivatedProjectiles"))
{
ActivatedProjectiles = __C.read_int();
}
//RenderScene-stageR
if(__C._Name.Equals("RenderScene"))
{
RenderScene = __C.read_fun();
}
//CurrentMap-stageR
if(__C._Name.Equals("CurrentMap"))
{
CurrentMap = (TileMap) __table.LookUpObject(__C.read_int());
}
//Cursor-stageR
if(__C._Name.Equals("Cursor"))
{
Cursor = (TileMark) __table.LookUpObject(__C.read_int());
}
//CapturedCursor-stageR
if(__C._Name.Equals("CapturedCursor"))
{
CapturedCursor = (TileMark) __table.LookUpObject(__C.read_int());
}
//SpawnTimer-stageR
if(__C._Name.Equals("SpawnTimer"))
{
SpawnTimer = __C.read_double();
}
//SpawnTimerReset-stageR
if(__C._Name.Equals("SpawnTimerReset"))
{
SpawnTimerReset = __C.read_double();
}
			}
#endregion
		}
	}
	public class DemoGame
	{
		public static xmljr.XmlJrObjectTable BuildObjectTable(xmljr.XmlJrDom root, xmljr.ProgressNotify note)
#region TableBuilder-DemoGame
		{ xmljr.XmlJrObjectTable __table = new xmljr.XmlJrObjectTable();
			foreach(xmljr.XmlJrDom obj in root._Children)
			{
				int __addr = obj.GetAddr();
				if(__addr >= 0)
				{
					Object __o = null;
					if( obj._Name.Equals("Monster")) __o = new Monster();
					else if( obj._Name.Equals("Turret")) __o = new Turret();
					else if( obj._Name.Equals("Projectile")) __o = new Projectile();
					else if( obj._Name.Equals("Tile")) __o = new Tile();
					else if( obj._Name.Equals("TileGrid")) __o = new TileGrid();
					else if( obj._Name.Equals("TileMark")) __o = new TileMark();
					else if( obj._Name.Equals("TileMap")) __o = new TileMap();
					else if( obj._Name.Equals("GameDocument")) __o = new GameDocument();
					if(__o != null) __table.Map(__addr,__o);;
				}
			}
			int _cnt = 0;
			foreach(xmljr.XmlJrDom obj in root._Children)
			{
			if(note != null) { note.SetProgress(_cnt / (double) root._Children.Count); _cnt++; }
				int __addr = obj.GetAddr();
				if(__addr >= 0)
				{
					Object __o = __table.LookUpObject(__addr);
					if( obj._Name.Equals("Monster")) ((Monster) __o).ReadDetailsXML(__table, obj);
					else if( obj._Name.Equals("Turret")) ((Turret) __o).ReadDetailsXML(__table, obj);
					else if( obj._Name.Equals("Projectile")) ((Projectile) __o).ReadDetailsXML(__table, obj);
					else if( obj._Name.Equals("Tile")) ((Tile) __o).ReadDetailsXML(__table, obj);
					else if( obj._Name.Equals("TileGrid")) ((TileGrid) __o).ReadDetailsXML(__table, obj);
					else if( obj._Name.Equals("TileMark")) ((TileMark) __o).ReadDetailsXML(__table, obj);
					else if( obj._Name.Equals("TileMap")) ((TileMap) __o).ReadDetailsXML(__table, obj);
					else if( obj._Name.Equals("GameDocument")) ((GameDocument) __o).ReadDetailsXML(__table, obj);
				}
			}
			return __table;
#endregion
		}
	}
}
