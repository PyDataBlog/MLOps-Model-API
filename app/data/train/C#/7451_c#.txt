using System;
using System.Collections.Generic;
using CloudyNovel.Game;
using CloudyNovel.Graphics.Rendering;
using OpenTK.Input;

namespace CloudyNovel.Scenes
{
    public class SceneManager
    {
        private readonly Dictionary<string, Scene> _scenes;
        private Scene _currentScene;

        public Scene CurrentScene
        {
            get => _currentScene;
            set => ChangeScene(value.Name);
        }

        public BaseGame Game { get; }

        public SceneManager(BaseGame game)
        {
            Game = game;
            _scenes = new Dictionary<string, Scene>();

            //Event Registers
            Game.Window.MouseMove += Window_MouseMove;
            Game.Window.MouseDown += Window_MouseDown;
            Game.Window.MouseUp += Window_MouseUp;
            Game.Window.MouseEnter += Window_MouseEnter;
            Game.Window.MouseLeave += Window_MouseLeave;
            Game.Window.MouseWheel += Window_MouseWheel;

            Game.Window.KeyDown += Window_KeyDown;
            Game.Window.KeyUp += Window_KeyUp;
            Game.Window.KeyPress += Window_KeyPress;
        }

        public virtual void Draw(SpriteBatch spriteBatch)
        {
            _currentScene.Draw(spriteBatch);
        }

        public virtual void DebugDraw(GeometryRenderer geometryRenderer)
        {
            _currentScene.DebugDraw(geometryRenderer);
        }

        public virtual void Update(GameTime gameTime)
        {
            _currentScene.Update(gameTime);
        }

        public virtual void AddScene(Scene scene)
        {
            scene.Manager = this;
            _scenes.Add(scene.Name, scene);
        }

        public virtual void SetScene(string name)
        {
            _currentScene = _scenes[name];
            _currentScene.Load(Game.ResourceManager);
            _currentScene.OnEnter();
        }

        public virtual void ChangeScene(string name)
        {
            _currentScene.OnExit();
            _currentScene.Unload();

            SetScene(name);
        }

        #region MouseEvents
        protected virtual void Window_MouseMove(object sender, MouseMoveEventArgs e)
        {
            _currentScene.OnMouseMove(e);
        }
        protected virtual void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            _currentScene.OnMouseDown(e);
        }
        protected virtual void Window_MouseUp(object sender, MouseButtonEventArgs e)
        {
            _currentScene.OnMouseUp(e);
        }
        protected virtual void Window_MouseEnter(object sender, EventArgs e)
        {
            _currentScene.OnMouseEnter();
        }
        protected virtual void Window_MouseLeave(object sender, EventArgs e)
        {
            _currentScene.OnMouseLeave();
        }
        protected virtual void Window_MouseWheel(object sender, MouseWheelEventArgs e)
        {
            _currentScene.OnMouseWheel(e);
        }
        #endregion

        #region KeyboardEvents
        protected virtual void Window_KeyDown(object sender, KeyboardKeyEventArgs e)
        {
            _currentScene.OnKeyDown(sender, e);
        }
        protected virtual void Window_KeyUp(object sender, KeyboardKeyEventArgs e)
        {
            _currentScene.OnKeyUp(sender, e);
        }
        protected virtual void Window_KeyPress(object sender, OpenTK.KeyPressEventArgs e)
        {
            _currentScene.OnKeyPress(sender, e);
        }
        #endregion
    }
}