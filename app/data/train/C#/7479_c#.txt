using Microsoft.Xna.Framework;
using SkidiKit.Core.NodeAction.Common;

namespace SkidiKit.Core.NodeAction.Intervals
{
    public class RotateBy: FinateTimeAction
    {
        public float Angle { get; }

        public RotateBy(float duration, float angle): base(duration)
        {
            Angle = angle;
        }

        public override FinateTimeAction Reverse()
        {
            return new RotateBy(Duration, -Angle);
        }

        public override NodeActionState StartAction(Drawable target)
        {
            return new RotateByActionState(target, this);
        }
    }

    internal class RotateByActionState: FinateTimeActionState
    {
        private float StartRotation { get; }
        private float Rotation { get; }

        public RotateByActionState(Drawable target, RotateBy action) : base(target, action)
        {
            StartRotation = target.Rotation;
            Rotation = MathHelper.ToRadians(action.Angle);
        }

        public override void Update(float time)
        {
            if (Target != null)
                Target.Rotation = StartRotation + Rotation*time;
        }
    }
}