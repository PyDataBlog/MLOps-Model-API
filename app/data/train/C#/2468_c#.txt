using System;
using System.Diagnostics;
using slnRun.Helper;

namespace slnRun.SystemWrapper
{
    public interface IProcessRunner
    {
        int Run(string path, string arguments, Action<OutputData> onOutput = null);
    }

    public class ProcessRunner : IProcessRunner
    {
        private readonly ILogger _logger;

        public ProcessRunner(ILogger logger)
        {
            _logger = logger;
        }

        public int Run(string path, string arguments, Action<OutputData> onOutput = null)
        {
            _logger.Verbose($"Executing: {path} {arguments}");

            var p = new Process();
            p.StartInfo = new ProcessStartInfo();
            p.StartInfo.FileName = path;
            p.StartInfo.Arguments = arguments;
            p.StartInfo.UseShellExecute = false;
            if (onOutput != null)
            {
                p.StartInfo.RedirectStandardOutput = true;
                p.StartInfo.RedirectStandardError = true;
                p.OutputDataReceived += (sender, args) => onOutput(new OutputData(args.Data, false));
                p.ErrorDataReceived += (sender, args) => onOutput(new OutputData(args.Data, true));
            }
            p.Start();
            p.WaitForExit();
            _logger.Verbose("Process ended with exit code: " + p.ExitCode);
            return p.ExitCode;
        }
    }

    public class OutputData
    {
        public OutputData(string text, bool isError)
        {
            Text = text;
            IsError = isError;
        }

        public string Text { get; set; }
        public bool IsError { get; set; }
    }
}
