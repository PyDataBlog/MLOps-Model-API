using Jarvis.Server.Data.Persistent;
using Jarvis.Server.Data.Runtime;
using Jarvis.Server.JobHandler;
using Restup.Webserver.Attributes;
using Restup.Webserver.Models.Schemas;
using System;
using static Jarvis.Server.Data.Enums;

namespace Jarvis.Server.RestRouteHandlers
{
    [RestController(InstanceCreationType.Singleton)]
    internal class RadiatorJobRouteHandler : RouteHandler
    {
        [UriFormat("/radiator/add")]
        public HttpPostResponse HandleAddRadiator([FromContent] JarvisMessage msg)
        {
            log.V(LogCategory.Http, "adding radiator...");
            try
            {
                return HandleResponse(RadiatorJobHandler.HandleAddRadiator(msg.Get<Radiator>()));
            }
            catch (Exception e)
            {
                log.E(LogCategory.Http, e, "error while adding radiator");
                return HandleExceptionResponse(e);
            }
        }

        [UriFormat("/radiator/delete")]
        public HttpPostResponse HandleDeleteRadiator([FromContent] JarvisMessage msg)
        {
            log.V(LogCategory.Http, "deleting radiator...");
            try
            {
                return HandleResponse(RadiatorJobHandler.HandleDeleteRadiator(GetSubject<Radiator>(msg)));
            }
            catch (Exception e)
            {
                log.E(LogCategory.Http, e, "error while deleting radiator");
                return HandleExceptionResponse(e);
            }
        }

        [UriFormat("/radiator/exec")]
        public HttpPostResponse HandleRadiatorExecuted([FromContent] JarvisMessage msg)
        {
            log.V(LogCategory.Http, "confirming radiator job execution...");
            try
            {
                return HandleResponse(RadiatorJobHandler.HandleRadiatorExecuted(GetSubject<Radiator>(msg)));
            }
            catch (Exception e)
            {
                log.E(LogCategory.Http, e, "unhandled error while confirming radiator job execution");
                return HandleExceptionResponse(e);
            }
        }

        [UriFormat("/radiator/set/{targetTemp}")]
        public HttpPostResponse HandleSetRadiator([FromContent] JarvisMessage msg, int targetTemp)
        {
            log.V(LogCategory.Http, "setting radiator temperature...");
            try
            {
                return HandleResponse(RadiatorJobHandler.HandleSetRadiator(GetSubject<Radiator>(msg), targetTemp));
            }
            catch (Exception e)
            {
                log.E(LogCategory.Http, e, "unhandled error while setting radiator temperature");
                return HandleExceptionResponse(e);
            }
        }

        [UriFormat("/radiator/update")]
        public HttpPostResponse HandleUpdateRadiator([FromContent] JarvisMessage msg)
        {
            log.V(LogCategory.Http, "updating radiator...");
            try
            {
                return HandleResponse(RadiatorJobHandler.HandleUpdateRadiator(msg.Get<Radiator>()));
            }
            catch (Exception e)
            {
                log.E(LogCategory.Http, e, "error while updating radiator");
                return HandleExceptionResponse(e);
            }
        }
    }
}