namespace Dike.Core.Mail
{
    using Dike.Core.Configuration;
    using Dike.Core.Utils.Extensions;
    using System;

    /// <summary>
    /// Represents the e-mail sender configuration. The settings are read from the <see cref="ISettingManager"/>.
    /// </summary>
    /// <seealso cref="Dike.Core.Mail.IEmailSenderConfiguration" />
    public abstract class EmailSenderConfiguration
        : IEmailSenderConfiguration
    {
        #region Fields

        private readonly ISettingManager _settingManager;

        #endregion Fields

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSenderConfiguration"/> class.
        /// </summary>
        /// <param name="settingManager">The setting manager.</param>
        protected EmailSenderConfiguration(ISettingManager settingManager)
        {
            _settingManager = settingManager;
        }

        #endregion Constructors

        #region Properties

        /// <summary>
        /// Gets the default e-mail sender address.
        /// </summary>
        /// <value>The default e-mail sender address.</value>
        public virtual string DefaultFromAddress
            => GetNotEmptySettingValue(EmailSettingNames.DefaultFromAddress);

        /// <summary>
        /// Gets the default display name of the sender.
        /// </summary>
        /// <value>The default display name of the sender.</value>
        public virtual string DefaultFromDisplayName
            => _settingManager.GetSettingValue(EmailSettingNames.DefaultFromDisplayName);

        /// <summary>
        /// Gets the setting manager.
        /// </summary>
        /// <value>The setting manager.</value>
        protected ISettingManager SettingManager
            => _settingManager;

        #endregion Properties

        #region Methods

        /// <summary>
        /// Gets a setting value. Throws an exception if the value is <c>null</c> or empty.
        /// </summary>
        /// <param name="name">The setting name.</param>
        /// <returns>The value of the setting.</returns>
        /// <exception cref="InvalidOperationException">Settings value for '<paramref name="name"/>' is null or empty!</exception>
        protected string GetNotEmptySettingValue(string name)
        {
            string value = _settingManager.GetSettingValue(name);

            if (value.IsNullOrEmpty())
            {
                throw new InvalidOperationException($"Setting value for '{name}' is null or empty!");
            }

            return value;
        }

        #endregion Methods
    }
}