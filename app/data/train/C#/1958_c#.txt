using System;
using System.Text.RegularExpressions;
using SelfMediaDatabase.Core.Operations.Prune;
using System.Collections.Generic;

namespace SelfMediaDatabase.Core.Operations
{
    public static class FileFilterProvider
    {
		private static readonly Regex _tagFileRegex;
		private static readonly Regex _pruneHistoryMatcherRegex;
		private static readonly HashSet<string> _managedFileExtensions;

        static FileFilterProvider()
        {
			_managedFileExtensions = GetManagedFileExtensions();
			_tagFileRegex = new Regex(@".*\.(" + _managedFileExtensions.Join("|") +")", RegexOptions.IgnoreCase | RegexOptions.Compiled);
			_pruneHistoryMatcherRegex = new Regex(@"^.*\" + PruneOperation.PRUNE_INVENTORY_FILE + "$", RegexOptions.Compiled);
        }

        /// <summary>
        /// Gets a regex that match if file could contain media tag values.
        /// </summary>
		public static Regex TagFileMatcher { get { return _tagFileRegex; } }

		/// <summary>
		/// Gets a regex that match if file name is a prune inventory text file.
		/// </summary>
		public static Regex PruneInventoryFileMatcher { get { return _pruneHistoryMatcherRegex; } }


		private static HashSet<string> GetManagedFileExtensions()
		{
			var result = new HashSet<string>();

			// Images
			result.Add("jpg");
			result.Add("jpeg");
			result.Add("tiff");
			result.Add("png");
			// Video
			result.Add("avi");
			result.Add("mp4");
			result.Add("mts");
			// Audio
			result.Add("ogg");
			result.Add("flac");
			result.Add("mp3");
			result.Add("m4a");
			result.Add("wav");

			return result;
		}
    }
}

