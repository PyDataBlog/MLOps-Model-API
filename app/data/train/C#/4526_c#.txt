using System;
using SharpJVM.SharpJVM.Runtime.DataArea.Heap;
using SharpJVM.SharpJVM.Runtime.ConstantPool;
using SharpJVM.SharpJVM.Runtime.ConstantPool.Info;
using SharpJVM.SharpJVM.Class;
using SharpJVM.SharpJVM.Runtime.Ref;

namespace SharpJVM.SharpJVM.Runtime.HeapConstantsPool
{
	public class HeapConstantPool
	{
		public object this[int Index] {
			get {
				return Constants[Index];
			}
		}
		private readonly object[] Constants;
		public JavaClass Class;
		public HeapConstantPool(JavaClass Class, ConstantsPool ConstantPool)
		{
			int Count = ConstantPool.Count;
			Constants = new object[Count + 1];
			for (int i = 1; i <= Count; i++) {
				ConstantInfo ConstantPoolInfo = ConstantPool[i];
				if (ConstantPoolInfo is ConstantIntegerInfo) {
					ConstantIntegerInfo intinfo = (ConstantIntegerInfo)ConstantPoolInfo;
					Constants[i] = Convert.ToInt32(intinfo.Var);
				} else if (ConstantPoolInfo is ConstantFloatInfo) {
					ConstantFloatInfo floatinfo = (ConstantFloatInfo)ConstantPoolInfo;
					Constants[i] = floatinfo.Var;
				} else if (ConstantPoolInfo is ConstantLongInfo) {
					ConstantLongInfo longinfo = (ConstantLongInfo)ConstantPoolInfo;
					Constants[i++] = longinfo.Var;
				} else if (ConstantPoolInfo is ConstantDoubleInfo) {
					ConstantDoubleInfo doubleinfo = (ConstantDoubleInfo)ConstantPoolInfo;
					Constants[i++] = doubleinfo.Var;
				} else if (ConstantPoolInfo is ConstantStringInfo) {
					ConstantStringInfo strinfo = (ConstantStringInfo)ConstantPoolInfo;
					Constants[i] = strinfo.String;
				} else if (ConstantPoolInfo is ConstantClassInfo) {
					ConstantClassInfo classinfo = (ConstantClassInfo)ConstantPoolInfo;
					Constants[i] = new ClassRef(this, classinfo);
				} else if (ConstantPoolInfo is ConstantFieldRefInfo) {
					ConstantFieldRefInfo fieldinfo = (ConstantFieldRefInfo)ConstantPoolInfo;
					Constants[i] = new FieldRef(this, fieldinfo);
				} else if (ConstantPoolInfo is ConstantMethodRefInfo) {
					ConstantMethodRefInfo methodinfo = (ConstantMethodRefInfo)ConstantPoolInfo;
					Constants[i] = new MethodRef(this, methodinfo);
				} else if (ConstantPoolInfo is ConstantInterfaceMethodRefInfo) {
					ConstantInterfaceMethodRefInfo interfacemethodinfo = (ConstantInterfaceMethodRefInfo)ConstantPoolInfo;
					Constants[i] = new InterfaceMethodRef(this, interfacemethodinfo);
				}
			}
			this.Class = Class;
		}
	}
}