namespace MetroFramework.Design
{
    using MetroFramework.Controls;
    using MetroFramework.Native;
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Drawing;
    using System.Runtime.InteropServices;
    using System.Windows.Forms;
    using System.Windows.Forms.Design;

    internal class MetroTabControlDesigner : ParentControlDesigner
    {
        private IDesignerHost _designerHost;
        private ISelectionService _selectionService;
        private readonly DesignerVerbCollection _verbs = new DesignerVerbCollection();

        public MetroTabControlDesigner()
        {
            DesignerVerb verb = new DesignerVerb("Add Tab", new EventHandler(this.OnAddPage));
            DesignerVerb verb2 = new DesignerVerb("Remove Tab", new EventHandler(this.OnRemovePage));
            this._verbs.AddRange(new DesignerVerb[] { verb, verb2 });
        }

        protected override bool GetHitTest(System.Drawing.Point point)
        {
            if (this.SelectionService.PrimarySelection == this.Control)
            {
                WinApi.TCHITTESTINFO structure = new WinApi.TCHITTESTINFO {
                    pt = this.Control.PointToClient(point),
                    flags = 0
                };
                Message m = new Message {
                    HWnd = this.Control.Handle,
                    Msg = 0x1313
                };
                IntPtr ptr = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
                Marshal.StructureToPtr(structure, ptr, false);
                m.LParam = ptr;
                base.WndProc(ref m);
                Marshal.FreeHGlobal(ptr);
                if (m.Result.ToInt32() != -1)
                {
                    return (structure.flags != 1);
                }
            }
            return false;
        }

        private void OnAddPage(object sender, EventArgs e)
        {
            MetroTabControl component = (MetroTabControl) this.Control;
            Control.ControlCollection oldValue = component.Controls;
            base.RaiseComponentChanging(TypeDescriptor.GetProperties(component)["TabPages"]);
            MetroTabPage page = (MetroTabPage) this.DesignerHost.CreateComponent(typeof(MetroTabPage));
            page.Text = page.Name;
            component.TabPages.Add(page);
            base.RaiseComponentChanged(TypeDescriptor.GetProperties(component)["TabPages"], oldValue, component.TabPages);
            component.SelectedTab = page;
            this.SetVerbs();
        }

        private void OnRemovePage(object sender, EventArgs e)
        {
            MetroTabControl component = (MetroTabControl) this.Control;
            Control.ControlCollection oldValue = component.Controls;
            if (component.SelectedIndex >= 0)
            {
                base.RaiseComponentChanging(TypeDescriptor.GetProperties(component)["TabPages"]);
                this.DesignerHost.DestroyComponent(component.TabPages[component.SelectedIndex]);
                base.RaiseComponentChanged(TypeDescriptor.GetProperties(component)["TabPages"], oldValue, component.TabPages);
                this.SelectionService.SetSelectedComponents(new IComponent[] { component }, SelectionTypes.Auto);
                this.SetVerbs();
            }
        }

        protected override void PreFilterProperties(IDictionary properties)
        {
            properties.Remove("ImeMode");
            properties.Remove("Padding");
            properties.Remove("FlatAppearance");
            properties.Remove("FlatStyle");
            properties.Remove("AutoEllipsis");
            properties.Remove("UseCompatibleTextRendering");
            properties.Remove("Image");
            properties.Remove("ImageAlign");
            properties.Remove("ImageIndex");
            properties.Remove("ImageKey");
            properties.Remove("ImageList");
            properties.Remove("TextImageRelation");
            properties.Remove("BackgroundImage");
            properties.Remove("BackgroundImageLayout");
            properties.Remove("UseVisualStyleBackColor");
            properties.Remove("Font");
            properties.Remove("ForeColor");
            properties.Remove("RightToLeft");
            base.PreFilterProperties(properties);
        }

        private void SetVerbs()
        {
            MetroTabControl control = (MetroTabControl) this.Control;
            if (control.TabPages.Count == 0)
            {
                this.Verbs[1].Enabled = false;
            }
            else
            {
                this.Verbs[1].Enabled = true;
            }
        }

        protected override void WndProc(ref Message m)
        {
            base.WndProc(ref m);
            if ((m.Msg == 0x84) && (m.Result.ToInt32() == -1))
            {
                m.Result = (IntPtr) 1L;
            }
        }

        public IDesignerHost DesignerHost
        {
            get
            {
                return (this._designerHost ?? (this._designerHost = (IDesignerHost) this.GetService(typeof(IDesignerHost))));
            }
        }

        public override System.Windows.Forms.Design.SelectionRules SelectionRules
        {
            get
            {
                if (this.Control.Dock != DockStyle.Fill)
                {
                    return base.SelectionRules;
                }
                return System.Windows.Forms.Design.SelectionRules.Visible;
            }
        }

        public ISelectionService SelectionService
        {
            get
            {
                return (this._selectionService ?? (this._selectionService = (ISelectionService) this.GetService(typeof(ISelectionService))));
            }
        }

        public override DesignerVerbCollection Verbs
        {
            get
            {
                if (this._verbs.Count == 2)
                {
                    MetroTabControl control = (MetroTabControl) this.Control;
                    this._verbs[1].Enabled = control.TabCount != 0;
                }
                return this._verbs;
            }
        }
    }
}

