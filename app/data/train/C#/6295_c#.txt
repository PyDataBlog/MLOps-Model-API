// Decompiled with JetBrains decompiler
// Type: UIWorldMap_Common
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19851F1B-4780-4223-BA01-2C20F2CD781E
// Assembly location: C:\Users\CGA Computer\Desktop\LEGO Universe Stuff\LOCO Server\Unity Web Player Extractor\Saved Files\LOCO Server.unity3d_unpacked\Assembly-CSharp.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;
using Wb.Lpw.AssetPipeline.Client;
using Wb.Lpw.Game.Common;
using Wb.Lpw.Game.Common.Descriptions;
using Wb.Lpw.Game.Common.GameModule;
using Wb.Lpw.Game.Common.Logging;
using Wb.Lpw.Platform.Protocol;
using Wb.Lpw.Shared.Client.UnityEngine;
using Wb.Lpw.Shared.Common;
using Wb.Lpw.Shared.Network;

public abstract class UIWorldMap_Common : FordUIPanel
{
  private const int _CameraXLimitPerTile = 180;
  private const int _CameraYLimitPerTile = 300;
  private const int _CameraYLimitPerTileOffset = 800;
  private const int _numRows = 14;
  private const int _numCols = 14;
  public const string Cond_UserClosedWM = "UserClosedWM";
  public const string Cond_WMOpenedDone = "WMOpenedDone";
  public const string Cond_LoadingDone = "LoadingDone";
  public GameObject ZoomControlsParent;
  public UIButton Close;
  public GameObject RegionMapHook;
  public Camera RegionMapCamera;
  public GameObject Loots;
  public int MaxZoomValue;
  public int MinZoomValue;
  private RegionMapDescription _regionMapDesc;
  public UIWorldMap_Common.WeaponInfos _weaponInfos;
  public Material DefaultMaterial;
  public WBSpriteText TitleText;
  public GameObject TitleBar;
  public string WMOpenSound;
  public string WMRegionOver;
  public string WMCloseSound;
  public string WMRegionSelectSound;
  private WMLocalPlayer _playerArrow;
  private Dictionary<string, List<WMFriend>> _FriendTags;
  private WMPortal _highestActivatedPortal;
  private bool _init;
  private MatTexTracker _materialTracker;
  private GoalArrow2D _2dGoalArrow;
  private GoalArrow3D _3dGoalArrow;
  private PlayerGoalProgression.WorldMapGoalInfo _goalInfo;
  private Vector3 _goalArrowLookAt;
  private Vector3 _goalArrowUp;
  private Vector3 _newGoalPosition;
  private WildernessRegion _currentRegionMap;
  protected GameObject _currentRegionMapObject;
  protected Dictionary<WildernessRegion, long> _regionMapsIds;
  private Dictionary<WildernessRegion, string> _regionMapBundlePrefixes;
  private UIWorldMap_Common.RegionMapSpecs _regionMapSpecs;
  private UIWorldMap_Common.MapSubsection[,] _regionSections;
  private UIWorldMap_Common.CameraExtents _minCamExtents;
  private UIWorldMap_Common.CameraExtents _maxCamExtents;
  private bool _startDragged;
  private Vector3 _position;
  protected GameObject _vfxGoalPointer;
  protected GameObjectItemRef VFXGoalPointerBundle;
  protected bool m_ShowVFXGlitter;
  public bool unitTestReady;
  private UIButton.CONTROL_STATE m_lastButtonChangedState;
  private Camera mainCamera;
  private bool _chiPortalUiState;
  public bool IsOpenedViaDomain;
  protected UIWorldMapTopLevel _topLevelWorldMap;
  private List<WBLoader.BundleRequest> _pendingRequests;
  private string[] unlockConditions;
  private Vector3 _LootInspectorForcePosition;
  private bool _OpenInspector;
  private bool _inspectorOpened;
  private bool _inspectorShouldClose;
  private string _inspectorMessage;
  private string _inspectorTitle;
  private float _inspectorIconAspect;
  private int _inspectorWeaponFootprint;
  private int _inspectorWeaponLevel;
  private Texture2D _inspectorTexture;
  private int _totalPlaceFriendsInProgress;
  private Mesh _quad;

  public int CurrZoomValue
  {
    get
    {
      return (int) ((Component) this.RegionMapCamera).get_transform().get_localPosition().z;
    }
  }

  public static bool DisplayingRegionMap { get; private set; }

  protected UIWorldMap_Common()
  {
    string[] strArray = new string[7];
    int index1 = 0;
    string str1 = "UserClosedWM";
    strArray[index1] = str1;
    int index2 = 1;
    string str2 = "UserClosedAbilityLoadOut";
    strArray[index2] = str2;
    int index3 = 2;
    string str3 = "OnJoinRoom";
    strArray[index3] = str3;
    int index4 = 3;
    string str4 = "OnTeleportToSpawnPoint";
    strArray[index4] = str4;
    int index5 = 4;
    string str5 = "OnLocalTeleport";
    strArray[index5] = str5;
    int index6 = 5;
    string str6 = "OnSwitchLayout";
    strArray[index6] = str6;
    int index7 = 6;
    string str7 = "LoadingDone";
    strArray[index7] = str7;
    this.unlockConditions = strArray;
    this._LootInspectorForcePosition = Vector3.get_zero();
    this._OpenInspector = true;
    this._inspectorShouldClose = true;
    this._inspectorMessage = string.Empty;
    this._inspectorTitle = string.Empty;
    this._inspectorIconAspect = 1f;
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  public override bool Initialization()
  {
    if (this._init)
      return false;
    base.Initialization();
    this.Close.onClickDelegate = new Action<UIButton>(this.OnClickClose);
    this._init = true;
    ((Component) this.RegionMapCamera).get_gameObject().AddComponent<CameraNoFog>();
    GameObject go = new GameObject("3dArrowHook");
    go.get_transform().set_parent(((Component) this).get_transform());
    FordUtility.SetLayerRecursively(go, LayerMask.NameToLayer("WorldMap"));
    this._2dGoalArrow = GoalArrow2D.Create(((Component) this).get_transform());
    this._3dGoalArrow = GoalArrow3D.Create(go.get_transform());
    this._3dGoalArrow.SetScale(175f);
    this.TitleText.Text = FordLocalizationMgr.Menu.GetStringFromId("WORLD_MAP_HEADER", string.Empty, string.Empty);
    UIWorldMap_Common.DisplayingRegionMap = false;
    return true;
  }

  [DebuggerHidden]
  private IEnumerator WaitAndCreateVfxGoal()
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new UIWorldMap_Common.\u003CWaitAndCreateVfxGoal\u003Ec__Iterator164()
    {
      \u003C\u003Ef__this = this
    };
  }

  public override void OpenMenu(object parameter, Action done)
  {
    base.OpenMenu(parameter, done);
    this._regionMapDesc = (RegionMapDescription) null;
    FlashAnimationX.ForceStopAllChildAnimations(((Component) this).get_gameObject(), "GL_Outro", true);
    FordInputMgr.Instance.FireInputUnlockCondition("WMOpenedDone");
    FordInputMgr.Instance.DisableAllInputs(false, "WorldMap", this.unlockConditions);
    WBAudioManager.Instance.Play(this.WMOpenSound, (Object) this, AudioResourceUsage.Clear, (Transform) null, 0.0f, (AudioCompletionCallback) null);
    if (Object.op_Inequality((Object) FordGameRoom.Instance, (Object) null))
      this.IsOpenedViaDomain = FordGameRoom.Instance.IsDomain();
    ((Component) this.RegionMapCamera).get_transform().set_localPosition(Vector3.get_zero());
    FordPanelManager.Instance.OverheadPanelManager.HideAll();
    ((Component) this).get_gameObject().SetActive(true);
    if (Object.op_Inequality((Object) FordGameRoom.Instance, (Object) null) && FordGameRoom.Instance.Roger.WorldMapGoalVfx != null)
    {
      this.VFXGoalPointerBundle = (GameObjectItemRef) FordGameRoom.Instance.Roger.WorldMapGoalVfx;
      this.VFXGoalPointerBundle.Load((object) this);
    }
    this.StartCoroutine("WaitAndCreateVfxGoal");
    FlashAnimationX.PlayAllChildAnimations(((Component) this).get_gameObject(), "GL_Intro", done, 0.0f, 1f, false);
    this.Loots.SetActive(false);
    this.LoadRegionMapsData(WbAssetDatabase.Instance.Db.GetAllItemIds("Region Map", false));
    if (this.IsOpenedViaDomain || FordGameRoom.Instance is TreasureHuntRoom)
    {
      this.SetupUI(this.IsOpenedViaDomain);
      this.DisplayWorldMap();
    }
    else if (Object.op_Inequality((Object) FordGameRoom.Instance, (Object) null))
      this.DisplayRegionMap(((int) FordGameRoom.Instance.WildernessReg).ToString());
    ((Behaviour) this.RegionMapCamera).set_enabled(true);
    this.mainCamera = !Object.op_Inequality((Object) IsoCamera.Instance, (Object) null) ? (Camera) null : ((Component) IsoCamera.Instance).get_camera();
    if (Object.op_Inequality((Object) this.mainCamera, (Object) null))
      ((Behaviour) this.mainCamera).set_enabled(false);
    this.AlignUIElements();
    NetworkMgr.Instance.BIGameModule.SendEventWorldMapEnter((Action<OperationResult, GameModuleProtocol.BI.SendEventWorldMapEnterResponse>) null);
  }

  protected virtual void SetupUI(bool enabledOnceLoaded)
  {
    this.StartCoroutine(this.WaitAndSetupUI(enabledOnceLoaded));
  }

  [DebuggerHidden]
  private IEnumerator WaitAndSetupUI(bool enabledOnceLoaded)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new UIWorldMap_Common.\u003CWaitAndSetupUI\u003Ec__Iterator165()
    {
      enabledOnceLoaded = enabledOnceLoaded,
      \u003C\u0024\u003EenabledOnceLoaded = enabledOnceLoaded,
      \u003C\u003Ef__this = this
    };
  }

  private void DisplayWorldMap()
  {
    if (Object.op_Equality((Object) this._topLevelWorldMap, (Object) null) || Object.op_Equality((Object) this._topLevelWorldMap.GetWorldMap(), (Object) null))
      this.SetupUI(true);
    else if (!((Component) this._topLevelWorldMap).get_gameObject().get_activeSelf())
      this._topLevelWorldMap.SetEnabled(true);
    this.StartCoroutine(this.WaitAndDisplayWorldMap());
  }

  [DebuggerHidden]
  private IEnumerator WaitAndDisplayWorldMap()
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new UIWorldMap_Common.\u003CWaitAndDisplayWorldMap\u003Ec__Iterator166()
    {
      \u003C\u003Ef__this = this
    };
  }

  protected void LoadRegionMapsData(IEnumerable<long> regionMapsIDs)
  {
    foreach (long itemId in regionMapsIDs)
    {
      RegionMapDescription objectSync = WbAssetDatabase.Instance.Db.GetObjectSync<RegionMapDescription>(itemId);
      this._regionMapBundlePrefixes[objectSync.RegionType] = objectSync.RegionMapPrefix;
      this._regionMapsIds[objectSync.RegionType] = itemId;
    }
  }

  protected void PopulateBundleGrid(string regionMapBundlePrefix)
  {
    this._regionSections = new UIWorldMap_Common.MapSubsection[14, 14];
    for (int number = 0; number < 14; ++number)
    {
      for (int index = 0; index < 14; ++index)
      {
        this._regionSections[number, index] = new UIWorldMap_Common.MapSubsection();
        this._regionSections[number, index].bundleName = regionMapBundlePrefix + (object) this.ConvertPositionFromNumberToLetter(number) + (string) (object) index;
      }
    }
  }

  protected void PrefetchRegionBundles()
  {
    UIWorldMap_Common.MapSubsection[,] mapSubsectionArray = this._regionSections;
    int length1 = mapSubsectionArray.GetLength(0);
    int length2 = mapSubsectionArray.GetLength(1);
    for (int index1 = 0; index1 < length1; ++index1)
    {
      for (int index2 = 0; index2 < length2; ++index2)
        WBLoader.Instance.PrefetchAssetBundle(AssetPath.BuildPlatformAssetBundleName("RegionMaps", mapSubsectionArray[index1, index2].bundleName));
    }
  }

  protected virtual void OnInstantiateRegionMapBegin(WildernessRegion toDisplay)
  {
    this.PopulateBundleGrid(this._regionMapBundlePrefixes[toDisplay]);
    this.PrefetchRegionBundles();
  }

  protected abstract void OnInstantiateRegionMapDone(WildernessRegion toDisplay);

  protected abstract void OnClearRegionMap();

  protected void CreateRegionMapSections()
  {
    GameObject gameObject1 = ((WMRegion) this._currentRegionMapObject.GetComponent<WMRegion>()).MainMap;
    Vector3 localPosition = gameObject1.get_transform().get_localPosition();
    Bounds bounds1 = gameObject1.get_renderer().get_bounds();
    // ISSUE: explicit reference operation
    float num1 = (float) (-((Bounds) @bounds1).get_extents().x + localPosition.x);
    // ISSUE: explicit reference operation
    float num2 = (float) (((Bounds) @bounds1).get_extents().y + localPosition.z);
    // ISSUE: explicit reference operation
    float width = (float) (((Bounds) @bounds1).get_size().x / 14.0);
    // ISSUE: explicit reference operation
    float height = (float) (((Bounds) @bounds1).get_size().y / 14.0);
    this._regionMapSpecs.topX = num1;
    this._regionMapSpecs.topY = num2;
    this._regionMapSpecs.subsectionWidth = width;
    this._regionMapSpecs.subsectionHeight = height;
    if (Object.op_Equality((Object) gameObject1.GetComponent<BoxCollider>(), (Object) null))
    {
      BoxCollider boxCollider = (BoxCollider) gameObject1.AddComponent<BoxCollider>();
      boxCollider.set_size(Vector3.op_Multiply(boxCollider.get_size(), 1.2f));
    }
    GameObject gameObject2 = new GameObject();
    gameObject2.set_layer(LayerMask.NameToLayer("WorldMap"));
    MeshRenderer meshRenderer = (MeshRenderer) gameObject2.AddComponent<MeshRenderer>();
    ((Renderer) meshRenderer).set_sharedMaterial(new Material(Shader.Find("DiffuseNoFog")));
    ((Renderer) meshRenderer).set_castShadows(false);
    ((Renderer) meshRenderer).set_receiveShadows(false);
    ((Renderer) meshRenderer).set_enabled(false);
    ((MeshFilter) gameObject2.AddComponent<MeshFilter>()).set_sharedMesh(this.CreateQuad(width, height));
    float num3 = (float) gameObject1.get_transform().get_localPosition().y;
    gameObject1.get_transform().set_localPosition(new Vector3((float) gameObject1.get_transform().get_localPosition().x, (float) (gameObject1.get_transform().get_localPosition().y - 1.0), (float) gameObject1.get_transform().get_localPosition().z));
    for (int number = 0; number < 14; ++number)
    {
      for (int index = 0; index < 14; ++index)
      {
        float num4 = num1 + (float) index * width;
        float num5 = num2 - (float) number * height;
        Vector3 vector3;
        // ISSUE: explicit reference operation
        ((Vector3) @vector3).\u002Ector(num4 + width / 2f, num3, num5 - height / 2f);
        GameObject gameObject3 = (GameObject) Object.Instantiate((Object) gameObject2, vector3, Quaternion.get_identity());
        ((Object) gameObject3).set_name("Region" + (object) this.ConvertPositionFromNumberToLetter(number) + (string) (object) index);
        gameObject3.get_transform().set_parent(this.RegionMapHook.get_transform());
        gameObject3.get_transform().set_localPosition(vector3);
        this._regionSections[number, index].regionObject = gameObject3;
        Bounds bounds2 = gameObject3.get_renderer().get_bounds();
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        this._regionSections[number, index].topLeft = new Vector3((float) (((Bounds) @bounds2).get_center().x - ((Bounds) @bounds2).get_extents().x), (float) (((Bounds) @bounds2).get_center().y + ((Bounds) @bounds2).get_extents().y), (float) gameObject3.get_transform().get_position().z);
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        this._regionSections[number, index].topRight = new Vector3((float) (((Bounds) @bounds2).get_center().x + ((Bounds) @bounds2).get_extents().x), (float) (((Bounds) @bounds2).get_center().y + ((Bounds) @bounds2).get_extents().y), (float) gameObject3.get_transform().get_position().z);
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        this._regionSections[number, index].bottomLeft = new Vector3((float) (((Bounds) @bounds2).get_center().x - ((Bounds) @bounds2).get_extents().x), (float) (((Bounds) @bounds2).get_center().y - ((Bounds) @bounds2).get_extents().y), (float) gameObject3.get_transform().get_position().z);
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        this._regionSections[number, index].bottomRight = new Vector3((float) (((Bounds) @bounds2).get_center().x + ((Bounds) @bounds2).get_extents().x), (float) (((Bounds) @bounds2).get_center().y - ((Bounds) @bounds2).get_extents().y), (float) gameObject3.get_transform().get_position().z);
        this._regionSections[number, index].isUnloaded = true;
      }
    }
    Object.Destroy((Object) gameObject2);
    this.CalibrateRegionMap();
  }

  private void CalibrateRegionMap()
  {
    Vector3 position1 = ((Component) this.RegionMapCamera).get_transform().get_position();
    Vector3 position2 = this._currentRegionMapObject.get_transform().get_position();
    position2.z = ((Component) this.RegionMapCamera).get_transform().get_position().z;
    ((Component) this.RegionMapCamera).get_transform().set_position(position2);
    this.ZoomRegionMap((float) this.MinZoomValue, Vector3.get_zero());
    this._minCamExtents = this.GetCameraExtents();
    this.ZoomRegionMap((float) this.MaxZoomValue, Vector3.get_zero());
    this._maxCamExtents = this.GetCameraExtents();
    ((Component) this.RegionMapCamera).get_transform().set_position(position1);
  }

  private UIWorldMap_Common.CameraExtents GetCameraExtents()
  {
    RaycastHit raycastHit;
    Physics.Raycast(this.RegionMapCamera.ViewportPointToRay(new Vector3(1f, 0.0f, 0.0f)), ref raycastHit);
    // ISSUE: explicit reference operation
    Vector3 point1 = ((RaycastHit) @raycastHit).get_point();
    Physics.Raycast(this.RegionMapCamera.ViewportPointToRay(new Vector3(1f, 1f, 0.0f)), ref raycastHit);
    // ISSUE: explicit reference operation
    Vector3 point2 = ((RaycastHit) @raycastHit).get_point();
    Physics.Raycast(this.RegionMapCamera.ViewportPointToRay(new Vector3(0.5f, 0.5f, 0.0f)), ref raycastHit);
    // ISSUE: explicit reference operation
    Vector3 point3 = ((RaycastHit) @raycastHit).get_point();
    UIWorldMap_Common.CameraExtents cameraExtents;
    cameraExtents.centerToX_Top = (float) (point2.x - point3.x);
    cameraExtents.centerToY_Top = (float) (point2.y - point3.y);
    cameraExtents.centerToX_Bot = (float) (point1.x - point3.x);
    cameraExtents.centerToY_Bot = (float) (point1.y - point3.y);
    return cameraExtents;
  }

  [DebuggerHidden]
  private IEnumerator WaitAndSetTexture(WBLoader.BundleRequest request, UIWorldMap_Common.MapSubsection region, Action onTextureLoaded = null)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new UIWorldMap_Common.\u003CWaitAndSetTexture\u003Ec__Iterator167()
    {
      request = request,
      region = region,
      onTextureLoaded = onTextureLoaded,
      \u003C\u0024\u003Erequest = request,
      \u003C\u0024\u003Eregion = region,
      \u003C\u0024\u003EonTextureLoaded = onTextureLoaded,
      \u003C\u003Ef__this = this
    };
  }

  private void UnloadAllSubsectionResources()
  {
    if (this._regionSections == null)
      return;
    for (int index1 = 0; index1 < 14; ++index1)
    {
      for (int index2 = 0; index2 < 14; ++index2)
      {
        UIWorldMap_Common.MapSubsection mapSubsection = this._regionSections[index1, index2];
        if (Object.op_Inequality((Object) mapSubsection.regionObject, (Object) null))
        {
          MeshRenderer meshRenderer = (MeshRenderer) mapSubsection.regionObject.GetComponent<MeshRenderer>();
          if (Object.op_Inequality((Object) meshRenderer, (Object) null) && Object.op_Inequality((Object) ((Renderer) meshRenderer).get_material(), (Object) null))
            Resources.UnloadAsset((Object) ((Renderer) meshRenderer).get_material().get_mainTexture());
          Object.Destroy((Object) mapSubsection.regionObject);
          mapSubsection.regionObject = (GameObject) null;
        }
      }
    }
    this._regionSections = (UIWorldMap_Common.MapSubsection[,]) null;
  }

  protected void ClearRegionMap()
  {
    UIWorldMap_Common.DisplayingRegionMap = false;
    this.OnClearRegionMap();
    this.UnloadAllSubsectionResources();
    if (!Object.op_Inequality((Object) this._currentRegionMapObject, (Object) null))
      return;
    Object.Destroy((Object) this._currentRegionMapObject);
    this._currentRegionMapObject = (GameObject) null;
  }

  protected abstract void AlignUIElements();

  protected virtual void LateUpdate()
  {
    if (!Object.op_Inequality((Object) UIManager.Instance, (Object) null) || UIManager.Instance.uiCameras == null || (!Object.op_Inequality((Object) FordGameRoom.Instance, (Object) null) || !Object.op_Inequality((Object) FordGameRoom.Instance._PlayerGoalProgression, (Object) null)))
      return;
    this.AlignUIElements();
    FordGameRoom.Instance._PlayerGoalProgression.GetCurrentWorldMapInfo(ref this._goalInfo);
    bool flag1 = (this._goalInfo.FieldsUsed & 1) == 1;
    bool flag2 = (this._goalInfo.FieldsUsed & 2) == 2;
    WildernessRegion wildernessRegion = WildernessRegion.Zoo;
    if (flag1)
    {
      wildernessRegion = GraphMgr.Instance.FindRegionContainingRoom(this._goalInfo.TileName);
    }
    else
    {
      this._2dGoalArrow.SetVisible(false);
      if (Object.op_Inequality((Object) this._vfxGoalPointer, (Object) null))
        this._vfxGoalPointer.SetActive(false);
      this._3dGoalArrow.SetVisible(false);
    }
    if (Object.op_Inequality((Object) this._topLevelWorldMap, (Object) null) && this._topLevelWorldMap.IsEnabled())
    {
      if (Object.op_Inequality((Object) this._vfxGoalPointer, (Object) null))
        this._vfxGoalPointer.SetActive(false);
      this._3dGoalArrow.SetVisible(false);
      if (!FordPanelManager.Instance.IsPanelOpened("UIPanelLoading") && flag1)
      {
        Transform regionTransform = this.GetRegionTransform(wildernessRegion);
        if (Object.op_Inequality((Object) regionTransform, (Object) null))
        {
          this._2dGoalArrow.SetPosition(regionTransform.get_position(), -45f);
          this._2dGoalArrow.SetVisible(true);
        }
        else
          this._2dGoalArrow.SetVisible(false);
      }
      else
        this._2dGoalArrow.SetVisible(false);
    }
    else if (Object.op_Inequality((Object) this._currentRegionMapObject, (Object) null))
    {
      this._2dGoalArrow.SetVisible(false);
      bool flag3 = false;
      if (this._currentRegionMap == wildernessRegion)
      {
        if (Object.op_Inequality((Object) this._currentRegionMapObject, (Object) null) && flag1 && flag2)
        {
          Vector3 targetPosition = (Vector3) null;
          Transform child = this._currentRegionMapObject.get_transform().FindChild(this._goalInfo.TileName);
          if (Object.op_Inequality((Object) child, (Object) null))
          {
            string str = this._goalInfo.TileName.ToLower();
            targetPosition = str.Contains("dungeon") || str.Contains("cave") ? child.get_position() : child.TransformPoint(VectorExtensions.FlattenY(this._goalInfo.Position));
            flag3 = true;
          }
          else
          {
            GameObject childRecursively = FordUtility.FindChildRecursively(this._currentRegionMapObject.get_transform(), this._goalInfo.TileName);
            if (Object.op_Inequality((Object) childRecursively, (Object) null))
            {
              targetPosition = childRecursively.get_transform().get_position();
              flag3 = true;
            }
          }
          if (Object.op_Inequality((Object) this._vfxGoalPointer, (Object) null))
          {
            if (flag3)
            {
              this._vfxGoalPointer.get_transform().set_position(targetPosition);
              if (Vector3.op_Inequality(targetPosition, this._newGoalPosition))
              {
                this.StartCoroutine(this.FocusOnLerp(targetPosition));
                this._newGoalPosition = targetPosition;
              }
              this._vfxGoalPointer.SetActive(true);
              bool flag4 = false;
              Vector3 vPosition = Vector3.op_Multiply(9999f, Vector3.get_one());
              foreach (WMPortal wmPortal in this.RegionMapHook.GetComponentsInChildren(typeof (WMPortal), true))
              {
                if (!wmPortal.HideOnMap)
                {
                  Vector3 vector3_1 = Vector3.op_Subtraction(((Component) wmPortal).get_transform().get_position(), this._vfxGoalPointer.get_transform().get_position());
                  // ISSUE: explicit reference operation
                  double num1 = (double) ((Vector3) @vector3_1).get_magnitude();
                  Vector3 vector3_2 = Vector3.op_Subtraction(vPosition, this._vfxGoalPointer.get_transform().get_position());
                  // ISSUE: explicit reference operation
                  double num2 = (double) ((Vector3) @vector3_2).get_magnitude();
                  if (num1 < num2)
                  {
                    flag4 = true;
                    vPosition = ((Component) wmPortal).get_transform().get_position();
                  }
                }
              }
              bool flag5 = true;
              if (Object.op_Inequality((Object) this._playerArrow, (Object) null))
              {
                Vector3 vector3_1 = Vector3.op_Subtraction(vPosition, this._vfxGoalPointer.get_transform().get_position());
                // ISSUE: explicit reference operation
                double num1 = (double) ((Vector3) @vector3_1).get_magnitude() + (double) FordGameRoom.Instance.Roger.DistanceThresholdForPortalGoalArrowOnMap;
                Vector3 vector3_2 = Vector3.op_Subtraction(((Component) this._playerArrow).get_transform().get_position(), this._vfxGoalPointer.get_transform().get_position());
                // ISSUE: explicit reference operation
                double num2 = (double) ((Vector3) @vector3_2).get_magnitude();
                flag5 = num1 < num2;
              }
              if (flag4 && flag5)
              {
                this._3dGoalArrow.SetPosition(vPosition, this._goalArrowLookAt, this._goalArrowUp, false);
                this._3dGoalArrow.SetVisible(true);
              }
            }
            else
            {
              CommonLog.Error("Failed to find region map tile. _goalInfo.TileName = " + this._goalInfo.TileName);
              this._vfxGoalPointer.SetActive(false);
              this._3dGoalArrow.SetVisible(false);
            }
          }
        }
        else
        {
          if (Object.op_Inequality((Object) this._vfxGoalPointer, (Object) null))
            this._vfxGoalPointer.SetActive(false);
          this._3dGoalArrow.SetVisible(false);
        }
      }
      else
      {
        if (flag2 && flag1)
        {
          Transform transform = (Transform) null;
          switch (this._currentRegionMap)
          {
            case WildernessRegion.Jungle:
              transform = MonoBehaviourExtensions.FindChildRecursively(this.RegionMapHook.get_transform(), "LD_Tile20_L");
              break;
            case WildernessRegion.Mountain:
              transform = MonoBehaviourExtensions.FindChildRecursively(this.RegionMapHook.get_transform(), "LD_Tile09_L");
              break;
          }
          if (Object.op_Inequality((Object) transform, (Object) null))
          {
            this._3dGoalArrow.SetPosition(transform.get_position(), this._goalArrowLookAt, this._goalArrowUp, false);
            if (Vector3.op_Inequality(this._newGoalPosition, transform.get_position()))
            {
              this.StartCoroutine(this.FocusOnLerp(transform.get_position()));
              this._newGoalPosition = transform.get_position();
            }
            this._3dGoalArrow.SetVisible(true);
          }
        }
        if (Object.op_Inequality((Object) this._vfxGoalPointer, (Object) null))
        {
          if (!FordUtility.IsPositionVisibleOnScreen(this.RegionMapCamera, this._vfxGoalPointer.get_transform().get_position()))
            this._vfxGoalPointer.SetActive(false);
          else if (flag3)
            this._vfxGoalPointer.SetActive(true);
        }
      }
      this.Loots.get_transform().set_position(this._LootInspectorForcePosition);
    }
    else
    {
      this._2dGoalArrow.SetVisible(false);
      if (Object.op_Inequality((Object) this._vfxGoalPointer, (Object) null))
        this._vfxGoalPointer.SetActive(false);
      this._3dGoalArrow.SetVisible(false);
    }
  }

  public override void CloseMenu(Action done)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    UIWorldMap_Common.\u003CCloseMenu\u003Ec__AnonStorey30D menuCAnonStorey30D = new UIWorldMap_Common.\u003CCloseMenu\u003Ec__AnonStorey30D();
    // ISSUE: reference to a compiler-generated field
    menuCAnonStorey30D.done = done;
    // ISSUE: reference to a compiler-generated field
    menuCAnonStorey30D.\u003C\u003Ef__this = this;
    GameLog.drej.InfoFormat("[Map] CloseMenu()");
    this.StopAllCoroutines();
    using (List<WBLoader.BundleRequest>.Enumerator enumerator = this._pendingRequests.GetEnumerator())
    {
      while (enumerator.MoveNext())
        enumerator.Current.Dispose();
    }
    this.mainCamera = !Object.op_Inequality((Object) IsoCamera.Instance, (Object) null) ? (Camera) null : ((Component) IsoCamera.Instance).get_camera();
    if (Object.op_Inequality((Object) this.mainCamera, (Object) null))
      ((Behaviour) this.mainCamera).set_enabled(true);
    ((Behaviour) this.RegionMapCamera).set_enabled(false);
    if (Object.op_Inequality((Object) this._topLevelWorldMap, (Object) null))
      this._topLevelWorldMap.SetEnabled(false);
    // ISSUE: reference to a compiler-generated method
    FlashAnimationX.PlayAllChildAnimations(((Component) this).get_gameObject(), "GL_Outro", new Action(menuCAnonStorey30D.\u003C\u003Em__50A), 0.0f, 1f, false);
    this.ClearRegionMap();
    WBAudioManager.Instance.Play(this.WMCloseSound, (Object) this, AudioResourceUsage.Clear, (Transform) null, 0.0f, (AudioCompletionCallback) null);
    this.ClearFriendTags();
    if (Object.op_Inequality((Object) this._playerArrow, (Object) null))
    {
      UIGenericOverhead overHead = this._playerArrow.GetOverHead();
      if (Object.op_Inequality((Object) overHead, (Object) null))
        FordPanelManager.Instance.OverheadPanelManager.Unregister((Component) overHead);
      Object.DestroyImmediate((Object) ((Component) this._playerArrow).get_gameObject());
    }
    FordInputMgr.Instance.FireInputUnlockCondition("UserClosedWM");
    this._regionMapsIds.Clear();
    this._2dGoalArrow.SetVisible(false);
    this._topLevelWorldMap = (UIWorldMapTopLevel) null;
    if (Object.op_Inequality((Object) this._vfxGoalPointer, (Object) null))
      Object.Destroy((Object) this._vfxGoalPointer);
    this.ClearCollections();
    FordPanelManager.Instance.Destroy("UIWorldMapTopLevel");
    if (Object.op_Inequality((Object) ResourceMgr.Instance, (Object) null))
      ResourceMgr.Instance.RemoveAllReferences((object) this);
    if (!Object.op_Inequality((Object) UIDefaultCursor.Instance, (Object) null))
      return;
    UIDefaultCursor.Instance.SetupCursor(UIDefaultCursor.CursorMode.Arrow);
  }

  private void ClearCollections()
  {
    this._regionMapsIds.Clear();
    this._regionMapBundlePrefixes.Clear();
    this._pendingRequests.Clear();
    this._FriendTags.Clear();
    this._regionSections = (UIWorldMap_Common.MapSubsection[,]) null;
  }

  protected virtual void Update()
  {
    if (!UIWorldMap_Common.DisplayingRegionMap)
      return;
    this.ProcessDragNDrop();
    this.ProcessInspector();
    int[] numArray = this.CalculateRegionsToLoad();
    int num1 = numArray[0];
    int num2 = numArray[1];
    int num3 = numArray[2];
    int num4 = numArray[3];
    for (int row = 0; row < 14; ++row)
    {
      for (int col = 0; col < 14; ++col)
      {
        if (row > num3 && row < num4 && (col > num1 && col < num2) || (row == num3 || row == num4 || (col == num1 || col == num2)) && this.IsRegionVisible(row, col))
        {
          UIWorldMap_Common.MapSubsection region = this._regionSections[row, col];
          if (this._regionSections[row, col].isUnloaded)
          {
            this._regionSections[row, col].isUnloaded = false;
            WBLoader.BundleRequest request = WBLoader.Instance.LoadAssetBundle(AssetPath.BuildPlatformAssetBundleName("RegionMaps", this._regionSections[row, col].bundleName), WBLoader.Priority.Normal);
            this._pendingRequests.Add(request);
            this.StartCoroutine(this.WaitAndSetTexture(request, region, (Action) null));
          }
        }
        else if (this._regionSections.Length > row && Object.op_Inequality((Object) this._regionSections[row, col].regionObject, (Object) null))
        {
          MeshRenderer meshRenderer = (MeshRenderer) this._regionSections[row, col].regionObject.GetComponent<MeshRenderer>();
          if (Object.op_Inequality((Object) meshRenderer, (Object) null))
          {
            this._regionSections[row, col].isUnloaded = true;
            Resources.UnloadAsset((Object) ((Renderer) meshRenderer).get_material().get_mainTexture());
            ((Renderer) meshRenderer).set_enabled(false);
          }
        }
      }
    }
  }

  public void OnButtonStateChange(UIButton button)
  {
    if (button.controlState == UIButton.CONTROL_STATE.OVER && this.m_lastButtonChangedState != UIButton.CONTROL_STATE.ACTIVE)
      WBAudioManager.Instance.Play(this.WMRegionOver, (Object) this, AudioResourceUsage.Keep, (Transform) null, 0.0f, (AudioCompletionCallback) null);
    else if (button.controlState == UIButton.CONTROL_STATE.ACTIVE)
      WBAudioManager.Instance.Play(this.WMRegionSelectSound, (Object) this, AudioResourceUsage.Clear, (Transform) null, 0.0f, (AudioCompletionCallback) null);
    this.m_lastButtonChangedState = button.controlState;
  }

  private void ProcessInspector()
  {
    if (!this._OpenInspector)
      return;
    if (this._inspectorShouldClose)
    {
      this.Loots.SetActive(false);
      this._OpenInspector = false;
      this._inspectorOpened = false;
      this._materialTracker.ReleaseAll();
    }
    else if (!this._inspectorOpened)
    {
      Vector3 vector3 = UIManager.Instance.rayCamera.ScreenToWorldPoint(Input.get_mousePosition());
      // ISSUE: explicit reference operation
      ((Vector3) @vector3).\u002Ector((float) vector3.x, (float) vector3.y, -400f);
      vector3 = Vector3.op_Addition(vector3, new Vector3(109f, -117f, 0.0f));
      this._LootInspectorForcePosition = vector3;
      this.Loots.SetActive(true);
      FlashAnimationX.ForceAllChildAnimationsToEnd(this.Loots, "Popup_Loot3", true);
      FlashAnimationX.PlayAllChildAnimations(this.Loots, "Popup_Loot1", 0.0f, 1f);
      Texture2D texture2D = this._inspectorTexture;
      ((Component) this._weaponInfos.WeaponIconContainer1).get_gameObject().SetActive(true);
      if (Object.op_Inequality((Object) texture2D, (Object) null))
      {
        if (this._inspectorWeaponLevel > 0)
        {
          this._weaponInfos.LevelStar.SetActive(true);
          ((Component) this._weaponInfos.MessageField).get_transform().set_localPosition(new Vector3(-70f, 20f, -25f));
          FlashAnimationX.ForceAllChildAnimationsToEnd(this.Loots, "Frame1", true);
          FlashAnimationX.PlayAllChildAnimations(this.Loots, "Frame" + (object) this._inspectorWeaponFootprint, 0.0f, 1f);
          Material defaultUiMaterial = this._materialTracker.CreateDefaultUIMaterial(texture2D);
          FordUtility.SetupAlreadyLoadedIcon(this._inspectorWeaponFootprint, this._inspectorIconAspect, texture2D, defaultUiMaterial, false, 40f, this._weaponInfos.WeaponIconContainer1, true);
          ((Component) this._weaponInfos.WeaponIconContainer1).get_transform().set_localPosition(new Vector3((float) (20 * (this._inspectorWeaponFootprint - 1) - 53), (float) ((Component) this._weaponInfos.WeaponIconContainer1).get_transform().get_localPosition().y, 0.0f));
        }
        else
        {
          this._weaponInfos.LevelStar.SetActive(false);
          FlashAnimationX.PlayAllChildAnimations(this.Loots, "Popup_Loot0", 0.0f, 1f);
          ((Component) this._weaponInfos.MessageField).get_transform().set_localPosition(new Vector3(-70f, 20f, -25f));
          Material defaultUiMaterial = this._materialTracker.CreateDefaultUIMaterial(texture2D);
          FordUtility.SetupAlreadyLoadedIcon(this._inspectorWeaponFootprint, this._inspectorIconAspect, texture2D, defaultUiMaterial, false, 40f, this._weaponInfos.WeaponIconContainer1, true);
          ((Component) this._weaponInfos.WeaponIconContainer1).get_transform().set_localPosition(new Vector3(0.0f, (float) ((Component) this._weaponInfos.WeaponIconContainer1).get_transform().get_localPosition().y, 0.0f));
        }
      }
      else
      {
        FlashAnimationX.PlayAllChildAnimations(this.Loots, "Popup_Loot0", 0.0f, 1f);
        ((Component) this._weaponInfos.MessageField).get_transform().set_localPosition(new Vector3(-70f, 20f, -25f));
        ((Component) this._weaponInfos.WeaponIconContainer1).get_gameObject().SetActive(false);
      }
      this._weaponInfos.MessageField.Text = this._inspectorMessage;
      this._weaponInfos.Title.Text = this._inspectorTitle;
      this._weaponInfos.LevelText.Text = this._inspectorWeaponLevel <= 0 ? string.Empty : this._inspectorWeaponLevel.ToString();
      this._inspectorOpened = true;
      foreach (GameObject gameObject in this._weaponInfos.GreenChecks)
      {
        if (Object.op_Inequality((Object) gameObject, (Object) null))
          gameObject.SetActive(false);
      }
    }
    this._inspectorShouldClose = true;
  }

  private void OpenInspector(string message, string title, int weaponLevel, int footprint, Texture2D tex, float iconAspect)
  {
    if (!this._OpenInspector)
    {
      this._inspectorIconAspect = iconAspect;
      this._inspectorMessage = message;
      this._inspectorWeaponFootprint = footprint;
      this._inspectorTitle = title;
      this._inspectorTexture = tex;
      this._inspectorWeaponLevel = weaponLevel;
      this._OpenInspector = true;
    }
    if (!this._OpenInspector || !(message == this._inspectorMessage) || footprint != this._inspectorWeaponFootprint)
      return;
    this._inspectorShouldClose = false;
  }

  private void DisplayRegionMap(string regionNumber)
  {
    GameLog.drej.InfoFormat("[Map] DisplayRegionMap: " + (object) (WildernessRegion) int.Parse(regionNumber));
    this.SetMapButtonEnabled(false);
    this.TitleText.Text = FordLocalizationMgr.Menu.GetStringFromId("WORLD_MAP_CHOOSE_PORTAL", string.Empty, string.Empty);
    WildernessRegion toDisplay = (WildernessRegion) int.Parse(regionNumber);
    this.ClearFriendTags();
    this.RegionMapHook.SetActive(true);
    if (this._currentRegionMap != toDisplay)
    {
      Object.Destroy((Object) this._currentRegionMapObject);
      this._currentRegionMapObject = (GameObject) null;
    }
    this._currentRegionMap = toDisplay;
    this.StartCoroutine(this.PlaceFriends(true));
    this.StartCoroutine(this.InstantiateRegionMap(toDisplay));
    this.RegionMapCamera.set_orthographicSize(437f);
    this.unitTestReady = true;
  }

  private void ClearFriendTags()
  {
    using (Dictionary<string, List<WMFriend>>.Enumerator enumerator1 = this._FriendTags.GetEnumerator())
    {
      while (enumerator1.MoveNext())
      {
        using (List<WMFriend>.Enumerator enumerator2 = enumerator1.Current.Value.GetEnumerator())
        {
          while (enumerator2.MoveNext())
          {
            WMFriend current = enumerator2.Current;
            UIGenericOverhead overHead = current.GetOverHead();
            if (Object.op_Inequality((Object) overHead, (Object) null))
              FordPanelManager.Instance.OverheadPanelManager.Unregister((Component) overHead);
            Object.DestroyImmediate((Object) ((Component) current).get_gameObject());
          }
        }
      }
    }
    this._FriendTags.Clear();
  }

  private void FocusOn(Vector3 targetPosition)
  {
    ((Component) this.RegionMapCamera).get_transform().set_position(new Vector3((float) targetPosition.x, (float) (targetPosition.y - 480.0), (float) ((Component) this.RegionMapCamera).get_transform().get_position().z));
    this.ClampViewportToRegionMap();
  }

  [DebuggerHidden]
  private IEnumerator FocusOnLerp(Vector3 targetPosition)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new UIWorldMap_Common.\u003CFocusOnLerp\u003Ec__Iterator168()
    {
      targetPosition = targetPosition,
      \u003C\u0024\u003EtargetPosition = targetPosition,
      \u003C\u003Ef__this = this
    };
  }

  [DebuggerHidden]
  private IEnumerator PlaceFriends(bool displayingRegionMap = false)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new UIWorldMap_Common.\u003CPlaceFriends\u003Ec__Iterator169()
    {
      displayingRegionMap = displayingRegionMap,
      \u003C\u0024\u003EdisplayingRegionMap = displayingRegionMap,
      \u003C\u003Ef__this = this
    };
  }

  private void PlaceFriend(bool displayingRegionMap, long playerId, Action onDone)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    UIWorldMap_Common.\u003CPlaceFriend\u003Ec__AnonStorey30E friendCAnonStorey30E = new UIWorldMap_Common.\u003CPlaceFriend\u003Ec__AnonStorey30E();
    // ISSUE: reference to a compiler-generated field
    friendCAnonStorey30E.onDone = onDone;
    // ISSUE: reference to a compiler-generated field
    friendCAnonStorey30E.playerId = playerId;
    // ISSUE: reference to a compiler-generated field
    friendCAnonStorey30E.displayingRegionMap = displayingRegionMap;
    // ISSUE: reference to a compiler-generated field
    friendCAnonStorey30E.\u003C\u003Ef__this = this;
    // ISSUE: reference to a compiler-generated field
    // ISSUE: reference to a compiler-generated method
    NetworkMgr.Instance.GetPersistentRoomByName(friendCAnonStorey30E.playerId, "Art_Domain", new Action<ClientOperationResult<AvailablePersistentRoomInfo[]>>(friendCAnonStorey30E.\u003C\u003Em__50B));
  }

  private Transform GetRegionTransform(WildernessRegion wildernessRegion)
  {
    return this._topLevelWorldMap.GetRegionTransform(wildernessRegion);
  }

  private bool PlacePlayer()
  {
    if (UIWorldMap_Common.DisplayingRegionMap)
    {
      PlayerLegoMiniFigure playerLegoMiniFigure = FordGameRoom.Instance.GetLocalAvatar() as PlayerLegoMiniFigure;
      if (!AssertionGameModule.Verify(Object.op_Inequality((Object) playerLegoMiniFigure, (Object) null), false, "[WorldMap] Player is null. Cannot set player location"))
        return false;
      GameObject gameObject = FordUtility.FindChildRecursively(this.RegionMapHook.get_transform(), NetworkMgr.Instance.CharacterName);
      if (Object.op_Equality((Object) gameObject, (Object) null))
      {
        gameObject = new GameObject(NetworkMgr.Instance.CharacterName);
        this._playerArrow = (WMLocalPlayer) gameObject.AddComponent<WMLocalPlayer>();
        this._playerArrow.RegisterOverhead(this.RegionMapCamera);
      }
      else
      {
        this._playerArrow = (WMLocalPlayer) gameObject.GetComponent<WMLocalPlayer>();
        if (!AssertionGameModule.Verify(Object.op_Inequality((Object) this._playerArrow, (Object) null), false, "[WorldMap] Player Tag has been removed. Cannot set player location"))
          return false;
      }
      if (Object.op_Inequality((Object) this._playerArrow, (Object) null))
      {
        UIWMPlayerOverhead uiwmPlayerOverhead = (UIWMPlayerOverhead) this._playerArrow.GetOverHead();
        if (Object.op_Inequality((Object) uiwmPlayerOverhead, (Object) null))
        {
          Vector3 vector3_1 = VectorExtensions.FlattenY(playerLegoMiniFigure.GetAt());
          // ISSUE: explicit reference operation
          Vector3 normalized = ((Vector3) @vector3_1).get_normalized();
          this.mainCamera = !Object.op_Inequality((Object) IsoCamera.Instance, (Object) null) ? (Camera) null : ((Component) IsoCamera.Instance).get_camera();
          if (Object.op_Inequality((Object) this.mainCamera, (Object) null))
          {
            Vector3 vector3_2 = ((Component) this.mainCamera).get_transform().InverseTransformDirection(normalized);
            Vector3 vector3_3;
            // ISSUE: explicit reference operation
            ((Vector3) @vector3_3).\u002Ector((float) vector3_2.x, (float) vector3_2.z, 0.0f);
            Quaternion playerLookAt = Quaternion.FromToRotation(new Vector3(0.0f, 1f, 0.0f), vector3_3);
            uiwmPlayerOverhead.SetArrowDirection(playerLookAt);
          }
          uiwmPlayerOverhead.Show();
        }
      }
      Transform transform = (Transform) null;
      Vector3 zero = Vector3.get_zero();
      if (FordGameRoom.Instance.WildernessCat == WildernessCategory.Tile)
      {
        transform = this._currentRegionMapObject.get_transform().FindChild(FordGameRoom.Instance.m_RoomName);
        // ISSUE: explicit reference operation
        ((Vector3) @zero).\u002Ector(playerLegoMiniFigure.Position.x, 0.0f, playerLegoMiniFigure.Position.z);
      }
      else
      {
        GameObject childRecursively = FordUtility.FindChildRecursively(this._currentRegionMapObject.get_transform(), FordGameRoom.Instance.m_RoomName);
        if (Object.op_Inequality((Object) childRecursively, (Object) null))
          transform = childRecursively.get_transform();
      }
      if (Object.op_Inequality((Object) transform, (Object) null))
      {
        gameObject.get_transform().set_parent(((Component) transform).get_transform());
        gameObject.get_transform().set_localPosition(zero);
        return true;
      }
      CommonLog.Interface.Error((object) "[WorldMap] Could not find Player's room location. Cannot set player location.");
      return false;
    }
    if (Object.op_Inequality((Object) this._topLevelWorldMap, (Object) null) && Object.op_Inequality((Object) FordGameRoom.Instance, (Object) null))
      this._topLevelWorldMap.PlacePlayer(FordGameRoom.Instance.WildernessCat, FordGameRoom.Instance.WildernessReg);
    return true;
  }

  private void CreateFriendTag(long playerId, GameModuleProtocol.FriendActivity activity, Transform friendRoom, bool byRegion)
  {
    GameObject gameObject = FordUtility.FindChildRecursively(this.RegionMapHook.get_transform(), playerId.ToString());
    WMFriend wmFriend;
    if (Object.op_Equality((Object) gameObject, (Object) null))
    {
      gameObject = new GameObject(playerId.ToString());
      wmFriend = (WMFriend) gameObject.AddComponent<WMFriend>();
      wmFriend.RegisterOverhead(!byRegion ? this.RegionMapCamera : UIManager.Instance.uiCameras[0].camera);
    }
    else
      wmFriend = (WMFriend) gameObject.GetComponent<WMFriend>();
    UIWMFriendOverhead_Common friendOverheadCommon = (UIWMFriendOverhead_Common) wmFriend.GetOverHead();
    if (Object.op_Inequality((Object) friendOverheadCommon, (Object) null))
    {
      friendOverheadCommon.FriendsAtThisPos.Add(playerId);
      friendOverheadCommon.World = byRegion;
    }
    if (byRegion)
    {
      gameObject.get_transform().set_parent(friendRoom);
      gameObject.get_transform().set_localPosition(new Vector3(0.0f, 0.0f, -10f));
      if (!this._FriendTags.ContainsKey(((Enum) activity.CurrentRegion).ToString()))
        this._FriendTags.Add(((Enum) activity.CurrentRegion).ToString(), new List<WMFriend>());
      this._FriendTags[((Enum) activity.CurrentRegion).ToString()].Add(wmFriend);
    }
    else
    {
      gameObject.get_transform().set_parent(friendRoom);
      gameObject.get_transform().set_localPosition(new Vector3(activity.TileLocalPosition.x, activity.TileLocalPosition.y, activity.TileLocalPosition.z));
      if (!this._FriendTags.ContainsKey(((Object) friendRoom).get_name()))
        this._FriendTags.Add(((Object) friendRoom).get_name(), new List<WMFriend>());
      this._FriendTags[((Object) friendRoom).get_name()].Add(wmFriend);
    }
  }

  private bool AddToExistingTagsByPosition(long playerIdToAdd, GameModuleProtocol.FriendActivity activity, Transform friendRoom)
  {
    Vector3 vector3_1;
    // ISSUE: explicit reference operation
    ((Vector3) @vector3_1).\u002Ector(activity.TileLocalPosition.x, activity.TileLocalPosition.y, activity.TileLocalPosition.z);
    bool flag = false;
    if (this._FriendTags.ContainsKey(((Object) friendRoom).get_name()))
    {
      using (List<WMFriend>.Enumerator enumerator1 = this._FriendTags[((Object) friendRoom).get_name()].GetEnumerator())
      {
        while (enumerator1.MoveNext())
        {
          WMFriend current = enumerator1.Current;
          Vector3 vector3_2 = VectorExtensions.FlattenY(Vector3.op_Subtraction(((Component) current).get_transform().get_localPosition(), vector3_1));
          // ISSUE: explicit reference operation
          if ((double) ((Vector3) @vector3_2).get_magnitude() < 20.0)
          {
            UIWMFriendOverhead_Common friendOverheadCommon = (UIWMFriendOverhead_Common) current.GetOverHead();
            if (Object.op_Inequality((Object) friendOverheadCommon, (Object) null))
            {
              using (List<long>.Enumerator enumerator2 = friendOverheadCommon.FriendsAtThisPos.GetEnumerator())
              {
                while (enumerator2.MoveNext())
                {
                  if (enumerator2.Current == playerIdToAdd)
                    flag = true;
                }
              }
              if (!flag)
                friendOverheadCommon.FriendsAtThisPos.Add(playerIdToAdd);
            }
            flag = true;
          }
        }
      }
    }
    return flag;
  }

  private bool AddToExistingTagsByRegion(long playerIdToAdd, GameModuleProtocol.FriendActivity activity)
  {
    bool flag = false;
    if (this._FriendTags.ContainsKey(((Enum) activity.CurrentRegion).ToString()))
    {
      UIWMFriendOverhead_Common friendOverheadCommon = (UIWMFriendOverhead_Common) this._FriendTags[((Enum) activity.CurrentRegion).ToString()][0].GetOverHead();
      if (Object.op_Inequality((Object) friendOverheadCommon, (Object) null))
      {
        using (List<long>.Enumerator enumerator = friendOverheadCommon.FriendsAtThisPos.GetEnumerator())
        {
          while (enumerator.MoveNext())
          {
            if (enumerator.Current == playerIdToAdd)
              flag = true;
          }
        }
        if (!flag)
          friendOverheadCommon.FriendsAtThisPos.Add(playerIdToAdd);
      }
      flag = true;
    }
    return flag;
  }

  public void CloseFriendJoinPanels()
  {
    using (Dictionary<string, List<WMFriend>>.Enumerator enumerator1 = this._FriendTags.GetEnumerator())
    {
      while (enumerator1.MoveNext())
      {
        using (List<WMFriend>.Enumerator enumerator2 = enumerator1.Current.Value.GetEnumerator())
        {
          while (enumerator2.MoveNext())
          {
            UIWMFriendOverhead_Common friendOverheadCommon = (UIWMFriendOverhead_Common) enumerator2.Current.GetOverHead();
            if (Object.op_Inequality((Object) friendOverheadCommon, (Object) null))
              friendOverheadCommon.OnCloseJoinClick();
          }
        }
      }
    }
  }

  private bool FindCurrentGoalPosition(ref Vector3 vPosition)
  {
    FordGameRoom.Instance._PlayerGoalProgression.GetCurrentWorldMapInfo(ref this._goalInfo);
    bool flag1 = (this._goalInfo.FieldsUsed & 1) == 1;
    bool flag2 = (this._goalInfo.FieldsUsed & 2) == 2;
    WildernessRegion wildernessRegion = WildernessRegion.Zoo;
    if (flag1)
      wildernessRegion = GraphMgr.Instance.FindRegionContainingRoom(this._goalInfo.TileName);
    if (flag1 && flag2 && this._currentRegionMap == wildernessRegion)
    {
      Transform child = this._currentRegionMapObject.get_transform().FindChild(this._goalInfo.TileName);
      if (Object.op_Inequality((Object) child, (Object) null))
      {
        vPosition = child.TransformPoint(this._goalInfo.Position);
        return true;
      }
      GameObject childRecursively = FordUtility.FindChildRecursively(this._currentRegionMapObject.get_transform(), this._goalInfo.TileName);
      if (Object.op_Inequality((Object) childRecursively, (Object) null))
      {
        vPosition = childRecursively.get_transform().get_position();
        return true;
      }
    }
    return false;
  }

  [DebuggerHidden]
  private IEnumerator InstantiateRegionMap(WildernessRegion toDisplay)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new UIWorldMap_Common.\u003CInstantiateRegionMap\u003Ec__Iterator16A()
    {
      toDisplay = toDisplay,
      \u003C\u0024\u003EtoDisplay = toDisplay,
      \u003C\u003Ef__this = this
    };
  }

  private void LoadWorldMapItemOfType<T>(Action<T> actionToRun) where T : WMItem
  {
    foreach (T obj in this.RegionMapHook.GetComponentsInChildren(typeof (T), true))
    {
      if (actionToRun != null)
        actionToRun(obj);
      obj.ManualInitAndLoadItem();
    }
  }

  private void SetMapButtonEnabled(bool enabled)
  {
    if (!Object.op_Inequality((Object) this._topLevelWorldMap, (Object) null))
      return;
    if (this._topLevelWorldMap.JungleButtons != null)
    {
      foreach (UIButton uiButton in this._topLevelWorldMap.JungleButtons)
        uiButton.controlIsEnabled = enabled;
    }
    if (this._topLevelWorldMap.MountainButtons == null)
      return;
    foreach (UIButton uiButton in this._topLevelWorldMap.MountainButtons)
      uiButton.controlIsEnabled = enabled;
  }

  protected void ZoomRegionMap(float zoomValue, Vector3 zoomMoveVector)
  {
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    ((Component) this.RegionMapCamera).get_transform().set_position(Vector3.op_Addition(((Component) this.RegionMapCamera).get_transform().get_position(), Vector3.op_Multiply((float) (((double) zoomValue <= 0.0 ? -1.0 : 1.0) * ((double) ((Vector3) @zoomMoveVector).get_magnitude() / 10.0)), ((Vector3) @zoomMoveVector).get_normalized())));
    this.ClampViewportToRegionMap();
    Transform transform1 = ((Component) this.RegionMapCamera).get_transform();
    Vector3 vector3_1 = Vector3.op_Addition(transform1.get_localPosition(), Vector3.op_Multiply(zoomValue, ((Component) this.RegionMapCamera).get_transform().get_forward()));
    transform1.set_localPosition(vector3_1);
    if (((Component) this.RegionMapCamera).get_transform().get_localPosition().z > (double) this.MaxZoomValue)
    {
      Transform transform2 = ((Component) this.RegionMapCamera).get_transform();
      Vector3 vector3_2 = Vector3.op_Subtraction(transform2.get_localPosition(), Vector3.op_Multiply(zoomValue, ((Component) this.RegionMapCamera).get_transform().get_forward()));
      transform2.set_localPosition(vector3_2);
      Transform transform3 = ((Component) this.RegionMapCamera).get_transform();
      Vector3 vector3_3 = Vector3.op_Addition(transform3.get_localPosition(), Vector3.op_Multiply(zoomValue / 2f, ((Component) this.RegionMapCamera).get_transform().get_forward()));
      transform3.set_localPosition(vector3_3);
      if (((Component) this.RegionMapCamera).get_transform().get_localPosition().z > (double) this.MaxZoomValue)
      {
        Transform transform4 = ((Component) this.RegionMapCamera).get_transform();
        Vector3 vector3_4 = Vector3.op_Subtraction(transform4.get_localPosition(), Vector3.op_Multiply(zoomValue / 2f, ((Component) this.RegionMapCamera).get_transform().get_forward()));
        transform4.set_localPosition(vector3_4);
      }
    }
    else if (((Component) this.RegionMapCamera).get_transform().get_localPosition().z < (double) this.MinZoomValue)
    {
      Transform transform2 = ((Component) this.RegionMapCamera).get_transform();
      Vector3 vector3_2 = Vector3.op_Subtraction(transform2.get_localPosition(), Vector3.op_Multiply(zoomValue, ((Component) this.RegionMapCamera).get_transform().get_forward()));
      transform2.set_localPosition(vector3_2);
      Transform transform3 = ((Component) this.RegionMapCamera).get_transform();
      Vector3 vector3_3 = Vector3.op_Addition(transform3.get_localPosition(), Vector3.op_Multiply(zoomValue / 2f, ((Component) this.RegionMapCamera).get_transform().get_forward()));
      transform3.set_localPosition(vector3_3);
      if (((Component) this.RegionMapCamera).get_transform().get_localPosition().z < (double) this.MinZoomValue)
      {
        Transform transform4 = ((Component) this.RegionMapCamera).get_transform();
        Vector3 vector3_4 = Vector3.op_Subtraction(transform4.get_localPosition(), Vector3.op_Multiply(zoomValue / 2f, ((Component) this.RegionMapCamera).get_transform().get_forward()));
        transform4.set_localPosition(vector3_4);
      }
    }
    if (!this.ClampViewportToRegionMap() || !this.IsOpenedViaDomain)
      return;
    this.DisplayWorldMap();
  }

  private float GetZoomFactor()
  {
    return (float) (this.CurrZoomValue - this.MinZoomValue) / (float) (this.MaxZoomValue - this.MinZoomValue);
  }

  private void ProcessDragNDrop()
  {
    if (!this._startDragged && Input.GetMouseButtonDown(0))
    {
      this._startDragged = true;
      if (Object.op_Inequality((Object) UIDefaultCursor.Instance, (Object) null))
        UIDefaultCursor.Instance.SetupCursor(UIDefaultCursor.CursorMode.ClosedPaw);
    }
    else if (Input.GetMouseButtonUp(0))
    {
      this._startDragged = false;
      if (Object.op_Inequality((Object) UIDefaultCursor.Instance, (Object) null))
        UIDefaultCursor.Instance.SetupCursor(UIDefaultCursor.CursorMode.OpenedPaw);
    }
    else if (this._startDragged)
    {
      if (Object.op_Inequality((Object) UIDefaultCursor.Instance, (Object) null))
        UIDefaultCursor.Instance.SetupCursor(UIDefaultCursor.CursorMode.ClosedPaw);
      Vector3 vector3_1 = Vector3.op_Subtraction(Input.get_mousePosition(), this._position);
      Transform transform = ((Component) this.RegionMapCamera).get_transform();
      Vector3 vector3_2 = Vector3.op_Subtraction(transform.get_position(), new Vector3((float) vector3_1.x, (float) vector3_1.y, 0.0f));
      transform.set_position(vector3_2);
      this.ClampViewportToRegionMap();
    }
    this._position = Input.get_mousePosition();
  }

  private void CloseAllJoinPanels()
  {
    using (Dictionary<string, List<WMFriend>>.Enumerator enumerator1 = this._FriendTags.GetEnumerator())
    {
      while (enumerator1.MoveNext())
      {
        using (List<WMFriend>.Enumerator enumerator2 = enumerator1.Current.Value.GetEnumerator())
        {
          while (enumerator2.MoveNext())
          {
            UIWMFriendOverhead_Common friendOverheadCommon = (UIWMFriendOverhead_Common) enumerator2.Current.GetOverHead();
            if (Object.op_Inequality((Object) friendOverheadCommon, (Object) null))
              friendOverheadCommon.OnCloseJoinClick();
          }
        }
      }
    }
  }

  protected bool ClampViewportToRegionMap()
  {
    Vector3 vector3_1 = this.RegionMapCamera.ViewportToWorldPoint(new Vector3(0.0f, 0.0f));
    Vector3 vector3_2 = this.RegionMapCamera.ViewportToWorldPoint(new Vector3(1f, 1f));
    int num1 = 1;
    int num2 = 1;
    if (this._regionMapDesc != null)
    {
      num1 = this._regionMapDesc.MapXGraphicTileSize;
      num2 = this._regionMapDesc.MapYGraphicTileSize;
    }
    Vector3 vector3_3;
    // ISSUE: explicit reference operation
    ((Vector3) @vector3_3).\u002Ector((float) (num1 * 180), (float) (num2 * 300 - 800), 0.0f);
    Vector3 vector3_4;
    // ISSUE: explicit reference operation
    ((Vector3) @vector3_4).\u002Ector((float) (-num1 * 180), (float) (-num2 * 300), 0.0f);
    Vector3 vector3_5 = Vector3.op_Addition(this.RegionMapHook.get_transform().get_position(), vector3_4);
    Vector3 vector3_6 = Vector3.op_Addition(this.RegionMapHook.get_transform().get_position(), vector3_3);
    float num3 = 0.0f;
    float num4 = 0.0f;
    bool flag1 = vector3_1.x < vector3_5.x;
    bool flag2 = vector3_2.x > vector3_6.x;
    bool flag3 = vector3_1.y < vector3_5.y;
    bool flag4 = vector3_2.y > vector3_6.y;
    int num5 = (!flag1 ? 0 : 1) + (!flag2 ? 0 : 1) + (!flag3 ? 0 : 1) + (!flag4 ? 0 : 1);
    if (flag1)
      num3 = (float) (vector3_5.x - vector3_1.x);
    else if (flag2)
      num3 = (float) (vector3_6.x - vector3_2.x);
    if (flag3)
      num4 = (float) (vector3_5.y - vector3_1.y);
    else if (flag4)
      num4 = (float) (vector3_6.y - vector3_2.y);
    if (num5 > 2 || flag1 && flag2 || flag4 && flag3)
      return true;
    Vector3 vector3_7;
    // ISSUE: explicit reference operation
    ((Vector3) @vector3_7).\u002Ector(num3, num4, 0.0f);
    Transform transform = ((Component) this.RegionMapCamera).get_transform();
    Vector3 vector3_8 = Vector3.op_Addition(transform.get_position(), vector3_7);
    transform.set_position(vector3_8);
    return false;
  }

  public virtual void OnClickClose(UIButton btn)
  {
    this.StopAllCoroutines();
    FordPanelManager.Instance.SafeDismissUIPanelLoading();
    FordPanelManager.Instance.SwitchLayout(FordGameRoom.Instance.IsDomain() ? FordPanelBase.FordHUDGroup.Domain : FordPanelBase.FordHUDGroup.Wilderness, (Action<string, UIPanelBase>) null, (object) null, (Action<string>) null, (string[]) null);
    FordPanelManager.Instance.OverheadPanelManager.RestoreAll();
  }

  private void OnZoomInClick()
  {
    this.ZoomRegionMap(30f, Vector3.get_zero());
  }

  private void OnZoomOutClick()
  {
    this.ZoomRegionMap(-30f, Vector3.get_zero());
  }

  private int ConvertPositionFromLetterToNumber(char letter)
  {
    return (int) letter - 65;
  }

  private char ConvertPositionFromNumberToLetter(int number)
  {
    return (char) (number + 65);
  }

  private Vector3 TranslateWorldPositionToMapPosition(Vector3 worldPosition)
  {
    Vector3 position = this.RegionMapHook.get_transform().get_position();
    return Vector3.op_Subtraction(worldPosition, position);
  }

  private bool IsRegionVisible(int row, int col)
  {
    if (!FordUtility.IsPositionVisibleOnScreen(this.RegionMapCamera, this._regionSections[row, col].topLeft) && !FordUtility.IsPositionVisibleOnScreen(this.RegionMapCamera, this._regionSections[row, col].topRight) && !FordUtility.IsPositionVisibleOnScreen(this.RegionMapCamera, this._regionSections[row, col].bottomLeft))
      return FordUtility.IsPositionVisibleOnScreen(this.RegionMapCamera, this._regionSections[row, col].bottomRight);
    return true;
  }

  private int[] CalculateRegionsToLoad()
  {
    RaycastHit raycastHit;
    Physics.Raycast(this.RegionMapCamera.ViewportPointToRay(new Vector3(0.5f, 0.5f, 0.0f)), ref raycastHit);
    // ISSUE: explicit reference operation
    Vector3 vector3 = this.TranslateWorldPositionToMapPosition(((RaycastHit) @raycastHit).get_point());
    float zoomFactor = this.GetZoomFactor();
    float num1 = Mathf.Lerp(this._minCamExtents.centerToX_Top, this._maxCamExtents.centerToX_Top, zoomFactor);
    float num2 = Mathf.Lerp(this._minCamExtents.centerToX_Bot, this._maxCamExtents.centerToX_Bot, zoomFactor);
    float num3 = Mathf.Lerp(this._minCamExtents.centerToY_Top, this._maxCamExtents.centerToY_Top, zoomFactor);
    float num4 = Mathf.Lerp(this._minCamExtents.centerToY_Bot, this._maxCamExtents.centerToY_Bot, zoomFactor);
    int[] regionIndex1 = this.GetRegionIndex(new Vector3((float) vector3.x - num1, (float) vector3.y + num3));
    int[] regionIndex2 = this.GetRegionIndex(new Vector3((float) vector3.x + num1, (float) vector3.y + num3));
    int[] regionIndex3 = this.GetRegionIndex(new Vector3((float) vector3.x + num2, (float) vector3.y + num4));
    int[] numArray = new int[4];
    int index1 = 0;
    int num5 = regionIndex1[0];
    numArray[index1] = num5;
    int index2 = 1;
    int num6 = regionIndex2[0];
    numArray[index2] = num6;
    int index3 = 2;
    int num7 = regionIndex1[1];
    numArray[index3] = num7;
    int index4 = 3;
    int num8 = regionIndex3[1];
    numArray[index4] = num8;
    return numArray;
  }

  private int[] GetRegionIndex(Vector3 regionMapPosition)
  {
    int num1 = (int) ((regionMapPosition.x - (double) this._regionMapSpecs.topX) / (double) this._regionMapSpecs.subsectionWidth);
    int num2 = 13 - (int) ((regionMapPosition.y + (double) this._regionMapSpecs.topY) / (double) this._regionMapSpecs.subsectionHeight);
    int[] numArray = new int[2];
    int index1 = 0;
    int num3 = num1;
    numArray[index1] = num3;
    int index2 = 1;
    int num4 = num2;
    numArray[index2] = num4;
    return numArray;
  }

  protected Mesh CreateQuad(float width, float height)
  {
    if (Object.op_Equality((Object) this._quad, (Object) null))
      this._quad = FordUtility.MakeMesh(width, height, 1f, true);
    return this._quad;
  }

  public class WeaponInfos
  {
    public GameObject MainObject;
    public WBSpriteText Title;
    public WBSpriteText LevelText;
    public GameObject LevelStar;
    public WBSpriteText MessageField;
    public GameObject[] GreenChecks;
    public SimpleSprite WeaponIconContainer1;
  }

  private struct MapSubsection
  {
    public GameObject regionObject;
    public string bundleName;
    public Vector3 topLeft;
    public Vector3 topRight;
    public Vector3 bottomLeft;
    public Vector3 bottomRight;
    public bool isUnloaded;
  }

  private struct RegionMapSpecs
  {
    public float topX;
    public float topY;
    public float subsectionWidth;
    public float subsectionHeight;
  }

  private struct CameraExtents
  {
    public float centerToX_Top;
    public float centerToX_Bot;
    public float centerToY_Top;
    public float centerToY_Bot;

    public override string ToString()
    {
      string format = "X:({0},{1}), Y:({2},{3})";
      object[] objArray = new object[4];
      int index1 = 0;
      // ISSUE: variable of a boxed type
      __Boxed<float> local1 = (ValueType) this.centerToX_Bot;
      objArray[index1] = (object) local1;
      int index2 = 1;
      // ISSUE: variable of a boxed type
      __Boxed<float> local2 = (ValueType) this.centerToX_Top;
      objArray[index2] = (object) local2;
      int index3 = 2;
      // ISSUE: variable of a boxed type
      __Boxed<float> local3 = (ValueType) this.centerToY_Bot;
      objArray[index3] = (object) local3;
      int index4 = 3;
      // ISSUE: variable of a boxed type
      __Boxed<float> local4 = (ValueType) this.centerToY_Top;
      objArray[index4] = (object) local4;
      return string.Format(format, objArray);
    }
  }
}
