// Decompiled with JetBrains decompiler
// Type: UIGameMenu_IOS
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19851F1B-4780-4223-BA01-2C20F2CD781E
// Assembly location: C:\Users\CGA Computer\Desktop\LEGO Universe Stuff\LOCO Server\Unity Web Player Extractor\Saved Files\LOCO Server.unity3d_unpacked\Assembly-CSharp.dll

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Wb.Lpw.Platform.Protocol;
using Wb.Lpw.Shared.Network;

public class UIGameMenu_IOS : UIGameMenu_Common
{
  public UIButton DropBoxButton;
  public UIButton OptionsButton;
  public PackedSprite InventoryCounterBg;
  public WBSpriteText InventoryCounterText;
  public GameObject[] ObjectsToDisable;
  private int _dropBoxCounter;
  private int _inventoryCounter;

  protected override string path_InventoryButton
  {
    get
    {
      return "MC_SocialBar/MC_AbilityBar/MC_Btns/MC_Btns/BTN_Inventory/BTN_Menu_Inventory/BTN_Menu_Inventory";
    }
  }

  public int DropBoxCounter
  {
    get
    {
      return this._dropBoxCounter;
    }
  }

  public int InventoryCounter
  {
    get
    {
      return this._inventoryCounter;
    }
    set
    {
      this._inventoryCounter = value;
    }
  }

  public override void OpenMenu(object parameter, Action done)
  {
    base.OpenMenu(parameter, done);
    this._inventoryCounter = 0;
    this._dropBoxCounter = 0;
    this.InventoryCounterText.Hide(true);
    this.InventoryCounterBg.Hide(true);
    foreach (GameObject go in this.ObjectsToDisable)
      WBUtility.ActivateRecursively(go, false);
    this.ApplyGameState(GameStateMgr.Instance.CurrentState);
    if (done == null)
      return;
    done();
  }

  public override string GetGameMenuType()
  {
    return "UIGameMenu_IOS";
  }

  public override void Select(string name)
  {
    if (FordPanelManager.Instance.IsPanelOpened(UIContextualChatCommon.PanelName))
      FordPanelManager.Instance.Dismiss(UIContextualChatCommon.PanelName);
    UIRightPanel_IOS.Instance.CloseTab();
    WBAudioManager.Instance.Play(this.MouseClickButtonSound, (Object) this, AudioResourceUsage.Keep, (Transform) null, 0.0f, (AudioCompletionCallback) null);
    string key = name;
    if (key != null)
    {
      // ISSUE: reference to a compiler-generated field
      if (UIGameMenu_IOS.\u003C\u003Ef__switch\u0024map7 == null)
      {
        // ISSUE: reference to a compiler-generated field
        UIGameMenu_IOS.\u003C\u003Ef__switch\u0024map7 = new Dictionary<string, int>(2)
        {
          {
            "Options",
            0
          },
          {
            "Inventory",
            1
          }
        };
      }
      int num;
      // ISSUE: reference to a compiler-generated field
      if (UIGameMenu_IOS.\u003C\u003Ef__switch\u0024map7.TryGetValue(key, out num))
      {
        if (num != 0)
        {
          if (num == 1)
          {
            this._inventoryCounter = 0;
            NetworkMgr.Instance.InventoriesView.ClearNumNewInventoryItems();
            this.InventoryCounterText.Hide(true);
            this.InventoryCounterBg.Hide(true);
            base.Select(name);
            return;
          }
        }
        else
        {
          FordPanelManager.Instance.SwitchLayout(FordPanelBase.FordHUDGroup.Options, (Action<string, UIPanelBase>) null, (object) null, (Action<string>) null, (string[]) null);
          return;
        }
      }
    }
    base.Select(name);
  }

  protected override void SetButtonsActive(bool playerIsInDomain)
  {
    if (playerIsInDomain || this.IsInCombat())
      this.DomainButton.controlIsEnabled = false;
    else
      this.DomainButton.controlIsEnabled = true;
  }

  private void OnDropBoxClick()
  {
    FordPanelManager.Instance.CheckItemDropBox(Enumerable.ToList<ItemInstance>(InventoryExtensions.GetDropboxItems(NetworkMgr.Instance.InventoriesView)), (Action) null);
  }

  public override void UpdateDropBox(List<ItemInstance> items = null)
  {
    if (items == null)
      items = Enumerable.ToList<ItemInstance>(InventoryExtensions.GetDropboxItems(NetworkMgr.Instance.InventoriesView));
    this._dropBoxCounter = items.Count;
    if (this._dropBoxCounter > 0 && FordGameRoom.Instance.IsDomain() && ((DomainRoom) FordGameRoom.Instance).RoomOwnerId == NetworkMgr.Instance.PlayerId)
    {
      this.DropBoxButton.controlIsEnabled = true;
      WBUtility.ActivateRecursively(this.DropBoxAnimRoot, true);
      this.DropBoxText.Hide(false);
      this.DropBoxText.Text = this._dropBoxCounter <= 99 ? items.Count.ToString() : "*";
    }
    else
    {
      this.DropBoxButton.controlIsEnabled = false;
      WBUtility.ActivateRecursively(this.DropBoxAnimRoot, true);
      this.DropBoxText.Hide(false);
      this.DropBoxText.Text = this._dropBoxCounter <= 99 ? items.Count.ToString() : "*";
    }
  }

  protected void Update()
  {
    if (this._inventoryCounter.ToString() != this.InventoryCounterText.Text)
    {
      this.InventoryCounterText.Hide(this._inventoryCounter == 0);
      this.InventoryCounterBg.Hide(this._inventoryCounter == 0);
      this.InventoryCounterText.Text = this._inventoryCounter.ToString();
    }
    this.OptionsButton.controlIsEnabled = !UIHUDGoals.AreThereAnyOngoingGoalUIActivities();
  }

  public override void DisplayBetterEquipmentHint()
  {
    UITooltip.Open((AutoSpriteBase) this.InventoryButton, UITooltip.ArrowPosition.BottomRight, FordLocalizationMgr.Menu.GetStringFromId("BETTER_GEAR_UPDATE", string.Empty, string.Empty));
    UITooltip.WaitAndCloseTooltip();
  }
}
