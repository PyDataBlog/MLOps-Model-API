using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using DressingSimulation.Domain.Clothes.Interfaces;
using DressingSimulation.SharedUnitTestSetup;
using Microsoft.Practices.Unity;

namespace DressingSimulation.Clothes.UnitTests
{
    [TestClass]
    public class BaseClothes_UnitTests
    {
        [TestMethod]
        public void Extention_Equals_PositiveTest()
        {
            var container = MockUnityContainer.GetContainer();
            var classBeingTested = container.Resolve<IWakeUpClothes>();

            Assert.IsTrue(classBeingTested.Equal(classBeingTested), "IClothes extention method Equal not comparing correcttly.");
        }

        [TestMethod]
        public void Extention_Equals_NegativeTest()
        {
            var container = MockUnityContainer.GetContainer();
            var classBeingTested = container.Resolve<IWakeUpClothes>();
            var expected = new Shorts();

            Assert.IsFalse(classBeingTested.Equal(expected), "IClothes extention method Equal not comparing correcttly.");
        }

        [TestMethod]
        public void Extention_Equals_Null_PositiveTest()
        {
            var container = MockUnityContainer.GetContainer();
            IClothes classBeingTested = null;

            IClothes expected = null;

            Assert.IsTrue(classBeingTested.Equal(expected), "IClothes extention method Equal not comparing both NULLs correcttly.");
        }

        [TestMethod]
        public void Extention_Equals_Null_NegativeTest()
        {
            var container = MockUnityContainer.GetContainer();
            IClothes expected = null;
            IClothes classBeingTested = container.Resolve<IWakeUpClothes>();

            Assert.IsFalse(classBeingTested.Equal(expected), "IClothes extention method Equal not comparing one Null correcttly.");
            
            Assert.IsFalse(expected.Equal(classBeingTested), "IClothes extention method Equal not comparing one Null correcttly.");
        }

    }
}
