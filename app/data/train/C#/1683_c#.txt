#if FILESYSTEM
using System;
using RoaringDB.Storage;

namespace RoaringDB.Operations.Storage
{
    internal class WriteDataOp : WriteOp
    {
        public int BitmapIndex { get; }

        public WriteDataOp(DbFile file, int index, byte[] data, int offset, int count)
            : base(file, file.Containers[index].Start, GetData(data, offset, count))
        {
            BitmapIndex = file.Containers[index].BitmapIndex;
        }
        private static byte[] GetData(byte[] buffer, int offset, int count)
        {
            if (offset == 0 && count == buffer.Length)
                return buffer;
            else
            {
                var newBuffer = new byte[count];
                Buffer.BlockCopy(buffer, offset, newBuffer, 0, count);
                return newBuffer;
            }
        }

        public override string ToString() => $"Write {Data.Length} bytes to bitmap {BitmapIndex}";
    }
}
#endif