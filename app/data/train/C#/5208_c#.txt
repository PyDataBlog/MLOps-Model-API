// <auto-generated />
using HockeyApp.Common.Enums;
using HockeyApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HockeyApp.Models.Migrations
{
    [DbContext(typeof(HockeyDbContext))]
    [Migration("20170914153122_editor_nullable")]
    partial class editor_nullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HockeyApp.Models.Announcements.TournamentAnnouncement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ResponseCount");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("TournamentAnnouncements","ads");
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.TournamentAnnouncementResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<byte>("State");

                    b.Property<long>("TeamId");

                    b.Property<long>("TournamentAnnouncementId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentAnnouncementId");

                    b.ToTable("TournamentAnnouncementResponses","ads");
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.TournamentAnnouncementResponseNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<long>("TournamentAnnouncementResponseId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("TournamentAnnouncementResponseId");

                    b.ToTable("TournamentAnnouncementResponseNotes","ads");
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.СampAnnouncement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CityId");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ResponseCount");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("СampAnnouncements","ads");
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.СampAnnouncementResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<byte>("State");

                    b.Property<long>("СampAnnouncementId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("СampAnnouncementId");

                    b.ToTable("СampAnnouncementResponses","ads");
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.СampAnnouncementResponseNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<long>("СampAnnouncementResponseId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("СampAnnouncementResponseId");

                    b.ToTable("СampAnnouncementResponseNotes","ads");
                });

            modelBuilder.Entity("HockeyApp.Models.Feedbacks.ErrorReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorReport","dbo");
                });

            modelBuilder.Entity("HockeyApp.Models.Feedbacks.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsEnabled");

                    b.Property<byte>("Rating");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback","dbo");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Arenas.Arena", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<byte?>("ArenaTypeId");

                    b.Property<long?>("Capacity");

                    b.Property<long?>("CityId");

                    b.Property<string>("Contacts")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<double?>("Latitude");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(500);

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("StartYear");

                    b.Property<string>("WebSite")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ArenaTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Arenas","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Arenas.ArenaType", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("ArenaTypes","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Events.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<int?>("EndYear");

                    b.Property<byte?>("EventTypeId");

                    b.Property<long?>("FederationId");

                    b.Property<bool>("IsOpen");

                    b.Property<long?>("LeagueId");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<byte?>("ScoreCounting");

                    b.Property<int?>("StartYear");

                    b.Property<byte?>("WinCriterion");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("FederationId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Events","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Events.EventType", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("EventTypes","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Group", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Groups","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.Goal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GoalNumber");

                    b.Property<string>("Lineup1");

                    b.Property<string>("Lineup2");

                    b.Property<long>("MatchPlayerAutorId");

                    b.Property<long>("MatchPlayerPass1Id");

                    b.Property<long>("MatchPlayerPass2Id");

                    b.Property<short>("PeriodId");

                    b.Property<byte?>("PeriodId1");

                    b.Property<string>("Score")
                        .HasMaxLength(50);

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("MatchPlayerAutorId");

                    b.HasIndex("MatchPlayerPass1Id");

                    b.HasIndex("MatchPlayerPass2Id");

                    b.HasIndex("PeriodId1");

                    b.ToTable("Goals","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ArenaId");

                    b.Property<int?>("AudienceCount");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("Number");

                    b.Property<string>("Result")
                        .HasMaxLength(50);

                    b.Property<long>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("MatchEventTypeId");

                    b.Property<long>("MatchId");

                    b.Property<byte?>("Period");

                    b.Property<TimeSpan>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MatchEventTypeId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchEvents","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchEventType", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("MatchEventTypes","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assists");

                    b.Property<short>("BGames");

                    b.Property<short>("Draws");

                    b.Property<short>("Games");

                    b.Property<short>("GamesWithoutOpponentsGoals");

                    b.Property<short>("Goals");

                    b.Property<bool>("IsBasic");

                    b.Property<bool>("IsCap");

                    b.Property<bool>("IsCapAssist");

                    b.Property<short>("Loses");

                    b.Property<long>("MatchTeamId");

                    b.Property<int>("Number");

                    b.Property<short>("OpponentsGoals");

                    b.Property<short>("PenaltyTime");

                    b.Property<short>("PlayTime");

                    b.Property<long>("PlayerId");

                    b.Property<byte?>("PositionId");

                    b.Property<short>("ReliabilityFactor");

                    b.Property<short>("SavePercentage");

                    b.Property<short>("Saves");

                    b.Property<short>("ShotsOnGoal");

                    b.Property<short>("Wins");

                    b.HasKey("Id");

                    b.HasIndex("MatchTeamId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayers","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchReferee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Games");

                    b.Property<long>("MatchId");

                    b.Property<short>("PenaltyTime");

                    b.Property<long>("RefereeId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("RefereeId");

                    b.ToTable("MatchReferees","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short?>("BLoses");

                    b.Property<short?>("BWins");

                    b.Property<short?>("Draws");

                    b.Property<short?>("Games");

                    b.Property<short?>("GamesWithoutGoals");

                    b.Property<short?>("GamesWithoutOpponentsGoals");

                    b.Property<short?>("Goals");

                    b.Property<bool?>("IsWinner");

                    b.Property<short?>("Loses");

                    b.Property<long>("MatchId");

                    b.Property<short?>("OLoses");

                    b.Property<short?>("OWins");

                    b.Property<short?>("OpponentsGoals");

                    b.Property<short?>("OpponentsPenaltyTime");

                    b.Property<short?>("PenaltyTime");

                    b.Property<short?>("Points");

                    b.Property<long>("TeamId");

                    b.Property<byte?>("TeamNumber");

                    b.Property<short?>("Wins");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchTeams","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.Period", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Abbriviation")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Synonyms")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Periods","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.Violation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("MatchPlayerId");

                    b.Property<byte>("Minutes");

                    b.Property<short>("PeriodId");

                    b.Property<byte?>("PeriodId1");

                    b.Property<DateTime>("Time")
                        .HasColumnType("time");

                    b.Property<byte>("ViolationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("MatchPlayerId");

                    b.HasIndex("PeriodId1");

                    b.HasIndex("ViolationTypeId");

                    b.ToTable("Violations","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.ViolationType", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Abbriviation")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("ViolationTypes","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.PlayOffGroup", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("PlayOffGroups","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Seasons.Season", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Seasons","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BirthYear");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<long?>("EventId");

                    b.Property<int>("GoalsCount");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("MatchCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("PlayerCount");

                    b.Property<long?>("RegionId");

                    b.Property<byte?>("SeasonId");

                    b.Property<int>("TeamCount");

                    b.Property<byte>("TournamentStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("EventId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TournamentStatusId");

                    b.ToTable("Tournaments","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentArena", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ArenaId");

                    b.Property<long>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentArenas","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assists");

                    b.Property<short>("BGames");

                    b.Property<short>("Draws");

                    b.Property<short>("Games");

                    b.Property<short>("GamesWithoutOpponentsGoals");

                    b.Property<short>("Goals");

                    b.Property<short>("Loses");

                    b.Property<short>("OpponentsGoals");

                    b.Property<short>("PenaltyTime");

                    b.Property<short>("PlayTime");

                    b.Property<long>("PlayerId");

                    b.Property<short>("ReliabilityFactor");

                    b.Property<short>("SavePercentage");

                    b.Property<short>("Saves");

                    b.Property<short>("ShotsOnGoal");

                    b.Property<long>("TournamentTeamId");

                    b.Property<short>("Wins");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TournamentTeamId");

                    b.ToTable("TournamentPlayers","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentReferee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Games");

                    b.Property<short>("PenaltyTime");

                    b.Property<long>("RefereeId");

                    b.Property<long>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentReferees","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentStatus", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("TournamentStatuses","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short?>("BLoses");

                    b.Property<short?>("BWins");

                    b.Property<short?>("Draws");

                    b.Property<short?>("Games");

                    b.Property<short?>("GamesWithoutGoals");

                    b.Property<short?>("GamesWithoutOpponentsGoals");

                    b.Property<short?>("Goals");

                    b.Property<short?>("Loses");

                    b.Property<short?>("OLoses");

                    b.Property<short?>("OWins");

                    b.Property<short?>("OpponentsGoals");

                    b.Property<short?>("OpponentsPenaltyTime");

                    b.Property<short?>("PenaltyTime");

                    b.Property<short?>("Points");

                    b.Property<long>("TeamId");

                    b.Property<long>("TournamentId");

                    b.Property<short?>("Wins");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentTeams","game");
                });

            modelBuilder.Entity("HockeyApp.Models.Geo.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CountryId");

                    b.Property<decimal?>("Lattitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NameEng")
                        .HasMaxLength(512);

                    b.Property<long?>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities","geo");
                });

            modelBuilder.Entity("HockeyApp.Models.Geo.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alfa2")
                        .HasMaxLength(20);

                    b.Property<string>("Alfa3")
                        .HasMaxLength(20);

                    b.Property<string>("Flag")
                        .HasMaxLength(500);

                    b.Property<string>("FullName")
                        .HasMaxLength(1000);

                    b.Property<string>("ISO")
                        .HasMaxLength(20);

                    b.Property<string>("Location")
                        .HasMaxLength(1000);

                    b.Property<string>("LocationPrecise")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NameEng")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("Countries","geo");
                });

            modelBuilder.Entity("HockeyApp.Models.Geo.County", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CenterId");

                    b.Property<long>("CountryId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NameEng")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CountryId");

                    b.ToTable("Counties","geo");
                });

            modelBuilder.Entity("HockeyApp.Models.Geo.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CountryId");

                    b.Property<long?>("CountyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("NameEng")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.ToTable("Regions","geo");
                });

            modelBuilder.Entity("HockeyApp.Models.News.Category", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("NewsCount");

                    b.HasKey("Id");

                    b.ToTable("Categories","news");
                });

            modelBuilder.Entity("HockeyApp.Models.News.NewsPost", b =>
                {
                    b.Property<long>("PostId");

                    b.Property<short?>("CategoryId");

                    b.Property<string>("Logo")
                        .HasMaxLength(500);

                    b.Property<long?>("LogoSourceId");

                    b.Property<int>("Priority");

                    b.Property<string>("SourceAuthorName")
                        .HasMaxLength(500);

                    b.Property<long?>("SourceId");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LogoSourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("NewsPosts","news");
                });

            modelBuilder.Entity("HockeyApp.Models.News.Source", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LinkName")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sources","news");
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Citizenship", b =>
                {
                    b.Property<long>("PersonId");

                    b.Property<long>("CountryId");

                    b.HasKey("PersonId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("Citizenships","person");
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<long?>("CityId");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte>("Gender");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Photo")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Persons","person");
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Personnel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("PersonId");

                    b.Property<byte>("PersonnelTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonnelTypeId");

                    b.ToTable("Personnel","person");
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.PersonnelType", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("PersonnelTypes","person");
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Catches");

                    b.Property<int?>("Height");

                    b.Property<int?>("Number");

                    b.Property<long>("PersonId");

                    b.Property<byte>("PositionType");

                    b.Property<long?>("TeamId");

                    b.Property<int?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players","person");
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Referee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Number");

                    b.Property<long>("PersonId");

                    b.Property<byte?>("RefereeAmplua");

                    b.Property<byte>("RefereeTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RefereeTypeId");

                    b.ToTable("Referees","person");
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.RefereeType", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Abbriviation")
                        .HasMaxLength(20);

                    b.Property<string>("AbbriviationEng")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EngName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("RefereeTypes","person");
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.FavoritePost", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("PostId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("FavoritePosts","post");
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Meta");

                    b.Property<long?>("ModeratorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ReplyCount");

                    b.Property<byte>("State");

                    b.Property<string>("Summary");

                    b.Property<int>("VoteDownCount");

                    b.Property<int>("VoteUpCount");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ModeratorId");

                    b.ToTable("Posts","post");
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.PostTag", b =>
                {
                    b.Property<long>("PostId");

                    b.Property<long>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags","post");
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.PostVote", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("PostId");

                    b.Property<bool>("Vote");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostVotes","post");
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.Reply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ParentReplyId");

                    b.Property<long>("PostId");

                    b.Property<long>("UserId");

                    b.Property<int>("VoteDownCount");

                    b.Property<int>("VoteUpCount");

                    b.HasKey("Id");

                    b.HasIndex("ParentReplyId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies","post");
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.ReplyVote", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("ReplyId");

                    b.Property<bool>("Vote");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "ReplyId");

                    b.HasAlternateKey("ReplyId", "UserId");

                    b.ToTable("ReplyVotes","post");
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LinkName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Tags","post");
                });

            modelBuilder.Entity("HockeyApp.Models.Structure.Conference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<long>("LeagueId");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Conferences","struct");
                });

            modelBuilder.Entity("HockeyApp.Models.Structure.Division", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ConferenceId");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Divisions","struct");
                });

            modelBuilder.Entity("HockeyApp.Models.Structure.Federation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbriviation")
                        .HasMaxLength(50);

                    b.Property<string>("AbbriviationEng")
                        .HasMaxLength(50);

                    b.Property<string>("About");

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasMaxLength(1000);

                    b.Property<string>("Chairman")
                        .HasMaxLength(500);

                    b.Property<long?>("CityId");

                    b.Property<int?>("CloseYear");

                    b.Property<long?>("CountryId");

                    b.Property<long?>("CountyId");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreationYear");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long?>("ParentId");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<long?>("RegionId");

                    b.Property<string>("Structure");

                    b.Property<string>("WebSite")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RegionId");

                    b.ToTable("Federations","struct");
                });

            modelBuilder.Entity("HockeyApp.Models.Structure.League", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbriviation")
                        .HasMaxLength(50);

                    b.Property<string>("AbbriviationEng")
                        .HasMaxLength(50);

                    b.Property<bool>("Active");

                    b.Property<long?>("CityId");

                    b.Property<int?>("CloseYear");

                    b.Property<long?>("CountryId");

                    b.Property<long?>("CountyId");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreationYear");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long?>("RegionId");

                    b.Property<string>("WebSite")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("RegionId");

                    b.ToTable("Leagues","struct");
                });

            modelBuilder.Entity("HockeyApp.Models.Teams.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<byte>("AgeGroup");

                    b.Property<long?>("ArenaId");

                    b.Property<int?>("BirthYear");

                    b.Property<long?>("CityId");

                    b.Property<long?>("CountryId");

                    b.Property<long?>("CountyId");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatorId");

                    b.Property<long?>("DivisionId");

                    b.Property<DateTime?>("EditDate");

                    b.Property<long?>("EditorId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int?>("EndYear");

                    b.Property<string>("Facebook")
                        .HasMaxLength(150);

                    b.Property<long?>("FederationId");

                    b.Property<string>("FullName")
                        .HasMaxLength(256);

                    b.Property<byte>("Gender");

                    b.Property<string>("Instagram")
                        .HasMaxLength(150);

                    b.Property<long?>("LeagueId");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<long?>("RegionId");

                    b.Property<int?>("StartYear");

                    b.Property<byte>("TeamGroup");

                    b.Property<string>("Twitter")
                        .HasMaxLength(150);

                    b.Property<string>("VK")
                        .HasMaxLength(150);

                    b.Property<string>("WebSite")
                        .HasMaxLength(150);

                    b.Property<string>("Youtube")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EditorId");

                    b.HasIndex("FederationId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("RegionId");

                    b.ToTable("Teams","team");
                });

            modelBuilder.Entity("HockeyApp.Models.Teams.TeamPersonnel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<long>("PersonnelId");

                    b.Property<long>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPersonnel","team");
                });

            modelBuilder.Entity("HockeyApp.Models.Teams.TeamPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("Number");

                    b.Property<long>("PlayerId");

                    b.Property<byte>("PositionType");

                    b.Property<long>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayers","team");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.Bookmark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bookmarks","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<long?>("CityId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<byte>("Gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Users.UserToken", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens","user");
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.TournamentAnnouncement", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.TournamentAnnouncementResponse", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Announcements.TournamentAnnouncement", "TournamentAnnouncement")
                        .WithMany("Responses")
                        .HasForeignKey("TournamentAnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.TournamentAnnouncementResponseNote", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Announcements.TournamentAnnouncementResponse", "TournamentAnnouncementResponse")
                        .WithMany("Notes")
                        .HasForeignKey("TournamentAnnouncementResponseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.СampAnnouncement", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.СampAnnouncementResponse", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Announcements.СampAnnouncement", "СampAnnouncement")
                        .WithMany("Responses")
                        .HasForeignKey("СampAnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Announcements.СampAnnouncementResponseNote", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Announcements.СampAnnouncementResponse", "СampAnnouncementResponse")
                        .WithMany("Notes")
                        .HasForeignKey("СampAnnouncementResponseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Feedbacks.ErrorReport", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Feedbacks.Feedback", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Arenas.Arena", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Arenas.ArenaType", "ArenaType")
                        .WithMany()
                        .HasForeignKey("ArenaTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Events.Event", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Events.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Structure.Federation", "Federation")
                        .WithMany()
                        .HasForeignKey("FederationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Structure.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.Goal", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Matches.MatchPlayer", "MatchPlayerAutor")
                        .WithMany()
                        .HasForeignKey("MatchPlayerAutorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Matches.MatchPlayer", "MatchPlayerPass1")
                        .WithMany()
                        .HasForeignKey("MatchPlayerPass1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Matches.MatchPlayer", "MatchPlayerPass2")
                        .WithMany()
                        .HasForeignKey("MatchPlayerPass2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Matches.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.Match", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Arenas.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Tournaments.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchEvent", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Matches.MatchEventType", "MatchEventType")
                        .WithMany()
                        .HasForeignKey("MatchEventTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Matches.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchPlayer", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Matches.MatchTeam", "MatchTeam")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("MatchTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Persons.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchReferee", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Matches.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Persons.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.MatchTeam", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Matches.Match", "Match")
                        .WithMany("MatchTeams")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Matches.Violation", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Matches.MatchPlayer", "MatchPlayer")
                        .WithMany()
                        .HasForeignKey("MatchPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Matches.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Matches.ViolationType", "ViolationType")
                        .WithMany()
                        .HasForeignKey("ViolationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.Tournament", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Seasons.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Tournaments.TournamentStatus", "TournamentStatus")
                        .WithMany()
                        .HasForeignKey("TournamentStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentArena", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Arenas.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Tournaments.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentPlayer", b =>
                {
                    b.HasOne("HockeyApp.Models.Persons.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Tournaments.TournamentTeam", "TournamentTeam")
                        .WithMany()
                        .HasForeignKey("TournamentTeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentReferee", b =>
                {
                    b.HasOne("HockeyApp.Models.Persons.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Tournaments.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Games.Tournaments.TournamentTeam", b =>
                {
                    b.HasOne("HockeyApp.Models.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Games.Tournaments.Tournament", "Tournament")
                        .WithMany("TournamentTeams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Geo.City", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Geo.County", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.City", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Geo.Region", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.News.NewsPost", b =>
                {
                    b.HasOne("HockeyApp.Models.News.Category", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.News.Source", "LogoSource")
                        .WithMany()
                        .HasForeignKey("LogoSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Posts.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.News.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Citizenship", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Persons.Person", "Person")
                        .WithMany("Citizenships")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Person", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Personnel", b =>
                {
                    b.HasOne("HockeyApp.Models.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Persons.PersonnelType", "PersonnelType")
                        .WithMany()
                        .HasForeignKey("PersonnelTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Player", b =>
                {
                    b.HasOne("HockeyApp.Models.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Persons.Referee", b =>
                {
                    b.HasOne("HockeyApp.Models.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Persons.RefereeType", "RefereeType")
                        .WithMany()
                        .HasForeignKey("RefereeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.FavoritePost", b =>
                {
                    b.HasOne("HockeyApp.Models.Posts.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.Post", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.PostTag", b =>
                {
                    b.HasOne("HockeyApp.Models.Posts.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Posts.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.PostVote", b =>
                {
                    b.HasOne("HockeyApp.Models.Posts.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.Reply", b =>
                {
                    b.HasOne("HockeyApp.Models.Posts.Reply", "ParentReply")
                        .WithMany()
                        .HasForeignKey("ParentReplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Posts.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Posts.ReplyVote", b =>
                {
                    b.HasOne("HockeyApp.Models.Posts.Reply", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Structure.Conference", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Structure.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Structure.Division", b =>
                {
                    b.HasOne("HockeyApp.Models.Structure.Conference", "Conference")
                        .WithMany("Divisions")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Structure.Federation", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Structure.Federation", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Structure.League", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Teams.Team", b =>
                {
                    b.HasOne("HockeyApp.Models.Games.Arenas.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Structure.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Structure.Federation", "Federation")
                        .WithMany()
                        .HasForeignKey("FederationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Structure.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Geo.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Teams.TeamPersonnel", b =>
                {
                    b.HasOne("HockeyApp.Models.Persons.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Teams.Team", "Team")
                        .WithMany("TeamPersonnels")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Teams.TeamPlayer", b =>
                {
                    b.HasOne("HockeyApp.Models.Persons.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Teams.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Users.Bookmark", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User", "User")
                        .WithMany("Bookmark")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Users.Profile", b =>
                {
                    b.HasOne("HockeyApp.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("HockeyApp.Models.Users.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Users.RoleClaim", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Users.UserClaim", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Users.UserLogin", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Users.UserRole", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HockeyApp.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HockeyApp.Models.Users.UserToken", b =>
                {
                    b.HasOne("HockeyApp.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
