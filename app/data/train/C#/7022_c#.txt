namespace EnumPlusPlus.Tests
{
    using System;
    using Xunit;

    public class IsValidExtensionTests
    {
        [Fact]
        public void IsValidOnInt_NotEnumType_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() =>
            {
                2.IsValid<LookAlike>();
            });
        }

        [Fact]
        public void IsValidOnInt_IsTooLow_ReturnsFalse()
        {
            Assert.False((-1).IsValid<Color>());
        }

        [Fact]
        public void IsValidOnInt_LowestValue_ReturnsTrue()
        {
            Assert.True(0.IsValid<Color>());
        }

        [Fact]
        public void IsValidOnInt_IsValid_ReturnsTrue()
        {
            Assert.True(2.IsValid<Color>());
        }

        [Fact]
        public void IsValidOnInt_HighestValue_ReturnsTrue()
        {
            Assert.True(7.IsValid<Color>());
        }

        [Fact]
        public void IsValidOnInt_IsTooHigh_ReturnsFalse()
        {
            Assert.False(8.IsValid<Color>());
        }

        [Fact]
        public void IsValidOnIntOutResult_NotEnumType_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() =>
            {
                LookAlike result;
                2.IsValid(out result);
            });
        }

        [Fact]
        public void IsValidOnIntOutResult_IsTooLow_ReturnsFalse()
        {
            Color result;
            Assert.False((-1).IsValid(out result));
        }

        [Fact]
        public void IsValidOnIntOutResult_LowestValue_ReturnsTrue()
        {
            Color result;
            Assert.True(0.IsValid(out result));
        }

        [Fact]
        public void IsValidOnIntOutResult_IsValid_ReturnsTrue()
        {
            Color result;
            Assert.True(2.IsValid(out result));
        }

        [Fact]
        public void IsValidOnIntOutResult_HighestValue_ReturnsTrue()
        {
            Color result;
            Assert.True(7.IsValid(out result));
        }

        [Fact]
        public void IsValidOnIntOutResult_IsTooHigh_ReturnsFalse()
        {
            Color result;
            Assert.False(8.IsValid(out result));
        }

        [Fact]
        public void IsValidOnIntOutResult_IsTooLow_OutsDefault()
        {
            Color result;
            (-1).IsValid(out result);
            Assert.Equal(default(Color), result);
        }

        [Fact]
        public void IsValidOnIntOutResult_LowestValue_OutsBlack()
        {
            Color result;
            0.IsValid(out result);
            Assert.Equal(Color.Black, result);
        }

        [Fact]
        public void IsValidOnIntOutResult_IsValid_OutsGreen()
        {
            Color result;
            2.IsValid(out result);
            Assert.Equal(Color.Green, result);
        }

        [Fact]
        public void IsValidOnIntOutResult_HighestValue_OutsWhite()
        {
            Color result;
            7.IsValid(out result);
            Assert.Equal(Color.White, result);
        }

        [Fact]
        public void IsValidOnIntOutResult_IsTooHigh_OutsDefault()
        {
            Color result;
            8.IsValid(out result);
            Assert.Equal(default(Color), result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_ValueNegative1_ReturnsFalse()
        {
            Assert.False((-1).IsValid<Colors>());
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value0_ReturnsTrue()
        {
            Assert.True(0.IsValid<Colors>());
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value2_ReturnsTrue()
        {
            Assert.True(2.IsValid<Colors>());
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value6_ReturnsTrue()
        {
            Assert.True(6.IsValid<Colors>());
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value7_ReturnsTrue()
        {
            Assert.True(7.IsValid<Colors>());
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value8_ReturnsFalse()
        {
            Assert.False(8.IsValid<Colors>());
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_ValueNegative1_OutsDefault()
        {
            Colors result;
            (-1).IsValid(out result);
            Assert.Equal(default(Colors), result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value0_OutsBlack()
        {
            Colors result;
            0.IsValid(out result);
            Assert.Equal(Colors.Black, result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value1_OutsRed()
        {
            Colors result;
            1.IsValid(out result);
            Assert.Equal(Colors.Red, result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value2_OutsGreen()
        {
            Colors result;
            2.IsValid(out result);
            Assert.Equal(Colors.Green, result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value3_OutsRedGreen()
        {
            Colors result;
            3.IsValid(out result);
            Assert.Equal(Colors.Red | Colors.Green, result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value4_OutsBlue()
        {
            Colors result;
            4.IsValid(out result);
            Assert.Equal(Colors.Blue, result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value5_OutsRedBlue()
        {
            Colors result;
            5.IsValid(out result);
            Assert.Equal(Colors.Red | Colors.Blue, result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value6_OutsGreenBlue()
        {
            Colors result;
            6.IsValid(out result);
            Assert.Equal(Colors.Green | Colors.Blue, result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value7_OutsRedGreenBlue()
        {
            Colors result;
            7.IsValid(out result);
            Assert.Equal(Colors.Red | Colors.Green | Colors.Blue, result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value8_OutsDefault()
        {
            Colors result;
            8.IsValid(out result);
            Assert.Equal(default(Colors), result);
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value9_ReturnsFalse()
        {
            Assert.False(9.IsValid<Colors>());
        }

        [Fact]
        public void IsValidOnIntWithFlagsEnum_Value9_OutsDefault()
        {
            Colors result;
            9.IsValid(out result);
            Assert.Equal(default(Colors), result);
        }
    }
}
