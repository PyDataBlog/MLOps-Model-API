using System;
using NUnit.Framework;
using StructureMap;

namespace TinyHandler.Tests
{
    using TinyHandler.Tests.Mocks;
    using TinyHandler.Tests.Mocks.Exceptions;

    [TestFixture]
    public class OnFailSequenceTests
    {
        [Test]
        public void OnFailExecuted()
        {
            // Arrange
            ObjectFactory.Configure(x => x.For<HandlerModule<object>>().Use<TestHandlerModule>());
            ObjectFactory.Configure(x => x.For<HandlerCentral>().Singleton().Use<HandlerCentral>());
            ObjectFactory.Configure(x => x.For<TestStateHolder>().Singleton().Use<TestStateHolder>());
            var handlerCentral = ObjectFactory.Container.GetInstance<HandlerCentral>();
            var state = ObjectFactory.Container.GetInstance<TestStateHolder>();

            handlerCentral.AddProcessBehaviors<NullFailProcessBehavior>();
            handlerCentral.AddOnProcessErrorBehaviors<NullFillOnProcessErrorBehaviour>();

            // Act
            var isFail = false;
            try
            {
                handlerCentral.Process<object>(null);
            }
            catch (ProcessException)
            {
                isFail = true;
            }
            
            // Assert
            Assert.IsTrue(isFail);
            Assert.NotNull(state.Exception);
        }

        [Test]
        public void OnFailExecutedInAddedOrder_FirstTry()
        {
            // Arrange
            ObjectFactory.Configure(x => x.For<HandlerModule<object>>().Use<TestHandlerModule>());
            ObjectFactory.Configure(x => x.For<HandlerCentral>().Singleton().Use<HandlerCentral>());
            ObjectFactory.Configure(x => x.For<TestStateHolder>().Singleton().Use<TestStateHolder>());
            var handlerCentral = ObjectFactory.Container.GetInstance<HandlerCentral>();
            var state = ObjectFactory.Container.GetInstance<TestStateHolder>();

            handlerCentral.AddProcessBehaviors<NullFailProcessBehavior>();
            handlerCentral.AddOnProcessErrorBehaviors<NullFillOnProcessErrorBehaviour>();
            handlerCentral.AddOnProcessErrorBehaviors<NullFailOnProcessErrorBehaviour>();

            // Act
            var isFail = false;
            try
            {
                handlerCentral.Process<object>(null);
            }
            catch (ProcessException)
            {
                isFail = true;
            }

            // Assert
            Assert.IsTrue(isFail);
            Assert.NotNull(state.Exception);
        }

        [Test]
        public void OnFailExecutedInAddedOrder_SecondTry()
        {
            // Arrange
            ObjectFactory.Configure(x => x.For<HandlerModule<object>>().Use<TestHandlerModule>());
            ObjectFactory.Configure(x => x.For<HandlerCentral>().Singleton().Use<HandlerCentral>());
            ObjectFactory.Configure(x => x.For<TestStateHolder>().Singleton().Use<TestStateHolder>());
            var handlerCentral = ObjectFactory.Container.GetInstance<HandlerCentral>();
            var state = ObjectFactory.Container.GetInstance<TestStateHolder>();

            handlerCentral.AddProcessBehaviors<NullFailProcessBehavior>();
            handlerCentral.AddOnProcessErrorBehaviors<NullFillOnProcessErrorBehaviour>();
            handlerCentral.AddOnProcessErrorBehaviors<NullFailOnProcessErrorBehaviour>();

            // Act
            var isFail = false;
            try
            {
                handlerCentral.Process<object>(null);
            }
            catch (ProcessException)
            {
                isFail = true;
            }

            // Assert
            Assert.IsTrue(isFail);
            Assert.NotNull(state.Exception);
        }

        [Test]
        public void OnFailExecutedInAddedOrder_ExecuteTwiceIfAddedTwice()
        {
            // Arrange
            ObjectFactory.Configure(x => x.For<HandlerModule<object>>().Use<TestHandlerModule>());
            ObjectFactory.Configure(x => x.For<HandlerCentral>().Singleton().Use<HandlerCentral>());
            ObjectFactory.Configure(x => x.For<TestStateHolder>().Singleton().Use<TestStateHolder>());
            var handlerCentral = ObjectFactory.Container.GetInstance<HandlerCentral>();
            var state = ObjectFactory.Container.GetInstance<TestStateHolder>();

            handlerCentral.AddProcessBehaviors<NullFailProcessBehavior>();
            handlerCentral.AddOnProcessErrorBehaviors<NullFillOnProcessErrorBehaviour>();
            handlerCentral.AddOnProcessErrorBehaviors<NullFillOnProcessErrorBehaviour>();

            // Act
            var isFail = false;
            try
            {
                handlerCentral.Process<object>(null);
            }
            catch (OnErrorException)
            {
                isFail = true;
            }

            // Assert
            Assert.IsTrue(isFail);
        }
    }
}
