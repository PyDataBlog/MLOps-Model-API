// Decompiled with JetBrains decompiler
// Type: System.Web.Util.Profiler
// Assembly: System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 7E68A73E-4066-4F24-AB0A-F147209F50EC
// Assembly location: C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.Web.dll

using System.Collections;
using System.Runtime;
using System.Web;

namespace System.Web.Util
{
  internal class Profiler
  {
    private int _requestsToProfile;
    private Queue _requests;
    private bool _pageOutput;
    private bool _isEnabled;
    private bool _oldEnabled;
    private bool _localOnly;
    private bool _mostRecent;
    private TraceMode _outputMode;

    internal bool IsEnabled
    {
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] get
      {
        return this._isEnabled;
      }
      set
      {
        this._isEnabled = value;
        this._oldEnabled = value;
      }
    }

    internal bool PageOutput
    {
      get
      {
        if (!this._pageOutput)
          return false;
        if (this._localOnly)
          return HttpContext.Current.Request.IsLocal;
        return true;
      }
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] set
      {
        this._pageOutput = value;
      }
    }

    internal TraceMode OutputMode
    {
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] get
      {
        return this._outputMode;
      }
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] set
      {
        this._outputMode = value;
      }
    }

    internal bool LocalOnly
    {
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] get
      {
        return this._localOnly;
      }
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] set
      {
        this._localOnly = value;
      }
    }

    internal bool MostRecent
    {
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] get
      {
        return this._mostRecent;
      }
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] set
      {
        this._mostRecent = value;
      }
    }

    internal bool IsConfigEnabled
    {
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] get
      {
        return this._oldEnabled;
      }
    }

    internal int RequestsToProfile
    {
      [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")] get
      {
        return this._requestsToProfile;
      }
      set
      {
        if (value > 10000)
          value = 10000;
        this._requestsToProfile = value;
      }
    }

    internal int RequestsRemaining
    {
      get
      {
        return this._requestsToProfile - this._requests.Count;
      }
    }

    internal Profiler()
    {
      this._requestsToProfile = 10;
      this._outputMode = TraceMode.SortByTime;
      this._localOnly = true;
      this._mostRecent = false;
      this._requests = new Queue(this._requestsToProfile);
    }

    internal void Reset()
    {
      this._requests = new Queue(this._requestsToProfile);
      if (this._requestsToProfile != 0)
        this._isEnabled = this._oldEnabled;
      else
        this._isEnabled = false;
    }

    internal void StartRequest(HttpContext context)
    {
      context.Trace.VerifyStart();
    }

    internal void EndRequest(HttpContext context)
    {
      context.Trace.EndRequest();
      if (!this.IsEnabled)
        return;
      lock (this._requests)
      {
        this._requests.Enqueue((object) context.Trace.GetData());
        if (this.MostRecent)
        {
          if (this._requests.Count > this._requestsToProfile)
            this._requests.Dequeue();
        }
      }
      if (this.MostRecent || this._requests.Count < this._requestsToProfile)
        return;
      this.EndProfiling();
    }

    internal void EndProfiling()
    {
      this._isEnabled = false;
    }

    internal IList GetData()
    {
      return (IList) this._requests.ToArray();
    }
  }
}
