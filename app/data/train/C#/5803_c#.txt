using System;
using Pencil.Gaming.Graphics;

namespace RelEnt.OpenGL.Buffer
{
	public class AttributeInfo
	{
		public int Size { get; set; }
		public VertexAttribPointerType Type { get; set; }
		public bool Normalized { get; set; }
		public int Stride { get; set; }
		public int Offset { get; set; }

		/// <summary>
		/// Create a attribute into for a format, specifying all fields in order of OpenGL params.
		/// </summary>
		public AttributeInfo(
			int size,
			VertexAttribPointerType type = VertexAttribPointerType.Float,
			bool normalized = false)
		{
			Size = size;
			Type = type;
			Normalized = normalized;
		}

		public void Setup(Shader.AttributeIdentifier attribute)
		{
			attribute.SetPointer(
				Size,
				Type,
				Normalized,
				Stride,
				Offset);
			attribute.Enabled = true;
		}

		public int BytesPerVertex
		{
			get
			{
				return Size * BytesPerElement;
			}
		}

		public int BytesPerElement
		{
			get
			{
				switch (Type)
				{
					case VertexAttribPointerType.Byte:
						return 1;
					case VertexAttribPointerType.UnsignedByte:
						return 1;
					case VertexAttribPointerType.Short:
						return 2;
					case VertexAttribPointerType.UnsignedShort:
						return 2;
					case VertexAttribPointerType.Int:
						return 4;
					case VertexAttribPointerType.UnsignedInt:
						return 4;
					case VertexAttribPointerType.Float:
						return 4;
					case VertexAttribPointerType.Double:
						return 8;
					case VertexAttribPointerType.HalfFloat:
						return 2;
					default:
						throw new ArgumentOutOfRangeException();
				}
			}
		}
	}
}