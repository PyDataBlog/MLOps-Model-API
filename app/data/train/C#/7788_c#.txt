namespace Ahmedowsky.Core.Extensions
{
    using System;

    public static class EnumExtensions
    {
        public static object GetUnderlyingValue(this Enum @enum)
        {
            var enumType = @enum.GetTypeOfObj();
            var underlyingType = Enum.GetUnderlyingType(@enumType);
            if (underlyingType.IsTypeOf<byte>())
                return @enum.CastObj<byte>();
            if (underlyingType.IsTypeOf<sbyte>())
                return @enum.CastObj<sbyte>();
            if (underlyingType.IsTypeOf<short>())
                return @enum.CastObj<short>();
            if (underlyingType.IsTypeOf<ushort>())
                return @enum.CastObj<ushort>();
            if (underlyingType.IsTypeOf<int>())
                return @enum.CastObj<int>();
            if (underlyingType.IsTypeOf<uint>())
                return @enum.CastObj<uint>();
            if (underlyingType.IsTypeOf<long>())
                return @enum.CastObj<long>();
            if (underlyingType.IsTypeOf<ulong>())
                return @enum.CastObj<ulong>();
            throw new Exception(string.Format("Unknown underlying type of enum. Enum type : ({0}) Underlying Type : ({1})",
                enumType.FullName, underlyingType.FullName));
        }
    }
}