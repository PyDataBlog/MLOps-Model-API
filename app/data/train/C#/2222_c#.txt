//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// Double-derived base class for DomainClass ProductionToolShape
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProductionToolShape.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProductionToolShape.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[DslModeling::DomainObjectId("38a6bf9c-4b83-43e7-b028-30eaa21d1ee8")]
	internal abstract partial class ProductionToolShapeBase : DslDiagrams::NodeShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ProductionToolShape.
		/// </summary>
		public static DslDiagrams::Decorator FindProductionToolShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(2, 0.6);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			outlinePen.Width = 0.03F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 95, 167, 216);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Text brush settings for this shape.
			DslDiagrams::BrushSettings textBrush = new DslDiagrams::BrushSettings();
			textBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, textBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 7/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 8/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("StereotypeDecorator");
			field1.DefaultText = global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetString("ProductionToolShapeStereotypeDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("NameDecorator");
			field2.DefaultText = global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetString("ProductionToolShapeNameDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field2);
			
			DslDiagrams::ImageField field3 = new DslDiagrams::ImageField("IsSatisfyingVariabilityDecorator");
			field3.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetObject("ProductionToolShapeIsSatisfyingVariabilityDecoratorDefaultImage"));
			shapeFields.Add(field3);
			
			DslDiagrams::ImageField field4 = new DslDiagrams::ImageField("IsNotSatisfyingVariabilityDecorator");
			field4.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetObject("ProductionToolShapeIsNotSatisfyingVariabilityDecoratorDefaultImage"));
			shapeFields.Add(field4);
			
			DslDiagrams::ImageField field5 = new DslDiagrams::ImageField("IndicatorBackgroundDecorator");
			field5.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetObject("ProductionToolShapeIndicatorBackgroundDecoratorDefaultImage"));
			shapeFields.Add(field5);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "StereotypeDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.6, 0.2));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.6, 0.05));
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IsSatisfyingVariabilityDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.34, 0.3));
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IsNotSatisfyingVariabilityDecorator");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.34, 0.3));
			decorators.Add(decorator4);
				
			DslDiagrams::ShapeField field5 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IndicatorBackgroundDecorator");
			DslDiagrams::Decorator decorator5 = new DslDiagrams::ShapeDecorator(field5, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.31, -0.01));
			decorators.Add(decorator5);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProductionToolShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38a6bf9c, 0x4b83, 0x43e7, 0xb0, 0x28, 0x30, 0xea, 0xa2, 0x1d, 0x1e, 0xe8);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ProductionToolShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
	/// <summary>
	/// DomainClass ProductionToolShape
	/// Description for NuPattern.Authoring.WorkflowDesign.ProductionToolShape
	/// </summary>
			
	internal partial class ProductionToolShape : ProductionToolShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProductionToolShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProductionToolShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// Double-derived base class for DomainClass ProducedAssetShape
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetShape.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetShape.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[DslModeling::DomainObjectId("a2bcd210-b675-4fac-aa78-d57e942ad65d")]
	internal abstract partial class ProducedAssetShapeBase : DslDiagrams::NodeShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ProducedAssetShape.
		/// </summary>
		public static DslDiagrams::Decorator FindProducedAssetShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.8, 0.6);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			outlinePen.Width = 0.03F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 153, 102, 153);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Text brush settings for this shape.
			DslDiagrams::BrushSettings textBrush = new DslDiagrams::BrushSettings();
			textBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, textBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 7/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 8/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("StereotypeDecorator");
			field1.DefaultText = global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetString("ProducedAssetShapeStereotypeDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("NameDecorator");
			field2.DefaultText = global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetString("ProducedAssetShapeNameDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field2);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "StereotypeDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.34, 0.2));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.34, 0.05));
			decorators.Add(decorator2);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProducedAssetShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2bcd210, 0xb675, 0x4fac, 0xaa, 0x78, 0xd5, 0x7e, 0x94, 0x2a, 0xd6, 0x5d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ProducedAssetShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsFinalColor domain property code
		
		/// <summary>
		/// IsFinalColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsFinalColorDomainPropertyId = new global::System.Guid(0x0ef25a03, 0xabb8, 0x49c9, 0xa8, 0xbc, 0xcd, 0x70, 0x80, 0x55, 0x21, 0x7c);
		
		/// <summary>
		/// Storage for IsFinalColor
		/// </summary>
		private global::System.Drawing.Color isFinalColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("0, 52, 0");
		
		/// <summary>
		/// Gets or sets the value of IsFinalColor domain property.
		/// The color of a deliverable asset.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetShape/IsFinalColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetShape/IsFinalColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "0, 52, 0")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("0ef25a03-abb8-49c9-a8bc-cd708055217c")]
		internal global::System.Drawing.Color IsFinalColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isFinalColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsFinalColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProducedAssetShape.IsFinalColor domain property.
		/// </summary>
		internal sealed partial class IsFinalColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ProducedAssetShapeBase, global::System.Drawing.Color>
		{
			private IsFinalColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProducedAssetShape.IsFinalColor domain property value handler.
			/// </summary>
			public static readonly IsFinalColorPropertyHandler Instance = new IsFinalColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProducedAssetShape.IsFinalColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsFinalColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ProducedAssetShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isFinalColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProducedAssetShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isFinalColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsIntermediateColor domain property code
		
		/// <summary>
		/// IsIntermediateColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIntermediateColorDomainPropertyId = new global::System.Guid(0x4c385efe, 0x5352, 0x4d20, 0x9f, 0xd9, 0xfa, 0x10, 0x59, 0x68, 0x8b, 0xc6);
		
		/// <summary>
		/// Storage for IsIntermediateColor
		/// </summary>
		private global::System.Drawing.Color isIntermediateColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("153, 102, 153");
		
		/// <summary>
		/// Gets or sets the value of IsIntermediateColor domain property.
		/// The color of a intermediate asset.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetShape/IsIntermediateColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetShape/IsIntermediateColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "153, 102, 153")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("4c385efe-5352-4d20-9fd9-fa1059688bc6")]
		internal global::System.Drawing.Color IsIntermediateColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIntermediateColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIntermediateColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProducedAssetShape.IsIntermediateColor domain property.
		/// </summary>
		internal sealed partial class IsIntermediateColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ProducedAssetShapeBase, global::System.Drawing.Color>
		{
			private IsIntermediateColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProducedAssetShape.IsIntermediateColor domain property value handler.
			/// </summary>
			public static readonly IsIntermediateColorPropertyHandler Instance = new IsIntermediateColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProducedAssetShape.IsIntermediateColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIntermediateColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ProducedAssetShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isIntermediateColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProducedAssetShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIntermediateColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass ProducedAssetShape
	/// Description for NuPattern.Authoring.WorkflowDesign.ProducedAssetShape
	/// </summary>
			
	internal partial class ProducedAssetShape : ProducedAssetShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProducedAssetShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProducedAssetShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// Double-derived base class for DomainClass SuppliedAssetShape
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[DslModeling::DomainObjectId("b9afa446-5e10-4f35-9489-7bdd0cf307d7")]
	internal abstract partial class SuppliedAssetShapeBase : DslDiagrams::NodeShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with SuppliedAssetShape.
		/// </summary>
		public static DslDiagrams::Decorator FindSuppliedAssetShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.6);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			outlinePen.Width = 0.03F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 255, 105, 55);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Text brush settings for this shape.
			DslDiagrams::BrushSettings textBrush = new DslDiagrams::BrushSettings();
			textBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, textBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 7/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 8/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("StereotypeDecorator");
			field1.DefaultText = global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetString("SuppliedAssetShapeStereotypeDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("NameDecorator");
			field2.DefaultText = global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetString("SuppliedAssetShapeNameDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field2);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "StereotypeDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.04, 0.2));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.04, 0.05));
			decorators.Add(decorator2);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// SuppliedAssetShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb9afa446, 0x5e10, 0x4f35, 0x94, 0x89, 0x7b, 0xdd, 0x0c, 0xf3, 0x07, 0xd7);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SuppliedAssetShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsUserSuppliedColor domain property code
		
		/// <summary>
		/// IsUserSuppliedColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUserSuppliedColorDomainPropertyId = new global::System.Guid(0x65925450, 0xd8e9, 0x4144, 0xa4, 0xc2, 0xaf, 0xa1, 0x69, 0xb9, 0x6f, 0xff);
		
		/// <summary>
		/// Storage for IsUserSuppliedColor
		/// </summary>
		private global::System.Drawing.Color isUserSuppliedColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("0, 51, 52");
		
		/// <summary>
		/// Gets or sets the value of IsUserSuppliedColor domain property.
		/// The color of a user supplied asset.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/IsUserSuppliedColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/IsUserSuppliedColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "0, 51, 52")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("65925450-d8e9-4144-a4c2-afa169b96fff")]
		internal global::System.Drawing.Color IsUserSuppliedColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUserSuppliedColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUserSuppliedColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SuppliedAssetShape.IsUserSuppliedColor domain property.
		/// </summary>
		internal sealed partial class IsUserSuppliedColorPropertyHandler : DslModeling::DomainPropertyValueHandler<SuppliedAssetShapeBase, global::System.Drawing.Color>
		{
			private IsUserSuppliedColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SuppliedAssetShape.IsUserSuppliedColor domain property value handler.
			/// </summary>
			public static readonly IsUserSuppliedColorPropertyHandler Instance = new IsUserSuppliedColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SuppliedAssetShape.IsUserSuppliedColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUserSuppliedColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(SuppliedAssetShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isUserSuppliedColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SuppliedAssetShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUserSuppliedColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsMaterialColor domain property code
		
		/// <summary>
		/// IsMaterialColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsMaterialColorDomainPropertyId = new global::System.Guid(0x2a0d5d1c, 0x43a9, 0x4891, 0x94, 0x68, 0xa1, 0x0f, 0xdb, 0x38, 0x76, 0xbd);
		
		/// <summary>
		/// Storage for IsMaterialColor
		/// </summary>
		private global::System.Drawing.Color isMaterialColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("255, 105, 55");
		
		/// <summary>
		/// Gets or sets the value of IsMaterialColor domain property.
		/// The color of a supplied material asset.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/IsMaterialColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/IsMaterialColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "255, 105, 55")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("2a0d5d1c-43a9-4891-9468-a10fdb3876bd")]
		internal global::System.Drawing.Color IsMaterialColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isMaterialColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsMaterialColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SuppliedAssetShape.IsMaterialColor domain property.
		/// </summary>
		internal sealed partial class IsMaterialColorPropertyHandler : DslModeling::DomainPropertyValueHandler<SuppliedAssetShapeBase, global::System.Drawing.Color>
		{
			private IsMaterialColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SuppliedAssetShape.IsMaterialColor domain property value handler.
			/// </summary>
			public static readonly IsMaterialColorPropertyHandler Instance = new IsMaterialColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SuppliedAssetShape.IsMaterialColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsMaterialColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(SuppliedAssetShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isMaterialColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SuppliedAssetShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isMaterialColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsUserSuppliedStereotypeText domain property code
		
		/// <summary>
		/// IsUserSuppliedStereotypeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUserSuppliedStereotypeTextDomainPropertyId = new global::System.Guid(0x6154b2ef, 0xa890, 0x45bd, 0xb1, 0x87, 0x41, 0x5b, 0x47, 0x2e, 0xdb, 0x14);
		
		/// <summary>
		/// Storage for IsUserSuppliedStereotypeText
		/// </summary>
		private global::System.String isUserSuppliedStereotypeTextPropertyStorage = "User Supplied Asset";
		
		/// <summary>
		/// Gets or sets the value of IsUserSuppliedStereotypeText domain property.
		/// The stereotype text of a user supplied asset.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/IsUserSuppliedStereotypeText.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/IsUserSuppliedStereotypeText.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue("User Supplied Asset")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("6154b2ef-a890-45bd-b187-415b472edb14")]
		internal global::System.String IsUserSuppliedStereotypeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUserSuppliedStereotypeTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUserSuppliedStereotypeTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SuppliedAssetShape.IsUserSuppliedStereotypeText domain property.
		/// </summary>
		internal sealed partial class IsUserSuppliedStereotypeTextPropertyHandler : DslModeling::DomainPropertyValueHandler<SuppliedAssetShapeBase, global::System.String>
		{
			private IsUserSuppliedStereotypeTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SuppliedAssetShape.IsUserSuppliedStereotypeText domain property value handler.
			/// </summary>
			public static readonly IsUserSuppliedStereotypeTextPropertyHandler Instance = new IsUserSuppliedStereotypeTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SuppliedAssetShape.IsUserSuppliedStereotypeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUserSuppliedStereotypeTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SuppliedAssetShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isUserSuppliedStereotypeTextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SuppliedAssetShapeBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUserSuppliedStereotypeTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsMaterialStereotypeText domain property code
		
		/// <summary>
		/// IsMaterialStereotypeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsMaterialStereotypeTextDomainPropertyId = new global::System.Guid(0x2ff72b1e, 0x258e, 0x4083, 0xa1, 0x8e, 0x17, 0x3c, 0x1d, 0xcc, 0x1f, 0x2a);
		
		/// <summary>
		/// Storage for IsMaterialStereotypeText
		/// </summary>
		private global::System.String isMaterialStereotypeTextPropertyStorage = "Supplied Material Asset";
		
		/// <summary>
		/// Gets or sets the value of IsMaterialStereotypeText domain property.
		/// The stereotype text of a supplied material asset.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/IsMaterialStereotypeText.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/IsMaterialStereotypeText.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue("Supplied Material Asset")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("2ff72b1e-258e-4083-a18e-173c1dcc1f2a")]
		internal global::System.String IsMaterialStereotypeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isMaterialStereotypeTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsMaterialStereotypeTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SuppliedAssetShape.IsMaterialStereotypeText domain property.
		/// </summary>
		internal sealed partial class IsMaterialStereotypeTextPropertyHandler : DslModeling::DomainPropertyValueHandler<SuppliedAssetShapeBase, global::System.String>
		{
			private IsMaterialStereotypeTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SuppliedAssetShape.IsMaterialStereotypeText domain property value handler.
			/// </summary>
			public static readonly IsMaterialStereotypeTextPropertyHandler Instance = new IsMaterialStereotypeTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SuppliedAssetShape.IsMaterialStereotypeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsMaterialStereotypeTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SuppliedAssetShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isMaterialStereotypeTextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SuppliedAssetShapeBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isMaterialStereotypeTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StereotypeText domain property code
		
		/// <summary>
		/// StereotypeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid StereotypeTextDomainPropertyId = new global::System.Guid(0xd3017221, 0x0e65, 0x4fb8, 0xbc, 0x24, 0x5e, 0x72, 0x3e, 0xcf, 0x97, 0x1c);
		
		/// <summary>
		/// Gets or sets the value of StereotypeText domain property.
		/// The text of the stereotype of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/StereotypeText.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape/StereotypeText.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("d3017221-0e65-4fb8-bc24-5e723ecf971c")]
		internal global::System.String StereotypeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return StereotypeTextPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the SuppliedAssetShape.StereotypeText domain property.
		/// </summary>
		internal sealed partial class StereotypeTextPropertyHandler : DslModeling::CalculatedPropertyValueHandler<SuppliedAssetShapeBase, global::System.String>
		{
			private StereotypeTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SuppliedAssetShape.StereotypeText domain property value handler.
			/// </summary>
			public static readonly StereotypeTextPropertyHandler Instance = new StereotypeTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SuppliedAssetShape.StereotypeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StereotypeTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SuppliedAssetShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for StereotypeText because its Kind is
				// set to Calculated. Please provide the GetStereotypeTextValue()
				// method on the domain class.
				return element.GetStereotypeTextValue();
			}
		
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass SuppliedAssetShape
	/// Description for NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape
	/// </summary>
			
	internal partial class SuppliedAssetShape : SuppliedAssetShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SuppliedAssetShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SuppliedAssetShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}

