using System;
using System.Collections.Specialized;
using System.Drawing;
using System.Text;
using System.Collections;

namespace Tools
{
	/// <summary>
	/// Description résumée de RTFBuilder.
	/// </summary>
	public class RTFBuilder
	{
		private StringCollection _fontList;
		private ArrayList _colorList;

		private StringBuilder _header;
		private StringBuilder _content;

		private bool _isBold;
		private bool _isItalic;
		private bool _isUnderline;
		private float _lastFontSize;
		private int _lastColorIndex;
		private int _lastFontIndex;

		public RTFBuilder()
		{
			
			_header = new StringBuilder();
			_content = new StringBuilder();
			_fontList = new StringCollection();
			_colorList = new ArrayList();

			// positionne les valeurs défaut
			Clear();
		}
		public void Clear()
		{
			_header.Length = 0;
			_content.Length = 0;
			
			_fontList.Clear();
			_colorList.Clear();
			_colorList.Add(Color.Black);

			_isBold = false;
			_isItalic = false;
			_isUnderline = false;
			_lastFontSize=-2;
			_lastColorIndex=-2;
			_lastFontIndex=-2;
		}
		public void Append(string txt)
		{
			_content.Append(txt.Replace("\\", "\\\\").Replace("\t", "\\tab ").Replace("{", "\\{").Replace("}", "\\}").Replace("\r\n", "\\par ").Replace("\n", "\\par ").Replace("\r", "\\par "));
		}
        public void AppendLine(string txt)
        {
            _content.Append(txt.Replace("\\", "\\\\").Replace("\t", "\\tab ").Replace("{", "\\{").Replace("}", "\\}").Replace("\r\n", "\\par ").Replace("\n", "\\par ").Replace("\r", "\\par "));
            _content.Append("\\par ");
        }
        public void SetFont(Font font)
		{
			int fontIdx =_fontList.IndexOf(font.Name);
			if (fontIdx == -1)
			{
				_fontList.Add(font.Name);	
				fontIdx = _fontList.Count-1;
			}
			SetItalic(font.Italic);
			SetBold(font.Bold);
			SetUnderline(font.Underline);
			SetSize(font.Size);
			if (_lastFontIndex != fontIdx)
			{
				_lastFontIndex = fontIdx;
				_content.Append("\\f"+fontIdx.ToString()+ " ");
			}
		}
		public void SetItalic(bool isItalic)
		{
			if(isItalic && !_isItalic)
			{
				_content.Append("\\i ");
			}
			else if (!isItalic && _isItalic)
			{
				_content.Append("\\i0 ");
			}

		}
		public void SetBold(bool isBold)
		{
			if(isBold && !_isBold)
			{
				_content.Append("\\b ");
			}
			else if (!isBold && _isBold)
			{
				_content.Append("\\b0 ");
			}
		}
		public void SetUnderline(bool isUnderline)
		{
			if(isUnderline && !_isUnderline)
			{
				_content.Append("\\ul ");
			}
			else if (!isUnderline && _isUnderline)
			{
				_content.Append("\\ulnone ");
			}
		}
		public void SetSize(float fontSize)
		{
			 if(_lastFontSize != fontSize)
			 {
				 _lastFontSize = fontSize;
				 _content.Append("\\fs" + Convert.ToInt32(_lastFontSize*2) + " ");
			 }
		}
		public void SetColor(Color color)
		{
			int colorIdx =_colorList.IndexOf(color);
			if (colorIdx == -1)
			{
				_colorList.Add(color);	
				colorIdx = _colorList.Count-1;
			}
			if (_lastColorIndex != colorIdx)
			{
				_lastColorIndex = colorIdx;
				_content.Append("\\cf"+(colorIdx).ToString()+ " ");
			}
		}

        public void SetBackColor(Color color)
        {
            int colorIdx = _colorList.IndexOf(color);
            if (colorIdx == -1)
            {
                _colorList.Add(color);
                colorIdx = _colorList.Count - 1;
            }
            if (_lastColorIndex != colorIdx)
            {
                _lastColorIndex = colorIdx;
                _content.Append("\\highlight" + (colorIdx).ToString() + " ");
            }
        }

        private void AppendFontDef(StringBuilder dest, int fontIndex, string fontName)
		{
			dest.Append("{\\f");
			dest.Append(fontIndex);
			dest.Append("\\fnil\\fcharset0 ");
			dest.Append(fontName);
			dest.Append(";}");
		}
		private void AppendColorDef(StringBuilder dest,Color c)
		{
			dest.Append("\\red");
			dest.Append(c.R);
			dest.Append("\\green");
			dest.Append(c.G);
			dest.Append("\\blue");
			dest.Append(c.B);
			dest.Append(";");
		}

		private void AppendAllFontDef(StringBuilder dest)
		{
			dest.Append(	"{\\fonttbl" );
			for (int i = 0; i < _fontList.Count; i++)
			{
				AppendFontDef(dest, i, _fontList[i]);
			}
			dest.Append("}\n");	
		}
		private void AppendAllColorDef(StringBuilder dest)
		{
			dest.Append(	"{\\colortbl " );
			for (int i = 0; i < _colorList.Count; i++)
			{
				AppendColorDef(dest, (Color)_colorList[i]);
			}
			dest.Append("}\n");	
		}
		private void BuildHeader(StringBuilder dest)
		{
			dest.Append("{\\rtf1\\ansi\\deff0");
			AppendAllFontDef(dest);
			AppendAllColorDef(dest);
			dest.Append("\\viewkind4\\uc1\\pard\\cf1\\lang1036\\f0\\fs20");
		}
		private void BuildFooter(StringBuilder dest)
		{
			dest.Append("}\n");	
		}
		public override string ToString()
		{
			StringBuilder ret = new StringBuilder();
			BuildHeader(ret);
			ret.Append(_content);
			BuildFooter(ret);
			return ret.ToString();
		}
	}
}
