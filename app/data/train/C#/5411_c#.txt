// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

namespace Kopernicus
{
    namespace MaterialWrapper
    {
        public class PQSProjectionAerialQuadRelative : Material
        {
            // Internal property ID tracking object
            protected class Properties
            {
                // Return the shader for this wrapper
                private const string shaderName = "Terrain/PQS/Sphere Projection SURFACE QUAD (AP) ";
                public static Shader shader
                {
                    get { return Shader.Find (shaderName); }
                }

                // Saturation, default = 1
                public const string saturationKey = "_saturation";
                public int saturationID { get; private set; }

                // Contrast, default = 1
                public const string contrastKey = "_contrast";
                public int contrastID { get; private set; }

                // Colour Unsaturation (A = Factor), default = (1,1,1,0)
                public const string tintColorKey = "_tintColor";
                public int tintColorID { get; private set; }

                // Near Tiling, default = 1000
                public const string texTilingKey = "_texTiling";
                public int texTilingID { get; private set; }

                // Near Blend, default = 0.5
                public const string texPowerKey = "_texPower";
                public int texPowerID { get; private set; }

                // Far Blend, default = 0.5
                public const string multiPowerKey = "_multiPower";
                public int multiPowerID { get; private set; }

                // NearFar Start, default = 2000
                public const string groundTexStartKey = "_groundTexStart";
                public int groundTexStartID { get; private set; }

                // NearFar Start, default = 10000
                public const string groundTexEndKey = "_groundTexEnd";
                public int groundTexEndID { get; private set; }

                // Steep Tiling, default = 1
                public const string steepTilingKey = "_steepTiling";
                public int steepTilingID { get; private set; }

                // Steep Blend, default = 1
                public const string steepPowerKey = "_steepPower";
                public int steepPowerID { get; private set; }

                // Steep Fade Start, default = 20000
                public const string steepTexStartKey = "_steepTexStart";
                public int steepTexStartID { get; private set; }

                // Steep Fade End, default = 30000
                public const string steepTexEndKey = "_steepTexEnd";
                public int steepTexEndID { get; private set; }

                // Deep ground, default = "white" { }
                public const string deepTexKey = "_deepTex";
                public int deepTexID { get; private set; }

                // Deep MT, default = "white" { }
                public const string deepMultiTexKey = "_deepMultiTex";
                public int deepMultiTexID { get; private set; }

                // Deep MT Tiling, default = 1
                public const string deepMultiFactorKey = "_deepMultiFactor";
                public int deepMultiFactorID { get; private set; }

                // Main Texture, default = "white" { }
                public const string mainTexKey = "_mainTex";
                public int mainTexID { get; private set; }

                // Main MT, default = "white" { }
                public const string mainMultiTexKey = "_mainMultiTex";
                public int mainMultiTexID { get; private set; }

                // Main MT Tiling, default = 1
                public const string mainMultiFactorKey = "_mainMultiFactor";
                public int mainMultiFactorID { get; private set; }

                // High Ground, default = "white" { }
                public const string highTexKey = "_highTex";
                public int highTexID { get; private set; }

                // High MT, default = "white" { }
                public const string highMultiTexKey = "_highMultiTex";
                public int highMultiTexID { get; private set; }

                // High MT Tiling, default = 1
                public const string highMultiFactorKey = "_highMultiFactor";
                public int highMultiFactorID { get; private set; }

                // Snow, default = "white" { }
                public const string snowTexKey = "_snowTex";
                public int snowTexID { get; private set; }

                // Snow MT, default = "white" { }
                public const string snowMultiTexKey = "_snowMultiTex";
                public int snowMultiTexID { get; private set; }

                // Snow MT Tiling, default = 1
                public const string snowMultiFactorKey = "_snowMultiFactor";
                public int snowMultiFactorID { get; private set; }

                // Steep Texture, default = "white" { }
                public const string steepTexKey = "_steepTex";
                public int steepTexID { get; private set; }

                // Deep Start, default = 0
                public const string deepStartKey = "_deepStart";
                public int deepStartID { get; private set; }

                // Deep End, default = 0.3
                public const string deepEndKey = "_deepEnd";
                public int deepEndID { get; private set; }

                // Main lower boundary start, default = 0
                public const string mainLoStartKey = "_mainLoStart";
                public int mainLoStartID { get; private set; }

                // Main lower boundary end, default = 0.5
                public const string mainLoEndKey = "_mainLoEnd";
                public int mainLoEndID { get; private set; }

                // Main upper boundary start, default = 0.3
                public const string mainHiStartKey = "_mainHiStart";
                public int mainHiStartID { get; private set; }

                // Main upper boundary end, default = 0.5
                public const string mainHiEndKey = "_mainHiEnd";
                public int mainHiEndID { get; private set; }

                // High lower boundary start, default = 0.6
                public const string hiLoStartKey = "_hiLoStart";
                public int hiLoStartID { get; private set; }

                // High lower boundary end, default = 0.6
                public const string hiLoEndKey = "_hiLoEnd";
                public int hiLoEndID { get; private set; }

                // High upper boundary start, default = 0.6
                public const string hiHiStartKey = "_hiHiStart";
                public int hiHiStartID { get; private set; }

                // High upper boundary end, default = 0.9
                public const string hiHiEndKey = "_hiHiEnd";
                public int hiHiEndID { get; private set; }

                // Snow Start, default = 0.9
                public const string snowStartKey = "_snowStart";
                public int snowStartID { get; private set; }

                // Snow End, default = 1
                public const string snowEndKey = "_snowEnd";
                public int snowEndID { get; private set; }

                // AP Fog Color, default = (0,0,1,1)
                public const string fogColorKey = "_fogColor";
                public int fogColorID { get; private set; }

                // AP Height Fall Off, default = 1
                public const string heightFallOffKey = "_heightFallOff";
                public int heightFallOffID { get; private set; }

                // AP Global Density, default = 1
                public const string globalDensityKey = "_globalDensity";
                public int globalDensityID { get; private set; }

                // AP Atmosphere Depth, default = 1
                public const string atmosphereDepthKey = "_atmosphereDepth";
                public int atmosphereDepthID { get; private set; }

                // FogColorRamp, default = "white" { }
                public const string fogColorRampKey = "_fogColorRamp";
                public int fogColorRampID { get; private set; }

                // PlanetOpacity, default = 1
                public const string planetOpacityKey = "_PlanetOpacity";
                public int planetOpacityID { get; private set; }

                // Singleton instance
                private static Properties singleton = null;
                public static Properties Instance
                {
                    get
                    {
                        // Construct the singleton if it does not exist
                        if(singleton == null)
                            singleton = new Properties();
            
                        return singleton;
                    }
                }

                private Properties()
                {
                    saturationID = Shader.PropertyToID(saturationKey);
                    contrastID = Shader.PropertyToID(contrastKey);
                    tintColorID = Shader.PropertyToID(tintColorKey);
                    texTilingID = Shader.PropertyToID(texTilingKey);
                    texPowerID = Shader.PropertyToID(texPowerKey);
                    multiPowerID = Shader.PropertyToID(multiPowerKey);
                    groundTexStartID = Shader.PropertyToID(groundTexStartKey);
                    groundTexEndID = Shader.PropertyToID(groundTexEndKey);
                    steepTilingID = Shader.PropertyToID(steepTilingKey);
                    steepPowerID = Shader.PropertyToID(steepPowerKey);
                    steepTexStartID = Shader.PropertyToID(steepTexStartKey);
                    steepTexEndID = Shader.PropertyToID(steepTexEndKey);
                    deepTexID = Shader.PropertyToID(deepTexKey);
                    deepMultiTexID = Shader.PropertyToID(deepMultiTexKey);
                    deepMultiFactorID = Shader.PropertyToID(deepMultiFactorKey);
                    mainTexID = Shader.PropertyToID(mainTexKey);
                    mainMultiTexID = Shader.PropertyToID(mainMultiTexKey);
                    mainMultiFactorID = Shader.PropertyToID(mainMultiFactorKey);
                    highTexID = Shader.PropertyToID(highTexKey);
                    highMultiTexID = Shader.PropertyToID(highMultiTexKey);
                    highMultiFactorID = Shader.PropertyToID(highMultiFactorKey);
                    snowTexID = Shader.PropertyToID(snowTexKey);
                    snowMultiTexID = Shader.PropertyToID(snowMultiTexKey);
                    snowMultiFactorID = Shader.PropertyToID(snowMultiFactorKey);
                    steepTexID = Shader.PropertyToID(steepTexKey);
                    deepStartID = Shader.PropertyToID(deepStartKey);
                    deepEndID = Shader.PropertyToID(deepEndKey);
                    mainLoStartID = Shader.PropertyToID(mainLoStartKey);
                    mainLoEndID = Shader.PropertyToID(mainLoEndKey);
                    mainHiStartID = Shader.PropertyToID(mainHiStartKey);
                    mainHiEndID = Shader.PropertyToID(mainHiEndKey);
                    hiLoStartID = Shader.PropertyToID(hiLoStartKey);
                    hiLoEndID = Shader.PropertyToID(hiLoEndKey);
                    hiHiStartID = Shader.PropertyToID(hiHiStartKey);
                    hiHiEndID = Shader.PropertyToID(hiHiEndKey);
                    snowStartID = Shader.PropertyToID(snowStartKey);
                    snowEndID = Shader.PropertyToID(snowEndKey);
                    fogColorID = Shader.PropertyToID(fogColorKey);
                    heightFallOffID = Shader.PropertyToID(heightFallOffKey);
                    globalDensityID = Shader.PropertyToID(globalDensityKey);
                    atmosphereDepthID = Shader.PropertyToID(atmosphereDepthKey);
                    fogColorRampID = Shader.PropertyToID(fogColorRampKey);
                    planetOpacityID = Shader.PropertyToID(planetOpacityKey);
                }
            }

            // Is some random material this material 
            public static bool UsesSameShader(Material m)
            {
                return m.shader.name == Properties.shader.name;
            }

            // Saturation, default = 1
            public float saturation
            {
                get { return GetFloat (Properties.Instance.saturationID); }
                set { SetFloat (Properties.Instance.saturationID, value); }
            }

            // Contrast, default = 1
            public float contrast
            {
                get { return GetFloat (Properties.Instance.contrastID); }
                set { SetFloat (Properties.Instance.contrastID, value); }
            }

            // Colour Unsaturation (A = Factor), default = (1,1,1,0)
            public Color tintColor
            {
                get { return GetColor (Properties.Instance.tintColorID); }
                set { SetColor (Properties.Instance.tintColorID, value); }
            }

            // Near Tiling, default = 1000
            public float texTiling
            {
                get { return GetFloat (Properties.Instance.texTilingID); }
                set { SetFloat (Properties.Instance.texTilingID, value); }
            }

            // Near Blend, default = 0.5
            public float texPower
            {
                get { return GetFloat (Properties.Instance.texPowerID); }
                set { SetFloat (Properties.Instance.texPowerID, value); }
            }

            // Far Blend, default = 0.5
            public float multiPower
            {
                get { return GetFloat (Properties.Instance.multiPowerID); }
                set { SetFloat (Properties.Instance.multiPowerID, value); }
            }

            // NearFar Start, default = 2000
            public float groundTexStart
            {
                get { return GetFloat (Properties.Instance.groundTexStartID); }
                set { SetFloat (Properties.Instance.groundTexStartID, value); }
            }

            // NearFar Start, default = 10000
            public float groundTexEnd
            {
                get { return GetFloat (Properties.Instance.groundTexEndID); }
                set { SetFloat (Properties.Instance.groundTexEndID, value); }
            }

            // Steep Tiling, default = 1
            public float steepTiling
            {
                get { return GetFloat (Properties.Instance.steepTilingID); }
                set { SetFloat (Properties.Instance.steepTilingID, value); }
            }

            // Steep Blend, default = 1
            public float steepPower
            {
                get { return GetFloat (Properties.Instance.steepPowerID); }
                set { SetFloat (Properties.Instance.steepPowerID, value); }
            }

            // Steep Fade Start, default = 20000
            public float steepTexStart
            {
                get { return GetFloat (Properties.Instance.steepTexStartID); }
                set { SetFloat (Properties.Instance.steepTexStartID, value); }
            }

            // Steep Fade End, default = 30000
            public float steepTexEnd
            {
                get { return GetFloat (Properties.Instance.steepTexEndID); }
                set { SetFloat (Properties.Instance.steepTexEndID, value); }
            }

            // Deep ground, default = "white" { }
            public Texture2D deepTex
            {
                get { return GetTexture (Properties.Instance.deepTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.deepTexID, value); }
            }

            public Vector2 deepTexScale
            {
                get { return GetTextureScale (Properties.deepTexKey); }
                set { SetTextureScale (Properties.deepTexKey, value); }
            }

            public Vector2 deepTexOffset
            {
                get { return GetTextureOffset (Properties.deepTexKey); }
                set { SetTextureOffset (Properties.deepTexKey, value); }
            }

            // Deep MT, default = "white" { }
            public Texture2D deepMultiTex
            {
                get { return GetTexture (Properties.Instance.deepMultiTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.deepMultiTexID, value); }
            }

            public Vector2 deepMultiTexScale
            {
                get { return GetTextureScale (Properties.deepMultiTexKey); }
                set { SetTextureScale (Properties.deepMultiTexKey, value); }
            }

            public Vector2 deepMultiTexOffset
            {
                get { return GetTextureOffset (Properties.deepMultiTexKey); }
                set { SetTextureOffset (Properties.deepMultiTexKey, value); }
            }

            // Deep MT Tiling, default = 1
            public float deepMultiFactor
            {
                get { return GetFloat (Properties.Instance.deepMultiFactorID); }
                set { SetFloat (Properties.Instance.deepMultiFactorID, value); }
            }

            // Main Texture, default = "white" { }
            public Texture2D mainTex
            {
                get { return GetTexture (Properties.Instance.mainTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.mainTexID, value); }
            }

            public Vector2 mainTexScale
            {
                get { return GetTextureScale (Properties.mainTexKey); }
                set { SetTextureScale (Properties.mainTexKey, value); }
            }

            public Vector2 mainTexOffset
            {
                get { return GetTextureOffset (Properties.mainTexKey); }
                set { SetTextureOffset (Properties.mainTexKey, value); }
            }

            // Main MT, default = "white" { }
            public Texture2D mainMultiTex
            {
                get { return GetTexture (Properties.Instance.mainMultiTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.mainMultiTexID, value); }
            }

            public Vector2 mainMultiTexScale
            {
                get { return GetTextureScale (Properties.mainMultiTexKey); }
                set { SetTextureScale (Properties.mainMultiTexKey, value); }
            }

            public Vector2 mainMultiTexOffset
            {
                get { return GetTextureOffset (Properties.mainMultiTexKey); }
                set { SetTextureOffset (Properties.mainMultiTexKey, value); }
            }

            // Main MT Tiling, default = 1
            public float mainMultiFactor
            {
                get { return GetFloat (Properties.Instance.mainMultiFactorID); }
                set { SetFloat (Properties.Instance.mainMultiFactorID, value); }
            }

            // High Ground, default = "white" { }
            public Texture2D highTex
            {
                get { return GetTexture (Properties.Instance.highTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.highTexID, value); }
            }

            public Vector2 highTexScale
            {
                get { return GetTextureScale (Properties.highTexKey); }
                set { SetTextureScale (Properties.highTexKey, value); }
            }

            public Vector2 highTexOffset
            {
                get { return GetTextureOffset (Properties.highTexKey); }
                set { SetTextureOffset (Properties.highTexKey, value); }
            }

            // High MT, default = "white" { }
            public Texture2D highMultiTex
            {
                get { return GetTexture (Properties.Instance.highMultiTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.highMultiTexID, value); }
            }

            public Vector2 highMultiTexScale
            {
                get { return GetTextureScale (Properties.highMultiTexKey); }
                set { SetTextureScale (Properties.highMultiTexKey, value); }
            }

            public Vector2 highMultiTexOffset
            {
                get { return GetTextureOffset (Properties.highMultiTexKey); }
                set { SetTextureOffset (Properties.highMultiTexKey, value); }
            }

            // High MT Tiling, default = 1
            public float highMultiFactor
            {
                get { return GetFloat (Properties.Instance.highMultiFactorID); }
                set { SetFloat (Properties.Instance.highMultiFactorID, value); }
            }

            // Snow, default = "white" { }
            public Texture2D snowTex
            {
                get { return GetTexture (Properties.Instance.snowTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.snowTexID, value); }
            }

            public Vector2 snowTexScale
            {
                get { return GetTextureScale (Properties.snowTexKey); }
                set { SetTextureScale (Properties.snowTexKey, value); }
            }

            public Vector2 snowTexOffset
            {
                get { return GetTextureOffset (Properties.snowTexKey); }
                set { SetTextureOffset (Properties.snowTexKey, value); }
            }

            // Snow MT, default = "white" { }
            public Texture2D snowMultiTex
            {
                get { return GetTexture (Properties.Instance.snowMultiTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.snowMultiTexID, value); }
            }

            public Vector2 snowMultiTexScale
            {
                get { return GetTextureScale (Properties.snowMultiTexKey); }
                set { SetTextureScale (Properties.snowMultiTexKey, value); }
            }

            public Vector2 snowMultiTexOffset
            {
                get { return GetTextureOffset (Properties.snowMultiTexKey); }
                set { SetTextureOffset (Properties.snowMultiTexKey, value); }
            }

            // Snow MT Tiling, default = 1
            public float snowMultiFactor
            {
                get { return GetFloat (Properties.Instance.snowMultiFactorID); }
                set { SetFloat (Properties.Instance.snowMultiFactorID, value); }
            }

            // Steep Texture, default = "white" { }
            public Texture2D steepTex
            {
                get { return GetTexture (Properties.Instance.steepTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.steepTexID, value); }
            }

            public Vector2 steepTexScale
            {
                get { return GetTextureScale (Properties.steepTexKey); }
                set { SetTextureScale (Properties.steepTexKey, value); }
            }

            public Vector2 steepTexOffset
            {
                get { return GetTextureOffset (Properties.steepTexKey); }
                set { SetTextureOffset (Properties.steepTexKey, value); }
            }

            // Deep Start, default = 0
            public float deepStart
            {
                get { return GetFloat (Properties.Instance.deepStartID); }
                set { SetFloat (Properties.Instance.deepStartID, value); }
            }

            // Deep End, default = 0.3
            public float deepEnd
            {
                get { return GetFloat (Properties.Instance.deepEndID); }
                set { SetFloat (Properties.Instance.deepEndID, value); }
            }

            // Main lower boundary start, default = 0
            public float mainLoStart
            {
                get { return GetFloat (Properties.Instance.mainLoStartID); }
                set { SetFloat (Properties.Instance.mainLoStartID, value); }
            }

            // Main lower boundary end, default = 0.5
            public float mainLoEnd
            {
                get { return GetFloat (Properties.Instance.mainLoEndID); }
                set { SetFloat (Properties.Instance.mainLoEndID, value); }
            }

            // Main upper boundary start, default = 0.3
            public float mainHiStart
            {
                get { return GetFloat (Properties.Instance.mainHiStartID); }
                set { SetFloat (Properties.Instance.mainHiStartID, value); }
            }

            // Main upper boundary end, default = 0.5
            public float mainHiEnd
            {
                get { return GetFloat (Properties.Instance.mainHiEndID); }
                set { SetFloat (Properties.Instance.mainHiEndID, value); }
            }

            // High lower boundary start, default = 0.6
            public float hiLoStart
            {
                get { return GetFloat (Properties.Instance.hiLoStartID); }
                set { SetFloat (Properties.Instance.hiLoStartID, value); }
            }

            // High lower boundary end, default = 0.6
            public float hiLoEnd
            {
                get { return GetFloat (Properties.Instance.hiLoEndID); }
                set { SetFloat (Properties.Instance.hiLoEndID, value); }
            }

            // High upper boundary start, default = 0.6
            public float hiHiStart
            {
                get { return GetFloat (Properties.Instance.hiHiStartID); }
                set { SetFloat (Properties.Instance.hiHiStartID, value); }
            }

            // High upper boundary end, default = 0.9
            public float hiHiEnd
            {
                get { return GetFloat (Properties.Instance.hiHiEndID); }
                set { SetFloat (Properties.Instance.hiHiEndID, value); }
            }

            // Snow Start, default = 0.9
            public float snowStart
            {
                get { return GetFloat (Properties.Instance.snowStartID); }
                set { SetFloat (Properties.Instance.snowStartID, value); }
            }

            // Snow End, default = 1
            public float snowEnd
            {
                get { return GetFloat (Properties.Instance.snowEndID); }
                set { SetFloat (Properties.Instance.snowEndID, value); }
            }

            // AP Fog Color, default = (0,0,1,1)
            public Color fogColor
            {
                get { return GetColor (Properties.Instance.fogColorID); }
                set { SetColor (Properties.Instance.fogColorID, value); }
            }

            // AP Height Fall Off, default = 1
            public float heightFallOff
            {
                get { return GetFloat (Properties.Instance.heightFallOffID); }
                set { SetFloat (Properties.Instance.heightFallOffID, value); }
            }

            // AP Global Density, default = 1
            public float globalDensity
            {
                get { return GetFloat (Properties.Instance.globalDensityID); }
                set { SetFloat (Properties.Instance.globalDensityID, value); }
            }

            // AP Atmosphere Depth, default = 1
            public float atmosphereDepth
            {
                get { return GetFloat (Properties.Instance.atmosphereDepthID); }
                set { SetFloat (Properties.Instance.atmosphereDepthID, value); }
            }

            // FogColorRamp, default = "white" { }
            public Texture2D fogColorRamp
            {
                get { return GetTexture (Properties.Instance.fogColorRampID) as Texture2D; }
                set { SetTexture (Properties.Instance.fogColorRampID, value); }
            }

            public Vector2 fogColorRampScale
            {
                get { return GetTextureScale (Properties.fogColorRampKey); }
                set { SetTextureScale (Properties.fogColorRampKey, value); }
            }

            public Vector2 fogColorRampOffset
            {
                get { return GetTextureOffset (Properties.fogColorRampKey); }
                set { SetTextureOffset (Properties.fogColorRampKey, value); }
            }

            // PlanetOpacity, default = 1
            public float planetOpacity
            {
                get { return GetFloat (Properties.Instance.planetOpacityID); }
                set { SetFloat (Properties.Instance.planetOpacityID, value); }
            }

            public PQSProjectionAerialQuadRelative() : base(Properties.shader)
            {
            }

            public PQSProjectionAerialQuadRelative(string contents) : base(contents)
            {
                base.shader = Properties.shader;
            }

            public PQSProjectionAerialQuadRelative(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != Properties.shader.name)
                    throw new InvalidOperationException("Type Mismatch: Terrain/PQS/Sphere Projection SURFACE QUAD (AP)  shader required");
            }

        }
    }
}
