// -----------------------------------------------------------------------
// <copyright file="PuntConverter.cs" company="Nathan Miller">
// The MIT License (MIT)
// 
// Copyright(c) 2015 Nathan Miller
// 
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//  
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//  
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
// -----------------------------------------------------------------------
namespace NFLToy.Conversion.Offense
{
    using System;
    using System.Collections.Generic;

    using NFLToy.Data.Events;
    using NFLToy.Data.Events.Offense;
    using NFLToy.GameCenter;

    /// <summary>
    /// Punt converter.
    /// </summary>
    public class PuntConverter : ConverterBase, IEventConverter
    {
        /// <summary>
        /// Set of stats we can convert.
        /// </summary>
        private static readonly StatId[] Supported =
        {
            StatId.OffensePuntingYards,
            StatId.OffensePuntIntoEndZone,
            StatId.OffensePuntWithTouchback,
            StatId.OffensePuntBlock, 
        };

        /// <inheritdoc/>
        public override IEnumerable<StatId> SupportedStats => Supported;

        /// <inheritdoc/>
        public override GameEvent Convert(ConverterData data)
        {
            this.EnsureValid(data, Supported);

            var res = new PuntEvent();

            this.Populate(res, data);

            var playEvent = data.PlayEvent;
            var play = data.Play;

            res.Yards = playEvent.Yards;
            res.Inside20 = this.FindPlayerForStatIds(play, StatId.OffensePuntInside20) != null;
            res.IntoEndZone = this.FindPlayerForStatIds(play, StatId.OffensePuntIntoEndZone) != null;
            res.Touchback = this.FindPlayerForStatIds(play, StatId.OffensePuntWithTouchback) != null;
            res.OutOfBounds = this.FindPlayerForStatIds(play, StatId.OffensePuntOutOfBounds) != null;
            res.Downed = this.FindPlayerForStatIds(play, StatId.OffensePuntDownedNoReturn) != null;
            res.FairCatch = this.FindPlayerForStatIds(play, StatId.OffensePuntFairCatch) != null;

            if (playEvent.StatId == StatId.OffensePuntBlock)
            {
                var blocker = this.FindPlayerForStatIds(play, StatId.DefensePuntBlock);
                if (blocker == null)
                {
                    throw new ArgumentException("Unable to find blocker for blocked punt.");
                }

                res.Blocked = true;
                res.BlockerPlayerId = blocker.PlayerId;
            }

            return res;
        }
    }
}
