using System;
using System.Collections.Generic;
using System.Reflection;

namespace JinianNet.TengSnake
{
    /// <summary>
    /// 类型方法集合
    /// </summary>
    public class MethodCollection : IDictionary<string, ExcuteMethodInfo>
    {

        private Dictionary<string, ExcuteMethodInfo> dictionary;
        /// <summary>
        /// 该集合所对象的基本类型
        /// </summary>
        public Type Type { get; private set; }

        /// <summary>
        /// 类型方法集合
        /// </summary>
        /// <param name="type">类型</param>
        public MethodCollection(Type type)
        {
            if (type == null)
            {
                throw new ArgumentException("\"type\" cannot be null.");
            }
            this.Type = type;
            dictionary = new Dictionary<string, ExcuteMethodInfo>(StringComparer.OrdinalIgnoreCase);
            MethodInfo[] list = type.GetMethods(BindingFlags.Public | BindingFlags.Instance);

            Type methodType = typeof(HttpAttribute);
            Type postType = typeof(HttpPostAttribute);
            Type getType = typeof(HttpGetAttribute);
            bool find;

            ExcuteMethodInfo model;
            HttpAttribute allMethodAttr = (HttpAttribute)System.Attribute.GetCustomAttribute(this.Type, methodType);
            HttpAttribute methodAttr;

            if (allMethodAttr == null)
            {
                allMethodAttr = new HttpAttribute();
            }
            if (System.Attribute.IsDefined(this.Type, postType))
            {
                if ((allMethodAttr.HttpMethod & HttpMethod.POST) == 0)
                {
                    allMethodAttr.HttpMethod = allMethodAttr.HttpMethod | HttpMethod.POST;
                }
            }

            if (System.Attribute.IsDefined(this.Type, getType))
            {
                if ((allMethodAttr.HttpMethod & HttpMethod.GET) == 0)
                {
                    allMethodAttr.HttpMethod = allMethodAttr.HttpMethod | HttpMethod.GET;
                }
            }

            bool defaultFind = (allMethodAttr.HttpMethod & HttpMethod.GET) != 0 || (allMethodAttr.HttpMethod & HttpMethod.POST) != 0;

            foreach (MethodInfo m in list)
            {
                find = defaultFind;

                methodAttr = (HttpAttribute)System.Attribute.GetCustomAttribute(m, methodType);
                if (methodAttr != null)
                {
                    find = true;
                }
                else
                {
                    methodAttr = new HttpAttribute();
                }
                if (System.Attribute.IsDefined(m, postType))
                {
                    find = true;
                    if ((methodAttr.HttpMethod & HttpMethod.POST) == 0)
                    {
                        methodAttr.HttpMethod = methodAttr.HttpMethod | HttpMethod.POST;
                    }
                }

                if (System.Attribute.IsDefined(m, getType))
                {
                    find = true;
                    if ((methodAttr.HttpMethod & HttpMethod.GET) == 0)
                    {
                        methodAttr.HttpMethod = methodAttr.HttpMethod | HttpMethod.GET;
                    }
                }

                if ((methodAttr.HttpMethod & HttpMethod.GET) == 0 && (allMethodAttr.HttpMethod & HttpMethod.GET) != 0)
                {
                    methodAttr.HttpMethod = methodAttr.HttpMethod | HttpMethod.GET;
                }


                if ((methodAttr.HttpMethod & HttpMethod.POST) == 0 && (allMethodAttr.HttpMethod & HttpMethod.POST) != 0)
                {
                    methodAttr.HttpMethod = methodAttr.HttpMethod | HttpMethod.POST;
                }

                if (find)
                {
                    model = new ExcuteMethodInfo();
                    model.HttpMethod = methodAttr.HttpMethod;
                    model.Method = m;
                    this.Add(m.Name, model);
                }
            }
        }
        /// <summary>
        /// 将对象添加到集合
        /// </summary>
        /// <param name="key">键</param>
        /// <param name="value">值</param>
        public void Add(string key, ExcuteMethodInfo value)
        {
            dictionary.Add(key, value);
        }
        /// <summary>
        /// 集合是否包含指定键
        /// </summary>
        /// <param name="key">键</param>
        /// <returns></returns>
        public bool ContainsKey(string key)
        {
            return dictionary.ContainsKey(key);
        }
        /// <summary>
        /// 所有镇集合
        /// </summary>
        public ICollection<string> Keys
        {
            get { return dictionary.Keys; }
        }
        /// <summary>
        /// 移除指定键
        /// </summary>
        /// <param name="key">键</param>
        /// <returns></returns>
        public bool Remove(string key)
        {
            return dictionary.Remove(key);
        }
        /// <summary>
        /// 尝试取值，如果不存在则返回false
        /// </summary>
        /// <param name="key">键</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        public bool TryGetValue(string key, out ExcuteMethodInfo value)
        {
            return dictionary.TryGetValue(key, out value);
        }
        /// <summary>
        /// 获取所有值的集合
        /// </summary>
        public ICollection<ExcuteMethodInfo> Values
        {
            get { return dictionary.Values; }
        }
        /// <summary>
        /// 获取指点定索引的值，如果值不存在，则返回NULL
        /// </summary>
        /// <param name="key">键</param>
        /// <returns></returns>
        public ExcuteMethodInfo this[string key]
        {
            get
            {
                ExcuteMethodInfo info;
                if (TryGetValue(key, out info))
                {
                    return info;
                }

                return null;
            }
            set
            {
                dictionary[key] = value;
            }
        }

        /// <summary>
        /// 添加项
        /// </summary>
        /// <param name="item">键值对</param>
        public void Add(KeyValuePair<string, ExcuteMethodInfo> item)
        {
            dictionary.Add(item.Key, item.Value);
        }

        /// <summary>
        /// 清除集合
        /// </summary>
        public void Clear()
        {
            dictionary.Clear();
        }

        /// <summary>
        /// 是否包含指定项
        /// </summary>
        /// <param name="item">键值对</param>
        /// <returns></returns>
        public bool Contains(KeyValuePair<string, ExcuteMethodInfo> item)
        {
            return dictionary.ContainsKey(item.Key) && dictionary.ContainsValue(item.Value);
        }

        /// <summary>
        /// 从指定索引复制
        /// </summary>
        /// <param name="array"></param>
        /// <param name="arrayIndex"></param>
        public void CopyTo(KeyValuePair<string, ExcuteMethodInfo>[] array, int arrayIndex)
        {
            ((ICollection<KeyValuePair<string, ExcuteMethodInfo>>)dictionary).CopyTo(array, arrayIndex);
        }

        /// <summary>
        /// 当前集合的项的数量
        /// </summary>
        public int Count
        {
            get { return dictionary.Count; }
        }
        /// <summary>
        /// 是否只读
        /// </summary>
        public bool IsReadOnly
        {
            get { return false; }
        }
        /// <summary>
        /// 移除指定项
        /// </summary>
        /// <param name="item">项</param>
        /// <returns></returns>
        public bool Remove(KeyValuePair<string, ExcuteMethodInfo> item)
        {
            return ((ICollection<KeyValuePair<string, ExcuteMethodInfo>>)dictionary).Remove(item);
        }

        /// <summary>
        /// 获取集合的Enumerator
        /// </summary>
        /// <returns></returns>
        public IEnumerator<KeyValuePair<string, ExcuteMethodInfo>> GetEnumerator()
        {
            return dictionary.GetEnumerator();
        }

        /// <summary>
        /// 获取集合的Enumerator
        /// </summary>
        /// <returns></returns>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return dictionary.GetEnumerator();
        }
    }
}
