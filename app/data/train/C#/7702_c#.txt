using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using Moq;
using Tools.Extensions;

namespace Tools.Extensions.Tests.DictionaryExtensions
{
    [TestFixture]
    public class GetValueOrDefaultTests
    {
        Mock<IDictionary<int, int>> _intDictionaryMock;
        int outInt;

        [SetUp]
        public void Setup()
        {
            _intDictionaryMock = new Mock<IDictionary<int, int>>();

            _intDictionaryMock.Setup(x => x.TryGetValue(It.IsNotIn(1), out outInt))
                              .Returns(false);

            outInt = 1;
            List<int> d2 = new List<int>() { 1, 2, 3 };

            _intDictionaryMock.Setup(x => x.TryGetValue(1, out outInt))
                .Returns(true);
        }

        [Test]
        public void GetValueOrDefault_GivesValueIfKeyExists()
        {
            const int key = 1;
            Assert.That(_intDictionaryMock.Object.GetValueOrDefault(key), Is.EqualTo(outInt));

            _intDictionaryMock.Verify(x => x.TryGetValue(key, out outInt), Times.Once);
        }

        [Test]
        public void GetValueOrDefault_GivesDefaultValueIfKeyNotExists()
        {
            const int key = 2;

            Assert.That(_intDictionaryMock.Object.GetValueOrDefault(key), Is.EqualTo(default(int)));

            _intDictionaryMock.Verify(x => x.TryGetValue(key, out outInt), Times.Once);
        }

        [Test]
        public void GetValueOrDefault_GivesEnteredDefaultValueIfKeyNotExists()
        {
            const int defaultValue = 666;
            const int key = 2;
            Assert.That(_intDictionaryMock.Object.GetValueOrDefault(key, defaultValue), Is.EqualTo(defaultValue));

            _intDictionaryMock.Verify(x => x.TryGetValue(key, out outInt), Times.Once);
        }

        [Test]
        public void GetValueOrDefault_RetursNull()
        {
            const int key = 2;

            Assert.That(new Dictionary<int, List<int>>().GetValueOrDefault(key), Is.Null);
            Assert.That(new Dictionary<int, List<int>>() { { 1, new List<int>() } }.GetValueOrDefault(1), Is.Not.Null);
        }

    }
}
