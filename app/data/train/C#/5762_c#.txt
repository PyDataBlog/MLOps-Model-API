using System;
using System.Collections.Generic;
using System.Linq;
using Communist.Search;
using Xunit;

namespace Communist.Tests
{
    public class SearchTests
    {
		[Fact]
		public void SearchCriteria_IsOrdering_False_WhenOrderByAndOrderDirectionNotSet()
		{
			var criteria = new TestSearchCriteria();

			Assert.False(criteria.IsOrdering);
		}

		[Fact]
		public void SearchCriteria_IsOrdering_False_WhenOrderByNotSet()
		{
			var criteria = new TestSearchCriteria()
			{
				OrderByDirection = OrderDirection.ASC
			};

			Assert.False(criteria.IsOrdering);
		}

		[Fact]
		public void SearchCriteria_IsOrdering_False_WhenOrderDirectionNotSet()
		{
			var criteria = new TestSearchCriteria()
			{
				OrderBy = "Property"
			};

			Assert.False(criteria.IsOrdering);
		}

		[Fact]
		public void SearchCriteria_IsOrdering_True_WhenOrderByAndOrderDirectionSet()
		{
			var criteria = new TestSearchCriteria()
			{
				OrderBy = "Property",
				OrderByDirection = OrderDirection.ASC
			};

			Assert.True(criteria.IsOrdering);
		}

		[Fact]
		public void SearchCriteria_IsThenOrdering_False_WhenThenOrderByAndThenOrderDirectionNotSet()
		{
			var criteria = new TestSearchCriteria();

			Assert.False(criteria.IsThenOrdering);
		}

		[Fact]
		public void SearchCriteria_IsThenOrdering_False_WhenThenOrderByNotSet()
		{
			var criteria = new TestSearchCriteria()
			{
				ThenByDirection = OrderDirection.ASC
			};

			Assert.False(criteria.IsThenOrdering);
		}

		[Fact]
		public void SearchCriteria_IsThenOrdering_False_WhenThenOrderDirectionNotSet()
		{
			var criteria = new TestSearchCriteria()
			{
				ThenBy = "Property"
			};

			Assert.False(criteria.IsThenOrdering);
		}

		[Fact]
		public void SearchCriteria_IsThenOrdering_True_WhenThenOrderByAndThenOrderDirectionSet()
		{
			var criteria = new TestSearchCriteria()
			{
				ThenBy = "Property",
				ThenByDirection = OrderDirection.ASC
			};

			Assert.True(criteria.IsThenOrdering);
		}

		[Fact]
		public void SearchCriteria_IsPaging_False_WhenPageAndPageSizeNotSet()
		{
			var criteria = new TestSearchCriteria();

			Assert.False(criteria.IsPaging);
		}

		[Fact]
		public void SearchCriteria_IsPaging_False_WhenPageNotSet()
		{
			var criteria = new TestSearchCriteria()
			{
				PageSize = 1
			};

			Assert.False(criteria.IsPaging);
		}

		[Fact]
		public void SearchCriteria_IsPaging_False_WhenPageSetToZero()
		{
			var criteria = new TestSearchCriteria()
			{
				Page = 0
			};

			Assert.False(criteria.IsPaging);
		}

		[Fact]
		public void SearchCriteria_IsPaging_False_WhenPageSizeNotSet()
		{
			var criteria = new TestSearchCriteria()
			{
				Page = 1
			};

			Assert.False(criteria.IsPaging);
		}

		[Fact]
		public void SearchCriteria_IsPaging_False_WhenPageSizeSetToZero()
		{
			var criteria = new TestSearchCriteria()
			{
				PageSize = 0
			};

			Assert.False(criteria.IsPaging);
		}

		[Fact]
		public void SearchCriteria_IsPaging_True_WhenPageAndPageSizeSetGreaterThanZero()
		{
			var criteria = new TestSearchCriteria()
			{
				Page = 1,
				PageSize = 1
			};

			Assert.True(criteria.IsPaging);
		}

		[Fact]
		public void SearchCriteria_GetPropertyName_ReturnsPropertyNameFromExpression()
		{
			var name = SearchCriteria.GetPropertyName<TestEntity<int>>(x => x.RequiredProperty);
            var name2 = SearchCriteria.GetPropertyName<TestEntity<int>>(x => x.DateTimeProperty);

			Assert.Equal("RequiredProperty", name);
            Assert.Equal("DateTimeProperty", name2);
		}

		[Fact]
		public void SearchCriteria_Queryable_CanOrderAscendingByPropertyName()
		{
			var query = PrepareQueryable();
			var criteria = new TestSearchCriteria() { OrderBy = "Number1", OrderByDirection = OrderDirection.ASC };

			var result = query.OrderBy(criteria).ToList();

			Assert.Equal(20, result.Count);
			Assert.Equal(1, result.First().Number1);
			Assert.Equal(20, result.Last().Number1);
		}

		[Fact]
		public void SearchCriteria_Queryable_CanOrderDescendingByPropertyName()
		{
			var query = PrepareQueryable();
			var criteria = new TestSearchCriteria() { OrderBy = "Number1", OrderByDirection = OrderDirection.DESC };

			var result = query.OrderBy(criteria).ToList();

			Assert.Equal(20, result.Count);
			Assert.Equal(1, result.Last().Number1);
			Assert.Equal(20, result.First().Number1);
		}

		[Fact]
		public void SearchCriteria_Queryable_CanThenOrderAscendingByPropertyName()
		{
			var query = PrepareQueryable();
			var criteria = new TestSearchCriteria() 
			{ 
				OrderBy = "Number2", 
				OrderByDirection = OrderDirection.DESC,
				ThenBy = "Number1",
				ThenByDirection = OrderDirection.ASC
			};

			var result = query.OrderBy(criteria).ToList();

			Assert.Equal(20, result.Count);
			Assert.Equal(16, result.First().Number1);
			Assert.Equal(4, result.First().Number2);
			Assert.Equal(5, result.Last().Number1);
			Assert.Equal(1, result.Last().Number2);
		}

		[Fact]
		public void SearchCriteria_Queryable_CanThenOrderDescendingByPropertyName()
		{
			var query = PrepareQueryable();
			var criteria = new TestSearchCriteria()
			{
				OrderBy = "Number2",
				OrderByDirection = OrderDirection.ASC,
				ThenBy = "Number1",
				ThenByDirection = OrderDirection.DESC
			};

			var result = query.OrderBy(criteria).ToList();

			Assert.Equal(20, result.Count);
			Assert.Equal(5, result.First().Number1);
			Assert.Equal(1, result.First().Number2);
			Assert.Equal(16, result.Last().Number1);
			Assert.Equal(4, result.Last().Number2);
		}

		[Fact]
		public void SearchCriteria_Queryable_CanPage()
		{
			var query = PrepareQueryable();
			var criteria = new TestSearchCriteria() { Page = 2, PageSize = 5 };

			var result = query.Page(criteria).ToList();

			Assert.Equal(5, result.Count);
			Assert.Equal(6, result.First().Number1);
			Assert.Equal(10, result.Last().Number1);
		}

		[Fact]
		public void SearchCriteria_Queryable_ToSearchResult_ConvertsToSearchResultItem()
		{
			var query = PrepareQueryable();
			var criteria = new TestSearchCriteria()
			{
				OrderBy = "Number1",
				OrderByDirection = OrderDirection.ASC,
			};

			var result = query.ToSearchResult(
				criteria,
				x => new TestSearchResultItem
				{
					Id = x.Id,
					Name = x.Name,
					Number1 = x.Number1,
					Number2 = x.Number2
				});

			Assert.Equal(20, result.Count);
			Assert.Equal(20, result.Items.Count());
			Assert.Equal(1, result.Items.First().Number1);
			Assert.Equal(20, result.Items.Last().Number1);
		}

		[Fact]
		public void SearchCriteria_Queryable_ToSearchResult_CountIsCalculatedBeforePaging()
		{
			var query = PrepareQueryable();
			var criteria = new TestSearchCriteria()
			{
				OrderBy = "Number1",
				OrderByDirection = OrderDirection.ASC,
				Page = 1,
				PageSize = 10
			};

			var result = query.ToSearchResult(
				criteria,
				x => new TestSearchResultItem
				{
					Id = x.Id,
					Name = x.Name,
					Number1 = x.Number1,
					Number2 = x.Number2
				});

			Assert.Equal(20, result.Count);
			Assert.Equal(10, result.Items.Count());
		}

		[Fact]
		public void SearchCriteria_Queryable_ToSearchResult_CriteriaIsOriginalCriteria()
		{
			var query = PrepareQueryable();
			var criteria = new TestSearchCriteria()
			{
				OrderBy = "Number1",
				OrderByDirection = OrderDirection.ASC,
				Page = 1,
				PageSize = 10
			};

			var result = query.ToSearchResult(
				criteria,
				x => new TestSearchResultItem
				{
					Id = x.Id,
					Name = x.Name,
					Number1 = x.Number1,
					Number2 = x.Number2
				});

			Assert.Equal(criteria.OrderBy, result.Criteria.OrderBy);
			Assert.Equal(criteria.OrderByDirection, result.Criteria.OrderByDirection);
			Assert.Equal(criteria.Page, result.Criteria.Page);
			Assert.Equal(criteria.PageSize, result.Criteria.PageSize);
		}

		#region " Helpers "

		private IQueryable<TestSearchEntity> PrepareQueryable()
		{
			var list = new List<TestSearchEntity>();

			int num2 = 1;

			for (int i = 1; i <= 20; i++)
			{
				list.Add(new TestSearchEntity
				{
					Id = Guid.NewGuid(),
					Name = $"Entity {i}",
					Number1 = i,
					Number2 = num2
				});
				
				if (i % 5 == 0)
				{
					num2++;
				}
			}

			return list.AsQueryable();
		}

		#endregion
	}
}
