using HtmlAgilityPack;
using WarframeDropRatesDataParser.DropTableParsers;

namespace WarframeDropRatesDataParser
{
    internal sealed class DataFormatBuildDirector
    {
        private readonly Builder _builder;
        private readonly HtmlDocument _dropRatesData;

        public DataFormatBuildDirector(Builder builder, HtmlDocument dropRatesData)
        {
            _builder = builder;
            _dropRatesData = dropRatesData;
        }

        public void BuildData()
        {
            // Missions
            var missionRewardsDropTables = new MissionRewardsDropTableParser().Parse(_dropRatesData);
            _builder.BuildMissionsData(missionRewardsDropTables);

            // Relics
            var relicRewardsDropTables = new RelicRewardsDropTableParser().Parse(_dropRatesData);
            _builder.BuildRelicsData(relicRewardsDropTables);

            // Keys
            var keyRewardsDropTables = new KeyRewardsDropTableParser().Parse(_dropRatesData);
            _builder.BuildKeysData(keyRewardsDropTables);

            // Non-Location-Specific Rewards
            var transientRewardsDropTables = new TransientRewardsDropTableParser().Parse(_dropRatesData);
            _builder.BuildNonLocationSpecificData(transientRewardsDropTables);

            // Sorties
            var sortieRewardsDropTables = new SortieRewardsDropTableParser().Parse(_dropRatesData);
            _builder.BuildSortiesData(sortieRewardsDropTables);

            // Cetus
            var cetusBountyRewardsDropTables = new CetusBountyRewardsDropTableParser().Parse(_dropRatesData);
            _builder.BuildCetusData(cetusBountyRewardsDropTables);

            // Mod Drops by Mod
            var modLocationsDropTables = new ModLocationsDropTableParser().Parse(_dropRatesData);
            _builder.BuildModDropsByModData(modLocationsDropTables);

            // Mod Drops by Enemy
            var enemyModDropTables = new EnemyModDropTableParser().Parse(_dropRatesData);
            _builder.BuildModDropsByEnemyData(enemyModDropTables);

            // Misc Drops by Enemy
            var enemyMiscDropTables = new EnemyMiscDropTableParser().Parse(_dropRatesData);
            _builder.BuildMiscDropsByEnemyData(enemyMiscDropTables);

            // Blueprint Drops by Blueprint
            var blueprintLocationsDropTables = new BlueprintLocationsDropTableParser().Parse(_dropRatesData);
            _builder.BuildBlueprintDropsByBlueprintData(blueprintLocationsDropTables);

            // Blueprint Drops by Enemy
            var enemyBlueprintDropTables = new EnemyBlueprintDropTableParser().Parse(_dropRatesData);
            _builder.BuildBlueprintDropsByEnemyData(enemyBlueprintDropTables);
        }
    }
}