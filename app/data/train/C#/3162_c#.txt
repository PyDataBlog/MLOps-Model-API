using System;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;
using PhoenixDiary.Utilities.AspNetCore.Middleware.EnableRequestRewind;
using PhoenixDiary.Utilities.AspNetCore.Middleware.EnableResponseReading;

namespace PhoenixDiary.Utilities.AspNetCore.Middleware.RequestResponseLogger
{
    public static class RequestResponseLoggerExtensions
    {
        /// <summary>
        /// Adds a middleware to the pipeline which allows request body rewind.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="options">Logger options. Pass null to use defaults</param>
        /// <returns></returns>
        public static IApplicationBuilder UseRequestResponseLogger(this IApplicationBuilder app, [CanBeNull] RequestResponseLoggerOptions options = null)
        {
            if (app == null)
                throw new ArgumentNullException(nameof(app));

            if (options == null)
            {
                options = new RequestResponseLoggerOptions()
                {
                    Filter = new RequestWebApiFilter(),
                    Printer = new RequestResponseLoggerPrinter(app.ApplicationServices.GetRequiredService<ILogger<RequestResponseLoggerPrinter>>())
                };
            }

            // Add middleware to allow response / request reading
            app.UseEnableRequestRewind();
            app.UseEnableResponseReading();

            return app.UseMiddleware<RequestResponseLoggerMiddleware>(options);
        }
    }
}