using System;
using System.Threading.Tasks;
using Bade.IdentityServer.Mappers;
using Bade.IdentityServer.Models.ApiResourceViewModels;
using IdentityServer4.EntityFramework.DbContexts;
using IdentityServer4.EntityFramework.Entities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Bade.IdentityServer.Controllers
{
    public class ApiResourceController : Controller
    {
        private readonly ConfigurationDbContext _context;

        public ApiResourceController(ConfigurationDbContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> Index()
        {
            var list = await _context.ApiResources.ToListAsync();
            var model = list.ToIndexViewModelList();
            return View(model);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(CreateViewModel model)
        {
            if (ModelState.IsValid)
            {
                ApiResource entity = model.ToApiResource();
                _context.Add(entity);
                await _context.SaveChangesAsync();
                return RedirectToAction("Index");
            }

            return View(model);
        }

        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var apiResource = await _context.ApiResources.SingleOrDefaultAsync(m => m.Id == id);
            if (apiResource == null)
            {
                return NotFound();
            }

            return View(apiResource.ToDeleteViewModel());
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var apiResource = await _context.ApiResources.SingleOrDefaultAsync(m => m.Id == id);
            _context.ApiResources.Remove(apiResource);
            await _context.SaveChangesAsync();
            return RedirectToAction("Index");
        }
    }
}