using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Sudemax.Properties;
using Sudemax.FormExtension;
using Sudemax.DataGridViewExtension;

namespace Sudemax
{
    public partial class PeliculaMainForm : Form
    {
        public PeliculaMainForm()
        {
            InitializeComponent();

            Icon = Resources.applicationsMultimedia32x32;
            dataGridView.AutoGenerateColumns = false;

            initPeliculas();
        }

        private BindingList<Pelicula> peliculas;

        private void initPeliculas()
        {
            using (PeliculaRepository repo = new PeliculaRepository())
            {
                peliculas = new BindingList<Pelicula>(repo.FindAll());
            }
            dataGridView.DataSource = peliculas;
        }

        private void onNewPelicula(object sender, EventArgs e)
        {
            using (PeliculaForm form = new PeliculaForm())
            {
                form.Text = "Agregando nueva película";
                form.ConfigureAsDialog();

                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    Pelicula pelicula = form.Pelicula;
                    peliculas.Add(pelicula);
                    dataGridView.SelectLastRowAndScroll();
                }
            }
        }

        private void onEditPelicula(object sender, EventArgs e)
        {
            if (dataGridView.SelectedRows.Count == 1)
            {
                int selectedRowIndex = dataGridView.SelectedRows[0].Index;

                try
                {
                    using (PeliculaRepository repo = new PeliculaRepository())
                    {
                        using (PeliculaForm form = new PeliculaForm())
                        {
                            form.Text = "Editando película";
                            form.ConfigureAsDialog();
                            form.Pelicula = repo.FindById(peliculas[selectedRowIndex].Id);

                            if (form.ShowDialog(this) == DialogResult.OK)
                            {
                                peliculas[selectedRowIndex] = form.Pelicula;
                            }
                        }
                    }
                }
                catch (BusinessEntityRepositoryException ex)
                {
                    this.ShowExceptionMessageBox(ex);
                }
            }
        }

        private void onDeletePelicula(object sender, EventArgs e)
        {
            if (dataGridView.SelectedRows.Count == 1)
            {
                int selectedRowIndex = dataGridView.SelectedRows[0].Index;
                Pelicula pelicula = peliculas[selectedRowIndex];
                string msg = "Está a punto de eliminar \"" + pelicula.Titulo + 
                    "\". ¿Está seguro de querer continuar?";
                DialogResult dialogResult = MessageBox.Show(this, msg, 
                    "Advertencia", MessageBoxButtons.OKCancel, 
                    MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);

                if (dialogResult == DialogResult.OK)
                {
                    try
                    {
                        using (PeliculaRepository repo = new PeliculaRepository())
                        {
                            repo.Delete(pelicula);
                        }
                        peliculas.RemoveAt(selectedRowIndex);

                        MessageBox.Show(this, "\"" + pelicula.Titulo +
                            "\" eliminada correctamente.", "Información",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    catch (BusinessEntityRepositoryException ex)
                    {
                        this.ShowExceptionMessageBox(ex);
                    }
                }
            }
        }

        private void onStartSimpleFind(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char) Keys.Enter
                && !string.IsNullOrWhiteSpace(findToolStripTextBox.Text))
            {
                findToolStripButton.PerformClick();
            }
        }

        private void onFindMenuItemClick(object sender, EventArgs e)
        {
            findToolStripTextBox.Focus();
        }

        private void onSearchClean(object sender, EventArgs e)
        {
            findToolStripTextBox.Clear();
            findToolStripTextBox.Focus();

            initPeliculas();
        }

        private void onAdvancedFind(object sender, EventArgs e)
        {
            this.ShowNotImplementedMessageBox();
        }

        private void onColumnHeaderClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            this.ShowNotImplementedMessageBox();
        }

        private void onSimpleFind(object sender, EventArgs e)
        {
            try
            {
                using (PeliculaRepository repo = new PeliculaRepository())
                {
                    peliculas = new BindingList<Pelicula>(repo.FindByTitulos(findToolStripTextBox.Text));
                }
            }
            catch (BusinessEntityRepositoryException ex)
            {
                this.ShowExceptionMessageBox(ex);
            }

            dataGridView.DataSource = peliculas;
        }
    }
}
