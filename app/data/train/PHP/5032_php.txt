<?php
//Access control
if (!defined('IN_APP_PROJECT')) {
    exit('Access Forbidden');
}

class ErrorHandler {
    protected static $errors = array();
    protected static $displayErrors = true;

    protected $errorNumber;
    protected $errorString;
    protected $errorFile;
    protected $errorLine;
    protected $errorContext;
    protected $stackTrace;
    protected $email;


    public function __construct($errorNumber, $errorString, $errorFile,
                                $errorLine, $errorContext, $email) {
        $this->errorNumber = $errorNumber;
        $this->errorString = $errorString;
        $this->errorFile = $errorFile;
        $this->errorLine = $errorLine;
        $this->errorContext = $errorContext;
        $this->email = $email;
        $this->stackTrace = debug_backtrace();
    }

    /**
     * stablishes the behaviour of the system when an error occurs
     */
    public static function handleError($errorNumber, $errorString, $errorFile,
                                       $errorLine, $errorContext) {
        global $_emergencyEmail;
        $currentError = new ErrorHandler($errorNumber, $errorString, $errorFile,
                                         $errorLine, $errorContext, $_emergencyEmail);
        array_push(ErrorHandler::$errors, $currentError);

        if (ErrorHandler::$displayErrors) {
            $currentError->show();
        } else {
            $currentError->showMessage();
            $currentError->sendEmail($currentError->messageToHTML(), $currentError->toHTML());
        }
    }

    /**
     * shows the error using a custom HTML format that can be edited on the
     * "toHTML()" method
     */
    public function show() {
        echo $this->toHTML();
    }

    /**
     * shows the error using a custom HTML format that can be edited on the
     * "toHTML()" method
     */
    public function showMessage() {
        echo '<pre>' . $this->messageToHTML() . '</pre>';
    }

    /**
     * renders the main error message into HTML format and returns the error text
     */
    public function messageToHTML() {
        return '<b>Error [<em>' . $this->errorNumber . '</em>]:</b> ' .
        $this->errorString;
    }

    /**
     * renders the error into HTML format and returns the error text
     */
    public function toHTML() {
        $str = '<pre>' . $this->MessageToHTML();
        $str .= '<br /><b>File:</b> ' . $this->errorFile;
        $str .= '<br /><b>Line:</b> ' . $this->errorLine;
        $str .= '<br /><b>Context:</b> ' . print_r($this->errorContext, true);
        $str .= '<br /><b>Stack Trace:</b> ' . $this->renderStackTrace();
        $str .= '</pre>';

        return $str;
    }

    /**
     * renders the stacktrace into html
     * @return string
     */
    public function renderStackTrace() {
        $str = '';
        for ($i = 2; $i < count($this->stackTrace); $i++) {
            $entry = $this->stackTrace[$i];
            $str .= '<br />' . $this->printStackEntry($entry);
        }

        return $str;
    }

    /**
     * renders an stackTrace entry
     * @param type $entry
     * @return string
     */
    protected function printStackEntry($entry) {
        $str = '<b>' . basename($entry['file']) . ' </b>[<b>' . $entry['line'] .
            '</b>]</b> in function <b>' . $entry['function'] . '</b>';

        return $str;
    }

    /**
     * turns on the error displaying on the web page
     */
    public static function showErrorsOnRendering() {
        ErrorHandler::$displayErrors = true;
    }

    /**
     * turns off the error displaying on the web page
     */

    public static function hideErrorsOnRendering() {
        ErrorHandler::$displayErrors = false;
    }

    /**
     * This method send an email to the $email direction
     * @since 1.0
     * @return boolean
     * @param object $header
     * @param object $subject
     * @param object $message
     * @param object $file [optional]
     * @param object $line [optional]
     */
    protected function sendEmail($subject, $message, $header = "Content-type: text/html\r\n") {
        return mail($this->email, $subject, $message, $header);
    } // end sendEmail(...)

    /**
     * An alternative to print_r that unlike the original does not use output buffering with
     * the return parameter set to true. Thus, Fatal errors that would be the result of print_r
     * in return-mode within ob handlers can be avoided.
     *
     * Comes with an extra parameter to be able to generate html code. If you need a
     * human readable DHTML-based print_r alternative, see http://krumo.sourceforge.net/
     *
     * Support for printing of objects as well as the $return parameter functionality
     * added by Fredrik WollsÃ©n (fredrik dot motin at gmail), to make it work as a drop-in
     * replacement for print_r (Except for that this function does not output
     * paranthesises around element groups... ;) )
     *
     * Based on return_array() By Matthew Ruivo (mruivo at gmail)
     * (http://se2.php.net/manual/en/function.print-r.php#73436)
     */
    function obsafe_print_r($var, $return = false, $html = false, $level = 0) {
        if ($level >= 90) {
            return;
        }
        $spaces = "";
        $space = $html ? "&nbsp;" : " ";
        $newline = $html ? "<br />" : "\n";
        for ($i = 1; $i <= 6; $i++) {
            $spaces .= $space;
        }
        $tabs = $spaces;
        for ($i = 1; $i <= $level; $i++) {
            $tabs .= $spaces;
        }
        if (is_array($var)) {
            $title = "Array";
        } elseif (is_object($var)) {
            $title = get_class($var) . " Object";
        }
        $output = $title . $newline . $newline;
        foreach ($var as $key => $value) {
            if (is_array($value) || is_object($value)) {
                $level++;
                $value = $this->obsafe_print_r($value, true, $html, $level);
                $level--;
            }
            $output .= $tabs . "[" . $key . "] => " . $value . $newline;
        }
        if ($return) {
            return $output;
        } else {
            echo $output;
        }
    }
}

?>
