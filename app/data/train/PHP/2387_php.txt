<?php

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * App\Entity$EditeurNatureSupport.
 *
 * @ORM\Table(name="editeurnaturesupport")
 * @ORM\Entity(repositoryClass="App\Repository\EditeurNatureSupportRepository")
 */
class EditeurNatureSupport
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var Editeur
     *
     * @ORM\ManyToOne(
     *     targetEntity="App\Entity\Editeur",
     *     inversedBy="editeurNatureSupports"
     * )
     * @ORM\JoinColumn(nullable=false)
     */
    private $editeur;

    /**
     * @var NatureSupport
     *
     * @ORM\ManyToOne(
     *     targetEntity="App\Entity\NatureSupport",
     *     inversedBy="editeurNatureSupports"
     * )
     * @ORM\JoinColumn(
     *     name="naturesupport_id",
     *     referencedColumnName="id",
     *     nullable=false
     * )
     */
    private $natureSupport;

    /**
     * @var Collection
     *
     * @ORM\ManyToMany(
     *     targetEntity="App\Entity\CategorieOeuvre",
     *     inversedBy="editeurNatureSupports"
     * )
     * @ORM\JoinTable(
     *     name="editeurnaturesupport_categorieoeuvre",
     *     joinColumns={
     *         @ORM\JoinColumn(
     *             name="editeurnaturesupport_id",
     *             referencedColumnName="id"
     *         )
     *     },
     *     inverseJoinColumns={
     *         @ORM\JoinColumn(
     *             name="categorieoeuvre_id",
     *             referencedColumnName="id"
     *         )
     *     }
     * )
     */
    private $categoriesOeuvres;

    /**
     * @var Collection
     *
     * @ORM\OneToMany(
     *     targetEntity="App\Entity\Support",
     *     mappedBy="editeurNatureSupport"
     * )
     */
    private $supports;

    /**
     * Constructeur.
     *
     * @param Editeur|null       $editeur
     * @param NatureSupport|null $natureSupport
     */
    public function __construct(
        Editeur $editeur = null,
        NatureSupport $natureSupport = null
    ) {
        $this->editeur = $editeur;
        $this->natureSupport = $natureSupport;
        $this->categoriesOeuvres = new ArrayCollection();
    }

    /**
     * Get id.
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Set editeur.
     *
     * @param Editeur|null $editeur
     */
    public function setEditeur(Editeur $editeur = null): void
    {
        $this->editeur = $editeur;
    }

    /**
     * Get editeur.
     *
     * @return Editeur
     */
    public function getEditeur(): ?Editeur
    {
        return $this->editeur;
    }

    /**
     * Set natureSupport.
     *
     * @param NatureSupport|null $natureSupport
     */
    public function setNatureSupport(NatureSupport $natureSupport = null): void
    {
        $this->editeur = $natureSupport;
    }

    /**
     * Get natureSupport.
     *
     * @return NatureSupport|null
     */
    public function getNatureSupport(): ?NatureSupport
    {
        return $this->natureSupport;
    }

    /**
     * Add categorieOeuvre.
     *
     * @param CategorieOeuvre $categorieOeuvre
     */
    public function addCategorieOeuvre(CategorieOeuvre $categorieOeuvre): void
    {
        if (!$this->categoriesOeuvres->contains($categorieOeuvre)) {
            $this->categoriesOeuvres[] = $categorieOeuvre;
            $categorieOeuvre->addEditeurNatureSupport($this);
        }
    }

    /**
     * Remove categorieOeuvre.
     *
     * @param CategorieOeuvre $categorieOeuvre
     */
    public function removeCategorieOeuvre(CategorieOeuvre $categorieOeuvre): void
    {
        if ($this->categoriesOeuvres->contains($categorieOeuvre)) {
            $this->categoriesOeuvres->removeElement($categorieOeuvre);
            $categorieOeuvre->removeEditeurNatureSupport($this);
        }
    }

    /**
     * Get categoriesOeuvres.
     *
     * @return Collection
     */
    public function getCategoriesOeuvres(): Collection
    {
        return $this->categoriesOeuvres;
    }

    /**
     * Add support.
     *
     * @param Support $support
     */
    public function addSupport(Support $support): void
    {
        if (!$this->supports->contains($support)) {
            $this->supports[] = $support;
        }
        $support->setEditeurNatureSupport($this);
    }

    /**
     * Remove support.
     *
     * @param Support $support
     */
    public function removeSupport(Support $support): void
    {
        if ($this->supports->contains($support)) {
            $this->supports->removeElement($support);
        }
        $support->setEditeurNatureSupport(null);
    }

    /**
     * Get supports.
     *
     * @return Collection
     */
    public function getSupports(): Collection
    {
        return $this->supports;
    }
}
