<?php

/**
 * This file is part of the Wunderlist library.
 *
 * @author     Wilson Pinto <wilsonpinto360@gmail.com>
 * @copyright  2016
 *
 * For the full copyright and license information,
 * please view the LICENSE.md file that was distributed
 * with this source code.
 */

namespace Wilsonpinto\Wunderlist\Tests\endpoints;

use Wilsonpinto\Wunderlist\Tests\WunderlistTrait;

use GuzzleHttp\Psr7\Response;
use Illuminate\Support\Collection;

class FoldersTest extends \PHPUnit_Framework_TestCase
{
    use WunderlistTrait;

    /**
     * Test get all Folders created by the the current User
     *
     * @return void
     */
    public function testFoldersAll()
    {
        $this->mockHttpClient([
            new Response(200, $this->header, $this->jsonFile('folders.json'))
        ]);

        $folders = $this->wunderlist->folders()->all();

        $this->assertEquals(200, $this->wunderlist->getHttpStatusCode());
        $this->assertInstanceOf(Collection::class, $folders);

        $folder = $folders->where('title', '=', 'Friends')->first();
        $this->assertEquals('folder', $folder->type);
        $this->assertEquals('Friends', $folder->title);
    }

    /**
     * Test get a specific Folder
     *
     * @return void
     */
    public function testFoldersFind()
    {
        $this->mockHttpClient([
            new Response(200, $this->header, $this->jsonFile('folders.json')),
            new Response(200, $this->header, $this->jsonFile('folder.json'))
        ]);

        $friendsFolder = $this->wunderlist->folders()->all()->where('title', '=', 'Friends')->first();

        $folder = $this->wunderlist->folders()->find($friendsFolder->id);

        $this->assertEquals(200, $this->wunderlist->getHttpStatusCode());
        $this->assertInstanceOf('stdClass', $folder);
        $this->assertEquals('folder', $folder->type);
        $this->assertEquals('Friends', $folder->title);
    }

    /**
     * Test create, update and delete folder
     *
     * @return void
     */
    public function testFoldersCreateUpdateDelete()
    {
        $this->mockHttpClient([
            new Response(200, $this->header, $this->jsonFile('lists.json')),
            new Response(201, $this->header, $this->jsonFile('folder-create.json')),
            new Response(200, $this->header, $this->jsonFile('folder-update.json')),
            new Response(204)
        ]);

        $lists = $this->wunderlist->lists()->all();
        $list1 = $lists->get(2)->id;
        $list2 = $lists->get(3)->id;

        $newFolder = $this->wunderlist->folders()->create('Charlie The Dog', [$list1, $list2]);
        $this->assertEquals(201, $this->wunderlist->getHttpStatusCode());
        $this->assertInstanceOf('stdClass', $newFolder);
        $this->assertEquals('folder', $newFolder->type);
        $this->assertEquals('Charlie The Dog', $newFolder->title);

        $updatedFolder = $this->wunderlist->folders()->update($newFolder->id, $newFolder->revision, 'Charlie the second', [$list1]);
        $this->assertEquals(200, $this->wunderlist->getHttpStatusCode());
        $this->assertInstanceOf('stdClass', $updatedFolder);
        $this->assertEquals('folder', $updatedFolder->type);
        $this->assertEquals('Charlie the second', $updatedFolder->title);

        $this->wunderlist->folders()->delete($updatedFolder->id, $updatedFolder->revision);
        $this->assertEquals(204, $this->wunderlist->getHttpStatusCode());
    }

    /**
     * Test get Folder Revisions
     *
     * @return void
     */
    public function testFoldersRevisions()
    {
        $this->mockHttpClient([
            new Response(200, $this->header, $this->jsonFile('folder-revisions.json'))
        ]);

        $foldersRevision = $this->wunderlist->folders()->revisions();
        $this->assertEquals(200, $this->wunderlist->getHttpStatusCode());
        $this->assertInstanceOf(Collection::class, $foldersRevision);

        $folder = $foldersRevision->first();
        $this->assertEquals('folder_revision', $folder->type);
    }
}
