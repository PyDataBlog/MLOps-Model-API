<?php
/**
 * Interface to verify results for the tests in codeigniter framework
 * 	if a new migration with the test is created, you must create a new test method
 */
class SigaTest extends PHPUnit_Framework_TestCase
{
	//Contain the expected result with the total failed tests
	private $EXPECTED_RESULT = 0;
	
	/**
	 * Method to create a html file with php code generated by shell script
	 * @param $migration receive a string with the router to the tests
	 */ 
	private function createFileWithHtmlCode($migration)
	{
		//Save string results for shell script, this command execute a 
		//php code and return a html code
		$result = shell_exec("php index.php " . $migration);
		
		//Create a html file
		$myfile = fopen("testfile.html", "w");
		
		//Write shell script result in html created
		fwrite($myfile, $result);
		
		//Close html created
		fclose($myfile);
	}
	
	/**
	 * Method to read a html code and return a specified line with the 
	 * 	number of tests failed
	 * @param $migration receive a string with the router to the tests
	 * @return an integer with the number of failed tests
	 */ 
	private function readLineWithNumbersOfFailedTests($migration)
	{
		//Open a html file with the total error indentified
		$myfile = fopen("testfile.html", "r");
		
		//Read lines before the line with has failed tests
		for($i = 0; $i < 25; $i++) fgets($myfile);
		
		// Save line with total faileds tests
		$errorLine =  fgets($myfile);
		
		//close the file
		fclose($myfile);
		
		//Destroy html file
		unlink("testfile.html");
		
		//convert string to integer and return total failed tests
		return intval($errorLine);
	}
	
	/**
	 * Method to create a html with the php script and read this file to search
	 * 	a total number with errors
	 * @param $migration receive a string with the router to the tests
	 */ 
	private function principalFunction($migration)
	{
		$this->createFileWithHtmlCode($migration);
		
		$this->assertEquals($this->readLineWithNumbersOfFailedTests($migration),$this->EXPECTED_RESULT);
	}

	/* Auth tests */ 
	//@test
	public function testUser()
	{
		$this->principalFunction("user_test");
	}
	
	//@test
	public function testLogin()
	{
		$this->principalFunction("login_test");
	}
	
	//@test
	public function testPermission()
	{
		$this->principalFunction("permission_test");
	}
	
	//@test
	public function testGroup()
	{
		$this->principalFunction("group_test");
	}
	
	//@test
	public function testModule()
	{
		$this->principalFunction("module_test");
	}
	
	/* Program tests */
	//@test
	public function testDepartment()
	{
		$this->principalFunction("department_test");
	}
	
	//@test
	public function testEmployee()
	{
		$this->principalFunction("employee_test");
	}
	
	//@test
	public function testFunction()
	{
		$this->principalFunction("function_test");
	}
	
	//@test
	public function testSector()
	{
		$this->principalFunction("sector_test");
	}
	
	//@test
	public function testCourse()
	{
		$this->principalFunction("course_test");
	}
	
	//@test
	public function testSelectionProcess()
	{
		$this->principalFunction("selection_process_test");
	}
	
	//@test
	public function testSelectionSettings()
	{
		$this->principalFunction("process_settings_test");
	}
	
	//@test
	public function testProcessPhase()
	{
		$this->principalFunction("process_phase_test");
	}
	
	/* Notification tests */
	//@test
	public function testEmailNotification()
	{
		$this->principalFunction("email_notification_test");
	}
	
	//@test
	public function testRestorePasswordEmail()
	{
		$this->principalFunction("restore_password_email_test");
	}
	
	//@test
	public function testEnrolled_student_email()
	{
		$this->principalFunction("enrolled_student_email_test");
	}
	
	//@test
	public function testSecretaryEmailNotification()
	{
		$this->principalFunction("secretary_email_notification_test");
	}
	
	//@test
	public function testBarNotification()
	{
		$this->principalFunction("bar_notification_test");
	}

	/* Student tests */
	//@test
	public function testStudentRegistration()
	{
		$this->principalFunction("student_registration_test");
	}
	
	//@test
	public function testPhone()
	{
		$this->principalFunction("phone_test");
	}

	/* Secretary tests */
	//@test
	public function testClassHour()
	{
		$this->principalFunction("classHour_test");
	}
}
	
?>
