<?php

class SettingController extends BaseController {

	public function getIndex()
	{
		return View::make('setting')->with(array("currentUser" => User::getCurrentUser(),
			"setting" => self::getSetting(),
			"services" => self::getService()
			));
	}

	public function getSetting()
	{
		return DB::table('setting')->get();
	}

	public static function getService()
	{
		return DB::table('services')->get();
	}

	public function editMailServer()
	{
		$password = Input::get('password');
		if(!empty($password)) 
        {
            DB::table('setting')
	            ->where('setting_id', 1)
	            ->update(array(
	            	'mail_server' => Input::get('svName'),
	            	'mail_port' => Input::get('port'),
	            	'mail_fromemail' => Input::get('fromEmail'),
	            	'mail_name' => Input::get('name'),
	            	'mail_username' => Input::get('userName'),
	            	'mail_password' => Input::get('password'),
	            ));
        } else {
	        DB::table('setting')
	            ->where('setting_id', 1)
	            ->update(array(
	            	'mail_server' => Input::get('svName'),
	            	'mail_port' => Input::get('port'),
	            	'mail_fromemail' => Input::get('fromEmail'),
	            	'mail_name' => Input::get('name'),
	            	'mail_username' => Input::get('userName'),
	            ));
		}

        return Redirect::to('setting')->withFlashMessage('Save Success!!');
	}

	public function editPoller()
	{
		// create the validation rules ------------------------
        $rules = array(
            'Check_Interval'    => 'required|integer|between:1,60',
            'Pull_Interval'   => 'required|integer|between:1,60',
            'Threshold_Interval'   => 'required|integer|between:1,60'
        );

        // do the validation ----------------------------------
        $validator = Validator::make(Input::all(), $rules);

        // check if the validator failed -----------------------
        if ($validator->fails()) {
            // get the error messages from the validator
            $messages = $validator->messages();
            // redirect our user back to the form with the errors from the validator
            return Redirect::to('setting')->withErrors($validator);
        } else {
            // validation successful ---------------------------
            DB::table('setting')
	            ->where('setting_id', 1)
	            ->update(array(
	            	'poller_check' => Input::get('Check_Interval'),
	            	'poller_pull' => Input::get('Pull_Interval'),
	            	'poller_threshold' => Input::get('Threshold_Interval')
	            ));

        	return Redirect::to('setting')->withFlashMessage('Save Success!!');
        }
	}

	public function editThreshold()
	{
		// create the validation rules ------------------------
        $rules = array(
            'MinThreshold'    => 'required|integer|between:1,100',
            'MaxThreshold'    => 'required|integer|between:1,100'
        );

        // do the validation ----------------------------------
        $validator = Validator::make(Input::all(), $rules);

        // check if the validator failed -----------------------
        if ($validator->fails()) {
            // get the error messages from the validator
            $messages = $validator->messages();
            // redirect our user back to the form with the errors from the validator
            return Redirect::to('setting')->withErrors($validator);
        } else {
            // validation successful ---------------------------
            DB::table('setting')
	            ->where('setting_id', 1)
	            ->update(array(
	            	'threshold_min' => Input::get('MinThreshold'),
	            	'threshold_max' => Input::get('MaxThreshold')
	            ));

        	return Redirect::to('setting')->withFlashMessage('Save Success!!');
        }
	}

	public function addService()
	{
		// create the validation rules ------------------------
        $rules = array(
            'sName'    => 'required',
            'sPort'    => 'required|integer'
        );

        // do the validation ----------------------------------
        $validator = Validator::make(Input::all(), $rules);

        // check if the validator failed -----------------------
        if ($validator->fails()) {
            // get the error messages from the validator
            $messages = $validator->messages();
            // redirect our user back to the form with the errors from the validator
            return Redirect::to('setting')->withErrors($validator);
        } else {
            // validation successful ---------------------------
            DB::table('services')->insert(
            	array('service_name'  => Input::get('sName'),
                      'service_port'  => Input::get('sPort')));
        	return Redirect::to('setting')->withFlashMessage('Add Success!!');
        }
	}

	public function delService($id)
	{
		DB::table('services')->where('service_id', '=', $id)->delete();
		return Redirect::to('setting')->withFlashMessage('Delete Success!!');
	}

}
