<?php

namespace Omnipay\Bcash\Message;

use Omnipay\Common\Exception\InvalidRequestException;

class FetchTransactionRequest extends AbstractRequest
{
    public function getTransacaoId()
    {
        return $this->getParameter('transacao_id');
    }

    public function setTransacaoId($value)
    {
        return $this->setParameter('transacao_id', $value);
    }

    public function getPedido()
    {
        return $this->getParameter('pedido');
    }

    public function setPedido($value)
    {
        return $this->setParameter('pedido', $value);
    }

    public function validateData()
    {
        $this->validate('token', 'email_loja');

        if (!$this->getTransactionId()) {
            if (!$this->getOrderId()) {
                throw new InvalidRequestException("The transacao_id/id_transacao or pedido/id_pedido is required");
            }
        }
    }

    public function getTransactionId()
    {
        return $this->getTransacaoId() ? $this->getTransacaoId() : $this->getIdTransacao();
    }

    public function getOrderId()
    {
        return $this->getPedido() ? $this->getPedido() : $this->getIdPedido();
    }

    public function getData()
    {
        $this->validateData();

        $data = array();
        $data['id_transacao'] = $this->getTransactionId();
        $data['id_pedido'] = $this->getOrderId();
        $data['codificacao'] = 1; // UTF-8
        $data['tipo_retorno'] = 2; // JSON

        return $data;
    }

    public function getEndpoint()
    {
        return $this->endpoint . 'transacao/consulta/';
    }

    public function getHeaders()
    {
        $email = $this->getEmailLoja();
        $token = $this->getToken();

        return array('Authorization' => 'Basic ' . base64_encode("$email:$token"));
    }

    public function sendData($data)
    {
        $httpResponse = $this->sendRequest($data);

        return new FetchTransactionResponse($this, $httpResponse->json(), $httpResponse->getStatusCode());
    }
}
