<?php

//----------------------------------------------------------------------
//
//  Copyright (C) 2017-2022 Artem Rodygin
//
//  This file is part of eTraxis.
//
//  You should have received a copy of the GNU General Public License
//  along with eTraxis. If not, see <https://www.gnu.org/licenses/>.
//
//----------------------------------------------------------------------

namespace App\MessageHandler\Fields;

use App\Dictionary\FieldType;
use App\Entity\Field;
use App\Entity\Fields\FieldInterface;
use App\Entity\State;
use App\LoginTrait;
use App\Message\Fields\CreateTextFieldCommand;
use App\MessageBus\Contracts\CommandBusInterface;
use App\Repository\Contracts\FieldRepositoryInterface;
use App\TransactionalTestCase;
use Symfony\Component\Messenger\Exception\ValidationFailedException;

/**
 * @internal
 * @covers \App\MessageHandler\Fields\CreateFieldCommandHandler::__invoke
 */
final class CreateTextFieldCommandHandlerTest extends TransactionalTestCase
{
    use LoginTrait;

    private CommandBusInterface      $commandBus;
    private FieldRepositoryInterface $repository;

    protected function setUp(): void
    {
        parent::setUp();

        $this->commandBus = self::getContainer()->get(CommandBusInterface::class);
        $this->repository = $this->doctrine->getRepository(Field::class);
    }

    public function testSuccess(): void
    {
        $this->loginUser('admin@example.com');

        /** @var State $state */
        [/* skipping */ , $state] = $this->doctrine->getRepository(State::class)->findBy(['name' => 'Opened'], ['id' => 'ASC']);

        /** @var Field $field */
        $field = $this->repository->findOneBy(['name' => 'Body']);
        self::assertNull($field);

        $command = new CreateTextFieldCommand($state->getId(), 'Body', FieldType::TEXT, null, true, [
            FieldInterface::LENGTH       => 1000,
            FieldInterface::DEFAULT      => 'Message body',
            FieldInterface::PCRE_CHECK   => '[0-9a-f]+',
            FieldInterface::PCRE_SEARCH  => '(\d{3})-(\d{3})-(\d{4})',
            FieldInterface::PCRE_REPLACE => '($1) $2-$3',
        ]);

        $this->commandBus->handle($command);

        /** @var Field $field */
        $field = $this->repository->findOneBy(['name' => 'Body']);
        self::assertInstanceOf(Field::class, $field);
        self::assertSame(FieldType::TEXT, $field->getType());

        /** @var \App\Entity\Fields\TextField $facade */
        $facade = $field->getFacade();
        self::assertSame(1000, $facade->getParameter(FieldInterface::LENGTH));
        self::assertSame('Message body', $facade->getParameter(FieldInterface::DEFAULT));
        self::assertSame('[0-9a-f]+', $facade->getParameter(FieldInterface::PCRE_CHECK));
        self::assertSame('(\d{3})-(\d{3})-(\d{4})', $facade->getParameter(FieldInterface::PCRE_SEARCH));
        self::assertSame('($1) $2-$3', $facade->getParameter(FieldInterface::PCRE_REPLACE));
    }

    public function testSuccessFallback(): void
    {
        $this->loginUser('admin@example.com');

        /** @var State $state */
        [/* skipping */ , $state] = $this->doctrine->getRepository(State::class)->findBy(['name' => 'Opened'], ['id' => 'ASC']);

        /** @var Field $field */
        $field = $this->repository->findOneBy(['name' => 'Body']);
        self::assertNull($field);

        $command = new CreateTextFieldCommand($state->getId(), 'Body', FieldType::TEXT, null, true, null);

        $this->commandBus->handle($command);

        /** @var Field $field */
        $field = $this->repository->findOneBy(['name' => 'Body']);
        self::assertInstanceOf(Field::class, $field);
        self::assertSame(FieldType::TEXT, $field->getType());

        /** @var \App\Entity\Fields\TextField $facade */
        $facade = $field->getFacade();
        self::assertSame(10000, $facade->getParameter(FieldInterface::LENGTH));
        self::assertNull($facade->getParameter(FieldInterface::DEFAULT));
        self::assertNull($facade->getParameter(FieldInterface::PCRE_CHECK));
        self::assertNull($facade->getParameter(FieldInterface::PCRE_SEARCH));
        self::assertNull($facade->getParameter(FieldInterface::PCRE_REPLACE));
    }

    public function testDefaultValueLength(): void
    {
        $this->expectException(ValidationFailedException::class);

        $this->loginUser('admin@example.com');

        /** @var State $state */
        [/* skipping */ , $state] = $this->doctrine->getRepository(State::class)->findBy(['name' => 'Opened'], ['id' => 'ASC']);

        /** @var Field $field */
        $field = $this->repository->findOneBy(['name' => 'Body']);
        self::assertNull($field);

        $command = new CreateTextFieldCommand($state->getId(), 'Body', FieldType::TEXT, null, true, [
            FieldInterface::LENGTH  => 10,
            FieldInterface::DEFAULT => 'Message body',
        ]);

        try {
            $this->commandBus->handle($command);
        }
        catch (ValidationFailedException $exception) {

            self::assertSame('Default value should not be longer than 10 characters.', $exception->getViolations()->get(0)->getMessage());

            throw $exception;
        }
    }
}
