<?php

/*
 * This file is part of the Persian Framework.
 *
 * (c) Farhad Zandmoghadam <farhad.pd@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Core\MVC\Routing;

use Core\PF\Exception\RoutingException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Matcher\UrlMatcher;
use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\RouteCollection;
use Symfony\Component\Routing\Route;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;

class Router
{
	/**
	 * private (string) $_controller, save controller name
	 */
	private $_controller;


	private $routes;

	/**
	 * private (string) $_method, save action name
	 */
	private $_method;

	public function __construct()
	{
		$routesResource = include ROOT_DIR.'/application/Routes.php';
		$this->routes = $routesResource;


		$default_url = $_SERVER['PHP_SELF'];
		$default_url = explode('.php/', $default_url);
		$default_url[1] = isset($default_url[1]) ? $default_url[1] : '';


		$context = new RequestContext();
		// this is optional and can be done without a Request instance
		$context->fromRequest(Request::createFromGlobals());
		$matcher = new UrlMatcher($this->routes, $context);
		$parameters = $matcher->match('/'.chop($default_url[1], '/'));

		$parameter = array();

		if(!isset($parameters['_controller'])) {
			throw new RoutingException('_controller parameter in routes not exists');
		}

		list($getController, $getMethod) = split(':', $parameters['_controller']);

		$this->_controller = ucfirst($getController);
		$this->_method     = ucfirst($getMethod);

		if(count($parameters) > 2) {
			unset($parameters['_controller']);
			unset($parameters['_rout']);

			foreach($parameters as $key => $value) {
				$parameter[] =  $value;
			}
		}

		$this->_parameter = $parameter;


		// check routes pattern exists

	}

	/**
	 * Get Controller Parameter
	 *
	 * @return String
	 */
	protected function getController()
	{
		return $this->_controller;
	}

	/**
	 * Get Called action
	 *
	 * @return String
	 *
	 */
	protected function getMethod()
	{
		return $this->_method;
	}

	/**
	 * Get Called  actions Arguments
	 *
	 * @return Array
	 *
	 */
	protected function getParameter()
	{
		return $this->_parameter;
	}
}