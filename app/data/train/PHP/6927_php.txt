<?php

namespace AppBundle\EventListener;

use Symfony\Component\HttpKernel\Event\GetResponseEvent;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class LocaleListener implements EventSubscriberInterface
{
    private $defaultLocale;

    public function __construct($defaultLocale, $configLocales)
    {
        $this->defaultLocale = $defaultLocale;
        $this->configLocales = $configLocales;
    }

    public function onKernelRequest(GetResponseEvent $event)
    {
        $request = $event->getRequest();
        if (!$locale = $request->attributes->get('_locale')) {
            // if no explicit locale has been set on this request, use one from the session
            if (!$locale = $request->getSession()->get('_locale')) {
                // if not found use browser preferred locale
                $locale = $request->getPreferredLanguage();
            }
            // if not found in config locales array try to use more generic variant
            if(!isset($this->configLocales[$locale])) {
                $locale = explode('_', $locale)[0];
            }
        }
        // if not found in config fallback to default locale
        if(!isset($this->configLocales[$locale])) {
            $locale = $this->defaultLocale;
        }
        $request->getSession()->set('_locale', $locale);
        $request->setLocale($locale);
    }

    public static function getSubscribedEvents()
    {
        return array(
            // must be registered after the default Locale listener
            KernelEvents::REQUEST => array(array('onKernelRequest', 15)),
        );
    }
}