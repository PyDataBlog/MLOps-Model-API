<?php

namespace Core\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation as JMS;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * @ORM\Entity
 * @ORM\Table(name="google_accounts", indexes={@ORM\Index(columns={"user_id"}), @ORM\Index(columns={"followers_count"})})
 * @UniqueEntity(
 *     fields={"socialAccountId"},
 *     message="errors.social_account_exist"
 * )
 *
 * @JMS\ExclusionPolicy("all")
 */
class GoogleAccount implements SocialAccountInterface
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     *
     * @JMS\Expose
     */
    protected $id;

    /**
     * @ORM\OneToOne(targetEntity="Core\UserBundle\Entity\User", inversedBy="googleAccount")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id", nullable=true)
     */
    protected $user;

    /**
     * @ORM\Column(type="string")
     * @Assert\NotBlank(message="errors.global.not_blank")
     *
     * @JMS\Groups({"OnlyForAdmin"})
     * @JMS\Expose
     */
    protected $name;

    /**
     * @ORM\Column(type="string", unique=true)
     * @Assert\NotBlank(message="errors.global.not_blank")
     *
     * @JMS\Groups({"OnlyForAdmin"})
     * @JMS\Expose
     */
    protected $email;

    /**
     * @ORM\Column(type="string")
     * @Assert\NotBlank(message="errors.global.not_blank")
     *
     * @JMS\Groups({"OnlyForAdmin"})
     * @JMS\Expose
     */
    protected $language;

    /**
     * @ORM\Column(name="social_account_id", type="string", unique=true)
     * @Assert\NotBlank(message="errors.global.not_blank")
     *
     * @JMS\Groups({"OnlyForAdmin"})
     * @JMS\Expose
     */
    protected $socialAccountId;

    /**
     * @ORM\Column(name="followers_count", type="integer")
     * @Assert\NotBlank(message="errors.global.not_blank")
     *
     * @JMS\Expose
     */
    protected $followersCount;

    /**
     * @ORM\Column(name="youtube_followers_count", type="integer", nullable=true)
     *
     * @JMS\Expose
     */
    protected $youtubeFollowersCount;

    /**
     * @ORM\Column(name="created_at", type="datetime")
     * @Assert\NotBlank(message="errors.global.not_blank")
     * @Assert\DateTime
     *
     * @JMS\Groups({"OnlyForAdmin"})
     * @JMS\Expose
     */
    protected $createdAt;

    /**
     * @ORM\Column(name="updated_at", type="datetime")
     * @Assert\NotBlank(message="errors.global.not_blank")
     * @Assert\DateTime
     *
     * @JMS\Groups({"OnlyForAdmin"})
     * @JMS\Expose
     */
    protected $updatedAt;

    /**
     * @ORM\Column(name="youtube_updated_at", type="datetime", nullable=true)
     * @Assert\DateTime
     *
     * @JMS\Groups({"OnlyForAdmin"})
     * @JMS\Expose
     */
    protected $youtubeUpdatedAt;

    public function __construct()
    {
        $this->createdAt = new \DateTime();
    }

    /**
     * Get id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name.
     *
     * @param string $name
     *
     * @return GoogleAccount
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set email.
     *
     * @param string $email
     *
     * @return GoogleAccount
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set language.
     *
     * @param string $language
     *
     * @return GoogleAccount
     */
    public function setLanguage($language)
    {
        $this->language = $language;

        return $this;
    }

    /**
     * Get language.
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set socialAccountId.
     *
     * @param string $socialAccountId
     *
     * @return GoogleAccount
     */
    public function setSocialAccountId($socialAccountId)
    {
        $this->socialAccountId = $socialAccountId;

        return $this;
    }

    /**
     * Get socialAccountId.
     *
     * @return string
     */
    public function getSocialAccountId()
    {
        return $this->socialAccountId;
    }

    /**
     * Set followersCount.
     *
     * @param int $followersCount
     *
     * @return GoogleAccount
     */
    public function setFollowersCount($followersCount)
    {
        $this->followersCount = $followersCount;

        return $this;
    }

    /**
     * Get followersCount.
     *
     * @return int
     */
    public function getFollowersCount()
    {
        return $this->followersCount;
    }

    /**
     * Set createdAt.
     *
     * @param \DateTime $createdAt
     *
     * @return GoogleAccount
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt.
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set user.
     *
     * @param \Core\UserBundle\Entity\User $user
     *
     * @return GoogleAccount
     */
    public function setUser(\Core\UserBundle\Entity\User $user = null)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user.
     *
     * @return \Core\UserBundle\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Set youtubeFollowersCount.
     *
     * @param int $youtubeFollowersCount
     *
     * @return GoogleAccount
     */
    public function setYoutubeFollowersCount($youtubeFollowersCount)
    {
        $this->youtubeFollowersCount = $youtubeFollowersCount;

        return $this;
    }

    /**
     * Get youtubeFollowersCount.
     *
     * @return int
     */
    public function getYoutubeFollowersCount()
    {
        return $this->youtubeFollowersCount;
    }

    /**
     * Set updatedAt.
     *
     * @param \DateTime $updatedAt
     *
     * @return FacebookAccount
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt.
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Set youtubeUpdatedAt.
     *
     * @param \DateTime $youtubeUpdatedAt
     *
     * @return FacebookAccount
     */
    public function setYoutubeUpdatedAt($youtubeUpdatedAt)
    {
        $this->youtubeUpdatedAt = $youtubeUpdatedAt;

        return $this;
    }

    /**
     * Get youtubeUpdatedAt.
     *
     * @return \DateTime
     */
    public function getYoutubeUpdatedAt()
    {
        return $this->youtubeUpdatedAt;
    }
}
