<?php

namespace BackendBundle\Controller;

use Symfony\Component\Form\Extension\Core\Type;
use CentraleReferencementBundle\Entity\Contact;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;

/**
 * Article controller.
 *
 * @Route("/contact")
 */
class ContactController extends Controller
{
    /**
     * Lists all contact entities.
     *
     * @Route("/")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $contacts = $em->getRepository('CentraleReferencementBundle:Contact')->findBackendContact();

        $deleteForms = array();

        foreach ($contacts as $contact) {
            $deleteForms[$contact->getId()] = $this->createDeleteForm($contact)->createView();
        }

        return $this->render('@Backend/contact/show.html.twig', array(
            'contacts' => $contacts,
            'delete_forms' => $deleteForms,
        ));
    }


    /**
     * Creates a form to delete a contact entity.
     *
     * @param Contact $contact The contact entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Contact $contact)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('backend_contact_delete', array('id' => $contact->getId())))
            ->setMethod('DELETE')
            ->getForm();
    }

    /**
     * @Route("/new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $contact = new Contact();
        $form = $this->createForm('CentraleReferencementBundle\Form\ContactType', $contact);

        $form
            ->add('nom')
            ->add('prenom')
            ->add('email', Type\EmailType::class)
            ->add('telephone')
            ->add('message', Type\HiddenType::class)
            ->add('envoyer', Type\SubmitType::class);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();

            $contact->setTypeContact('contactBack');

            $nom = $contact->getNom();
            $prenom = $contact->getPrenom();

            $em->persist($contact);
            $em->flush();

            $request->getSession()->getFlashBag()
                ->add('notice_contact', "Le contact $nom $prenom a bien été créé !");

            return $this->render('@Backend/contact/new.html.twig', array(
                'form' => $form->createView(),
            ));

        }

        return $this->render('@Backend/contact/new.html.twig', array(
            'contact' => $contact,
            'form' => $form->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing contact entity.
     *
     * @Route("{id}/edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Contact $contact)
    {
        $editForm = $this->createForm('CentraleReferencementBundle\Form\ContactType', $contact);

        $editForm
            ->add('nom')
            ->add('prenom')
            ->add('email', Type\EmailType::class)
            ->add('telephone')
            ->add('message', Type\HiddenType::class)
            ->add('envoyer', Type\SubmitType::class);

        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('backend_contact_index');
        }

        return $this->render('@Backend/contact/edit.html.twig', array(
            'contact' => $contact,
            'form' => $editForm->createView()
        ));
    }

    /**
     * Deletes a contact entity.
     *
     * @Route("/{id}")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Contact $contact)
    {
        $form = $this->createDeleteForm($contact);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($contact);
            $em->flush($contact);
        }
        return $this->redirectToRoute('backend_contact_index');
    }


}
