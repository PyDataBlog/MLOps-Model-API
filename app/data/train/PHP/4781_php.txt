<?php
namespace Zazzam\Sapa\Domain\Model;

/*                                                                        *
 * This script belongs to the TYPO3 Flow package "Zazzam.Sapa".           *
 *                                                                        *
 *                                                                        */

use TYPO3\Flow\Annotations as Flow;
use Doctrine\ORM\Mapping as ORM;
use Zazzam\Sapa\Domain\Model\User\Specialist;
use Zazzam\Sapa\Domain\Model\Request;
use Doctrine\Common\Collections\ArrayCollection;
use DateTime;

/**
 * @Flow\Entity
 */
class Queue {

    /**
     * @var string
     * @Flow\Validate(type="StringLength", options={ "minimum"=3, "maximum"=128 })
     * @Flow\Validate(type="NotEmpty")
     */
    protected $name;

    /**
     * @var string
     * @ORM\Column(nullable=true)
     */
    protected $description;

    /**
     * @var \Doctrine\Common\Collections\Collection<\Zazzam\Sapa\Domain\Model\User\Specialist>
     * @ORM\ManyToMany(mappedBy="queues", cascade={"persist"})
     */
    protected $responsibleUsers;

    /**
     * @var \Doctrine\Common\Collections\Collection<\Zazzam\Sapa\Domain\Model\Request>
     * @ORM\ManyToMany(mappedBy="queues", cascade={"persist"})
     * @ORM\OrderBy({"updatedAt" = "DESC"})
     */
    protected $requests;

    /**
     * @var \Zazzam\Sapa\Domain\Model\Request
     * @Flow\Transient
     */
    protected $currentRequest;


    public function __construct() {
        $this->responsibleUsers = new \Doctrine\Common\Collections\ArrayCollection();
        $this->requests = new \Doctrine\Common\Collections\ArrayCollection();
    }


    /**
     * @param string $name
     * @return void
     */
    public function setName($name) {
        $this->name = $name;
    }

    /**
     * @return string
     */
    public function getName() {
        return $this->name;
    }

    /**
     * @param string $description
     * @return void
     */
    public function setDescription($description) {
        $this->description = $description;
    }

    /**
     * @return string
     */
    public function getDescription() {
        return $this->description;
    }

    /**
     * @param ArrayCollection $users
     * @return void
     */
    public function setResponsibleUsers(ArrayCollection $users) {
        $this->responsibleUsers = $users;
        foreach($users as $user) {
            $user->addQueue($this);
        }
    }

    /**
     * @param Specialist $user
     * @return void
     */
    public function addResponsibleUser(Specialist $user) {
        $user->addQueue($this);
        if(!$this->responsibleUsers->contains($user)) {
            $this->responsibleUsers->add($user);
        }
    }

    /**
     * @return ArrayCollection
     */
    public function getResponsibleUsers() {
        return $this->responsibleUsers;
    }

    /**
     * @param Specialist $user
     * @return void
     */
    public function removeResponsibleUser(Specialist $user) {
        $user->removeQueue($this);
        $this->responsibleUsers->removeElement($user);
    }

    /**
     * @param Request $request
     * @return void
     */
    public function addRequest(Request $request) {
        if(!$this->requests->contains($request)) {
            $this->requests->add($request);
        }
        $request->addQueue($this);
    }

    /**
     * @return ArrayCollection
     */
    public function getRequests() {
        return $this->requests;
    }

    /**
     * @return Request
     */
    public function getFirstRequest() {
        return $this->requests->first();
    }

    /**
     * @param \Zazzam\Sapa\Domain\Model\Request $request
     */
    public function setCurrentRequest(Request $request) {
        $this->currentRequest = $request;
    }

    /**
     * @return \Zazzam\Sapa\Domain\Model\Request
     */
    public function getPreviousRequest() {
        $currentIndex = $this->requests->indexOf($this->currentRequest);
        if(isset($this->requests[$currentIndex - 1])) {
            return $this->requests[$currentIndex - 1];
        }
    }

    /**
     * @return \Zazzam\Sapa\Domain\Model\Request
     */
    public function getNextRequest() {
        $currentIndex = $this->requests->indexOf($this->currentRequest);
        if(isset($this->requests[$currentIndex + 1])) {
            return $this->requests[$currentIndex + 1];
        }
    }

    /**
     * @param Request $request
     * @return void
     */
    public function removeRequest(\Zazzam\Sapa\Domain\Model\Request $request) {
        $this->requests->removeElement($request);
        $request->removeQueue($this);
    }

    /**
     * @return DateTime
     */
    public function getUpdatedAt() {
        if($this->requests->count() > 0) {
            return $this->requests->first()->getUpdatedAt();
        }
        else {
            return Null;//new DateTime('1970-01-01');
        }
    }

}