<?php
    /**
     * Insert Class
     *
     * @author    Mahsum UREBE <mahsumurebe@outlook.com> <github:mahsumurebe>
     * @file      Insert.php
     * @copyright ©2017 Mahsum UREBE
     **/


    namespace System\DB\QueryBuilder;

    use System\DB\QueryBuilder\Abstracts\TableAbstract;


    /**
     * Insert Class
     *
     * @package   Referances\System\DB\QueryBuilder
     * @group     Database
     */
    class Insert extends TableAbstract
    {
        /**
         * INSERT .... SELECT olayı
         *
         * @var Select
         */
        public $select;
        /**
         * Sütunlar
         *
         * @var string[]
         */
        protected $columns = array();
        /**
         * Değerler
         *
         * @var string[]|string[][]
         */
        protected $values = array();
        protected $statments = array();

        /**
         * Insert sınıfı yapıcı methodu.
         *
         * @param string|string[] $tables
         * @param string|string[] $data
         * @param string[]        $values
         */
        public function __construct($tables = null, $data = null, $values = null)
        {
            $this->select = new Select();
            $this->table($tables);
            if (!empty($data) && empty($values))
                $this->setData($data);
            else if (!empty($data) && empty($values))
                $this->setColumn($data)
                    ->setValue($values);
        }

        /**
         * Verileri belirleyen method.
         *
         * @param string[]|string[][] $data Veriler
         *
         * @return $this
         */
        public function setData($data)
        {
            if (is_array($data)) {
                if (is_array(current($data))) { // eğer birden fazla değer varsa
                    $columns = array_keys(current($data));
                    $values = array_map('array_values', $data);
                } else {
                    $columns = array_keys($data);
                    $values = array_values($data);
                }
                $this->setValue($values);
                $this->setColumn($columns);
            }

            return $this;
        }

        /**
         * Değerleri belirleyen method.
         *
         * @param string[]|string[][] $values Değerler
         *
         * @return $this
         */
        public function setValue($values)
        {
            if (!is_array(current($values)))
                $values = array($values);
            $this->values = array_merge($this->values, $values);

            return $this;
        }

        /**
         * Sütunları belirleyen method.
         *
         * @param string|string[] $column_name Sütun adı
         *
         * @return $this
         */
        public function setColumn($column_name)
        {
            if (!is_array($column_name))
                $column_name = array($column_name);
            $this->columns = array_merge($this->columns, Escape::escapeName($column_name));

            return $this;
        }

        /**
         * Düşük öncelik
         *
         * @return Insert
         */
        public function LOW_PRIORITY()
        {
            return $this->statement('LOW_PRIORITY', 0);
        }

        /**
         * Method kaydı.
         *
         * @param string $statment Method
         * @param int    $level    Seviye
         *
         * @return $this
         */
        private function statement($statment, $level)
        {
            $this->statments[ $level ] = $statment;

            return $this;
        }

        /**
         * Yüksek öncelik
         *
         * @return Insert
         */
        public function HIGH_PRIORITY()
        {
            return $this->statement('HIGH_PRIORITY', 0);
        }

        /**
         * Gecikmeli öncelik
         *
         * @return Insert
         */
        public function DELAYED()
        {
            return $this->statement('DELAYED', 0);
        }

        /**
         * Yüksek öncelik
         *
         * @return Insert
         */
        public function IGNORE()
        {
            return $this->statement('IGNORE', 1);
        }

        public function getQuery()
        {
            $statements = implode(' ', $this->statments);
            if (!empty($statements))
                $statements .= ' ';
            $QueryPattern = 'INSERT ' . $statements . 'INTO ';
            $QueryPattern .= CRLF . implode(', ', $this->tables);
            $QueryPattern .= ' ' . sprintf('(%s)', implode(', ', $this->columns));
            $QueryPattern .= (count($this->values) > 1) ? CRLF . ' VALUES' : ' VALUE';
            $QueryPattern .= ' ' . $this->getValuesStr();

            return $QueryPattern;
        }

        private function getValuesStr()
        {
            $out = array();

            foreach ($this->values as $value)
                $out[] = sprintf('(%s)', implode(', ', Escape::escapeValue($value)));

            return implode(', ' . CRLF, $out);
        }


    }