#include <stdio.h>

/*
Pattern
isDsPresent, TempL, TempH, Config, CRC
*/

#define PRESENCE_FLAG 0
#define MATCH_DSID_FLAG 1
#define MATCH_CRC_FLAG 2
#define PRESENT_FAN_FLAG 3
#define FAN_ON 4
#define ALARM_ON 5
#define STX 0x02
#define ETX 0x03
#define	SIZEBUF 8

typedef enum _bool {false=0, true=1} bool;

typedef struct _measure {
	float temp;
	float pwm;
	bool state[8];
/*	bool isDsPresent;	//PRESENCE_FLAG
	bool isIdMatch;		//MATCH_DSID_FLAG
	bool isCrcMatch;	//MATCH_CRC_FLAG
	bool isFanPresent;	//PRESENT_FAN_FLAG
	bool fanState;		//FAN_ON
	bool alarmState;	//ALARM_ON */
} record_t;

const char* fields[8] = {"PRESENCE_FLAG", "MATCH_DSID_FLAG", "MATCH_CRC_FLAG",
		"PRESENT_FAN_FLAG", "FAN_ON", "ALARM_ON", "RESERVED1", "RESERVED2"};

int main () {
	record_t dataBuf;
	int i, f;
	char c = 0;
	char strBuf[SIZEBUF];
	char bufPtr;
	char pivot;
	unsigned char state;
	while (1) {
		f = 1;
		scanf ("%c", &strBuf[0]);
		while(strBuf[0] != STX)
			scanf ("%c", &strBuf[0]);
		for(i=1; i<SIZEBUF-1; i++)
			scanf ("%c", strBuf+i);
		while(strBuf[SIZEBUF-1] != ETX) {
			f = 0;
			scanf ("%c", &strBuf[SIZEBUF-1]);
		}
		
		if (f == 1) {
		
		//memset (dataBuf, 0, sizeof(dataBuf));
		/*
		dataBuf.temp = ((unsigned char)strBuf[0])/2.0f;
		dataBuf.pwm = 100*(unsigned char)*(strBuf+1)/255;
		state = (unsigned char)*(strBuf+2);
		for (i=0; i<8; i++) {
			if ((state & (1<<i)) != 0) 
				dataBuf.state[i] = true;
			else
				dataBuf.state[i] = false;
		}
		printf ("\rT=%0.1f'C pwm=%6.2f%% state=[", dataBuf.temp, dataBuf.pwm);
		for (i=0; i<7; i++) {
			if (dataBuf.state[i] == true)
				printf ("\033[32;1m%s=%d\033[0m,", fields[i], dataBuf.state[i]);
			else
				printf ("%s=%d,", fields[i], dataBuf.state[i]);
		}
		printf ("%s=%d] %02X %02X", fields[i], dataBuf.state[i], (unsigned char)*(strBuf+3), 
		(unsigned char)*(strBuf+4));
		*/
		
		//printf ("\r");
//		for(i=0; i < 5; i++) {
//			printf ("%u(%c) ", (unsigned char)*(strBuf+i), strBuf[i]);
//			printf ("%u ", (unsigned char)*(strBuf+i));
			//if((unsigned char)*(strBuf) > 0)
				//printf ("%u [rpm]", (15000000) / (128*(unsigned int)*(strBuf)) );
			//printf ("device_id=%u ", (unsigned char)*(strBuf+0));
			//printf ("TLSB=%u ", (unsigned char)*(strBuf+1));
			//printf ("TMSB=%u ", (unsigned char)*(strBuf+2));
			unsigned char tl, th, tc;
			const char* names[] = {"STX", "N", "N", "tmpcnt", "temp", "N", "state_reg", "ETX"};
			tl = (unsigned char)*(strBuf+0);
			th = (unsigned char)*(strBuf+1);
			tc = (unsigned char)*(strBuf+2);
			unsigned char fsreg = (unsigned char)*(strBuf+3);
			unsigned char state_reg = (unsigned char)*(strBuf+6);

			
			//printf ("tm=%u tl=%u temp=%0.2f°C tc=%u ", th, tl, (th << 5 | tl >> 3) / 2.0, tc);
			
			//printf ("%u ", (unsigned char)*(strBuf+4));
			//printf ("fsreg=%u ", fsreg);
			//printf ("%u ", fsreg);
			//if(fsreg > 0) 
			//printf ("v_rot=%0.2f[rpm] ", (15.0 * fsreg) / 0.390264 );
			
			//printf ("fspeed=%u ", (unsigned char)*(strBuf+4));
			
			for (i=1; i<SIZEBUF-1; i++) {
				printf ("[%u]%s=0x%02x %03u ", i, names[i], (unsigned char)*(strBuf+i), (unsigned char)*(strBuf+i));
			}
			printf ("[6]%s=%d 0x%02X [", names[6], state_reg, state_reg);
			unsigned char tmp = state_reg, cnt = 8, al = 0;
			while(cnt) {
				printf ("%u", (tmp >> (cnt-1)) & 1);
				//tmp = tmp >> 1;
				cnt--;
			}
			printf ("]");
			if (state_reg & (1 << 5)) printf (" AL ");
			
			printf(" %2.1f℃", ((unsigned char)*(strBuf+2) << 5 | (unsigned char)*(strBuf+1) >> 3) / 2.0);
			
		//}
			printf ("\n");

			fflush(stdout);
		}
	}
	return 0;
}
