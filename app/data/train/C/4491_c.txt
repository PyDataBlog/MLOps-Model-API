#ifndef DB_CLUSTER_H
#define DB_CLUSTER_H

#include <stdint.h>
#include <assert.h>

#include <util/atomic.h>
#include <raft/raft.pb.h>

namespace db {

class Cluster {
public:
    explicit Cluster(const raft::Config &config)
        : config_(config) {
        util::atomic_set(&refs_, 0);
    }

    /*
     * Reference count management (so Cluster do not disappear out from
     * under live iterators)
     */
    void Ref() {
        util::atomic_inc(&refs_);
    }

    void Unref() {
        assert(util::atomic_read(&refs_) >= 1);

        if (util::atomic_dec_and_test(&refs_)) {
            delete this;
        }
    }

    const raft::Config& config() const { return config_; }

private:
    util::atomic_t refs_;
    raft::Config config_;

private:
    /* Private since only Unref() should be used to delete it */
    ~Cluster() { }

    /* No copying allowed */
    Cluster(const Cluster &);
    void operator=(const Cluster &);
};

} // namespace db

#endif /* DB_CLUSTER_H */
