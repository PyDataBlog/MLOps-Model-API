#include <stdio.h>

#include <net/ethernet.h>
#include <arpa/inet.h>

#include "ethernet.h"

void ethernet_print_mac (const uint8_t ether_dhost[ETH_ALEN]) {
    for (int i = 0; i < (ETH_ALEN - 1); i ++) {
        fprintf(stdout, "%x:", ether_dhost[i]);
    }
    fprintf(stdout, "%x", ether_dhost[ETH_ALEN - 1]);
}

void ethernet_print_type (const uint16_t ether_type) {
    switch (htons(ether_type)) {
    case ETHERTYPE_PUP:         /* 0x0200 */
        fprintf(stdout, "PUP");
        break;
    case ETHERTYPE_SPRITE:      /* 0x0500 */
        fprintf(stdout, "Sprite");
        break;
    case ETHERTYPE_IP:          /* 0x0800 */
        fprintf(stdout, "IPv4");
        break;
    case ETHERTYPE_ARP:         /* 0x0806 */
        fprintf(stdout, "ARP");
        break;
    case ETHERTYPE_REVARP:	    /* 0x8035 */
        fprintf(stdout, "RARP");
        break;
    case ETHERTYPE_AT:		    /* 0x809B */
        fprintf(stdout, "AT");
        break;
    case ETHERTYPE_AARP:	    /* 0x80F3 */
        fprintf(stdout, "AARP");
        break;
    case ETHERTYPE_VLAN:	    /* 0x8100 */
        fprintf(stdout, "VLAN");
        break;
    case ETHERTYPE_IPX:		    /* 0x8137 */
        fprintf(stdout, "IPX");
        break;
    case ETHERTYPE_IPV6:        /* 0x86DD */
        fprintf(stdout, "IPv6");
        break;
    case ETHERTYPE_LOOPBACK:    /* 0x9000 */
        fprintf(stdout, "Test");
        break;
    default:
        fprintf(stdout, "????");
        break;
    }
}
