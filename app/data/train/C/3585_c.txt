/*
 * =====================================================================================
 *
 *       Filename:  hello.c
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  2012年09月04日 11时47分44秒
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  James Lee (Jsl), pighacker@gmail.com
 *        Company:  FH Südwestfalen, Iserlohn
 *
 * =====================================================================================
 */



#include	"jsl_mod.h"

MODULE_LICENSE("Dual BSD/GPL");
MODULE_AUTHOR("James Lee");

#define 	jsl_1
#define 	jsl_2
#define 	jsl_3


#if defined (jsl_1)
int a =1;
#elif defined (jsl_2)
int a =2;
#else
int a =3;
#endif

static char *whom = "James";
static int howmany = 1;


static char *Author = "James";


module_param(howmany, int, S_IRUGO);//S_IRUGO only read  S_IRUGO|S_IWUSR allow root to change
module_param(whom, charp, S_IRUGO);





struct file_operations my_fops_tm=
{
	.owner		= THIS_MODULE,
	.read		= sleepy_read,
	.write		= sleepy_write,
//	.open		= sleepy_open,
//	.release	= sleepy_release,
};





#if 0
static struct vm_operations_struct simple_remap_vm_ops =
{
	.open	= ;
	.close	= ;
}
#endif

//int register_blkdev(unsigned int major, const char *name); 
//int unregister_blkdev(unsigned int major, const char *name);
//
//struct block_device_operations
//int (*open)(struct inode *inode, struct file *filp);
//int (*release)(struct inode *inode, struct file *filp);
//int (*ioctl)(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg);
//int (*media_changed) (struct gendisk *gd);
//int (*revalidate_disk) (struct gendisk *gd);
//struct module *owner;

//struct gendisk
//



#if 1
static struct block_device_operations my_blkdev_ops =
//struct file_operations my_blkdev_fops=
{
	.owner		= THIS_MODULE,
	.ioctl		= blk_ioctl,
#if 0
	.open		= blk_open,
	.release	= blk_open,
#endif
};
#endif



static int	Open_Dev_Func(struct cdev *cdev,struct file_operations *fops,
		dev_t dev,uint count)
{
	int	result = 0;

	cdev = cdev_alloc();
	cdev->ops = fops;
	(*cdev).owner = THIS_MODULE;
	result = cdev_add(cdev,dev,count);

	printk("\033[0;36;1m----James Debug--%s:%d--%s----\033[0m\n",\
			__FILE__,__LINE__,__func__);
	printk("----alloc cdev.dev:%x--LINE:%d----\n",(*cdev).dev,__LINE__);
	return result;
}






static int jsl_mod_init(void)
{
	int	i0 = 0;
	uint	m_new_count = 0;
	int	m_result;

	m_new_count = 1;
	printk(KERN_INFO "The process is \"%s\" (pid %i)\n", current->comm, current->pid);
	m_dev_count = m_new_count;



#if 1
/*********** alloc a dev_t type dev ID *********/
	m_dev = Alloc_Dev_Get_Dev_ID(m_dev_count);
	printk("----alloced dev:%x----\n",m_dev);
	if(m_dev<0)
		return -1;
/*********** Alloc Cdev ************/
	my_dev.cdev = cdev_alloc();
	my_dev.cdev->ops = &my_fops_tm;
	(*my_dev.cdev).owner = THIS_MODULE;
	m_result = cdev_add(my_dev.cdev,m_dev,m_dev_count);
#endif



#if 1
	m_blk_dev_major = register_blkdev(0,"jsl_blk_dev");
	printk("----%s:%d--m_blk_dev_major=%d----\n",__FILE__,__LINE__,m_blk_dev_major);
	JSL_BLK_DEV	m_blk_dev;
//	memset(m_blk_dev,0x0,sizeof(struct jsl_blk_dev));
	m_blk_dev.size = 12;
	m_blk_dev.data = vmalloc(m_blk_dev.size);
	spin_lock_init(&m_blk_dev.lock);
	m_blk_dev.queue = blk_init_queue(request_func,&m_blk_dev.lock);
#if 1
	m_blk_dev.gd = alloc_disk(1);
	if(!m_blk_dev.gd)
	{
		printk(KERN_NOTICE"alloc_disk fail\n");
		goto out_vfree;
	}
	m_blk_dev.gd->major = m_blk_dev_major;
	m_blk_dev.gd->first_minor = 1;
	m_blk_dev.gd->fops = &my_fops_tm;
	m_blk_dev.gd->queue = m_blk_dev.queue;
	m_blk_dev.gd->private_data = &m_blk_dev;
	JBG;
#if 1
	sprintf(m_blk_dev.gd->disk_name,32,"jsldev_%c\n",'a');
#endif
//	set_capacity(m_blk_dev.gd,1024*(2048/128));
//	add_disk(m_blk_dev.gd);
#endif
#endif




out_vfree:

	if(m_result < 0)
	{
		printk("---ERROR:%d--LINE:%d---\n",m_result,__LINE__);
		return -1;
	}
	while(i0 < howmany)
	{
		printk(KERN_ALERT "Hello, world By James at param By %s \
				in Loop %d\n",whom,i0);
		i0++;
	}
        return 0;
}


static void jsl_mod_exit(void)
{
	Close_Dev_Func(my_dev.cdev,m_dev,m_dev_count);
	Free_Dev_NOW(m_dev,0,0,m_dev_count);

	unregister_blkdev(m_blk_dev_major,"jsl_blk_dev");
		printk("----%s:%d--tmp=%d----\n",__FILE__,__LINE__,m_blk_dev_major);


	printk(KERN_INFO "The process is \"%s\" (pid %i)\n", current->comm, current->pid);
	printk(KERN_ALERT "Goodbye, cruel world By James\n");
}







module_init(jsl_mod_init);
module_exit(jsl_mod_exit);


EXPORT_SYMBOL (Author);
//EXPORT_SYMBOL_GPL (whom);







