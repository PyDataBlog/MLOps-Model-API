/*======================================================
//º¯ÊýÃû£ºsdminv
//¹¦ÄÜÃèÊö£º¶Ô³ÆÕý¶¨¾ØÕóÔ­µØÇóÄæ
//ÊäÈë²ÎÊý£ºmat Ö¸Ïò´ý·Ö½âµÄ¾ØÕóµÄÖ¸Õë
            n ¾ØÕó½×Êý
//·µ»ØÖµ£ºÕûÐÍ¡£ÔËÐÐ³É¹¦Ôò·µ»Ø1,Ê§°ÜÔò·µ»Ø0
=========================================================*/
#include "stdio.h"
#include "stdlib.h"
#include "math.h"

int sdminv(mat, n, eps)
double *mat;
int n;
double eps;
{
    int i,j,k;
    double p,q,*c;
    if(mat == NULL)                    /* ¼ì²éÖ¸ÕëÊÇ·ñÎª¿Õ*/
    {
        printf("The matrix pointer is NULL\n");
        return(0);
    }
    c = (double *)malloc(n*sizeof(double)); /* ÎªÁÙÊ±±äÁ¿·ÖÅä¿Õ¼ä²¢¼ì²éÊÇ·ñ³É¹¦*/
    if(c == NULL)
    {
        printf("Memory alloc failed\n");
        return(0);
    }
    for(k=0; k<n; k++)               /* Ñ­»·Çó½â*/
    {
       p = mat[0];
       if(p < eps)                   /* ÅÐ¶ÏÊÇ·ñÂú×ãÕý¶¨µÄÌõ¼þ*/
       {
           printf("Fail to invert\n");
           free(c);
           return(0);
       }
       p = 1.0/p;                    /* ½«Òª½øÐÐµÄ¶à´Î³ý·¨×ª»¯Îª³Ë·¨*/
       for(i=1; i<n-k; i++)          /* Çó³ö¾ØÕóÏÂÈý½Ç²¿·ÖÇ°n-kÐÐµÄÖµ*/
       {
           q = mat[i*n];
           c[i] = -q*p;
           for(j=1; j<i+1; j++)
             mat[(i-1)*n+j-1] = mat[i*n+j] + q*c[j];
       }
       for(i=n-k; i<n; i++)          /* Çó³ö¾ØÕóÏÂÈý½Ç²¿·ÖÖÐµÚn-kÐÐÖÁµÚn-1ÐÐµÄÖµ*/
       {
           q = mat[i*n];
           c[i] = q*p;
           for(j=1; j<i+1; j++)
             mat[(i-1)*n+j-1] = mat[i*n+j] + q*c[j];
       }
       mat[n*n-1] = p;               /* Çó³ö¾ØÕóÏÂÈý½Ç²¿·ÖÖÐµÚnÐÐµÄÖµ*/
       for(i=1; i<n; i++)
         mat[(n-1)*n+i-1] = c[i];
    }
    for(i=0; i<n-1; i++)             /* ÒÀ¾Ý¶Ô³ÆÐÔ¶Ô¾ØÕóµÄÉÏÈý½Ç²¿·Ö½øÐÐ¸³Öµ*/
      for(j=i+1; j<n; j++)
        mat[i*n+j] = mat[j*n+i];
    free(c);                         /* ÊÍ·Å·ÖÅäµÄ¿Õ¼ä*/
    return(1);
}
