/**
*
*   Description: Simple Chat Server.
*   Author: Deric Fagnan
*
*
*
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h> //strlen
#include <unistd.h> //write
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h> //inet_addr
#include <pthread.h> //for threading , link with lpthread

typedef unsigned short uint16_t;

void *connection_handler(void *socket_desc);
int read_client(int sock);

#define PORT    3000
#define MAXMSG  256
#define MAX_USER_NAME 20
#define MAX_PASSWORD 10

#define RX_BUFSIZE 4096

//----- Global Vars -----
char RXBuffer[RX_BUFSIZE];


enum bool {
    false,
    true
};

struct user {
    int id;
    char username[MAX_USER_NAME];
    char password[MAX_PASSWORD];
};


int make_server_socket(uint16_t port) {
    int sock_server;
    struct sockaddr_in server;

    /* Create the socket. */
    sock_server = socket(AF_INET, SOCK_STREAM, 0);
    if(sock_server < 0) {
        perror("socket");
        exit(EXIT_FAILURE);
      }

    /* Give the socket properties. */
    server.sin_family = AF_INET;
    server.sin_port = htons (3000);
    server.sin_addr.s_addr = htonl (INADDR_ANY);
    
    if (bind(sock_server, (struct sockaddr *) &server, sizeof (server)) < 0) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    return sock_server;
}

int send_message(int sock, char* message) {
    write(sock , message , strlen(message));
    return 1;
}

int main() { 
    printf("Server is running...\n");

    int sock_server = make_server_socket(PORT);
    struct sockaddr_in client;
    int new_socket, c;
    char message[256];
    char client_command;


    if(listen(sock_server, 3) < 0) {
        printf("Failed to listen");
    }

    printf("Waiting for incoming connections...\n");
    c = sizeof(struct sockaddr_in);
    
    new_socket = accept(sock_server, (struct sockaddr *)&client, (socklen_t*)&c);
    
    while(new_socket > 0) {
        
        puts("Connection accepted\n");

        // Acknowledge client
        //send_message(new_socket, "Hello Client , I have received your connection.\n");
        
        enum bool client_connected = true;
        while(client_connected) {                            
            // Read incomming message from client
            read(new_socket, &client_command, sizeof(client_command));
            

            switch(client_command) {
                case '0': // Client quit
                    puts("Client has quit");
                    client_connected = false;
                    break;
                
                case '1': // Client Log in request
                    puts("Client requested to log in");
                    break;
                
                case '2': // Client Create user request
                    puts("Client requested to create user");
                    break;
                
                case '3': // Client send message request
                    puts("client requested to send message");
                    
                    // Read message from client
                    read_client(new_socket);             
                    break;            
            }
        }
    }

    shutdown(sock_server, 0);
    printf("Server is shuting down.\n");
    return 0;
}


/*
 * This will handle connection for each client
 * */
void *connection_handler(void *socket_desc)
{
    //Get the socket descriptor
    int sock = *(int*)socket_desc;
     
    char *message;
     
    //Send some messages to the client
    message = "Greetings! I am your connection handler\n";
    write(sock , message , strlen(message));
     
    message = "Its my duty to communicate with you";
    write(sock , message , strlen(message));
     
    //Free the socket pointer
    free(socket_desc);
    unlink(socket_desc);
    return 0;
}

int read_client(int sock) {

    int n = 0; 
    do {
        n = read( sock, RXBuffer, RX_BUFSIZE - 1 );
        RXBuffer[n] = '\0';
        printf( "Read %d bytes: %s\n", n, RXBuffer );
    } while ( n > 0 );
    /*
    int n = read(sock, RXBuffer, RX_BUFSIZE - 1);
    RXBuffer[n] = '\0';
    printf( "Read %d bytes: %s\n", n, RXBuffer );
    //puts(RXBuffer);
    */
    return 0;
}


