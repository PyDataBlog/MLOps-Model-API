/*******************************************ÉêÃ÷***************************************
±¾Ç¶ÈëÊ½²Ù×÷ÏµÍ³Î´¾­ÊÚÈ¨£¬½ûÖ¹Ó¦ÓÃÓÚÈÎºÎÉÌÒµÓÃÍ¾
°æÈ¨ËùÓÐ£¬ÇÖÈ¨±Ø¾¿
http://www.trtos.com/
**************************************************************************************/
#include <Include.h>
#include <..\USER\Prj_CXHeftSensor\ADC_Driver.h>

volatile uint16  ADC_Value[ADC_BUFSize][ADC_CHN]; 
uint16 ADCBuffer[3];


static void ADC3_GPIO_Config(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);
	GPIO_InitStructure.GPIO_Pin =GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(GPIOA, &GPIO_InitStructure);				// PC1,ÊäÈëÊ±²»ÓÃÉèÖÃËÙÂÊ
}

static void ADC3_Mode_Config()
{
	ADC_InitTypeDef  ADC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	ADC_DeInit(ADC1);  //½«ÍâÉè ADC1 µÄÈ«²¿¼Ä´æÆ÷ÖØÉèÎªÈ±Ê¡Öµ
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;	//ADC¹¤×÷Ä£Ê½:ADC1ºÍADC2¹¤×÷ÔÚ¶ÀÁ¢Ä£Ê½
	ADC_InitStructure.ADC_ScanConvMode =ENABLE;	//Ä£Êý×ª»»¹¤×÷ÔÚÉ¨ÃèÄ£Ê½
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;	//Ä£Êý×ª»»¹¤×÷ÔÚÁ¬Ðø×ª»»Ä£Ê½
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	//Íâ²¿´¥·¢×ª»»¹Ø±Õ
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;	//ADCÊý¾ÝÓÒ¶ÔÆë
	ADC_InitStructure.ADC_NbrOfChannel =ADC_CHN;	//Ë³Ðò½øÐÐ¹æÔò×ª»»µÄADCÍ¨µÀµÄÊýÄ¿
	ADC_Init(ADC1, &ADC_InitStructure);	//¸ù¾ÝADC_InitStructÖÐÖ¸¶¨µÄ²ÎÊý³õÊ¼»¯ÍâÉèADCxµÄ¼Ä´æÆ÷
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_239Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_239Cycles5);
	ADC_Cmd(ADC1, ENABLE);	   //Ê¹ÄÜÖ¸¶¨µÄADC1
	ADC_ResetCalibration(ADC1);	  //¸´Î»Ö¸¶¨µÄADC1µÄÐ£×¼¼Ä´æÆ÷
	while(ADC_GetResetCalibrationStatus(ADC1));	//»ñÈ¡ADC1¸´Î»Ð£×¼¼Ä´æÆ÷µÄ×´Ì¬,ÉèÖÃ×´Ì¬ÔòµÈ´ý
	ADC_StartCalibration(ADC1);		//¿ªÊ¼Ö¸¶¨ADC1µÄÐ£×¼×´Ì¬
	while(ADC_GetCalibrationStatus(ADC1));		//»ñÈ¡Ö¸¶¨ADC1µÄÐ£×¼³ÌÐò,ÉèÖÃ×´Ì¬ÔòµÈ´ý
	
	

	DMA_DeInit(DMA1_Channel1);   //½«DMAµÄÍ¨µÀ1¼Ä´æÆ÷ÖØÉèÎªÈ±Ê¡Öµ
	DMA_InitStructure.DMA_PeripheralBaseAddr =  (u32)&ADC1->DR;  //DMAÍâÉèADC»ùµØÖ·
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&ADC_Value;  //DMAÄÚ´æ»ùµØÖ·
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;  //ÄÚ´æ×÷ÎªÊý¾Ý´«ÊäµÄÄ¿µÄµØ
	DMA_InitStructure.DMA_BufferSize = ADC_BUFSize*ADC_CHN;  //DMAÍ¨µÀµÄDMA»º´æµÄ´óÐ¡
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;  //ÍâÉèµØÖ·¼Ä´æÆ÷²»±ä
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;  //ÄÚ´æµØÖ·¼Ä´æÆ÷µÝÔö
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;  //Êý¾Ý¿í¶ÈÎª16Î»
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; //Êý¾Ý¿í¶ÈÎª16Î»
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;  //¹¤×÷ÔÚÑ­»·»º´æÄ£Ê½
	DMA_InitStructure.DMA_Priority = DMA_Priority_High; //DMAÍ¨µÀ xÓµÓÐ¸ßÓÅÏÈ¼¶ 
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;  //DMAÍ¨µÀxÃ»ÓÐÉèÖÃÎªÄÚ´æµ½ÄÚ´æ´«Êä
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);  //¸ù¾ÝDMA_InitStructÖÐÖ¸¶¨µÄ²ÎÊý³õÊ¼»¯DMAµÄÍ¨µÀ
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
	DMA_Cmd(DMA1_Channel1, ENABLE); 
	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
	ADC_DMACmd(ADC1, ENABLE);	
}
void ADCForTankHand_Init()
{
	ADC3_GPIO_Config();
	ADC3_Mode_Config();
}
uint16 ADCFormlx91204_ReadFitel(uint8 CH)
{
	uint8 i;
	uint32 Pool=0;
	for(i=0;i<ADC_BUFSize;i++)Pool+=ADC_Value[i][CH];
	return Pool/ADC_BUFSize;
}
void Task_ADCFitel(void *Tags)
{
	uint8 i=0;
	ADCForTankHand_Init();
	while(1)
	{
		
		ADCBuffer[i]=ADCFormlx91204_ReadFitel(i);
		if(i++>3)i=0;
		Tos_TaskDelay(100);
	}
}


