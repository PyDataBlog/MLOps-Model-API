/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Solution:
recursive impl of DFS.
*/

#include <vector>

using namespace std;

class Solution {
    public:
        vector<vector<int> > combine(int n, int k) {
            vector<int> v;
            vector<vector<int> > vv;
            dfs(n, k, 1, v, vv);
            return vv;
        }

        void dfs(int n, int k, int s, vector<int> &v, vector<vector<int> > &vv)
        {
            if(k == 0)
            {
                vv.push_back(v);
                return;
            }
            for(int i = s; i <= n-k+1; ++i)
            {
                v.push_back(i);
                dfs(n, k-1, i+1, v, vv);
                v.pop_back();
            }
        }
};

