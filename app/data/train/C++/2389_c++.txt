#pragma once
#include "../acl_cpp_define.hpp"
#include "../stdlib/thread.hpp"
#include "../stream/aio_handle.hpp"
#include <vector>

namespace acl
{

class aio_handle;
class check_client;
class connect_manager;
class rpc_service;
class socket_stream;
class aio_socket_stream;

class ACL_CPP_API connect_monitor : public thread
{
public:
	/**
	 * ¹¹Ôìº¯Êý
	 * @param manager {connect_manager&}
	 */
	connect_monitor(connect_manager& manager);

	virtual ~connect_monitor();

	/**
	 * µ±Ï£Íû²ÉÓÃ×èÈûÊ½¼ì²â·þÎñ¶ËÁ¬½ÓÊ±£¬ÐèÒªÏÈµ÷ÓÃ±¾º¯Êý´ò¿ª
	 * acl::rpc_service ×èÈû½Ó¿Ú´¦Àí·þÎñ£»Èç¹ûÔÚ³õÊ¼»¯Ê±²»µ÷ÓÃ±¾º¯Êý£¬
	 * Ôò²ÉÓÃ·Ç×èÈû·½Ê½½øÐÐ IO ¼ì²â
	 * @param max_threads {int} rpc_service ·þÎñÏß³Ì³ØÖÐÔËÐÐµÄ×î´óÏß³ÌÊý
	 * @param addr {const char*} Ï£Íû rpc_service ·þÎñ¼àÌýµÄ±¾»úµØÖ·£¬¿ÉÒÔ
	 *  Îª±¾»úµÄ»ØµØÖ·»òÔÚ UNIX Æ½Ì¨ÏÂÊ¹ÓÃÓòÌ×½Ó¿ÚµØÖ·
	 * @return {connect_monitor&}
	 */
	connect_monitor& open_rpc_service(int max_threads,
		const char* addr = NULL);

	/**
	 * ÉèÖÃ¼ì²â¶¨Ê±Æ÷Æô¶¯µÄÊ±¼ä¼ä¸ô
	 * @param n {int} Ê±¼ä¼ä¸ô£¨Ãë£©
	 * @return {connect_mointor&}
	 */
	connect_monitor& set_check_inter(int n);

	/**
	 * ÉèÖÃÁ¬½Ó±»¼ì²â·þÎñÆ÷µÄ³¬Ê±Ê±¼ä
	 * @param n {int} ³¬Ê±Ê±¼ä£¨Ãë£©
	 * @return {connect_monitor&}
	 */
	connect_monitor& set_conn_timeout(int n);

	/**
	 * Í£Ö¹¼ì²âÏß³Ì
	 * @param graceful {bool} ÊÇ·ñÎÄÃ÷µØ¹Ø±Õ¼ì²â¹ý³Ì£¬Èç¹ûÎª true
	 *  Ôò»áµÈËùÓÐµÄ¼ì²âÁ¬½Ó¹Ø±Õºó¼ì²âÏß³Ì²Å·µ»Ø£»·ñÔò£¬ÔòÖ±½Ó¼ì²âÏß³Ì
	 *  Ö±½Ó·µ»Ø£¬¿ÉÄÜ»áÔì³ÉÒ»Ð©ÕýÔÚ¼ì²âµÄÁ¬½ÓÎ´±»ÊÍ·Å¡£ÕýÒòÈç´Ë£¬Èç¹û
	 *  Á¬½Ó³Ø¼¯Èº¹ÜÀí¶ÔÏóÊÇ½ø³ÌÄÚÈ«¾ÖµÄ£¬¿ÉÒÔ½«´Ë²ÎÊýÉèÎª false£¬Èç¹û
	 *  Á¬½Ó³Ø¼¯Èº¹ÜÀí¶ÔÏóÔÚÔËÐÐ¹ý³ÌÖÐÐèÒª±»¶à´Î´´½¨ÓëÊÍ·Å£¬ÔòÓ¦¸ÃÉèÎª true
	 */
	void stop(bool graceful);

	/**
	 * »ñµÃ connect_manager ÒýÓÃ¶ÔÏó
	 * @return {connect_manager&}
	 */
	connect_manager& get_manager() const
	{
		return manager_;
	}

	/**
	 * Ðéº¯Êý£¬×ÓÀà¿ÉÒÔÖØÔØ±¾º¯ÊýÓÃÀ´½øÒ»²½ÅÐ¶Ï¸ÃÁ¬½ÓÊÇ·ñÊÇ´æ»îµÄ£¬¸Ã»Øµ÷
	 * º¯ÊýµÄÔËÐÐ¿Õ¼äÎªµ±Ç°·Ç×èÈû¼ì²âÏß³ÌµÄÔËÐÐ¿Õ¼ä£¬Òò´ËÔÚ¸Ã»Øµ÷º¯ÊýÖÐ²»
	 * µÃÓÐ×èÈû¹ý³Ì£¬·ñÔò½«»á×èÈûÕû¸ö·Ç×èÈû¼ì²âÏß³Ì
	 * @param checker {check_client&} ·þÎñ¶ËÁ¬½ÓµÄ¼ì²é¶ÔÏó£¬¿ÉÒÔÍ¨¹ý
	 *  check_client ÀàÖÐµÄ·½·¨ÈçÏÂ£º
	 *  1) get_conn »ñµÃ·Ç×èÈûÁ¬½Ó¾ä±ú
	 *  2) get_addr »ñµÃ·þÎñ¶ËµØÖ·
	 *  3) set_alive ÉèÖÃÁ¬½ÓÊÇ·ñ´æ»î
	 *  4) close ¹Ø±ÕÁ¬½Ó
	 */
	virtual void nio_check(check_client& checker, aio_socket_stream& conn);

	/**
	 * Í¬²½ IO ¼ì²âÐéº¯Êý£¬¸Ãº¯ÊýÔÚÏß³Ì³ØµÄÄ³¸ö×ÓÏß³Ì¿Õ¼äÖÐÔËÐÐ£¬×ÓÀà¿ÉÒÔ
	 * ÖØÔØ±¾º¯ÊýÒÔ¼ì²âÊµ¼ÊÓ¦ÓÃµÄÍøÂçÁ¬½Ó´æ»î×´Ì¬£¬¿ÉÒÔÔÚ±¾º¯ÊýÄÚÓÐ×èÈû
	 * IO ¹ý³Ì
	 * @param checker {check_client&} ·þÎñ¶ËÁ¬½ÓµÄ¼ì²é¶ÔÏó
	 *  check_client ÀàÖÐÔÊÐíµ÷ÓÃµÄ·½·¨ÈçÏÂ£º
	 *  1) get_addr »ñµÃ·þÎñ¶ËµØÖ·
	 *  2) set_alive ÉèÖÃÁ¬½ÓÊÇ·ñ´æ»î
	 *  check_client ÀàÖÐ½ûÖ¹µ÷ÓÃµÄ·½·¨ÈçÏÂ£º
	 *  1) get_conn »ñµÃ·Ç×èÈûÁ¬½Ó¾ä±ú
	 *  2) close ¹Ø±ÕÁ¬½Ó
	 */
	virtual void sio_check(check_client& checker, socket_stream& conn);

	/**
	 * µ±Á¬½Ó³É¹¦Ê±µÄ»Øµ÷·½·¨£¬×ÓÀà¿ÉÒÔÊµÏÖ±¾·½·¨
	 * @param checker {check_client&}
	 * @param cost {double} ´Ó·¢ÆðÁ¬½ÓÇëÇóµ½³¬Ê±µÄÊ±¼ä¼ä¸ô£¨Ãë£©
	 */
	virtual void on_connected(const check_client& /* checker */,
		double /* cost */)
	{
	}

	/**
	 * µ±Á¬½Ó³¬Ê±Ê±µÄ»Øµ÷·½·¨£¬×ÓÀà¿ÉÒÔÊµÏÖ±¾·½·¨
	 * @param addr {const char*} ±»¼ì²âµÄ·þÎñÆ÷µØÖ·£¬¸ñÊ½: ip:port
	 * @param cost {double} ´Ó·¢ÆðÁ¬½ÓÇëÇóµ½³¬Ê±µÄÊ±¼ä¼ä¸ô£¨Ãë£©
	 */
	virtual void on_timeout(const char* /* addr */, double /* cost */)
	{
	}

	/**
	 * µ±Á¬½Ó·þÎñÆ÷Ê±±»¾Ü¾øÊ±µÄ»Øµ÷·½·¨£¬×ÓÀà¿ÉÊµÏÖ±¾·½·¨
	 * @param addr {const char*} ±»¼ì²âµÄ·þÎñÆ÷µØÖ·£¬¸ñÊ½: ip:port
	 * @param cost {double} ´Ó·¢ÆðÁ¬½ÓÇëÇóµ½±»¶Ï¿ªµÄÊ±¼ä¼ä¸ô£¨Ãë£©
	 */
	virtual void on_refused(const char* /* addr */, double /* cost */)
	{
	}

public:
	// ËäÈ»ÏÂÃæµÄº¯ÊýÊÇ public µÄ£¬µ«Ö»¹©ÄÚ²¿Ê¹ÓÃ
	/**
	 * µ±Óë·þÎñ¶Ë½¨Á¢Á¬½Óºóµ÷ÓÃ´Ëº¯Êý
	 * @param checker {check_client&}
	 */
	void on_open(check_client& checker);

protected:
	// »ùÀà´¿Ðéº¯Êý
	virtual void* run();

private:
	bool stop_;
	bool stop_graceful_;
	aio_handle handle_;			// ºóÌ¨¼ì²âÏß³ÌµÄ·Ç×èÈû¾ä±ú
	connect_manager& manager_;		// Á¬½Ó³Ø¼¯ºÏ¹ÜÀí¶ÔÏó
	int   check_inter_;			// ¼ì²âÁ¬½Ó³Ø×´Ì¬µÄÊ±¼ä¼ä¸ô(Ãë)
	int   conn_timeout_;			// Á¬½Ó·þÎñÆ÷µÄ³¬Ê±Ê±¼ä
	rpc_service* rpc_service_;		// Òì²½ RPC Í¨ÐÅ·þÎñ¾ä±ú
};

} // namespace acl
