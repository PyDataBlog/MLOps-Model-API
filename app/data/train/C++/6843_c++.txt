/*
    "polygonist", a framework for creating real-time graphics applications
    Copyright Â© 2012, 2013, 2014, 2015, 2016, 2017, 2018  Aleksi Juvani
    <aleksi@aleksijuvani.com>

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published by the
    Free Software Foundation; either version 2.1 of the License, or (at your
    option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
    for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this library; if not, write to the Free Software Foundation,
    Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#pragma once

#include <list>
#include <polygonist/polygonist.hpp>
#include <polygonist/graphics/camera.hpp>
#include <polygonist/ecs/entity.hpp>

namespace polygonist
{
    class entity;
}

namespace polygonist::graphics
{
    class framebuffer;
}

namespace polygonist
{
    class POLYGONIST_API scene
    {
        public:

            scene() = default;

            void add(std::shared_ptr<ecs::entity> entity);
            void remove(std::shared_ptr<ecs::entity> entity);

            void update();
            void render(const graphics::framebuffer& framebuffer, const graphics::camera& camera, graphics::camera::render_flags_t render_flags = graphics::camera::render_flags_none) const;

            const std::list<std::shared_ptr<ecs::entity>>& get_entities();
            const std::list<std::shared_ptr<const ecs::entity>>& get_entities() const;

        private:

            // Need to maintain two lists for const-correctness because of how
            // the standard containers work..

            mutable std::list<std::shared_ptr<ecs::entity>> entities;
            mutable std::list<std::shared_ptr<const ecs::entity>> const_entities;
    };
}
