/*
 * Copyright (C) 2017 https://github.com/grand-farugi/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/* 
 * File:   Enemy.cpp
 * Author: https://github.com/grand-farugi/
 * 
 * Created on 19 May 2017, 20:34
 */

#include "Enemy.h"
#include "../collide/collide.h"
#include "../game/InGame.h"
#include "Player.h"
#include <cstring>
#include "Explosion.h"
#include "../audio/sfx.h"

Enemy::Enemy(float x, float y, float radius, data_file script, data_file sprite, int _health)
: EnemyBullet(x, y, radius, script, sprite) {
    isboss = false;
    int num_players;
    for (num_players = MAX_PLAYERS; num_players > 0; num_players--) {
        if (players[num_players-1] != NULL) {
            break;
        }
    }
    max_health = _health * num_players;
    health = max_health;
    
}

void Enemy::update() {
    if (!flash_timer && (normal_palette == NULL)) {
        normal_palette = new pixel[img->colcount];
        memcpy(normal_palette, palette, img->colcount*sizeof(pixel));
    }
    if (flash_timer && (--flash_timer < 2))
        memcpy(palette, normal_palette, img->colcount*sizeof(pixel));
    EnemyBullet::update();
    for (int i = 0; i < sizeof(pBulletList)/sizeof(pBulletList[0]); i++) {
        if (pBulletList[i] && EnemyBullet::is_colliding(this, pBulletList[i])) {
            delete pBulletList[i];
            if (--health == 0) {
                InGame::add_object(new Explosion(pos[0], pos[1]));
                InGame::remove_object(this);
                if (isboss)
                    play_sfx(SFX_KILLBOSS, 0.2);
                else
                    play_sfx(SFX_KILL, 0.1);
                break;
            } else if (!flash_timer) {
                pixel col;
                if ((float)health / max_health > 0.2) {
                    col = color(255, 255, 255);
                    play_sfx(SFX_HIT0, 0.1);
                } else {
                    play_sfx(SFX_HIT1, 0.2);
                    col = color(255, 0, 0);
                }
                for (int c = 0; c < img->colcount; c++) {
                    if (palette[c] != transparent_col)
                        palette[c] = col;
                }
                flash_timer = 3;
            }
        }
    }
}

Enemy::~Enemy() {
    if (normal_palette != NULL)
        delete[] normal_palette;
}

