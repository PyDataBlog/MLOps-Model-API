class NumMatrix {
public:
  NumMatrix(vector<vector<int>> &matrix) {
    // error handle
    if (matrix.size() == 0 || matrix[0].size() == 0) {
      _m = 0;
      _n = 0;
      return;
    }

    _m = matrix.size();
    _n = matrix[0].size();
    _sum = vector<vector<long long>>(_m + 1, vector<long long>(_n + 1, 0));

    for (int i = 0; i < _m; i++) {
      for (int j = 0; j < _n; j++) {
        _sum[i + 1][j + 1] =
            _sum[i][j + 1] + _sum[i + 1][j] - _sum[i][j] + matrix[i][j];
      }
    }
  }

  int sumRegion(int row1, int col1, int row2, int col2) {
    if (row2 < row1 || col2 < col1) {
      return 0;
    }

    if (row2 >= _m || col2 >= _n || row2 < 0 || col2 < 0) {
      return 0;
    }

    if (row1 >= _m || col1 >= _n || row1 < 0 || col1 < 0) {
      return 0;
    }

    if (_m == 0 || _n == 0) {
      return 0;
    }
    //注意 边界条件
    return _sum[row2 + 1][col2 + 1] - _sum[row2 + 1][col1] -
           _sum[row1][col2 + 1] + _sum[row1][col1];
  }

private:
  vector<vector<long long>> _sum;
  int _m;
  int _n;
};

// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);
