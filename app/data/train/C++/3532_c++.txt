#include "api_protocol_base.h"


///
/// \brief TestProtocol::TestProtocol
/// Constructor
///
TestProtocol::TestProtocol()
{
    nam = new QNetworkAccessManager(this);
//    nam = NAM_INSTANCE;
    connect(nam, SIGNAL(finished(QNetworkReply*)),
            this, SLOT(onNamResponce(QNetworkReply*)));
    reply = nullptr;
    parser = new TestProtocolParser();

}

void TestProtocol::setupProtocol()
{
    parser->reinitParser();
    connect(this, SIGNAL(newData()),
            parser,SLOT(onNewData()),
            Qt::QueuedConnection);
}

///
/// \brief TestProtocol::setupProtocol
///
void TestProtocol::setupProtocol(TestApiClient *tester)
{
    parser->reinitParser();
    parser->setupSignalsSlots(this, tester);
    connect(this, SIGNAL(newData()),
            parser,SLOT(onNewData()),
            Qt::QueuedConnection);
}

///
/// \brief TestProtocol::runProtocol
/// runProtocol
///
void TestProtocol::invoke()
{

}



///
/// \brief TestProtocol::onTimer
/// Сначала проверить, завершился ли запрос в QFuture
/// Запрос делается через сигнал
///
void TestProtocol::onTimer()
{
    qDebug() << "On timer";
    if(reply == nullptr)
    {
        reply =nam->get(QNetworkRequest(QUrl("http://127.0.0.1:8080/quote")));
        qInfo() << "Reply works" << reply->isRunning();
    }
    if (reply->isRunning() == false)
    {
        reply =nam->get(QNetworkRequest(QUrl("http://127.0.0.1:8080/quote")));
        qInfo() << "Reply works" << reply->isRunning();
    }
    qInfo() << "ok";
}

///
/// \brief TestProtocol::onResponce
/// \param Reply
///
void TestProtocol::onNamResponce(QNetworkReply* reply)
{
    QTimer::singleShot(1000, this, SLOT(onTimer()));
    QUrl url = reply->url();
    QJsonDocument itemDoc = QJsonDocument::fromJson(reply->readAll());

    qInfo() << "OnNamResponce, thread id "
            << QThread::currentThreadId()
            << "Itemdoc "
            << itemDoc;
    emit newData();
}

///
/// \brief TestProtocolParser::resetParser
///
void TestProtocolParser::setupSignalsSlots(TestProtocol *prot, TestApiClient *tester)
{
    int i = 1;
}

///
/// \brief TestProtocolParser::reinitParser
///
void TestProtocolParser::reinitParser()
{
    if(thr != nullptr)
        if(thr->isRunning())
            delete (thr);
    thr = new QThread(0);

}

///
/// \brief TestProtocolParser::reinitThread
///
void TestProtocolParser::reinitThread()
{
    this->moveToThread(thr);
    thr->start();
}

///
/// \brief TestProtocolParser::onNewVoidCall
///
void TestProtocolParser::dataToParseReady()
{
    qInfo() << "TestProtocolParser::onNewVoidCall, Thread id " << QThread::currentThreadId();
    emit voidCall();
}
