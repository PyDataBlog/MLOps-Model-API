#include "Panel.h"
#include "Button.h"
#include "Label.h"
#include "FieldStatus.h"
#include "Field.h"
#include <string>

	ShipPanels::Panel::Panel(int dimension, int x, int y) {
		this->client = new ClientProcedures();
		this->dimension = dimension;
		this->warning = new Label();
		this->rowLabels = new Label[this->dimension];
		this->columnLabels = new Label[this->dimension];
		this->fields = new Field*[this->dimension];
		this->panelId = 0;
		for (int i = 0; i < this->dimension; i++) {
			this->fields[i] = new Field[this->dimension];
		}
		this->generateEmptyFields(x, y);
	}

	ShipPanels::Panel::~Panel() {
		delete this->rowLabels;
		delete this->columnLabels;
		for (int i = 0; i < this->dimension; i++) {
			delete this->fields[i];
		}
		delete *this->fields;
		delete this->client;
	}

	void ShipPanels::Panel::generateEmptyFields(int x, int y) {
		int fieldWidth = 40;
		int fieldHeight = 40;
		Drawing::Size *fieldSize = new Drawing::Size(fieldWidth, fieldHeight);

		int xPos = x + fieldWidth;
		int yPos = y + fieldHeight;

		this->warning->Text = "Proszê czekaæ na wygenerowanie plansz do gry.";
		this->warning->Location = new Drawing::Point(xPos, yPos);
		this->warning->Size = new Drawing::Size(10 * fieldWidth, 10 * fieldHeight);
		
		for (int i = 0; i < this->dimension; i++) {
			rowLabels[i].Text = getLetterByIndex(i);
			rowLabels[i].Size = fieldSize;
			rowLabels[i].Location = new Drawing::Point(xPos, y);

			columnLabels[i].Text = _itoa(i + 1, new char(), 10);
			columnLabels[i].Size = fieldSize;
			columnLabels[i].Location = new Drawing::Point(x, yPos);

			xPos += fieldWidth;
			yPos += fieldHeight;
		}

		x += fieldWidth;
		y += fieldHeight;
		xPos = x;
		yPos = y;
		for (int j = 0; j < this->dimension; j++) {
			for (int i = 0; i < this->dimension; i++) {
				fields[i][j].Text = "";
				fields[i][j].Size = fieldSize;
				fields[i][j].Location = new Drawing::Point(xPos, yPos);
				fields[i][j].y = j;
				fields[i][j].x = i;
				fields[i][j].Click += new EventHandler::New<Panel>(this, &Panel::field_Click);
				xPos += fieldWidth;
			}
			xPos = x;
			yPos += fieldHeight;
		}
	}

	void ShipPanels::Panel::disableButtons() {
		for (int j = 0; j < this->dimension; j++) {
			for (int i = 0; i < this->dimension; i++) {
				EnableWindow(fields[i][j].hWnd, FALSE);
			}
		}
	}

	void ShipPanels::Panel::enableButtons() {
		for (int j = 0; j < this->dimension; j++) {
			for (int i = 0; i < this->dimension; i++) {
				EnableWindow(fields[i][j].hWnd, TRUE);
			}
		}
	}

	char* ShipPanels::Panel::getLetterByIndex(int i) {
		switch (i) {
			case 0: return "A";
			case 1: return "B";
			case 2: return "C";
			case 3: return "D";
			case 4: return "E";
			case 5: return "F";
			case 6: return "G";
			case 7: return "H";
			case 8: return "I";
			case 9: return "J";
			default: return "A";
		}
	}

	void ShipPanels::Panel::field_Click(void* sender, EventArgs* e) {
		Field * field = (Field*)sender;
		if ((field->status != FieldStatus::UNACTIVE) && (field->status != FieldStatus::SHIP)) {
			PSTR message;
			int textLength = 30;

			message = (PSTR)VirtualAlloc((LPVOID)NULL, (DWORD)(textLength + 1), MEM_COMMIT, PAGE_READWRITE);

			std::string sx = std::to_string(field->x);
			std::string sy = std::to_string(field->y);
			std::string contentMessage = "S-" + sx + "," + sy;
			strcpy(message, contentMessage.c_str());

			client->sendActionPackets(message);

			VirtualFree(message, 0, MEM_RELEASE);
		}
	}

	void ShipPanels::Panel::setFieldBitmaps() {
		for (int i = 0; i < this->dimension; i++) {
			for (int j = 0; j < this->dimension; j++) {
				changeOnSelectable(fields[i][j]);
			}
		}
	}

	void ShipPanels::Panel::changeOnShip(Field & field) {
		field.status = FieldStatus::SHIP;
		changeBitmapOnShip(field.hWnd);
	}

	void ShipPanels::Panel::changeOnSelectable(Field & field) {
		field.status = FieldStatus::ACTIVE;
		changeBitmapOnSelectable(field.hWnd);
	}

	void ShipPanels::Panel::changeOnUnselectable(Field & field) {
		field.status = FieldStatus::UNACTIVE;
		changeBitmapOnUnselectable(field.hWnd);
	}

	void ShipPanels::Panel::destroyShip(Field & field) {
		field.status = FieldStatus::SHIP;
		HBITMAP b = LoadBitmap(Application::hInstance, MAKEINTRESOURCE(IDB_BITMAP11));
		SendMessage(field.hWnd, BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)b);
	}

	void ShipPanels::Panel::changeBitmapOnShip(HWND & fieldHwnd) {
		HBITMAP b = LoadBitmap(Application::hInstance, MAKEINTRESOURCE(IDB_BITMAP3));
		SendMessage(fieldHwnd, BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)b);
	}

	void ShipPanels::Panel::changeBitmapOnSelectable(HWND & fieldHwnd) {
		HBITMAP b = LoadBitmap(Application::hInstance, MAKEINTRESOURCE(IDB_BITMAP2));
		SendMessage(fieldHwnd, BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)b);
	}

	void ShipPanels::Panel::changeBitmapOnUnselectable(HWND & fieldHwnd) {
		HBITMAP b = LoadBitmap(Application::hInstance, MAKEINTRESOURCE(IDB_BITMAP4));
		SendMessage(fieldHwnd, BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)b);
	}

	void ShipPanels::Panel::setID(int id) {
		this->panelId = id;
	}