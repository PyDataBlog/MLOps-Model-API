/*
Copyright 2015-2018 Orchidware Studios LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include "DefaultOverlay.hpp"

#ifdef UWP
#include "pch.h"
#include "Engine\Constants.hpp"
#include "LogicEngine\RuleConstants.hpp"
#include "Engine\Include\Tools\ToolFactory.hpp"
#include "OrchiOne\Include\Model\Tools\Sword.hpp"
#include "OrchiOne\Include\Model\Tools\SwordParameter.hpp"
#include "OrchiOne\Include\Model\Tools\Boomerang.hpp"
#include "OrchiOne\Include\Model\Tools\BoomerangParameter.hpp"
#include "OrchiOne\Include\Model\Tools\Bomb.hpp"
#include "OrchiOne\Include\Model\Tools\BombParameter.hpp"
#include "OrchiOne\Include\Model\Tools\Arrow.hpp"
#include "OrchiOne\Include\Model\Tools\ArrowParameter.hpp"
#include "OrchiOne\Include\Model\Tools\Pebble.hpp"
#include "OrchiOne\Include\Model\Tools\PebbleParameter.hpp"

#include "Engine\Include\Utils\Utils.hpp"
#include "Engine\Include\Config\Config.hpp"
#include "Engine\Constants.hpp"
#include "Engine\Include\Content\GameWindow.hpp"
#elif defined(IOS)
#include "Constants.hpp"
#include "RuleConstants.hpp"
#include "ToolFactory.hpp"
#include "Sword.hpp"
#include "SwordParameter.hpp"
#include "Boomerang.hpp"
#include "BoomerangParameter.hpp"
#include "Bomb.hpp"
#include "BombParameter.hpp"
#include "Arrow.hpp"
#include "ArrowParameter.hpp"

#include "Utils.hpp"
#include "Config.hpp"
#include "Constants.hpp"
#include "GameWindow.hpp"
#endif

//
//
//
DefaultOverlay::DefaultOverlay(Controller * pController)
	: ControllerOverlay(pController)
{
}

//
//
//
bool DefaultOverlay::GetIsConnected()
{
	return m_pController->GetIsConnected();
}

//
//
//
bool DefaultOverlay::Update(
	ControllerParameter * pParam,
	Controller *)
{
	bool bRetVal = false;

	// For the TouchScreenController, this does nothing.
	bRetVal = m_pController->Update(pParam, m_pController);

	CheckAButton(pParam);
	CheckBButton(pParam);
	CheckXButton(pParam);
	CheckYButton(pParam);
	CheckLTButton(pParam);
	CheckLBButton(pParam);
	CheckRTButton(pParam);
	CheckRBButton(pParam);
	CheckLeftThumbstick(pParam);
	CheckRightThumbstick(pParam);
	CheckDirectionalKeypad(pParam);
	CheckKey(pParam);

	return bRetVal;
}

//
//
//
int DefaultOverlay::CheckAButton(
	ControllerParameter * pParam)
{
	int nButtonStateChange =
		m_pController->CheckAButton(pParam);

	if (nButtonStateChange == TO_HIGH)
	{
		PebbleParameter pebbleParameter
		{
			pParam->GetPlayer(),
			FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_HEADING, A_HEADING_VALUE)),
			float2
			{
				FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_LOCATION, A_LOCATION_X)),
				FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_LOCATION, A_LOCATION_Y)),
			}
		};

		// Using the Sword entails the following:
		// 1. Put the Sword on the stack of the current subdivision.
		// 2. Remove the Sword from the stack of the current
		//		subdivision after it disappears.
		
		// Create a prototypical sword.
		Tool * pPebble =
			ToolFactory::Clone(Pebble::PEBBLE, &pebbleParameter);

		pParam->GetSubdivision()->Set(LAYER_TOOLS, pPebble);
	}

	return nButtonStateChange;
}

//
//
//
int DefaultOverlay::CheckBButton(
	ControllerParameter * pParam)
{
	int nButtonStateChange =
		m_pController->CheckBButton(pParam);

	if (nButtonStateChange == TO_HIGH)
	{
		BombParameter bombParameter
		{
			pParam->GetPlayer(),
			FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_HEADING, A_HEADING_VALUE)),
			float2
			{
				FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_LOCATION, A_LOCATION_X)),
				FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_LOCATION, A_LOCATION_Y)),
			}
		};

		// Create a prototypical sword.
		Tool * pBomb =
			ToolFactory::Clone(Bomb::BOMB, &bombParameter);

		pParam->GetSubdivision()->Set(LAYER_TOOLS, pBomb);
	}

	return nButtonStateChange;
}

//
//
//
int DefaultOverlay::CheckXButton(
	ControllerParameter * pParam)
{
	int nButtonStateChange =
		m_pController->CheckXButton(pParam);

	if (nButtonStateChange == TO_HIGH)
	{
		BoomerangParameter boomerangParameter
		{
			pParam->GetPlayer(),
			FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_HEADING, A_HEADING_VALUE)),
			float2
			{
				FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_LOCATION, A_LOCATION_X)),
				FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_LOCATION, A_LOCATION_Y)),
			},
			true
		};

		// Create a prototypical sword.
		Tool * pBoomerang =
			ToolFactory::Clone(
				Boomerang::BOOMERANG, 
				&boomerangParameter);

		pParam->GetSubdivision()->Set(LAYER_TOOLS, pBoomerang);
	}

	return nButtonStateChange;
}

//
//
//
int DefaultOverlay::CheckYButton(
	ControllerParameter * pParam)
{
	int nButtonStateChange = 
		m_pController->CheckYButton(pParam);

	if (nButtonStateChange == TO_HIGH)
	{
		ArrowParameter arrowParameter
		{
			pParam->GetPlayer(),
			FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_HEADING, A_HEADING_VALUE)),
			float2
			{
				FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_LOCATION, A_LOCATION_X)),
				FLOAT(pParam->GetPlayer()->GetAttributes()->LookupValue(A_LOCATION, A_LOCATION_Y)),
			}
		};

		// Create a prototypical sword.
		Tool * pArrow =
			ToolFactory::Clone(Arrow::ARROW, &arrowParameter);

		pParam->GetSubdivision()->Set(LAYER_TOOLS, pArrow);
	}

	return nButtonStateChange;
}

//
//
//
void DefaultOverlay::CheckLBButton(
	ControllerParameter * pParam)
{
	m_pController->CheckLBButton(pParam);
}

//
//
//
int DefaultOverlay::CheckRBButton(
	ControllerParameter * pParam)
{
	int nButtonStateChange =
		m_pController->CheckRBButton(pParam);

	if (nButtonStateChange == TO_HIGH)
	{
		bool bState = Config::GetInstance()->IsDiagnosticMode();

		if (bState == true)
		{
			Config::GetInstance()->SetDiagnosticMode(false);
		}
		else
		{
			Config::GetInstance()->SetDiagnosticMode(true);
		}
	}

	return nButtonStateChange;
}

//
//
//
double DefaultOverlay::CheckRTButton(
	ControllerParameter * pParam)
{
	return m_pController->CheckRTButton(pParam);
}

//
//
//
double DefaultOverlay::CheckLTButton(
	ControllerParameter * pParam)
{
	return m_pController->CheckLTButton(pParam);
}

//
// Called by Update, and nothing else
//
bool DefaultOverlay::CheckLeftThumbstick(
	ControllerParameter * pParam)
{
	return m_pController->CheckLeftThumbstick(pParam);
}

//
//
//
void DefaultOverlay::CheckRightThumbstick(
	ControllerParameter * pParam)
{
	m_pController->CheckRightThumbstick(pParam);
}

//
//
//
void DefaultOverlay::CheckDirectionalKeypad(
	ControllerParameter * pParam)
{
	m_pController->CheckDirectionalKeypad(pParam);
}

//
//
//
void DefaultOverlay::CheckKey(
	ControllerParameter * pParam)
{
	m_pController->CheckKey(pParam);
}
