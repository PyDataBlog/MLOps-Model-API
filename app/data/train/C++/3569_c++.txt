#include <vector>
#include <iostream>
#include <iomanip>
#include "drvg.hpp"
#include "random.hpp"
#include "timer.hpp"

using namespace std;
using namespace wat;

template<typename T>
void test(const vector<double>& prob, int number)
{
    T ge(prob.begin(), prob.end());
    std::vector<int> sum(prob.size());
    timer ti;
    ti.start();
    for (int i = 0; i < number; ++i)
    {
        ++sum[ge()];
    }
    ti.stop();
    std::cout << std::setw(11) << ti.time() << std::endl;
}

int main()
{
    vector<double> prob;
    int size = 100000;
    int number = 1000000;
    for (int i = 0; i < size; ++i)
    {
        prob.push_back(wat::random_01());
    }
    std::cout << std::setw(23) << "sequential search:" << " size=" << number / 100;
    test<drvg_sequential_search>(prob, number / 100);
    std::cout << std::setw(23) << "binary search:" << " size=" << number;
    test<drvg_binary_search>(prob, number);
    return 0;
};
