// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/post_processing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/post_processing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class BatchNonMaxSuppressionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BatchNonMaxSuppression>
     _instance;
} _BatchNonMaxSuppression_default_instance_;
class PostProcessingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PostProcessing>
     _instance;
} _PostProcessing_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, score_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, iou_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, max_detections_per_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, max_total_detections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, use_static_shapes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, use_class_agnostic_nms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, max_classes_per_detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNonMaxSuppression, soft_nms_sigma_),
  0,
  4,
  5,
  6,
  1,
  2,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostProcessing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostProcessing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostProcessing, batch_non_max_suppression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostProcessing, score_converter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostProcessing, logit_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostProcessing, calibration_config_),
  0,
  2,
  3,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(BatchNonMaxSuppression)},
  { 21, 30, sizeof(PostProcessing)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchNonMaxSuppression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PostProcessing_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/post_processing.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fcalibration_2eproto::InitDefaults();
  _BatchNonMaxSuppression_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BatchNonMaxSuppression_default_instance_);_PostProcessing_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PostProcessing_default_instance_);_PostProcessing_default_instance_._instance.get_mutable()->batch_non_max_suppression_ = const_cast< ::object_detection::protos::BatchNonMaxSuppression*>(
      ::object_detection::protos::BatchNonMaxSuppression::internal_default_instance());
  _PostProcessing_default_instance_._instance.get_mutable()->calibration_config_ = const_cast< ::object_detection::protos::CalibrationConfig*>(
      ::object_detection::protos::CalibrationConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-object_detection/protos/post_processin"
      "g.proto\022\027object_detection.protos\032)object"
      "_detection/protos/calibration.proto\"\244\002\n\026"
      "BatchNonMaxSuppression\022\032\n\017score_threshol"
      "d\030\001 \001(\002:\0010\022\032\n\riou_threshold\030\002 \001(\002:\0030.6\022%"
      "\n\030max_detections_per_class\030\003 \001(\005:\003100\022!\n"
      "\024max_total_detections\030\005 \001(\005:\003100\022 \n\021use_"
      "static_shapes\030\006 \001(\010:\005false\022%\n\026use_class_"
      "agnostic_nms\030\007 \001(\010:\005false\022$\n\031max_classes"
      "_per_detection\030\010 \001(\005:\0011\022\031\n\016soft_nms_sigm"
      "a\030\t \001(\002:\0010\"\331\002\n\016PostProcessing\022R\n\031batch_n"
      "on_max_suppression\030\001 \001(\0132/.object_detect"
      "ion.protos.BatchNonMaxSuppression\022Y\n\017sco"
      "re_converter\030\002 \001(\01626.object_detection.pr"
      "otos.PostProcessing.ScoreConverter:\010IDEN"
      "TITY\022\026\n\013logit_scale\030\003 \001(\002:\0011\022F\n\022calibrat"
      "ion_config\030\004 \001(\0132*.object_detection.prot"
      "os.CalibrationConfig\"8\n\016ScoreConverter\022\014"
      "\n\010IDENTITY\020\000\022\013\n\007SIGMOID\020\001\022\013\n\007SOFTMAX\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 758);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/post_processing.proto", &protobuf_RegisterTypes);
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fcalibration_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto

const ::google::protobuf::EnumDescriptor* PostProcessing_ScoreConverter_descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::file_level_enum_descriptors[0];
}
bool PostProcessing_ScoreConverter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PostProcessing_ScoreConverter PostProcessing::IDENTITY;
const PostProcessing_ScoreConverter PostProcessing::SIGMOID;
const PostProcessing_ScoreConverter PostProcessing::SOFTMAX;
const PostProcessing_ScoreConverter PostProcessing::ScoreConverter_MIN;
const PostProcessing_ScoreConverter PostProcessing::ScoreConverter_MAX;
const int PostProcessing::ScoreConverter_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNonMaxSuppression::kScoreThresholdFieldNumber;
const int BatchNonMaxSuppression::kIouThresholdFieldNumber;
const int BatchNonMaxSuppression::kMaxDetectionsPerClassFieldNumber;
const int BatchNonMaxSuppression::kMaxTotalDetectionsFieldNumber;
const int BatchNonMaxSuppression::kUseStaticShapesFieldNumber;
const int BatchNonMaxSuppression::kUseClassAgnosticNmsFieldNumber;
const int BatchNonMaxSuppression::kMaxClassesPerDetectionFieldNumber;
const int BatchNonMaxSuppression::kSoftNmsSigmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNonMaxSuppression::BatchNonMaxSuppression()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.BatchNonMaxSuppression)
}
BatchNonMaxSuppression::BatchNonMaxSuppression(const BatchNonMaxSuppression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_threshold_, &from.score_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_classes_per_detection_) -
    reinterpret_cast<char*>(&score_threshold_)) + sizeof(max_classes_per_detection_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.BatchNonMaxSuppression)
}

void BatchNonMaxSuppression::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soft_nms_sigma_) -
      reinterpret_cast<char*>(&score_threshold_)) + sizeof(soft_nms_sigma_));
  iou_threshold_ = 0.6f;
  max_detections_per_class_ = 100;
  max_total_detections_ = 100;
  max_classes_per_detection_ = 1;
}

BatchNonMaxSuppression::~BatchNonMaxSuppression() {
  // @@protoc_insertion_point(destructor:object_detection.protos.BatchNonMaxSuppression)
  SharedDtor();
}

void BatchNonMaxSuppression::SharedDtor() {
}

void BatchNonMaxSuppression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNonMaxSuppression::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchNonMaxSuppression& BatchNonMaxSuppression::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchNonMaxSuppression* BatchNonMaxSuppression::New(::google::protobuf::Arena* arena) const {
  BatchNonMaxSuppression* n = new BatchNonMaxSuppression;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchNonMaxSuppression::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.BatchNonMaxSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&score_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soft_nms_sigma_) -
        reinterpret_cast<char*>(&score_threshold_)) + sizeof(soft_nms_sigma_));
    iou_threshold_ = 0.6f;
    max_detections_per_class_ = 100;
    max_total_detections_ = 100;
    max_classes_per_detection_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchNonMaxSuppression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.BatchNonMaxSuppression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score_threshold = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_score_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float iou_threshold = 2 [default = 0.6];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_iou_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_detections_per_class = 3 [default = 100];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_detections_per_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_detections_per_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_total_detections = 5 [default = 100];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_max_total_detections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_total_detections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_static_shapes = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_use_static_shapes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_static_shapes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_class_agnostic_nms = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_use_class_agnostic_nms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_class_agnostic_nms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_classes_per_detection = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_max_classes_per_detection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_classes_per_detection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float soft_nms_sigma = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_soft_nms_sigma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &soft_nms_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.BatchNonMaxSuppression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.BatchNonMaxSuppression)
  return false;
#undef DO_
}

void BatchNonMaxSuppression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.BatchNonMaxSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score_threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score_threshold(), output);
  }

  // optional float iou_threshold = 2 [default = 0.6];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->iou_threshold(), output);
  }

  // optional int32 max_detections_per_class = 3 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_detections_per_class(), output);
  }

  // optional int32 max_total_detections = 5 [default = 100];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_total_detections(), output);
  }

  // optional bool use_static_shapes = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_static_shapes(), output);
  }

  // optional bool use_class_agnostic_nms = 7 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_class_agnostic_nms(), output);
  }

  // optional int32 max_classes_per_detection = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_classes_per_detection(), output);
  }

  // optional float soft_nms_sigma = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->soft_nms_sigma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.BatchNonMaxSuppression)
}

::google::protobuf::uint8* BatchNonMaxSuppression::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.BatchNonMaxSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score_threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score_threshold(), target);
  }

  // optional float iou_threshold = 2 [default = 0.6];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->iou_threshold(), target);
  }

  // optional int32 max_detections_per_class = 3 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_detections_per_class(), target);
  }

  // optional int32 max_total_detections = 5 [default = 100];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_total_detections(), target);
  }

  // optional bool use_static_shapes = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_static_shapes(), target);
  }

  // optional bool use_class_agnostic_nms = 7 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_class_agnostic_nms(), target);
  }

  // optional int32 max_classes_per_detection = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_classes_per_detection(), target);
  }

  // optional float soft_nms_sigma = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->soft_nms_sigma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.BatchNonMaxSuppression)
  return target;
}

size_t BatchNonMaxSuppression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.BatchNonMaxSuppression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float score_threshold = 1 [default = 0];
    if (has_score_threshold()) {
      total_size += 1 + 4;
    }

    // optional bool use_static_shapes = 6 [default = false];
    if (has_use_static_shapes()) {
      total_size += 1 + 1;
    }

    // optional bool use_class_agnostic_nms = 7 [default = false];
    if (has_use_class_agnostic_nms()) {
      total_size += 1 + 1;
    }

    // optional float soft_nms_sigma = 9 [default = 0];
    if (has_soft_nms_sigma()) {
      total_size += 1 + 4;
    }

    // optional float iou_threshold = 2 [default = 0.6];
    if (has_iou_threshold()) {
      total_size += 1 + 4;
    }

    // optional int32 max_detections_per_class = 3 [default = 100];
    if (has_max_detections_per_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_detections_per_class());
    }

    // optional int32 max_total_detections = 5 [default = 100];
    if (has_max_total_detections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_total_detections());
    }

    // optional int32 max_classes_per_detection = 8 [default = 1];
    if (has_max_classes_per_detection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_classes_per_detection());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNonMaxSuppression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.BatchNonMaxSuppression)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNonMaxSuppression* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchNonMaxSuppression>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.BatchNonMaxSuppression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.BatchNonMaxSuppression)
    MergeFrom(*source);
  }
}

void BatchNonMaxSuppression::MergeFrom(const BatchNonMaxSuppression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.BatchNonMaxSuppression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      score_threshold_ = from.score_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_static_shapes_ = from.use_static_shapes_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_class_agnostic_nms_ = from.use_class_agnostic_nms_;
    }
    if (cached_has_bits & 0x00000008u) {
      soft_nms_sigma_ = from.soft_nms_sigma_;
    }
    if (cached_has_bits & 0x00000010u) {
      iou_threshold_ = from.iou_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_detections_per_class_ = from.max_detections_per_class_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_total_detections_ = from.max_total_detections_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_classes_per_detection_ = from.max_classes_per_detection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchNonMaxSuppression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.BatchNonMaxSuppression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNonMaxSuppression::CopyFrom(const BatchNonMaxSuppression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.BatchNonMaxSuppression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNonMaxSuppression::IsInitialized() const {
  return true;
}

void BatchNonMaxSuppression::Swap(BatchNonMaxSuppression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchNonMaxSuppression::InternalSwap(BatchNonMaxSuppression* other) {
  using std::swap;
  swap(score_threshold_, other->score_threshold_);
  swap(use_static_shapes_, other->use_static_shapes_);
  swap(use_class_agnostic_nms_, other->use_class_agnostic_nms_);
  swap(soft_nms_sigma_, other->soft_nms_sigma_);
  swap(iou_threshold_, other->iou_threshold_);
  swap(max_detections_per_class_, other->max_detections_per_class_);
  swap(max_total_detections_, other->max_total_detections_);
  swap(max_classes_per_detection_, other->max_classes_per_detection_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNonMaxSuppression::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchNonMaxSuppression

// optional float score_threshold = 1 [default = 0];
bool BatchNonMaxSuppression::has_score_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchNonMaxSuppression::set_has_score_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchNonMaxSuppression::clear_has_score_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchNonMaxSuppression::clear_score_threshold() {
  score_threshold_ = 0;
  clear_has_score_threshold();
}
float BatchNonMaxSuppression::score_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BatchNonMaxSuppression.score_threshold)
  return score_threshold_;
}
void BatchNonMaxSuppression::set_score_threshold(float value) {
  set_has_score_threshold();
  score_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BatchNonMaxSuppression.score_threshold)
}

// optional float iou_threshold = 2 [default = 0.6];
bool BatchNonMaxSuppression::has_iou_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BatchNonMaxSuppression::set_has_iou_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void BatchNonMaxSuppression::clear_has_iou_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void BatchNonMaxSuppression::clear_iou_threshold() {
  iou_threshold_ = 0.6f;
  clear_has_iou_threshold();
}
float BatchNonMaxSuppression::iou_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BatchNonMaxSuppression.iou_threshold)
  return iou_threshold_;
}
void BatchNonMaxSuppression::set_iou_threshold(float value) {
  set_has_iou_threshold();
  iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BatchNonMaxSuppression.iou_threshold)
}

// optional int32 max_detections_per_class = 3 [default = 100];
bool BatchNonMaxSuppression::has_max_detections_per_class() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BatchNonMaxSuppression::set_has_max_detections_per_class() {
  _has_bits_[0] |= 0x00000020u;
}
void BatchNonMaxSuppression::clear_has_max_detections_per_class() {
  _has_bits_[0] &= ~0x00000020u;
}
void BatchNonMaxSuppression::clear_max_detections_per_class() {
  max_detections_per_class_ = 100;
  clear_has_max_detections_per_class();
}
::google::protobuf::int32 BatchNonMaxSuppression::max_detections_per_class() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BatchNonMaxSuppression.max_detections_per_class)
  return max_detections_per_class_;
}
void BatchNonMaxSuppression::set_max_detections_per_class(::google::protobuf::int32 value) {
  set_has_max_detections_per_class();
  max_detections_per_class_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BatchNonMaxSuppression.max_detections_per_class)
}

// optional int32 max_total_detections = 5 [default = 100];
bool BatchNonMaxSuppression::has_max_total_detections() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BatchNonMaxSuppression::set_has_max_total_detections() {
  _has_bits_[0] |= 0x00000040u;
}
void BatchNonMaxSuppression::clear_has_max_total_detections() {
  _has_bits_[0] &= ~0x00000040u;
}
void BatchNonMaxSuppression::clear_max_total_detections() {
  max_total_detections_ = 100;
  clear_has_max_total_detections();
}
::google::protobuf::int32 BatchNonMaxSuppression::max_total_detections() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BatchNonMaxSuppression.max_total_detections)
  return max_total_detections_;
}
void BatchNonMaxSuppression::set_max_total_detections(::google::protobuf::int32 value) {
  set_has_max_total_detections();
  max_total_detections_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BatchNonMaxSuppression.max_total_detections)
}

// optional bool use_static_shapes = 6 [default = false];
bool BatchNonMaxSuppression::has_use_static_shapes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchNonMaxSuppression::set_has_use_static_shapes() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchNonMaxSuppression::clear_has_use_static_shapes() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchNonMaxSuppression::clear_use_static_shapes() {
  use_static_shapes_ = false;
  clear_has_use_static_shapes();
}
bool BatchNonMaxSuppression::use_static_shapes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BatchNonMaxSuppression.use_static_shapes)
  return use_static_shapes_;
}
void BatchNonMaxSuppression::set_use_static_shapes(bool value) {
  set_has_use_static_shapes();
  use_static_shapes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BatchNonMaxSuppression.use_static_shapes)
}

// optional bool use_class_agnostic_nms = 7 [default = false];
bool BatchNonMaxSuppression::has_use_class_agnostic_nms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BatchNonMaxSuppression::set_has_use_class_agnostic_nms() {
  _has_bits_[0] |= 0x00000004u;
}
void BatchNonMaxSuppression::clear_has_use_class_agnostic_nms() {
  _has_bits_[0] &= ~0x00000004u;
}
void BatchNonMaxSuppression::clear_use_class_agnostic_nms() {
  use_class_agnostic_nms_ = false;
  clear_has_use_class_agnostic_nms();
}
bool BatchNonMaxSuppression::use_class_agnostic_nms() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BatchNonMaxSuppression.use_class_agnostic_nms)
  return use_class_agnostic_nms_;
}
void BatchNonMaxSuppression::set_use_class_agnostic_nms(bool value) {
  set_has_use_class_agnostic_nms();
  use_class_agnostic_nms_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BatchNonMaxSuppression.use_class_agnostic_nms)
}

// optional int32 max_classes_per_detection = 8 [default = 1];
bool BatchNonMaxSuppression::has_max_classes_per_detection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BatchNonMaxSuppression::set_has_max_classes_per_detection() {
  _has_bits_[0] |= 0x00000080u;
}
void BatchNonMaxSuppression::clear_has_max_classes_per_detection() {
  _has_bits_[0] &= ~0x00000080u;
}
void BatchNonMaxSuppression::clear_max_classes_per_detection() {
  max_classes_per_detection_ = 1;
  clear_has_max_classes_per_detection();
}
::google::protobuf::int32 BatchNonMaxSuppression::max_classes_per_detection() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BatchNonMaxSuppression.max_classes_per_detection)
  return max_classes_per_detection_;
}
void BatchNonMaxSuppression::set_max_classes_per_detection(::google::protobuf::int32 value) {
  set_has_max_classes_per_detection();
  max_classes_per_detection_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BatchNonMaxSuppression.max_classes_per_detection)
}

// optional float soft_nms_sigma = 9 [default = 0];
bool BatchNonMaxSuppression::has_soft_nms_sigma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BatchNonMaxSuppression::set_has_soft_nms_sigma() {
  _has_bits_[0] |= 0x00000008u;
}
void BatchNonMaxSuppression::clear_has_soft_nms_sigma() {
  _has_bits_[0] &= ~0x00000008u;
}
void BatchNonMaxSuppression::clear_soft_nms_sigma() {
  soft_nms_sigma_ = 0;
  clear_has_soft_nms_sigma();
}
float BatchNonMaxSuppression::soft_nms_sigma() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BatchNonMaxSuppression.soft_nms_sigma)
  return soft_nms_sigma_;
}
void BatchNonMaxSuppression::set_soft_nms_sigma(float value) {
  set_has_soft_nms_sigma();
  soft_nms_sigma_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BatchNonMaxSuppression.soft_nms_sigma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostProcessing::kBatchNonMaxSuppressionFieldNumber;
const int PostProcessing::kScoreConverterFieldNumber;
const int PostProcessing::kLogitScaleFieldNumber;
const int PostProcessing::kCalibrationConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostProcessing::PostProcessing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.PostProcessing)
}
PostProcessing::PostProcessing(const PostProcessing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_batch_non_max_suppression()) {
    batch_non_max_suppression_ = new ::object_detection::protos::BatchNonMaxSuppression(*from.batch_non_max_suppression_);
  } else {
    batch_non_max_suppression_ = NULL;
  }
  if (from.has_calibration_config()) {
    calibration_config_ = new ::object_detection::protos::CalibrationConfig(*from.calibration_config_);
  } else {
    calibration_config_ = NULL;
  }
  ::memcpy(&score_converter_, &from.score_converter_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_scale_) -
    reinterpret_cast<char*>(&score_converter_)) + sizeof(logit_scale_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.PostProcessing)
}

void PostProcessing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&batch_non_max_suppression_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_converter_) -
      reinterpret_cast<char*>(&batch_non_max_suppression_)) + sizeof(score_converter_));
  logit_scale_ = 1;
}

PostProcessing::~PostProcessing() {
  // @@protoc_insertion_point(destructor:object_detection.protos.PostProcessing)
  SharedDtor();
}

void PostProcessing::SharedDtor() {
  if (this != internal_default_instance()) delete batch_non_max_suppression_;
  if (this != internal_default_instance()) delete calibration_config_;
}

void PostProcessing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostProcessing::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostProcessing& PostProcessing::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::InitDefaults();
  return *internal_default_instance();
}

PostProcessing* PostProcessing::New(::google::protobuf::Arena* arena) const {
  PostProcessing* n = new PostProcessing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostProcessing::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.PostProcessing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(batch_non_max_suppression_ != NULL);
      batch_non_max_suppression_->::object_detection::protos::BatchNonMaxSuppression::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(calibration_config_ != NULL);
      calibration_config_->::object_detection::protos::CalibrationConfig::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    score_converter_ = 0;
    logit_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PostProcessing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.PostProcessing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_non_max_suppression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::PostProcessing_ScoreConverter_IsValid(value)) {
            set_score_converter(static_cast< ::object_detection::protos::PostProcessing_ScoreConverter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float logit_scale = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_logit_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.PostProcessing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.PostProcessing)
  return false;
#undef DO_
}

void PostProcessing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.PostProcessing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->batch_non_max_suppression_, output);
  }

  // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->score_converter(), output);
  }

  // optional float logit_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->logit_scale(), output);
  }

  // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->calibration_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.PostProcessing)
}

::google::protobuf::uint8* PostProcessing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.PostProcessing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->batch_non_max_suppression_, deterministic, target);
  }

  // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->score_converter(), target);
  }

  // optional float logit_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->logit_scale(), target);
  }

  // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->calibration_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.PostProcessing)
  return target;
}

size_t PostProcessing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.PostProcessing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
    if (has_batch_non_max_suppression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batch_non_max_suppression_);
    }

    // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
    if (has_calibration_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->calibration_config_);
    }

    // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
    if (has_score_converter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->score_converter());
    }

    // optional float logit_scale = 3 [default = 1];
    if (has_logit_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostProcessing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.PostProcessing)
  GOOGLE_DCHECK_NE(&from, this);
  const PostProcessing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostProcessing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.PostProcessing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.PostProcessing)
    MergeFrom(*source);
  }
}

void PostProcessing::MergeFrom(const PostProcessing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.PostProcessing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_batch_non_max_suppression()->::object_detection::protos::BatchNonMaxSuppression::MergeFrom(from.batch_non_max_suppression());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_calibration_config()->::object_detection::protos::CalibrationConfig::MergeFrom(from.calibration_config());
    }
    if (cached_has_bits & 0x00000004u) {
      score_converter_ = from.score_converter_;
    }
    if (cached_has_bits & 0x00000008u) {
      logit_scale_ = from.logit_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PostProcessing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.PostProcessing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostProcessing::CopyFrom(const PostProcessing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.PostProcessing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostProcessing::IsInitialized() const {
  return true;
}

void PostProcessing::Swap(PostProcessing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostProcessing::InternalSwap(PostProcessing* other) {
  using std::swap;
  swap(batch_non_max_suppression_, other->batch_non_max_suppression_);
  swap(calibration_config_, other->calibration_config_);
  swap(score_converter_, other->score_converter_);
  swap(logit_scale_, other->logit_scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostProcessing::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostProcessing

// optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
bool PostProcessing::has_batch_non_max_suppression() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PostProcessing::set_has_batch_non_max_suppression() {
  _has_bits_[0] |= 0x00000001u;
}
void PostProcessing::clear_has_batch_non_max_suppression() {
  _has_bits_[0] &= ~0x00000001u;
}
void PostProcessing::clear_batch_non_max_suppression() {
  if (batch_non_max_suppression_ != NULL) batch_non_max_suppression_->::object_detection::protos::BatchNonMaxSuppression::Clear();
  clear_has_batch_non_max_suppression();
}
const ::object_detection::protos::BatchNonMaxSuppression& PostProcessing::batch_non_max_suppression() const {
  const ::object_detection::protos::BatchNonMaxSuppression* p = batch_non_max_suppression_;
  // @@protoc_insertion_point(field_get:object_detection.protos.PostProcessing.batch_non_max_suppression)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::BatchNonMaxSuppression*>(
      &::object_detection::protos::_BatchNonMaxSuppression_default_instance_);
}
::object_detection::protos::BatchNonMaxSuppression* PostProcessing::mutable_batch_non_max_suppression() {
  set_has_batch_non_max_suppression();
  if (batch_non_max_suppression_ == NULL) {
    batch_non_max_suppression_ = new ::object_detection::protos::BatchNonMaxSuppression;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PostProcessing.batch_non_max_suppression)
  return batch_non_max_suppression_;
}
::object_detection::protos::BatchNonMaxSuppression* PostProcessing::release_batch_non_max_suppression() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PostProcessing.batch_non_max_suppression)
  clear_has_batch_non_max_suppression();
  ::object_detection::protos::BatchNonMaxSuppression* temp = batch_non_max_suppression_;
  batch_non_max_suppression_ = NULL;
  return temp;
}
void PostProcessing::set_allocated_batch_non_max_suppression(::object_detection::protos::BatchNonMaxSuppression* batch_non_max_suppression) {
  delete batch_non_max_suppression_;
  batch_non_max_suppression_ = batch_non_max_suppression;
  if (batch_non_max_suppression) {
    set_has_batch_non_max_suppression();
  } else {
    clear_has_batch_non_max_suppression();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PostProcessing.batch_non_max_suppression)
}

// optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
bool PostProcessing::has_score_converter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PostProcessing::set_has_score_converter() {
  _has_bits_[0] |= 0x00000004u;
}
void PostProcessing::clear_has_score_converter() {
  _has_bits_[0] &= ~0x00000004u;
}
void PostProcessing::clear_score_converter() {
  score_converter_ = 0;
  clear_has_score_converter();
}
::object_detection::protos::PostProcessing_ScoreConverter PostProcessing::score_converter() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PostProcessing.score_converter)
  return static_cast< ::object_detection::protos::PostProcessing_ScoreConverter >(score_converter_);
}
void PostProcessing::set_score_converter(::object_detection::protos::PostProcessing_ScoreConverter value) {
  assert(::object_detection::protos::PostProcessing_ScoreConverter_IsValid(value));
  set_has_score_converter();
  score_converter_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.PostProcessing.score_converter)
}

// optional float logit_scale = 3 [default = 1];
bool PostProcessing::has_logit_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PostProcessing::set_has_logit_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void PostProcessing::clear_has_logit_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void PostProcessing::clear_logit_scale() {
  logit_scale_ = 1;
  clear_has_logit_scale();
}
float PostProcessing::logit_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PostProcessing.logit_scale)
  return logit_scale_;
}
void PostProcessing::set_logit_scale(float value) {
  set_has_logit_scale();
  logit_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.PostProcessing.logit_scale)
}

// optional .object_detection.protos.CalibrationConfig calibration_config = 4;
bool PostProcessing::has_calibration_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PostProcessing::set_has_calibration_config() {
  _has_bits_[0] |= 0x00000002u;
}
void PostProcessing::clear_has_calibration_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void PostProcessing::clear_calibration_config() {
  if (calibration_config_ != NULL) calibration_config_->::object_detection::protos::CalibrationConfig::Clear();
  clear_has_calibration_config();
}
const ::object_detection::protos::CalibrationConfig& PostProcessing::calibration_config() const {
  const ::object_detection::protos::CalibrationConfig* p = calibration_config_;
  // @@protoc_insertion_point(field_get:object_detection.protos.PostProcessing.calibration_config)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::CalibrationConfig*>(
      &::object_detection::protos::_CalibrationConfig_default_instance_);
}
::object_detection::protos::CalibrationConfig* PostProcessing::mutable_calibration_config() {
  set_has_calibration_config();
  if (calibration_config_ == NULL) {
    calibration_config_ = new ::object_detection::protos::CalibrationConfig;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PostProcessing.calibration_config)
  return calibration_config_;
}
::object_detection::protos::CalibrationConfig* PostProcessing::release_calibration_config() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PostProcessing.calibration_config)
  clear_has_calibration_config();
  ::object_detection::protos::CalibrationConfig* temp = calibration_config_;
  calibration_config_ = NULL;
  return temp;
}
void PostProcessing::set_allocated_calibration_config(::object_detection::protos::CalibrationConfig* calibration_config) {
  delete calibration_config_;
  calibration_config_ = calibration_config;
  if (calibration_config) {
    set_has_calibration_config();
  } else {
    clear_has_calibration_config();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PostProcessing.calibration_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
