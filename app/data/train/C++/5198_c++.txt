#include "line.h"

Line::Line()
{
    pen = new QPen();
    pen->setWidth(LINE_WIDTH);
    pen->setColor(Qt::black);
    setPen(*pen);

    setFlag(QGraphicsItem::ItemIsMovable, true);
    setFlag(QGraphicsItem::ItemIsSelectable, true);
    setAcceptHoverEvents(true);
}

Line::~Line()
{

}

void Line::startDraw(QGraphicsSceneMouseEvent *event)
{
    startPoint = new Point(event->scenePos());
    startPoint->setParentItem(this);
    endPoint = new Point(event->scenePos());
    endPoint->setParentItem(this);
    setLine(QLineF(event->scenePos(), event->scenePos()));
}

void Line::drawing(QEvent *event)
{
    QGraphicsSceneMouseEvent *mouseEvent = static_cast<QGraphicsSceneMouseEvent *>(event);
    setLine(QLineF(startPoint->pos(), mouseEvent->scenePos()));
    endPoint->setPos(mouseEvent->scenePos());
}

void Line::redraw()
{
    startPoint->setParentItem(this);
    endPoint->setParentItem(this);
    setLine(QLineF(startPoint->pos(), endPoint->pos()));
}

void Line::setFlag(GraphicsItemFlag flag, bool enabled)
{
    QGraphicsLineItem::setFlag(flag, enabled);
}

void Line::setVisible(bool isVisible)
{
    QGraphicsLineItem::setVisible(isVisible);
}

void Line::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    QGraphicsLineItem::paint(painter, option, widget);
}

bool Line::isFinished()
{

}

void Line::setStartPoint(Point *value)
{
    startPoint = value;
}

Point *Line::getStartPoint() const
{
    return startPoint;
}

void Line::setEndPoint(Point *value)
{
    endPoint = value;
}

Point *Line::getEndPoint() const
{
    return endPoint;
}
