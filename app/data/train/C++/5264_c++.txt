#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "mobileGroup.h"
#include "stateManager.h"
#include "netTCPClient.h"
#include "netTCPServer.h"

int main(int argc, char** argv)
{
    std::string address = "localhost";
    int port = 12788;

    if ((argc >= 2) && (!strncmp(argv[1],"s",2)))
    {
        char buf[32] = {0};
        int val = 1;
        unsigned int pos = 0;
        buf[pos] = 'u';
        memmove(&buf[pos+1], &val, sizeof(int));
        val = 96;
        pos += 2 + sizeof(int);
        buf[pos] = 'x';
        memmove(&buf[pos+1], &val, sizeof(int));
        pos += 2 + sizeof(int);
        buf[pos] = 'y';
        memmove(&buf[pos+1], &val, sizeof(int));
        pos += 2 + sizeof(int);
        buf[pos] = 'w';
        memmove(&buf[pos+1], &val, sizeof(int));
        pos += 2 + sizeof(int);
        buf[pos] = 'h';
        memmove(&buf[pos+1], &val, sizeof(int));
        pos += 2 + sizeof(int);
        buf[pos] = '\0';
        
        std::string crush = std::string(buf, pos);
        
        std::string incoming = "";
        ioConnection * con1 = new netTCPServer();
        con1->createConnection(&address, port);
        
        while(true)
        {
            incoming = crush;
            con1->push(&incoming);
            incoming = "";
            con1->pop(&incoming);
            if (!incoming.empty())
            {
                con1->push(&incoming);
                incoming = "";
            }
        }

        return 0;
    }

    
    Fl_Double_Window* mainWindow;
    mainWindow = new Fl_Double_Window(1216, 740);
    mainWindow->end();
    mainWindow->resizable(mainWindow);
    mainWindow->show();

    MG_inputManager * im = new MG_inputManager();
    MG_stateManager * sm = new MG_stateManager(im,mainWindow);

    sm->loadXMLFile("states.xml");
    sm->loadState("display");
    sm->connection = new netTCPClient();
    sm->connection->createConnection(&address,port);
    
    unsigned int curwid = 1;
    unsigned int countup = 0;
    while(Fl::check())
    {
       
        if (++countup > 10000)
        {
            countup = 0;
            curwid = (curwid % 32 ) + 1;
            sm->sendChange(curwid);
            sm->checkUpdates();
        }

	    Fl::wait(0);
    }
 
    return 0;
}

