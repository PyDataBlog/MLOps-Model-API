// URI - 1195
// Implementar um TAD ABB (Arvore Binaria de Busca) com as funcoes de insercao e liberacao

#include <iostream>
#include <cstdio>

using namespace std;

// Estrutura da ABB
struct Arv
{
    int valor;
    Arv *esq;
    Arv *dir;
}typedef Arv;

// Funcoes da ABB
Arv* init ();
Arv* busca (Arv *r, int v);
Arv* insere (Arv *r, int v);
bool vazia (Arv *r);
Arv* libera (Arv *r);
void imprimePos (Arv *r);
void imprimeIn (Arv *r);
void imprimePre (Arv *r);

// Inicializa a ABB
Arv* init ()
{
    return NULL;
}

Arv* insere (Arv *r, int valor)
{
    // ABB esta vazia
    if (r == NULL)
    {
        r = new Arv();
        r->valor = valor;
        r->esq = NULL;
        r->dir = NULL;
    }
    // ABB ja possui elementos
    // Valor eh menor que o da raiz, procurar na sub.arvore esquerda
    else if (valor < r->valor)
        r->esq = insere(r->esq,valor);
    // Valor eh maior que o da raiz, procurar na sub.arvore direita
    else
        r->dir = insere(r->dir,valor);
    return r;
}

// Imprime em Pre-Ordem
void imprimePre (Arv *r)
{
    if (r != NULL)
    {
        printf(" %d",r->valor);
        imprimePre(r->esq);
        imprimePre(r->dir);
    }
}

// Imprime em In-Ordem
void imprimeIn (Arv *r)
{
    if (r != NULL)
    {
        imprimeIn(r->esq);
        printf(" %d",r->valor);
        imprimeIn(r->dir);
    }
}

// Imprime em Pos-Ordem
void imprimePos (Arv *r)
{
    if (r != NULL)
    {
        imprimePos(r->esq);
        imprimePos(r->dir);
        printf(" %d",r->valor);
    }
}

bool vazia (Arv *r)
{
    if (r == NULL) return true;
    else return false;
}

Arv* libera (Arv *r)
{
    if (!vazia(r))
    {
        r->esq = libera(r->esq);
        r->dir = libera(r->dir);
        delete r;
    }
    return NULL;
}

int main ()
{
    int K, N;
    int valor;
    scanf("%d",&K);
    for (int k = 0; k < K; k++)
    {
        // Montar a arvore
        Arv *arv = init();
        scanf("%d",&N);
        for (int i = 0; i < N; i++)
        {
            scanf("%d",&valor);
            arv = insere(arv,valor);
        }
        // Imprime a arvore de acordo com a saida
        printf("Case %d:\n",k+1);
        printf("Pre.:"); imprimePre(arv); printf("\n");
        printf("In..:"); imprimeIn(arv); printf("\n");
        printf("Post:"); imprimePos(arv); printf("\n");
        // Libera arvore para a proxima entrada
        libera(arv);
        printf("\n");
    }
}
