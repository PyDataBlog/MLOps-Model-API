#include "Orbit.hpp"
#include <cmath>

Orbit::Orbit(ThreeVector startPosition, ThreeVector startVelocity, time_t startTime)
{
  currentPosition = startPosition::DeepCopy();
  currentVelocity = startVelocity::DeepCopy();
  time_t = startTime;
}

float Orbit::EscapeVelocity()
{
  
}

float Orbit::RadiusOfPeriapsis()
{
  
}

float Orbit::PeriapsisHeight()
{
}

float Orbit::RadiusOfApoapsis()
{
  if (SpecificEnergy() >= 0)
  {
    // We have an infinite apoapsis height. Try to express that in a way the compiler understands.
#ifdef INFINITY
    return INFINITY;
#endif
#ifndef INFINITY
#ifdef NAN
    return nan("");
#endif
#ifndef NAN
    return -1.0; // Best we can do with a dumb compiler.
#endif
#endif
  }
  
  
}

float Orbit::ApoapsisHeight()
{
}

float Orbit::SemimajorAxis()
{
  return ( - gravitationalParameter / 2 / SpecificEnergy() );
}

float Orbit::SemiminorAxis()
{
}

float Orbit::Semiparameter()
{
}

float Orbit::SpecificEnergy()
{
  return Speed() * Speed() / 2 - gravitationalParameter / currentPosition.Magnitude();
}

float Orbit::SpecificAngularMomentum()
{
}

float Orbit::Eccentricity()
{
}

float Orbit::Period()
{
}

float Orbit::TrueAnomaly()
{
}

float Orbit::Speed()
{
}