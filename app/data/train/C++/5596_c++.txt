#ifndef MSLIBS_SQLITE_CORE_DBMSERROR_HPP_
#define MSLIBS_SQLITE_CORE_DBMSERROR_HPP_
/**
 * @file
 * @ingroup ms_sqlite_core_api
 * @brief Определение класса исключения DbmsError библиотеки SQLite.
 */

#include "sqlite3.h"
#include "sqlite/config.hpp"
#include "sqlite/exception.hpp"
#include "sqlite/strbuf.hpp"
#include "sqlite/types.hpp"

//////////////////////////////////////////////////////////////////////////

    /// Идентификатор ошибки C++ - оболочки библиотеки базы данных SQLite.
#define LIBSQLITE_ERROR 1000

namespace sqlite
{
/**
 * @addtogroup ms_sqlite_core_api
 * @{
 */
/*----------------------------------------------------------------------*/

    /// Исключение СУБД SQLite
struct DbmsError
    : virtual Exception
{
        /// Необходимо освободить память, занимаемую полем сообщения @c info.
    static const bool   FREE_INFO = true ;
        /// Не нужно освобождать память, занятую полем сообщения @c info.
    static const bool   NOT_FREE_INFO = false ;

        /// Код ошибки SQL.
    const ErrorCode_t   error_code ;
        /// Строковый буфер с форматированным сообщением.
    const StrBuf        info_buf ;

        /// Конструктор по умолчанию.
    MSLIBS_SQLITE_CORE_DECL
    DbmsError();
        /// Конструктор исключения Базы Данных SQLite.
    MSLIBS_SQLITE_CORE_DECL
    explicit
    DbmsError( const ErrorCode_t    error_code_arg
             , const char *         info_arg = 0
             , const bool           need_free_info = FREE_INFO
             );
    	/// Конструктор копии.
    MSLIBS_SQLITE_CORE_DECL
    DbmsError( const DbmsError & copy ) throw();
        /// Виртуальный деструктор.
    virtual MSLIBS_SQLITE_CORE_DECL
    ~DbmsError() throw();

        /// Описание исключения.
    virtual MSLIBS_SQLITE_CORE_DECL
    const char *
    what() const throw();
};

/*----------------------------------------------------------------------*/

/**
 * @brief Проверить код возврата функции из sqlite API.
 * @param expr Код возврата из функции SQLite API.
 * @param info Указатель на строку с описанием ошибки.
 * @exception DbmsError Исключение оригинальной библиотеки SQLite.
 */
#define MSLIBS_SQLITE_CHECK_INFO( expr , info )\
 { const ::sqlite::ErrorCode_t _ec = (expr);\
   if( SQLITE_OK != _ec )\
     MSLIBS_SQLITE_THROW( ::sqlite::DbmsError( _ec , (info) ) ); }

    /// Проверка кода возврата из функции СУБД SQLite.
#define MSLIBS_SQLITE_CHECK( expr ) MSLIBS_SQLITE_CHECK_INFO( (expr) , 0 )

/** @} */

} // namespace sqlite

#endif /* MSLIBS_SQLITE_CORE_DBMSERROR_HPP_ */
