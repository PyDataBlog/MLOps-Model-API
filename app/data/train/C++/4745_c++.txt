#include "openMM_app.h"

#include "OpenMM.h"
#include "stdio.h"

int main(void)
{
    OpenMM::System system;
    OpenMM::NonbondedForce *lj = new OpenMM::NonbondedForce();
    system.addForce(lj);

    std::vector<OpenMM::Vec3> initPosInNm(10);
    for (int a = 0; a < 10; ++a)
    {
        initPosInNm[a] = OpenMM::Vec3(0.5*a, 0, 0);
        system.addParticle(39.95);
        lj->addParticle(0.0, 0.3350, 0.996);
    }

    OpenMM::VerletIntegrator integrator(0.004);
    OpenMM::Context context(system, integrator);

    context.setPositions(initPosInNm);
    integrator.step(1000);

    OpenMM::State state = context.getState(OpenMM::State::Positions);
    const std::vector<OpenMM::Vec3>& posInNm = state.getPositions();

    for (int a = 0; a < (int)posInNm.size(); ++a)
    {
        printf("ATOM  %5d  AR   AR     1    ", a+1); // atom number
        printf("%8.3f%8.3f%8.3f  1.00  0.00\n",      // coordinates
            // "*10" converts nanometers to Angstroms
            posInNm[a][0]*10, posInNm[a][1]*10, posInNm[a][2]*10);
    }
}
