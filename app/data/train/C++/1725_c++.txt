/***
* Inferno Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
*
* [# filter: elements\controls\simple #]
***/

#include "build.h"

#include "uiProgressBar.h"
#include "ui/toolkit/include/uiStaticContent.h"

namespace ui
{

    //---

    // active area element, does nothing but is
    class ProgressBarArea : public IElement
    {
        RTTI_DECLARE_VIRTUAL_CLASS(ProgressBarArea, IElement);

    public:
        ProgressBarArea()
        {}
    };

    RTTI_BEGIN_TYPE_NOCOPY_CLASS(ProgressBarArea);
        RTTI_METADATA(ElementClassName).setName("ProgressBarArea");
    RTTI_END_TYPE();

    //--

    RTTI_BEGIN_TYPE_NOCOPY_CLASS(ProgressBar);
        RTTI_METADATA(ElementClassName).setName("ProgressBar");
    RTTI_END_TYPE();

    ProgressBar::ProgressBar()
        : m_pos(0.5f)
    {
        setLayoutMode(LayoutMode::Vertical);

        m_bar = base::CreateSharedPtr<ProgressBarArea>();
        m_bar->setIgnoredInAutomaticLayout(true);
        attachChild(m_bar);
    }

    void ProgressBar::setPosition(const Float pos)
    {
        const auto clampedPos = std::clamp<Float>(pos, 0.0f, 1.0f);
        if (m_pos != clampedPos)
        {
            m_pos = clampedPos;

            if (m_bar)
                m_bar->setCustomProportion(m_pos);

            if (m_text)
                m_text->setText(base::TempString("{}%", pos * 100.0f));

            invalidateLayout();
        }
    }

    Bool ProgressBar::handleTemplateProperty(const base::StringView<AnsiChar>& name, const base::StringView<AnsiChar>& value)
    {
        if (name == "showPercents" || name == "text" || name == "showPercent")
        {
            Bool flag = false;
            if (base::MatchResult::OK != value.match(flag))
                return false;

            if (flag && !m_text)
            {
                m_text = base::CreateSharedPtr<StaticContent>();
                m_text->setName("ProgressCaption");
                m_text->setText(base::TempString("{}%", m_pos * 100.0f));
                attachChild(m_text);
            }

            return true;
        }
        else if (name == "value")
        {
            Float pos = 0.0f;
            if (base::MatchResult::OK != value.match(pos))
                return false;
            setPosition(pos);
            return true;
        }

        return TBaseClass::handleTemplateProperty(name, value);
    }

    void ProgressBar::arrangeChildren(const ElementArea& innerArea, const ElementArea& clipArea, ArrangedChildren& outArrangedChildren, const ElementDynamicSizing* dynamicSizing) const
    {
        if (m_pos > 0.0f)
        {
            const auto pos = innerArea.getLeft() + (Float)(innerArea.getSize().x * m_pos);
            const auto area = ElementArea(innerArea.getLeft(), innerArea.getTop(), pos, innerArea.getBottom());

            outArrangedChildren.add(m_bar, area, clipArea);
        }

        return TBaseClass::arrangeChildren(innerArea, clipArea, outArrangedChildren, dynamicSizing);
    }

    //---

} // ui

