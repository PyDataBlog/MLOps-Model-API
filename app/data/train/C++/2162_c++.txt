#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    create_tray_icon();
    state = STATE_STOP;
    time = 0;
    connect(&timer, SIGNAL(timeout()), this, SLOT(timer_timeout()));
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_btnStartStop_clicked()
{
    switch (state)
    {
    case STATE_STOP:
        state = STATE_WORK;
        ui->btnStartStop->setText("Stop");
        time = ui->spnWork->value() + 1;
        timer.start(1000);
        ui->lcdNumber->setProperty("bg", true);
        break;

    case STATE_WORK:
    case STATE_RELAX:
        state = STATE_STOP;
        ui->btnStartStop->setText("Start");
        timer.stop();
        ui->lcdNumber->setProperty("bg", false);
        ui->lcdNumber->setStyleSheet("");
        ui->lcdNumber->display(0);
        break;
    }
}

void MainWindow::timer_timeout()
{
    time--;
    ui->lcdNumber->display(time);
    if(state == STATE_WORK)  ui->lcdNumber->setStyleSheet("*[bg=\"true\"] { color: black; background-color: green }");
    if(state == STATE_RELAX) ui->lcdNumber->setStyleSheet("*[bg=\"true\"] { color: black; background-color: red }");
    if(time == 0 && state == STATE_WORK)
    {
        state = STATE_RELAX;
        qApp->beep();
        time = ui->spnRelax->value() + 1;
    }
    if(time == 0 && state == STATE_RELAX)
    {
        state = STATE_WORK;
        qApp->beep();
        time = ui->spnWork->value() + 1;
    }
}

void MainWindow::create_tray_icon()
{
    m_tray_icon = new QSystemTrayIcon(QIcon(":icon/img/icon.png"), this);
    connect(m_tray_icon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)), this, SLOT(onTrayClick(QSystemTrayIcon::ActivationReason)));

    QAction *show_action = new QAction("Show", m_tray_icon);
    connect(show_action, SIGNAL(triggered()), this, SLOT(show()));

    QAction *hide_action = new QAction("Hide", m_tray_icon);
    connect(hide_action, SIGNAL(triggered()), this, SLOT(hide()));

    QAction *quit_action = new QAction("Exit", m_tray_icon);
    connect(quit_action, SIGNAL(triggered()), qApp, SLOT(quit()));

    QMenu *tray_icon_menu = new QMenu;
    tray_icon_menu->addAction(show_action);
    tray_icon_menu->addAction(hide_action);
    tray_icon_menu->addSeparator();
    tray_icon_menu->addAction(quit_action);
    tray_icon_menu->setDefaultAction(show_action);

    m_tray_icon->setContextMenu(tray_icon_menu);
    m_tray_icon->show();
}

void MainWindow::onTrayClick(QSystemTrayIcon::ActivationReason ar)
{
    if(ar == QSystemTrayIcon::DoubleClick || ar == QSystemTrayIcon::Trigger)
    {
        this->show();
        this->raise();
        this->activateWindow();
    }
}
