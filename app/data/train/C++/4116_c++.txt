#include "componente.h"


// Iniciar_componente {{{1

void Componente::Iniciar_componente(int Escala,int Nivel, float Interframes, float estructura[18][14], vector<Animacion> Vanimacion, ALLEGRO_BITMAP **B){


	fin_animacion=false;

	animacion_activa=1;

	animando=false;
	no_componentes=0;
	count=0;
	frame=0;

	animacion=Vanimacion.at(animacion_activa).frames;
	max_frames=Vanimacion.at(animacion_activa).no_frames;
	corte=Vanimacion.at(animacion_activa).corte;	

	activo=false;

	interframes=Interframes;
	nivel=Nivel;

	x=x_inicial=estructura[nivel][0];
	y=y_inicial=estructura[nivel][1];
	desx=desx_inicial=estructura[nivel][2];
	desy=desy_inicial=estructura[nivel][3];

	superpuesto=int(estructura[nivel][8]);

	int has_childs=int(estructura[nivel][5]);


	// se pasa el bitmap con los sprites agrupados en cuadros

  	ALLEGRO_BITMAP *tmp=B[int(estructura[nivel][4])];

	
	// se separa en cuadros independientes
	
	no_sprites=estructura[nivel][12]*estructura[nivel][13];
	no_sprite=0;
	bitmaps=util.splitBitmap(tmp,estructura[nivel][12], estructura[nivel][13]);

	
	// se selecciona el primero de momento

	bitmap=bitmaps.at(0);


	w=al_get_bitmap_width(bitmap);
	h=al_get_bitmap_height(bitmap);


	wf=w*Escala/100;
	hf=h*Escala/100;

	alfa=alfa_inicial= animacion[0][nivel][0];

	modificable=false;
	visible=false;

	if(estructura[nivel][10]==1){
		visible=true;
	}
	
	if(estructura[nivel][11]==1){
		modificable=true;
	}


	if(has_childs==1){

		int no_childs=int(estructura[nivel][7]);
		int pos_ini=int(estructura[nivel][6]);

		for(int i=pos_ini; i<pos_ini+no_childs;i++){

			Componente c;
			c.Iniciar_componente(Escala,i,interframes,estructura,Vanimacion,B);

			componentes.push_back(c);

			no_componentes++;
		}
	}
}


//}}}1


// Display {{{1

void Componente::Display(ALLEGRO_TRANSFORM Trans, ALLEGRO_BITMAP *Padre, bool Invertido){


if(!Invertido){

	ALLEGRO_TRANSFORM trans;
	ALLEGRO_TRANSFORM prev;

	al_copy_transform(&prev,al_get_current_transform());
	al_identity_transform(&trans);

	al_translate_transform(&trans,desx,desy);
	al_rotate_transform(&trans,(alfa));//alf
  	al_translate_transform(&trans, x,y);

	al_compose_transform(&trans,&prev);

	al_use_transform(&trans);

	if(visible){
		al_draw_bitmap(bitmap, 0, 0,0);
	}

	int n=componentes.size();

	for(int i=0;i<n;i++){

		componentes.at(i).Display(trans, bitmap,Invertido);

	}

	al_use_transform(&Trans);

	if(superpuesto==1){
		al_draw_bitmap(Padre,0,0,0);
	}

}


if(Invertido){

	ALLEGRO_TRANSFORM trans;
	ALLEGRO_TRANSFORM prev;

	al_copy_transform(&prev,al_get_current_transform());
	al_identity_transform(&trans);

	//al_translate_transform(&trans,w/2-(w-desx),desy);

	al_translate_transform(&trans,w/2-(w/2-desx),desy);

	al_rotate_transform(&trans,(alfa));//alf
  	al_translate_transform(&trans, x,y);

	al_compose_transform(&trans,&prev);

	al_use_transform(&trans);

	al_draw_bitmap(bitmap, 0, 0,ALLEGRO_FLIP_HORIZONTAL);

	int n=componentes.size();
	for(int i=0;i<n;i++){

		componentes.at(i).Display(trans, bitmap,Invertido);

	}

	al_use_transform(&Trans);

	if(superpuesto==1){
		al_draw_bitmap(Padre,0,0,ALLEGRO_FLIP_HORIZONTAL);
	}
  }
	
}


//}}}1


// Iniciar_animacion {{{1

void Componente::Iniciar_animacion(int Max_frames, int No_animacion){


	if(!modificable){

	//max_frames=Max_frames;
	frame=0;
	animando=true;
	
	no_animacion=No_animacion;

	alfa=animacion[frame][nivel][0];

	float inicio=(animacion[frame][nivel][0]);
	float fin=(animacion[frame+1][nivel][0]);


	incremento_alfa=( fin-inicio)/interframes;

	
	float yi=animacion[frame][nivel][2];
	float yf=animacion[frame+1][nivel][2];

	incremento_y=(yf-yi)/interframes;

	count=0;

	for(int i=0;i<no_componentes;i++){

		componentes[i].Iniciar_animacion(max_frames, no_animacion);

	}

	}//!modificable

}

// }}}1


// Iniciar_animacion_invertida {{{1

void Componente::Iniciar_animacion_invertida(int Max_frames, int No_animacion){

	if(!modificable){

	//max_frames=Max_frames;
	frame=0;
	animando=true;
	
	no_animacion=No_animacion;

	alfa=animacion[frame][nivel][0]+PI;

	float inicio=(animacion[frame][nivel][0])+PI;
	float fin=(animacion[frame+1][nivel][0])+PI;


	incremento_alfa=(fin-inicio)/interframes;

	
	float yi=animacion[frame][nivel][2];
	float yf=animacion[frame+1][nivel][2];

	incremento_y=(yf-yi)/interframes;

	count=0;

	for(int i=0;i<no_componentes;i++){

		componentes[i].Iniciar_animacion(max_frames, no_animacion);

	}

	}//!modificable

}

//}}}


// Cambiar_animacion {{{1

void Componente::Cambiar_animacion(int N,vector<Animacion> VAnimacion, bool Invertida){

	if(!modificable){

	animacion=VAnimacion.at(N).frames;
	max_frames=VAnimacion.at(N).no_frames;
	corte=VAnimacion.at(N).corte;
	fin_animacion=false;

	if(!Invertida){
		Iniciar_animacion(max_frames,N);
	}else{
		Iniciar_animacion_invertida(max_frames,N);
	}

	for(int i=0;i<no_componentes;i++){

		componentes[i].Cambiar_animacion(N, VAnimacion, Invertida);

	}

	}//!modificable

}

// }}}1


// Animar_invertida {{{1

void Componente::Animar_invertida(){


if(!modificable){  // si es modificable no se anima
			   // si NO es modificable, si que se animan

	count++;

	alfa+=incremento_alfa;

	if(alfa>6.2832){
		alfa=-6.2832;
	}
	if(alfa<=-6.2832){
		alfa=6.2832;
	}

	if(incremento_y!=0 && nivel ==0){
		y+=incremento_y;
	}

	if(count>interframes){

		count=0;
		frame++;

		if(frame<max_frames-1){

			float inicio=(animacion[frame][nivel][0])+PI;
			float fin=(animacion[frame+1][nivel][0])+PI;

			incremento_alfa=(fin-inicio)/interframes;

			float yi=animacion[frame][nivel][2];
			float yf=animacion[frame+1][nivel][2];

			incremento_y=(yf-yi)/interframes;

		}else{

			if(corte==0){

				Iniciar_animacion(max_frames,no_animacion);

				float yi=animacion[frame][nivel][2];
				float yf=animacion[frame+1][nivel][2];

				incremento_y=(yf-yi)/interframes;

			}

			if(corte==1){
				fin_animacion=true;
			}
		}
	}


   for(int i=0;i<no_componentes;i++){
   	componentes[i].Animar();
   }

 } // si es modificable, no se anima

}

// }}}1


// Animar Sprite (si tiene) {{{1

int Componente::AnimarSprite(int Id_componente){

	if(nivel==Id_componente){

		visible=true;

		bitmap=bitmaps.at(no_sprite);

		no_sprite++;

		if(no_sprite>=no_sprites){
			
			visible=false;
			no_sprite=0;
			return 1;
		}

	}

	for(int i=0;i<no_componentes;i++){

		int n=componentes[i].AnimarSprite(Id_componente);

		if(n==1){
			return 1;
		}

	}

	return 0;

}

//}}}1


// Animar {{{1

void Componente::Animar(){

	if(!modificable){  // si es modificable no se anima
			   // si NO es modificable, si que se animan

	count++;

	alfa+=incremento_alfa;

	if(alfa>6.2832){
		alfa=-6.2832;
	}
	if(alfa<=-6.2832){
		alfa=6.2832;
	}


	if(incremento_y!=0 && nivel ==0){
		y+=incremento_y;
	}

	if(count>interframes){

		count=0;
		frame++;

		if(frame<max_frames-1){

			float inicio=(animacion[frame][nivel][0]);
			float fin=(animacion[frame+1][nivel][0]);

			incremento_alfa= (fin-inicio)/interframes;

			float yi=animacion[frame][nivel][2];
			float yf=animacion[frame+1][nivel][2];

			incremento_y=(yf-yi)/interframes;

		}else{

			if(corte==0){

				Iniciar_animacion(max_frames,no_animacion);

				float yi=animacion[frame][nivel][2];
				float yf=animacion[frame+1][nivel][2];

				incremento_y=(yf-yi)/interframes;

			}

			if(corte==1){
				fin_animacion=true;
			}
		}
	}


   for(int i=0;i<no_componentes;i++){
   	componentes[i].Animar();
   }

 } // si es modificable, no se animaran los hijos tampoco

}

// }}}1


// Cambiar sprite (int Id_sprite, int Id_componente {{{1

void Componente::Cambiar_sprite(int Id_sprite, int Id_componente){


	if(nivel==Id_componente){
	
		bitmap=bitmaps.at(Id_sprite);

	}

	for(int i=0;i<no_componentes;i++){

			componentes[i].Cambiar_sprite(Id_sprite, Id_componente);

	}


}

//}}}1


// Cambiar modificales (int Activar){{{1

void Componente::Cambiar_modificables(int Activar){


	// si se activan los modificables, no se animaran

	if(nivel==5 ||nivel==6||nivel==16){
		
		modificable=Activar;

	}

	for(int i=0;i<no_componentes;i++){
			
		componentes[i].Cambiar_modificables(Activar);

	}

}

//}}}1


// Cambiar alfa (int incremento) {{{1

void Componente::Cambiar_alfa(double Incremento){


	if(nivel==5 || nivel==6){ //||nivel==16){
	
		alfa+=Incremento;	

		if(alfa>6.2832){
			alfa=-6.2832;
		}
		if(alfa<=-6.2832){
			alfa=6.2832;
		}
	}

	for(int i=0;i<no_componentes;i++){
			
		componentes[i].Cambiar_alfa(Incremento);

	}
}

//}}}1


// Get alfa {{{1

double Componente::Get_alfa(){

	if(nivel==5){

		return alfa;

	}

	for(int i=0;i<no_componentes;i++){
			
		return componentes[i].Get_alfa();

	}
	
	return 0;
}

//}}}1


// Set alfa (double alfa) {{{1


void Componente::Set_alfa(double Alfa){

	if(nivel==5 || nivel==6){

		alfa=Alfa;

	}

	for(int i=0;i<no_componentes;i++){
			
		componentes[i].Set_alfa(Alfa);

	}

}

//}}}1


// Cambiar_ejes (int orientacion){{{1

void Componente::Cambiar_ejes_animacion(int orientacion){


}

//}}}1
