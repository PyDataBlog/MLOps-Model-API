use text::letter::Letter;
use graphics::rectangle::Rectangle;
use std::collections::HashMap;

use text::font::Font;


pub struct Alphabet<'r> {
    font: &'r Font<'r>,
    alphabet: HashMap<char, Letter>,
}

impl<'r> Alphabet<'r> {
    pub fn new(font: &'r Font) -> Alphabet<'r> {
        let mut alphabet = HashMap::new();

        // TODO: use font atlas for this.
        let letter = Letter::new('a', Rectangle::empty(), Rectangle::new(0.0, 0.0, 9.0, 15.0));
        alphabet.insert('a', letter);

        Alphabet {
            font: font,
            alphabet: alphabet,
        }
    }

    pub fn find(&self, letter: char) -> Option<&Letter> {
        match self.alphabet.get(&letter) {
            Some(res) => Some(res),
            None => {
                println!("Couldn't find - {}", letter);
                None
            }
        }
    }

    pub fn letter_width(&self) -> f32 {
        let (_, v) = self.alphabet
                         .iter()
                         .next()
                         .expect("Couldn't get letter width from alphabet.");
        v.tex_pos.w
    }
}
