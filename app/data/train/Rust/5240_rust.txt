#[macro_use] extern crate log;
extern crate env_logger;
extern crate serde_json;
extern crate rwinstructs;
use rwinstructs::security;
use std::io::Cursor;

fn ace_example_01() {
    let buffer: &[u8] = &[
        0x00,0x13,0x24,0x00,0x3F,0x00,0x0F,0x00,0x01,0x05,0x00,0x00,0x00,0x00,0x00,0x05,
        0x15,0x00,0x00,0x00,0x7F,0xBC,0xCD,0x2A,0x23,0xD1,0xD7,0x45,0x0B,0x29,0x5B,0x68,
        0xE9,0x03,0x00,0x00
    ];

    let ace = match security::Ace::new(Cursor::new(buffer)) {
        Ok(ace) => ace,
        Err(error) => panic!(format!("{:#?}",error))
    };

    println!("{:#?}",ace);
    println!("{}",serde_json::to_string(&ace).unwrap());
}

fn acl_example_01() {
    let buffer: &[u8] = &[
        0x02,0x00,0x6C,0x00,0x04,0x00,0x00,0x00,0x00,0x13,0x24,0x00,0x3F,0x00,0x0F,0x00,
        0x01,0x05,0x00,0x00,0x00,0x00,0x00,0x05,0x15,0x00,0x00,0x00,0x7F,0xBC,0xCD,0x2A,
        0x23,0xD1,0xD7,0x45,0x0B,0x29,0x5B,0x68,0xE9,0x03,0x00,0x00,0x00,0x13,0x14,0x00,
        0x3F,0x00,0x0F,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x12,0x00,0x00,0x00,
        0x00,0x13,0x18,0x00,0x3F,0x00,0x0F,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x05,
        0x20,0x00,0x00,0x00,0x20,0x02,0x00,0x00,0x00,0x13,0x14,0x00,0x19,0x00,0x02,0x00,
        0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x0C,0x00,0x00,0x00
    ];

    let acl = match security::Acl::new(Cursor::new(buffer)) {
        Ok(acl) => acl,
        Err(error) => panic!(error)
    };

    println!("{:#?}",acl);
    println!("{}",serde_json::to_string(&acl).unwrap());
}

fn sid_example_01() {
    let buffer: &[u8] = &[
        0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x12,0x00,0x00,0x00
    ];

    let sid = match security::Sid::new(Cursor::new(buffer)) {
        Ok(sid) => sid,
        Err(error) => panic!(error)
    };

    println!("{:#?}",sid);
    println!("{}",sid);
    println!("{}",serde_json::to_string(&sid).unwrap());
}

fn security_descriptor_01() {
    let buffer: &[u8] = &[
        0x01,0x00,0x04,0x98,0x98,0x00,0x00,0x00,0xA4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x14,0x00,0x00,0x00,0x02,0x00,0x84,0x00,0x05,0x00,0x00,0x00,0x00,0x03,0x24,0x00,
        0x3F,0x00,0x0F,0x00,0x01,0x05,0x00,0x00,0x00,0x00,0x00,0x05,0x15,0x00,0x00,0x00,
        0x7F,0xBC,0xCD,0x2A,0x23,0xD1,0xD7,0x45,0x0B,0x29,0x5B,0x68,0xE9,0x03,0x00,0x00,
        0x00,0x03,0x14,0x00,0x3F,0x00,0x0F,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,
        0x12,0x00,0x00,0x00,0x00,0x03,0x18,0x00,0x3F,0x00,0x0F,0x00,0x01,0x02,0x00,0x00,
        0x00,0x00,0x00,0x05,0x20,0x00,0x00,0x00,0x20,0x02,0x00,0x00,0x00,0x03,0x14,0x00,
        0x19,0x00,0x02,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x0C,0x00,0x00,0x00,
        0x00,0x03,0x18,0x00,0x19,0x00,0x02,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x0F,
        0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,
        0x12,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x12,0x00,0x00,0x00
    ];

    let sd = match security::SecurityDescriptor::new(Cursor::new(buffer)) {
        Ok(sd) => sd,
        Err(error) => panic!(error)
    };

    println!("{:#?}",sd);
    println!("{}",serde_json::to_string(&sd).unwrap());
}

fn main() {
    env_logger::init().unwrap();
    ace_example_01();
    acl_example_01();
    security_descriptor_01();
    sid_example_01();
}
