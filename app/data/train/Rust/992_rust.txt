//-------------------------------------------------------------------------------
// URL:
//-------------------------------------------------------------------------------

use std::path::Path;

use time;

use reader;

pub const ID:   i32 = 8;
pub const DIR: &str = "array/dutchflag";

//-------------------------------------------------------------------------------
// O(n) time, O(1) extra space
//-------------------------------------------------------------------------------

pub fn first(data_path: &Path) -> Box<Fn() -> u64> {
  // Reading input
  let mut data = reader::read_all_lines(data_path);

  let count:    usize    = reader::first_usize(&mut data);
  let elements: Vec<i64> = reader::all_i64(&mut data, count);

  reader::skip_empty_line(&mut data);

  // Reading desired output
  let expected: Vec<i64> = reader::all_i64(&mut data, count);

  Box::new(move || -> u64 {
    // Setup
    let mut elements = elements.clone();

    // Measure
    let start  = time::precise_time_ns();
    first_algorithm(&mut elements);
    let end    = time::precise_time_ns();

    // Validate
    if elements.len() != expected.len() {
      panic!("Result has different length than expected!");
    } else {
      let mut index = 0;
      let     total = elements.len() - 1;

      loop {
        if elements[index] != expected[index] {
          panic!("Result is different from expected!");
        }

        if index < total { index += 1; }
        else             { break;      }
      }
    }
    // Result
    end - start
  })
}

fn first_algorithm(elements: &mut Vec<i64>) {
  let mut low  = 0;
  let mut mid  = 0;
  let mut high = elements.len() - 1;

  while mid <= high {
    let element = elements[mid];

    if element == 0 {
      elements[mid] = elements[low];
      elements[low] = element;

      low += 1;
      mid += 1;
    } else if element == 1 {
      mid += 1;
    } else {
      elements[mid] = elements[high];
      elements[high] = element;

      high -= 1;
    }
  }
}
