extern crate regex;

use std::fs::File;
use std::io::{BufReader, BufRead};
use std::str;
use std::str::FromStr;
use regex::Regex;

fn main() {
    let mut summation = 0;
    let mut amount_of_correct = 0;
    let regex = Regex::new(r"^(.*)-(\d+)\[(.+)\]$").unwrap();
    for line_res in BufReader::new(File::open("input").expect("")).lines() {
        let line = line_res.unwrap();
        let capts = regex.captures(&line).unwrap();
        let checksum = gen_checksum(&capts.at(1).unwrap());
        println!("{}", checksum);
        if checksum == capts.at(3).unwrap() {
            summation += capts.at(2).unwrap().parse().unwrap();
            amount_of_correct += 1;
        }
    }
    println!("{} are correct, giving a summation of {}", amount_of_correct, summation);
}

fn gen_checksum(line: &str) -> String {
    let alphabet = "abcdefghijklmnopqrstuvwxyz";
    let mut frequency = vec![0isize; 26];
    for character in line.chars() {
        match alphabet.find(character) {
            Some(index) => frequency[index] += 1,
            None => (),
        }
    }
    let mut result = String::with_capacity(5);
    for _ in 0..5 {
        let (big1, _) = frequency.iter().enumerate().rev().max_by_key(|&(_, frequency)| frequency).unwrap();
        frequency[big1] = -1;
        result.push(alphabet.chars().nth(big1).unwrap());
    }
    return result;
}