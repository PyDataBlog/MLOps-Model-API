// The MIT License (MIT)
//
// Copyright (c) 2017 Doublify Technologies
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
extern crate doublify_toolkit;

use doublify_toolkit::filtering::{Kind, Token, scan};

#[test]
fn scan_raw_query_test_1() {
  let raw_query = "subject:{'fdhadzh' 'goodmind'}";

  let expected = vec![Token::new(Kind::Identifier, "subject"),
                      Token::new(Kind::Colon, ":"),
                      Token::new(Kind::Curly, "{"),
                      Token::new(Kind::Identifier, "'fdhadzh'"),
                      Token::new(Kind::Identifier, "'goodmind'"),
                      Token::new(Kind::Curly, "}")];

  let wanted = scan(raw_query);

  assert_eq!(expected, wanted);
}

#[test]
fn scan_raw_query_test_2() {
  let raw_query = "languages:(\"rust\" \"python\" \"typescript\") is:stable";

  let expected = vec![Token::new(Kind::Identifier, "languages"),
                      Token::new(Kind::Colon, ":"),
                      Token::new(Kind::Parentheses, "("),
                      Token::new(Kind::Identifier, "\"rust\""),
                      Token::new(Kind::Identifier, "\"python\""),
                      Token::new(Kind::Identifier, "\"typescript\""),
                      Token::new(Kind::Parentheses, ")"),
                      Token::new(Kind::Identifier, "is"),
                      Token::new(Kind::Colon, ":"),
                      Token::new(Kind::Identifier, "stable")];

  let wanted = scan(raw_query);

  assert_eq!(expected, wanted);
}
