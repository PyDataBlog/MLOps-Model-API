
use ::structopt::StructOpt;

///
/// The structure of the commands for the app.
///
/// A large amount of this is generated by StructOpt.
/// See that project for how to write large amounts of this.
///
/// The gist however is that we make a struct that will hold
/// all of our arguments. Commands are then parsed, and then
/// turned into this struct.
///
#[derive(StructOpt, Debug)]
#[structopt(name = "ls-pretty", about = "Like ls, but pretty.")]
pub struct Args {

    /// Enable logging, use multiple `v`s to increase verbosity.
    #[structopt(short = "a", long = "all", help = "Set to show all hidden files and directories.")]
    pub all: bool,

    /// Set the minimum width of the directory column.
    #[structopt(default_value = "0", short = "d", long = "directory-width", help = "Minimum width of the directory column.")]
    pub dirs_width: usize,

    /// Optional path to the folder we are going to perform the list on.
    #[structopt(default_value = ".", help = "Set to show all hidden files and directories.")]
    pub path: String,

}

impl Args {

    ///
    /// Builds a new args from the main arguments given.
    ///
    pub fn new_from_args() -> Args {
        return Args::from_args();
    }

}

