use std::error::Error;
use structs::*;
use filesystem::read_file_to_json;
use std::fs::read_dir;
use filesystem::read_file_to_string;
use std::fs::DirEntry;

pub fn get_all_snippets() -> Result<Vec<Snippet>, Box<Error>> {
    let mut all_snippets = Vec::new();
    let snippets_path = "./snippets/";
    let snippets_dirs = read_dir(snippets_path).unwrap();
    for snippet_folder in snippets_dirs {
        let uw = snippet_folder?;
        if uw.file_type().expect("failed to get folder type").is_dir() {
            let snippet = parse_snippet(&uw);
            all_snippets.push(snippet);
        }
    }
    Ok(all_snippets)
}

fn parse_snippet(snippet_folder: &DirEntry) -> Snippet {
    let uw = snippet_folder;
    let folder_relative_path = uw.path().display().to_string();
    let folder_name = uw.file_name()
        .to_str()
        .expect("failed to get snippet folder name")
        .to_string();
    let info_path = format!("{}/info.json", folder_relative_path);
    let content_path = format!("{}/content.md", folder_relative_path);
    let info = read_file_to_json(&info_path);
    let content = read_file_to_string(&content_path);
    let ssnippet = Snippet {
        title: info["title"]
            .as_str()
            .expect("failed to parse title")
            .to_string(),
        crates: info["crates"]
            .as_array()
            .expect("failed to parse crates")
            .into_iter()
            .map(|x| x.as_str().expect("failed to parse crates").to_string())
            .collect(),
        tags: info["tags"]
            .as_array()
            .expect("failed to parse tags")
            .into_iter()
            .map(|x| x.as_str().expect("failed to parse tags").to_string())
            .collect(),
        content: content,
        link: folder_name,
    };
    println!("parsed: {}", folder_relative_path);
    ssnippet
}