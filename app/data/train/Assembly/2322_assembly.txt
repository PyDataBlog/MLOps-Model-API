; multi-segment executable file template.

data segment

ends

stack segment
    dw   128  dup(0)
ends

code segment
start:
; set segment registers:
    mov ax, data
    mov ds, ax       
    mov ax, 0b800h
    mov es, ax

    ; add your code here
            
    mov ah, 0
    mov al, 13h
    int 10h
    
    mov cx, 100
    mov dx, 50
    
    cimke1:
            mov al, 15
            mov ah, 0ch
            int 10h
            inc cx
            cmp cx, 151
            je cimke2
            jmp cimke1
    cimke2:    
            mov al, 15
            mov ah, 0ch
            int 10h
            inc dx
            cmp dx, 101
            je cimke3
            jmp cimke2  
    cimke3:   
            mov al, 15
            mov ah, 0ch
            int 10h
            dec cx
            cmp cx, 99
            je cimke4
            jmp cimke3
    cimke4: 
            mov al, 15
            mov ah, 0ch
            int 10h
            dec dx
            cmp dx, 49
            je cimke5
            jmp cimke4
    cimke5:
            mov al, 15
            mov ah, 0ch
            int 10h
            dec dx 
            inc cx 
            cmp dx, 23
            je cimke6
            jmp cimke5
    cimke6:    
            mov al, 15
            mov ah, 0ch
            int 10h
            inc dx 
            inc cx 
            cmp dx, 50
            je cimke7
            jmp cimke6
    cimke7:  
            mov cx, 130
            mov dx, 100
    cimke8:
            int 10h
            dec dx
            cmp dx,74 
            je cimke9
            jmp cimke8
    cimke9:   
            int 10h
            inc cx
            cmp cx, 141
            je cimke10
            jmp cimke9
    cimke10:    
            int 10h
            inc dx
            cmp dx, 101
            je cimke11
            jmp cimke10
    cimke11:
            mov cx, 110
            mov dx, 60
    cimke12:   
            int 10h
            inc cx
            cmp cx, 121
            je cimke13
            jmp cimke12
    cimke13:
            int 10h
            inc dx
            cmp dx, 71
            je cimke14
            jmp cimke13
    cimke14:
            int 10h
            dec cx
            cmp cx, 109
            je cimke15
            jmp cimke14
    cimke15:
            int 10h
            dec dx
            cmp dx, 59
            je cimke16
            jmp cimke15
    cimke16:
            mov cx, 138
            mov dx, 88
    cimke17:
            int 10h
            dec cx
            cmp cx, 135
            je cimke18
            jmp cimke17
    cimke18:     
            int 10h
            inc dx
            cmp dx, 92
            je cimke19
            jmp cimke18
    cimke19:
            
    
            
    
    ; wait for any key....    
    mov ah, 1
    int 21h
    
    mov ax, 4c00h ; exit to operating system.
    int 21h    
ends

end start ; set entry point and stop the assembler.
