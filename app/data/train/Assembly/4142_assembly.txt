
obj/__user_pgdir.out:     file format elf32-tradlittlemips


Disassembly of section .text:

00800020 <__panic>:
    va_end(ap);
    exit(-E_PANIC);
}

void
__warn(const char *file, int line, const char *fmt, ...) {
  800020:	27bdffe0 	addiu	sp,sp,-32
  800024:	afbf001c 	sw	ra,28(sp)
  800028:	afbe0018 	sw	s8,24(sp)
  80002c:	03a0f021 	move	s8,sp
  800030:	afc40020 	sw	a0,32(s8)
  800034:	afc50024 	sw	a1,36(s8)
  800038:	afc7002c 	sw	a3,44(s8)
  80003c:	afc60028 	sw	a2,40(s8)
  800040:	27c2002c 	addiu	v0,s8,44
  800044:	afc20010 	sw	v0,16(s8)
  800048:	3c020080 	lui	v0,0x80
  80004c:	24442180 	addiu	a0,v0,8576
  800050:	8fc50020 	lw	a1,32(s8)
  800054:	8fc60024 	lw	a2,36(s8)
  800058:	0c2001ba 	jal	8006e8 <cprintf>
  80005c:	00000000 	nop
  800060:	8fc20010 	lw	v0,16(s8)
  800064:	8fc40028 	lw	a0,40(s8)
  800068:	00402821 	move	a1,v0
  80006c:	0c2001a3 	jal	80068c <vcprintf>
  800070:	00000000 	nop
  800074:	3c020080 	lui	v0,0x80
  800078:	2444219c 	addiu	a0,v0,8604
  80007c:	0c2001ba 	jal	8006e8 <cprintf>
  800080:	00000000 	nop
  800084:	2404fff6 	li	a0,-10
  800088:	0c200102 	jal	800408 <exit>
  80008c:	00000000 	nop

00800090 <__warn>:

void
__panic(const char *file, int line, const char *fmt, ...) {
    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
  800090:	27bdffe0 	addiu	sp,sp,-32
  800094:	afbf001c 	sw	ra,28(sp)
  800098:	afbe0018 	sw	s8,24(sp)
  80009c:	03a0f021 	move	s8,sp
  8000a0:	afc40020 	sw	a0,32(s8)
  8000a4:	afc50024 	sw	a1,36(s8)
  8000a8:	afc7002c 	sw	a3,44(s8)
  8000ac:	afc60028 	sw	a2,40(s8)
  8000b0:	27c2002c 	addiu	v0,s8,44
  8000b4:	afc20010 	sw	v0,16(s8)
  8000b8:	3c020080 	lui	v0,0x80
  8000bc:	244421a0 	addiu	a0,v0,8608
  8000c0:	8fc50020 	lw	a1,32(s8)
  8000c4:	8fc60024 	lw	a2,36(s8)
  8000c8:	0c2001ba 	jal	8006e8 <cprintf>
  8000cc:	00000000 	nop
  8000d0:	8fc20010 	lw	v0,16(s8)
  8000d4:	8fc40028 	lw	a0,40(s8)
  8000d8:	00402821 	move	a1,v0
  8000dc:	0c2001a3 	jal	80068c <vcprintf>
  8000e0:	00000000 	nop
  8000e4:	3c020080 	lui	v0,0x80
  8000e8:	2444219c 	addiu	a0,v0,8604
  8000ec:	0c2001ba 	jal	8006e8 <cprintf>
  8000f0:	00000000 	nop
  8000f4:	03c0e821 	move	sp,s8
  8000f8:	8fbf001c 	lw	ra,28(sp)
  8000fc:	8fbe0018 	lw	s8,24(sp)
  800100:	27bd0020 	addiu	sp,sp,32
  800104:	03e00008 	jr	ra
  800108:	00000000 	nop

0080010c <syscall>:
    ret = do_syscall(a[0], a[1], a[2], a[3], a[4], num);
    return ret;
}

int
sys_exit(int error_code) {
  80010c:	27bdffc0 	addiu	sp,sp,-64
  800110:	afbf003c 	sw	ra,60(sp)
  800114:	afbe0038 	sw	s8,56(sp)
  800118:	03a0f021 	move	s8,sp
  80011c:	afc50044 	sw	a1,68(s8)
  800120:	afc60048 	sw	a2,72(s8)
  800124:	afc7004c 	sw	a3,76(s8)
  800128:	afc40040 	sw	a0,64(s8)
  80012c:	27c20044 	addiu	v0,s8,68
  800130:	afc20020 	sw	v0,32(s8)
  800134:	afc0001c 	sw	zero,28(s8)
  800138:	0820005c 	j	800170 <syscall+0x64>
  80013c:	00000000 	nop
  800140:	8fc4001c 	lw	a0,28(s8)
  800144:	8fc20020 	lw	v0,32(s8)
  800148:	24430004 	addiu	v1,v0,4
  80014c:	afc30020 	sw	v1,32(s8)
  800150:	8c430000 	lw	v1,0(v0)
  800154:	00041080 	sll	v0,a0,0x2
  800158:	27c40018 	addiu	a0,s8,24
  80015c:	00821021 	addu	v0,a0,v0
  800160:	ac43000c 	sw	v1,12(v0)
  800164:	8fc2001c 	lw	v0,28(s8)
  800168:	24420001 	addiu	v0,v0,1
  80016c:	afc2001c 	sw	v0,28(s8)
  800170:	8fc2001c 	lw	v0,28(s8)
  800174:	28420005 	slti	v0,v0,5
  800178:	1440fff1 	bnez	v0,800140 <syscall+0x34>
  80017c:	00000000 	nop
  800180:	8fc40024 	lw	a0,36(s8)
  800184:	8fc50028 	lw	a1,40(s8)
  800188:	8fc3002c 	lw	v1,44(s8)
  80018c:	8fc20030 	lw	v0,48(s8)
  800190:	8fc70034 	lw	a3,52(s8)
  800194:	8fc60040 	lw	a2,64(s8)
  800198:	afa70010 	sw	a3,16(sp)
  80019c:	afa60014 	sw	a2,20(sp)
  8001a0:	00603021 	move	a2,v1
  8001a4:	00403821 	move	a3,v0
  8001a8:	0c20018a 	jal	800628 <do_syscall>
  8001ac:	00000000 	nop
  8001b0:	afc20018 	sw	v0,24(s8)
  8001b4:	8fc20018 	lw	v0,24(s8)
  8001b8:	03c0e821 	move	sp,s8
  8001bc:	8fbf003c 	lw	ra,60(sp)
  8001c0:	8fbe0038 	lw	s8,56(sp)
  8001c4:	27bd0040 	addiu	sp,sp,64
  8001c8:	03e00008 	jr	ra
  8001cc:	00000000 	nop

008001d0 <sys_exit>:
    return syscall(SYS_exit, error_code);
}

int
sys_fork(void) {
  8001d0:	27bdffe8 	addiu	sp,sp,-24
  8001d4:	afbf0014 	sw	ra,20(sp)
  8001d8:	afbe0010 	sw	s8,16(sp)
  8001dc:	03a0f021 	move	s8,sp
  8001e0:	afc40018 	sw	a0,24(s8)
  8001e4:	24040001 	li	a0,1
  8001e8:	8fc50018 	lw	a1,24(s8)
  8001ec:	0c200043 	jal	80010c <syscall>
  8001f0:	00000000 	nop
  8001f4:	03c0e821 	move	sp,s8
  8001f8:	8fbf0014 	lw	ra,20(sp)
  8001fc:	8fbe0010 	lw	s8,16(sp)
  800200:	27bd0018 	addiu	sp,sp,24
  800204:	03e00008 	jr	ra
  800208:	00000000 	nop

0080020c <sys_fork>:
    return syscall(SYS_fork);
}

int
sys_wait(int pid, int *store) {
  80020c:	27bdffe8 	addiu	sp,sp,-24
  800210:	afbf0014 	sw	ra,20(sp)
  800214:	afbe0010 	sw	s8,16(sp)
  800218:	03a0f021 	move	s8,sp
  80021c:	24040002 	li	a0,2
  800220:	0c200043 	jal	80010c <syscall>
  800224:	00000000 	nop
  800228:	03c0e821 	move	sp,s8
  80022c:	8fbf0014 	lw	ra,20(sp)
  800230:	8fbe0010 	lw	s8,16(sp)
  800234:	27bd0018 	addiu	sp,sp,24
  800238:	03e00008 	jr	ra
  80023c:	00000000 	nop

00800240 <sys_wait>:
    return syscall(SYS_wait, pid, store);
}

int
sys_yield(void) {
  800240:	27bdffe8 	addiu	sp,sp,-24
  800244:	afbf0014 	sw	ra,20(sp)
  800248:	afbe0010 	sw	s8,16(sp)
  80024c:	03a0f021 	move	s8,sp
  800250:	afc40018 	sw	a0,24(s8)
  800254:	afc5001c 	sw	a1,28(s8)
  800258:	24040003 	li	a0,3
  80025c:	8fc50018 	lw	a1,24(s8)
  800260:	8fc6001c 	lw	a2,28(s8)
  800264:	0c200043 	jal	80010c <syscall>
  800268:	00000000 	nop
  80026c:	03c0e821 	move	sp,s8
  800270:	8fbf0014 	lw	ra,20(sp)
  800274:	8fbe0010 	lw	s8,16(sp)
  800278:	27bd0018 	addiu	sp,sp,24
  80027c:	03e00008 	jr	ra
  800280:	00000000 	nop

00800284 <sys_yield>:
    return syscall(SYS_yield);
}

int
sys_kill(int pid) {
  800284:	27bdffe8 	addiu	sp,sp,-24
  800288:	afbf0014 	sw	ra,20(sp)
  80028c:	afbe0010 	sw	s8,16(sp)
  800290:	03a0f021 	move	s8,sp
  800294:	2404000a 	li	a0,10
  800298:	0c200043 	jal	80010c <syscall>
  80029c:	00000000 	nop
  8002a0:	03c0e821 	move	sp,s8
  8002a4:	8fbf0014 	lw	ra,20(sp)
  8002a8:	8fbe0010 	lw	s8,16(sp)
  8002ac:	27bd0018 	addiu	sp,sp,24
  8002b0:	03e00008 	jr	ra
  8002b4:	00000000 	nop

008002b8 <sys_kill>:
    return syscall(SYS_kill, pid);
}

int
sys_getpid(void) {
  8002b8:	27bdffe8 	addiu	sp,sp,-24
  8002bc:	afbf0014 	sw	ra,20(sp)
  8002c0:	afbe0010 	sw	s8,16(sp)
  8002c4:	03a0f021 	move	s8,sp
  8002c8:	afc40018 	sw	a0,24(s8)
  8002cc:	2404000c 	li	a0,12
  8002d0:	8fc50018 	lw	a1,24(s8)
  8002d4:	0c200043 	jal	80010c <syscall>
  8002d8:	00000000 	nop
  8002dc:	03c0e821 	move	sp,s8
  8002e0:	8fbf0014 	lw	ra,20(sp)
  8002e4:	8fbe0010 	lw	s8,16(sp)
  8002e8:	27bd0018 	addiu	sp,sp,24
  8002ec:	03e00008 	jr	ra
  8002f0:	00000000 	nop

008002f4 <sys_getpid>:
    return syscall(SYS_getpid);
}

int
sys_putc(int c) {
  8002f4:	27bdffe8 	addiu	sp,sp,-24
  8002f8:	afbf0014 	sw	ra,20(sp)
  8002fc:	afbe0010 	sw	s8,16(sp)
  800300:	03a0f021 	move	s8,sp
  800304:	24040012 	li	a0,18
  800308:	0c200043 	jal	80010c <syscall>
  80030c:	00000000 	nop
  800310:	03c0e821 	move	sp,s8
  800314:	8fbf0014 	lw	ra,20(sp)
  800318:	8fbe0010 	lw	s8,16(sp)
  80031c:	27bd0018 	addiu	sp,sp,24
  800320:	03e00008 	jr	ra
  800324:	00000000 	nop

00800328 <sys_putc>:
    return syscall(SYS_putc, c);
}

int
sys_pgdir(void) {
  800328:	27bdffe8 	addiu	sp,sp,-24
  80032c:	afbf0014 	sw	ra,20(sp)
  800330:	afbe0010 	sw	s8,16(sp)
  800334:	03a0f021 	move	s8,sp
  800338:	afc40018 	sw	a0,24(s8)
  80033c:	2404001e 	li	a0,30
  800340:	8fc50018 	lw	a1,24(s8)
  800344:	0c200043 	jal	80010c <syscall>
  800348:	00000000 	nop
  80034c:	03c0e821 	move	sp,s8
  800350:	8fbf0014 	lw	ra,20(sp)
  800354:	8fbe0010 	lw	s8,16(sp)
  800358:	27bd0018 	addiu	sp,sp,24
  80035c:	03e00008 	jr	ra
  800360:	00000000 	nop

00800364 <sys_pgdir>:
    return syscall(SYS_pgdir);
}

int
sys_gettime(void) {
  800364:	27bdffe8 	addiu	sp,sp,-24
  800368:	afbf0014 	sw	ra,20(sp)
  80036c:	afbe0010 	sw	s8,16(sp)
  800370:	03a0f021 	move	s8,sp
  800374:	2404001f 	li	a0,31
  800378:	0c200043 	jal	80010c <syscall>
  80037c:	00000000 	nop
  800380:	03c0e821 	move	sp,s8
  800384:	8fbf0014 	lw	ra,20(sp)
  800388:	8fbe0010 	lw	s8,16(sp)
  80038c:	27bd0018 	addiu	sp,sp,24
  800390:	03e00008 	jr	ra
  800394:	00000000 	nop

00800398 <sys_gettime>:
    return syscall(SYS_gettime);
}

void
sys_lab6_set_priority(uint32_t priority)
{
  800398:	27bdffe8 	addiu	sp,sp,-24
  80039c:	afbf0014 	sw	ra,20(sp)
  8003a0:	afbe0010 	sw	s8,16(sp)
  8003a4:	03a0f021 	move	s8,sp
  8003a8:	24040011 	li	a0,17
  8003ac:	0c200043 	jal	80010c <syscall>
  8003b0:	00000000 	nop
  8003b4:	03c0e821 	move	sp,s8
  8003b8:	8fbf0014 	lw	ra,20(sp)
  8003bc:	8fbe0010 	lw	s8,16(sp)
  8003c0:	27bd0018 	addiu	sp,sp,24
  8003c4:	03e00008 	jr	ra
  8003c8:	00000000 	nop

008003cc <sys_lab6_set_priority>:
#include <unistd.h>
#include <stdarg.h>
#include <syscall.h>

#define MAX_ARGS            5

  8003cc:	27bdffe8 	addiu	sp,sp,-24
  8003d0:	afbf0014 	sw	ra,20(sp)
  8003d4:	afbe0010 	sw	s8,16(sp)
  8003d8:	03a0f021 	move	s8,sp
  8003dc:	afc40018 	sw	a0,24(s8)
  8003e0:	240400ff 	li	a0,255
  8003e4:	8fc50018 	lw	a1,24(s8)
  8003e8:	0c200043 	jal	80010c <syscall>
  8003ec:	00000000 	nop
  8003f0:	03c0e821 	move	sp,s8
  8003f4:	8fbf0014 	lw	ra,20(sp)
  8003f8:	8fbe0010 	lw	s8,16(sp)
  8003fc:	27bd0018 	addiu	sp,sp,24
  800400:	03e00008 	jr	ra
  800404:	00000000 	nop

00800408 <exit>:
    cprintf("BUG: exit failed.\n");
    while (1);
}

int
fork(void) {
  800408:	27bdffe8 	addiu	sp,sp,-24
  80040c:	afbf0014 	sw	ra,20(sp)
  800410:	afbe0010 	sw	s8,16(sp)
  800414:	03a0f021 	move	s8,sp
  800418:	afc40018 	sw	a0,24(s8)
  80041c:	8fc40018 	lw	a0,24(s8)
  800420:	0c200074 	jal	8001d0 <sys_exit>
  800424:	00000000 	nop
  800428:	3c020080 	lui	v0,0x80
  80042c:	244421bc 	addiu	a0,v0,8636
  800430:	0c2001ba 	jal	8006e8 <cprintf>
  800434:	00000000 	nop
  800438:	0820010e 	j	800438 <exit+0x30>
  80043c:	00000000 	nop

00800440 <fork>:
    return sys_fork();
}

int
wait(void) {
  800440:	27bdffe8 	addiu	sp,sp,-24
  800444:	afbf0014 	sw	ra,20(sp)
  800448:	afbe0010 	sw	s8,16(sp)
  80044c:	03a0f021 	move	s8,sp
  800450:	0c200083 	jal	80020c <sys_fork>
  800454:	00000000 	nop
  800458:	03c0e821 	move	sp,s8
  80045c:	8fbf0014 	lw	ra,20(sp)
  800460:	8fbe0010 	lw	s8,16(sp)
  800464:	27bd0018 	addiu	sp,sp,24
  800468:	03e00008 	jr	ra
  80046c:	00000000 	nop

00800470 <wait>:
    return sys_wait(0, NULL);
}

int
waitpid(int pid, int *store) {
  800470:	27bdffe8 	addiu	sp,sp,-24
  800474:	afbf0014 	sw	ra,20(sp)
  800478:	afbe0010 	sw	s8,16(sp)
  80047c:	03a0f021 	move	s8,sp
  800480:	00002021 	move	a0,zero
  800484:	00002821 	move	a1,zero
  800488:	0c200090 	jal	800240 <sys_wait>
  80048c:	00000000 	nop
  800490:	03c0e821 	move	sp,s8
  800494:	8fbf0014 	lw	ra,20(sp)
  800498:	8fbe0010 	lw	s8,16(sp)
  80049c:	27bd0018 	addiu	sp,sp,24
  8004a0:	03e00008 	jr	ra
  8004a4:	00000000 	nop

008004a8 <waitpid>:
    return sys_wait(pid, store);
}

void
yield(void) {
  8004a8:	27bdffe8 	addiu	sp,sp,-24
  8004ac:	afbf0014 	sw	ra,20(sp)
  8004b0:	afbe0010 	sw	s8,16(sp)
  8004b4:	03a0f021 	move	s8,sp
  8004b8:	afc40018 	sw	a0,24(s8)
  8004bc:	afc5001c 	sw	a1,28(s8)
  8004c0:	8fc40018 	lw	a0,24(s8)
  8004c4:	8fc5001c 	lw	a1,28(s8)
  8004c8:	0c200090 	jal	800240 <sys_wait>
  8004cc:	00000000 	nop
  8004d0:	03c0e821 	move	sp,s8
  8004d4:	8fbf0014 	lw	ra,20(sp)
  8004d8:	8fbe0010 	lw	s8,16(sp)
  8004dc:	27bd0018 	addiu	sp,sp,24
  8004e0:	03e00008 	jr	ra
  8004e4:	00000000 	nop

008004e8 <yield>:
    sys_yield();
}

int
kill(int pid) {
  8004e8:	27bdffe8 	addiu	sp,sp,-24
  8004ec:	afbf0014 	sw	ra,20(sp)
  8004f0:	afbe0010 	sw	s8,16(sp)
  8004f4:	03a0f021 	move	s8,sp
  8004f8:	0c2000a1 	jal	800284 <sys_yield>
  8004fc:	00000000 	nop
  800500:	03c0e821 	move	sp,s8
  800504:	8fbf0014 	lw	ra,20(sp)
  800508:	8fbe0010 	lw	s8,16(sp)
  80050c:	27bd0018 	addiu	sp,sp,24
  800510:	03e00008 	jr	ra
  800514:	00000000 	nop

00800518 <kill>:
    return sys_kill(pid);
}

int
getpid(void) {
  800518:	27bdffe8 	addiu	sp,sp,-24
  80051c:	afbf0014 	sw	ra,20(sp)
  800520:	afbe0010 	sw	s8,16(sp)
  800524:	03a0f021 	move	s8,sp
  800528:	afc40018 	sw	a0,24(s8)
  80052c:	8fc40018 	lw	a0,24(s8)
  800530:	0c2000ae 	jal	8002b8 <sys_kill>
  800534:	00000000 	nop
  800538:	03c0e821 	move	sp,s8
  80053c:	8fbf0014 	lw	ra,20(sp)
  800540:	8fbe0010 	lw	s8,16(sp)
  800544:	27bd0018 	addiu	sp,sp,24
  800548:	03e00008 	jr	ra
  80054c:	00000000 	nop

00800550 <getpid>:
    return sys_getpid();
}

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
  800550:	27bdffe8 	addiu	sp,sp,-24
  800554:	afbf0014 	sw	ra,20(sp)
  800558:	afbe0010 	sw	s8,16(sp)
  80055c:	03a0f021 	move	s8,sp
  800560:	0c2000bd 	jal	8002f4 <sys_getpid>
  800564:	00000000 	nop
  800568:	03c0e821 	move	sp,s8
  80056c:	8fbf0014 	lw	ra,20(sp)
  800570:	8fbe0010 	lw	s8,16(sp)
  800574:	27bd0018 	addiu	sp,sp,24
  800578:	03e00008 	jr	ra
  80057c:	00000000 	nop

00800580 <print_pgdir>:
    sys_pgdir();
}

unsigned int
gettime_msec(void) {
  800580:	27bdffe8 	addiu	sp,sp,-24
  800584:	afbf0014 	sw	ra,20(sp)
  800588:	afbe0010 	sw	s8,16(sp)
  80058c:	03a0f021 	move	s8,sp
  800590:	0c2000d9 	jal	800364 <sys_pgdir>
  800594:	00000000 	nop
  800598:	03c0e821 	move	sp,s8
  80059c:	8fbf0014 	lw	ra,20(sp)
  8005a0:	8fbe0010 	lw	s8,16(sp)
  8005a4:	27bd0018 	addiu	sp,sp,24
  8005a8:	03e00008 	jr	ra
  8005ac:	00000000 	nop

008005b0 <gettime_msec>:
    return (unsigned int)sys_gettime();
}

void
lab6_set_priority(uint32_t priority)
{
  8005b0:	27bdffe8 	addiu	sp,sp,-24
  8005b4:	afbf0014 	sw	ra,20(sp)
  8005b8:	afbe0010 	sw	s8,16(sp)
  8005bc:	03a0f021 	move	s8,sp
  8005c0:	0c2000e6 	jal	800398 <sys_gettime>
  8005c4:	00000000 	nop
  8005c8:	03c0e821 	move	sp,s8
  8005cc:	8fbf0014 	lw	ra,20(sp)
  8005d0:	8fbe0010 	lw	s8,16(sp)
  8005d4:	27bd0018 	addiu	sp,sp,24
  8005d8:	03e00008 	jr	ra
  8005dc:	00000000 	nop

008005e0 <lab6_set_priority>:
  8005e0:	27bdffe8 	addiu	sp,sp,-24
  8005e4:	afbf0014 	sw	ra,20(sp)
  8005e8:	afbe0010 	sw	s8,16(sp)
  8005ec:	03a0f021 	move	s8,sp
  8005f0:	afc40018 	sw	a0,24(s8)
  8005f4:	8fc40018 	lw	a0,24(s8)
  8005f8:	0c2000f3 	jal	8003cc <sys_lab6_set_priority>
  8005fc:	00000000 	nop
  800600:	03c0e821 	move	sp,s8
  800604:	8fbf0014 	lw	ra,20(sp)
  800608:	8fbe0010 	lw	s8,16(sp)
  80060c:	27bd0018 	addiu	sp,sp,24
  800610:	03e00008 	jr	ra
  800614:	00000000 	nop

00800618 <_start>:
    # move down the esp register
    # since it may cause page fault in backtrace
    # addiu   $sp, $sp, -0x20

    # call user-program function
    jal     umain
  800618:	0c200251 00000000 08200188 00000000     Q. ....... .....

00800628 <do_syscall>:
.text
.globl do_syscall
do_syscall:
    lw      $v1, 0x10($sp)
  800628:	8fa30010 8fa20014 0000000c 03e00008     ................
    lw      $v0, 0x14($sp)
    syscall
    jr      $ra
  800638:	00000000                                ....

0080063c <cputch>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
  80063c:	27bdffe8 	addiu	sp,sp,-24
  800640:	afbf0014 	sw	ra,20(sp)
  800644:	afbe0010 	sw	s8,16(sp)
  800648:	03a0f021 	move	s8,sp
  80064c:	afc40018 	sw	a0,24(s8)
  800650:	afc5001c 	sw	a1,28(s8)
  800654:	8fc40018 	lw	a0,24(s8)
  800658:	0c2000ca 	jal	800328 <sys_putc>
  80065c:	00000000 	nop
  800660:	8fc2001c 	lw	v0,28(s8)
  800664:	8c420000 	lw	v0,0(v0)
  800668:	24430001 	addiu	v1,v0,1
  80066c:	8fc2001c 	lw	v0,28(s8)
  800670:	ac430000 	sw	v1,0(v0)
  800674:	03c0e821 	move	sp,s8
  800678:	8fbf0014 	lw	ra,20(sp)
  80067c:	8fbe0010 	lw	s8,16(sp)
  800680:	27bd0018 	addiu	sp,sp,24
  800684:	03e00008 	jr	ra
  800688:	00000000 	nop

0080068c <vcprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
  80068c:	27bdffe0 	addiu	sp,sp,-32
  800690:	afbf001c 	sw	ra,28(sp)
  800694:	afbe0018 	sw	s8,24(sp)
  800698:	03a0f021 	move	s8,sp
  80069c:	afc40020 	sw	a0,32(s8)
  8006a0:	afc50024 	sw	a1,36(s8)
  8006a4:	afc00010 	sw	zero,16(s8)
  8006a8:	3c020080 	lui	v0,0x80
  8006ac:	2442063c 	addiu	v0,v0,1596
  8006b0:	00402021 	move	a0,v0
  8006b4:	27c20010 	addiu	v0,s8,16
  8006b8:	00402821 	move	a1,v0
  8006bc:	8fc60020 	lw	a2,32(s8)
  8006c0:	8fc70024 	lw	a3,36(s8)
  8006c4:	0c20060d 	jal	801834 <vprintfmt>
  8006c8:	00000000 	nop
  8006cc:	8fc20010 	lw	v0,16(s8)
  8006d0:	03c0e821 	move	sp,s8
  8006d4:	8fbf001c 	lw	ra,28(sp)
  8006d8:	8fbe0018 	lw	s8,24(sp)
  8006dc:	27bd0020 	addiu	sp,sp,32
  8006e0:	03e00008 	jr	ra
  8006e4:	00000000 	nop

008006e8 <cprintf>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
  8006e8:	27bdffe0 	addiu	sp,sp,-32
  8006ec:	afbf001c 	sw	ra,28(sp)
  8006f0:	afbe0018 	sw	s8,24(sp)
  8006f4:	03a0f021 	move	s8,sp
  8006f8:	afc50024 	sw	a1,36(s8)
  8006fc:	afc60028 	sw	a2,40(s8)
  800700:	afc7002c 	sw	a3,44(s8)
  800704:	afc40020 	sw	a0,32(s8)
  800708:	27c20024 	addiu	v0,s8,36
  80070c:	afc20014 	sw	v0,20(s8)
  800710:	8fc20014 	lw	v0,20(s8)
  800714:	8fc40020 	lw	a0,32(s8)
  800718:	00402821 	move	a1,v0
  80071c:	0c2001a3 	jal	80068c <vcprintf>
  800720:	00000000 	nop
  800724:	afc20010 	sw	v0,16(s8)
  800728:	8fc20010 	lw	v0,16(s8)
  80072c:	03c0e821 	move	sp,s8
  800730:	8fbf001c 	lw	ra,28(sp)
  800734:	8fbe0018 	lw	s8,24(sp)
  800738:	27bd0020 	addiu	sp,sp,32
  80073c:	03e00008 	jr	ra
  800740:	00000000 	nop

00800744 <cputs>:
#include <defs.h>
#include <stdio.h>
#include <syscall.h>

/* *
  800744:	27bdffe0 	addiu	sp,sp,-32
  800748:	afbf001c 	sw	ra,28(sp)
  80074c:	afbe0018 	sw	s8,24(sp)
  800750:	03a0f021 	move	s8,sp
  800754:	afc40020 	sw	a0,32(s8)
  800758:	afc00014 	sw	zero,20(s8)
  80075c:	082001df 	j	80077c <cputs+0x38>
  800760:	00000000 	nop
  800764:	93c30010 	lbu	v1,16(s8)
  800768:	27c20014 	addiu	v0,s8,20
  80076c:	00602021 	move	a0,v1
  800770:	00402821 	move	a1,v0
  800774:	0c20018f 	jal	80063c <cputch>
  800778:	00000000 	nop
  80077c:	8fc20020 	lw	v0,32(s8)
  800780:	90420000 	lbu	v0,0(v0)
  800784:	a3c20010 	sb	v0,16(s8)
  800788:	93c20010 	lbu	v0,16(s8)
  80078c:	0002102b 	sltu	v0,zero,v0
  800790:	304200ff 	andi	v0,v0,0xff
  800794:	8fc30020 	lw	v1,32(s8)
  800798:	24630001 	addiu	v1,v1,1
  80079c:	afc30020 	sw	v1,32(s8)
  8007a0:	1440fff0 	bnez	v0,800764 <cputs+0x20>
  8007a4:	00000000 	nop
  8007a8:	27c20014 	addiu	v0,s8,20
  8007ac:	2404000a 	li	a0,10
  8007b0:	00402821 	move	a1,v0
  8007b4:	0c20018f 	jal	80063c <cputch>
  8007b8:	00000000 	nop
  8007bc:	8fc20014 	lw	v0,20(s8)
  8007c0:	03c0e821 	move	sp,s8
  8007c4:	8fbf001c 	lw	ra,28(sp)
  8007c8:	8fbe0018 	lw	s8,24(sp)
  8007cc:	27bd0020 	addiu	sp,sp,32
  8007d0:	03e00008 	jr	ra
  8007d4:	00000000 	nop

008007d8 <_Alloc>:
#include <ulib.h>

int _Alloc(int n) {
    return 0;
}
void _PrintInt(int x) {
  8007d8:	27bdfff8 	addiu	sp,sp,-8
  8007dc:	afbe0004 	sw	s8,4(sp)
  8007e0:	03a0f021 	move	s8,sp
  8007e4:	afc40008 	sw	a0,8(s8)
  8007e8:	00001021 	move	v0,zero
  8007ec:	03c0e821 	move	sp,s8
  8007f0:	8fbe0004 	lw	s8,4(sp)
  8007f4:	27bd0008 	addiu	sp,sp,8
  8007f8:	03e00008 	jr	ra
  8007fc:	00000000 	nop

00800800 <_PrintInt>:
    cprintf("%d", x);
}
void _PrintChar(char x) {
  800800:	27bdffe8 	addiu	sp,sp,-24
  800804:	afbf0014 	sw	ra,20(sp)
  800808:	afbe0010 	sw	s8,16(sp)
  80080c:	03a0f021 	move	s8,sp
  800810:	afc40018 	sw	a0,24(s8)
  800814:	3c020080 	lui	v0,0x80
  800818:	244421d0 	addiu	a0,v0,8656
  80081c:	8fc50018 	lw	a1,24(s8)
  800820:	0c2001ba 	jal	8006e8 <cprintf>
  800824:	00000000 	nop
  800828:	03c0e821 	move	sp,s8
  80082c:	8fbf0014 	lw	ra,20(sp)
  800830:	8fbe0010 	lw	s8,16(sp)
  800834:	27bd0018 	addiu	sp,sp,24
  800838:	03e00008 	jr	ra
  80083c:	00000000 	nop

00800840 <_PrintChar>:
    cprintf("%c", x);
}
void _PrintString(const char* x) {
  800840:	27bdffe8 	addiu	sp,sp,-24
  800844:	afbf0014 	sw	ra,20(sp)
  800848:	afbe0010 	sw	s8,16(sp)
  80084c:	03a0f021 	move	s8,sp
  800850:	00801021 	move	v0,a0
  800854:	a3c20018 	sb	v0,24(s8)
  800858:	93c20018 	lbu	v0,24(s8)
  80085c:	3c030080 	lui	v1,0x80
  800860:	246421d4 	addiu	a0,v1,8660
  800864:	00402821 	move	a1,v0
  800868:	0c2001ba 	jal	8006e8 <cprintf>
  80086c:	00000000 	nop
  800870:	03c0e821 	move	sp,s8
  800874:	8fbf0014 	lw	ra,20(sp)
  800878:	8fbe0010 	lw	s8,16(sp)
  80087c:	27bd0018 	addiu	sp,sp,24
  800880:	03e00008 	jr	ra
  800884:	00000000 	nop

00800888 <_PrintString>:
    cprintf("%s", x);
}
void _PrintBool(bool x) {
  800888:	27bdffe8 	addiu	sp,sp,-24
  80088c:	afbf0014 	sw	ra,20(sp)
  800890:	afbe0010 	sw	s8,16(sp)
  800894:	03a0f021 	move	s8,sp
  800898:	afc40018 	sw	a0,24(s8)
  80089c:	3c020080 	lui	v0,0x80
  8008a0:	244421d8 	addiu	a0,v0,8664
  8008a4:	8fc50018 	lw	a1,24(s8)
  8008a8:	0c2001ba 	jal	8006e8 <cprintf>
  8008ac:	00000000 	nop
  8008b0:	03c0e821 	move	sp,s8
  8008b4:	8fbf0014 	lw	ra,20(sp)
  8008b8:	8fbe0010 	lw	s8,16(sp)
  8008bc:	27bd0018 	addiu	sp,sp,24
  8008c0:	03e00008 	jr	ra
  8008c4:	00000000 	nop

008008c8 <_PrintBool>:
    if (x)
        cprintf("true");
    else
        cprintf("false");
}
void __noreturn _Halt(void) {
  8008c8:	27bdffe8 	addiu	sp,sp,-24
  8008cc:	afbf0014 	sw	ra,20(sp)
  8008d0:	afbe0010 	sw	s8,16(sp)
  8008d4:	03a0f021 	move	s8,sp
  8008d8:	afc40018 	sw	a0,24(s8)
  8008dc:	8fc20018 	lw	v0,24(s8)
  8008e0:	10400007 	beqz	v0,800900 <_PrintBool+0x38>
  8008e4:	00000000 	nop
  8008e8:	3c020080 	lui	v0,0x80
  8008ec:	244421dc 	addiu	a0,v0,8668
  8008f0:	0c2001ba 	jal	8006e8 <cprintf>
  8008f4:	00000000 	nop
  8008f8:	08200244 	j	800910 <_PrintBool+0x48>
  8008fc:	00000000 	nop
  800900:	3c020080 	lui	v0,0x80
  800904:	244421e4 	addiu	a0,v0,8676
  800908:	0c2001ba 	jal	8006e8 <cprintf>
  80090c:	00000000 	nop
  800910:	03c0e821 	move	sp,s8
  800914:	8fbf0014 	lw	ra,20(sp)
  800918:	8fbe0010 	lw	s8,16(sp)
  80091c:	27bd0018 	addiu	sp,sp,24
  800920:	03e00008 	jr	ra
  800924:	00000000 	nop

00800928 <_Halt>:
#include <defs.h>
#include <stdio.h>
#include <ulib.h>

int _Alloc(int n) {
    return 0;
  800928:	27bdffe8 	addiu	sp,sp,-24
  80092c:	afbf0014 	sw	ra,20(sp)
  800930:	afbe0010 	sw	s8,16(sp)
  800934:	03a0f021 	move	s8,sp
  800938:	00002021 	move	a0,zero
  80093c:	0c200102 	jal	800408 <exit>
  800940:	00000000 	nop

00800944 <umain>:
umain(void) {
    int ret = main();
    exit(ret);
}

  800944:	27bdffe0 	addiu	sp,sp,-32
  800948:	afbf001c 	sw	ra,28(sp)
  80094c:	afbe0018 	sw	s8,24(sp)
  800950:	03a0f021 	move	s8,sp
  800954:	0c200848 	jal	802120 <main>
  800958:	00000000 	nop
  80095c:	afc20010 	sw	v0,16(s8)
  800960:	8fc40010 	lw	a0,16(s8)
  800964:	0c200102 	jal	800408 <exit>
  800968:	00000000 	nop

0080096c <strlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
  80096c:	27bdfff0 	addiu	sp,sp,-16
  800970:	afbe000c 	sw	s8,12(sp)
  800974:	03a0f021 	move	s8,sp
  800978:	afc40010 	sw	a0,16(s8)
  80097c:	afc00000 	sw	zero,0(s8)
  800980:	08200265 	j	800994 <strlen+0x28>
  800984:	00000000 	nop
  800988:	8fc20000 	lw	v0,0(s8)
  80098c:	24420001 	addiu	v0,v0,1
  800990:	afc20000 	sw	v0,0(s8)
  800994:	8fc20010 	lw	v0,16(s8)
  800998:	90420000 	lbu	v0,0(v0)
  80099c:	0002102b 	sltu	v0,zero,v0
  8009a0:	304200ff 	andi	v0,v0,0xff
  8009a4:	8fc30010 	lw	v1,16(s8)
  8009a8:	24630001 	addiu	v1,v1,1
  8009ac:	afc30010 	sw	v1,16(s8)
  8009b0:	1440fff5 	bnez	v0,800988 <strlen+0x1c>
  8009b4:	00000000 	nop
  8009b8:	8fc20000 	lw	v0,0(s8)
  8009bc:	03c0e821 	move	sp,s8
  8009c0:	8fbe000c 	lw	s8,12(sp)
  8009c4:	27bd0010 	addiu	sp,sp,16
  8009c8:	03e00008 	jr	ra
  8009cc:	00000000 	nop

008009d0 <strnlen>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
  8009d0:	27bdfff0 	addiu	sp,sp,-16
  8009d4:	afbe000c 	sw	s8,12(sp)
  8009d8:	03a0f021 	move	s8,sp
  8009dc:	afc40010 	sw	a0,16(s8)
  8009e0:	afc50014 	sw	a1,20(s8)
  8009e4:	afc00000 	sw	zero,0(s8)
  8009e8:	0820027f 	j	8009fc <strnlen+0x2c>
  8009ec:	00000000 	nop
  8009f0:	8fc20000 	lw	v0,0(s8)
  8009f4:	24420001 	addiu	v0,v0,1
  8009f8:	afc20000 	sw	v0,0(s8)
  8009fc:	8fc30000 	lw	v1,0(s8)
  800a00:	8fc20014 	lw	v0,20(s8)
  800a04:	0062102b 	sltu	v0,v1,v0
  800a08:	1040000a 	beqz	v0,800a34 <strnlen+0x64>
  800a0c:	00000000 	nop
  800a10:	8fc20010 	lw	v0,16(s8)
  800a14:	90420000 	lbu	v0,0(v0)
  800a18:	0002102b 	sltu	v0,zero,v0
  800a1c:	304200ff 	andi	v0,v0,0xff
  800a20:	8fc30010 	lw	v1,16(s8)
  800a24:	24630001 	addiu	v1,v1,1
  800a28:	afc30010 	sw	v1,16(s8)
  800a2c:	1440fff0 	bnez	v0,8009f0 <strnlen+0x20>
  800a30:	00000000 	nop
  800a34:	8fc20000 	lw	v0,0(s8)
  800a38:	03c0e821 	move	sp,s8
  800a3c:	8fbe000c 	lw	s8,12(sp)
  800a40:	27bd0010 	addiu	sp,sp,16
  800a44:	03e00008 	jr	ra
  800a48:	00000000 	nop

00800a4c <strcpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
  800a4c:	27bdfff0 	addiu	sp,sp,-16
  800a50:	afbe000c 	sw	s8,12(sp)
  800a54:	03a0f021 	move	s8,sp
  800a58:	afc40010 	sw	a0,16(s8)
  800a5c:	afc50014 	sw	a1,20(s8)
  800a60:	8fc20010 	lw	v0,16(s8)
  800a64:	afc20000 	sw	v0,0(s8)
  800a68:	8fc20014 	lw	v0,20(s8)
  800a6c:	90430000 	lbu	v1,0(v0)
  800a70:	8fc20000 	lw	v0,0(s8)
  800a74:	a0430000 	sb	v1,0(v0)
  800a78:	8fc20000 	lw	v0,0(s8)
  800a7c:	90420000 	lbu	v0,0(v0)
  800a80:	0002102b 	sltu	v0,zero,v0
  800a84:	304200ff 	andi	v0,v0,0xff
  800a88:	8fc30000 	lw	v1,0(s8)
  800a8c:	24630001 	addiu	v1,v1,1
  800a90:	afc30000 	sw	v1,0(s8)
  800a94:	8fc30014 	lw	v1,20(s8)
  800a98:	24630001 	addiu	v1,v1,1
  800a9c:	afc30014 	sw	v1,20(s8)
  800aa0:	1440fff1 	bnez	v0,800a68 <strcpy+0x1c>
  800aa4:	00000000 	nop
  800aa8:	8fc20010 	lw	v0,16(s8)
  800aac:	03c0e821 	move	sp,s8
  800ab0:	8fbe000c 	lw	s8,12(sp)
  800ab4:	27bd0010 	addiu	sp,sp,16
  800ab8:	03e00008 	jr	ra
  800abc:	00000000 	nop

00800ac0 <strncpy>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
  800ac0:	27bdfff0 	addiu	sp,sp,-16
  800ac4:	afbe000c 	sw	s8,12(sp)
  800ac8:	03a0f021 	move	s8,sp
  800acc:	afc40010 	sw	a0,16(s8)
  800ad0:	afc50014 	sw	a1,20(s8)
  800ad4:	afc60018 	sw	a2,24(s8)
  800ad8:	8fc20010 	lw	v0,16(s8)
  800adc:	afc20000 	sw	v0,0(s8)
  800ae0:	082002cb 	j	800b2c <strncpy+0x6c>
  800ae4:	00000000 	nop
  800ae8:	8fc20014 	lw	v0,20(s8)
  800aec:	90430000 	lbu	v1,0(v0)
  800af0:	8fc20000 	lw	v0,0(s8)
  800af4:	a0430000 	sb	v1,0(v0)
  800af8:	8fc20000 	lw	v0,0(s8)
  800afc:	90420000 	lbu	v0,0(v0)
  800b00:	10400004 	beqz	v0,800b14 <strncpy+0x54>
  800b04:	00000000 	nop
  800b08:	8fc20014 	lw	v0,20(s8)
  800b0c:	24420001 	addiu	v0,v0,1
  800b10:	afc20014 	sw	v0,20(s8)
  800b14:	8fc20000 	lw	v0,0(s8)
  800b18:	24420001 	addiu	v0,v0,1
  800b1c:	afc20000 	sw	v0,0(s8)
  800b20:	8fc20018 	lw	v0,24(s8)
  800b24:	2442ffff 	addiu	v0,v0,-1
  800b28:	afc20018 	sw	v0,24(s8)
  800b2c:	8fc20018 	lw	v0,24(s8)
  800b30:	1440ffed 	bnez	v0,800ae8 <strncpy+0x28>
  800b34:	00000000 	nop
  800b38:	8fc20010 	lw	v0,16(s8)
  800b3c:	03c0e821 	move	sp,s8
  800b40:	8fbe000c 	lw	s8,12(sp)
  800b44:	27bd0010 	addiu	sp,sp,16
  800b48:	03e00008 	jr	ra
  800b4c:	00000000 	nop

00800b50 <strcmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
  800b50:	27bdfff8 	addiu	sp,sp,-8
  800b54:	afbe0004 	sw	s8,4(sp)
  800b58:	03a0f021 	move	s8,sp
  800b5c:	afc40008 	sw	a0,8(s8)
  800b60:	afc5000c 	sw	a1,12(s8)
  800b64:	082002e1 	j	800b84 <strcmp+0x34>
  800b68:	00000000 	nop
  800b6c:	8fc20008 	lw	v0,8(s8)
  800b70:	24420001 	addiu	v0,v0,1
  800b74:	afc20008 	sw	v0,8(s8)
  800b78:	8fc2000c 	lw	v0,12(s8)
  800b7c:	24420001 	addiu	v0,v0,1
  800b80:	afc2000c 	sw	v0,12(s8)
  800b84:	8fc20008 	lw	v0,8(s8)
  800b88:	90420000 	lbu	v0,0(v0)
  800b8c:	10400007 	beqz	v0,800bac <strcmp+0x5c>
  800b90:	00000000 	nop
  800b94:	8fc20008 	lw	v0,8(s8)
  800b98:	90430000 	lbu	v1,0(v0)
  800b9c:	8fc2000c 	lw	v0,12(s8)
  800ba0:	90420000 	lbu	v0,0(v0)
  800ba4:	1062fff1 	beq	v1,v0,800b6c <strcmp+0x1c>
  800ba8:	00000000 	nop
  800bac:	8fc20008 	lw	v0,8(s8)
  800bb0:	90420000 	lbu	v0,0(v0)
  800bb4:	00401821 	move	v1,v0
  800bb8:	8fc2000c 	lw	v0,12(s8)
  800bbc:	90420000 	lbu	v0,0(v0)
  800bc0:	00621023 	subu	v0,v1,v0
  800bc4:	03c0e821 	move	sp,s8
  800bc8:	8fbe0004 	lw	s8,4(sp)
  800bcc:	27bd0008 	addiu	sp,sp,8
  800bd0:	03e00008 	jr	ra
  800bd4:	00000000 	nop

00800bd8 <strncmp>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
  800bd8:	27bdfff8 	addiu	sp,sp,-8
  800bdc:	afbe0004 	sw	s8,4(sp)
  800be0:	03a0f021 	move	s8,sp
  800be4:	afc40008 	sw	a0,8(s8)
  800be8:	afc5000c 	sw	a1,12(s8)
  800bec:	afc60010 	sw	a2,16(s8)
  800bf0:	08200307 	j	800c1c <strncmp+0x44>
  800bf4:	00000000 	nop
  800bf8:	8fc20010 	lw	v0,16(s8)
  800bfc:	2442ffff 	addiu	v0,v0,-1
  800c00:	afc20010 	sw	v0,16(s8)
  800c04:	8fc20008 	lw	v0,8(s8)
  800c08:	24420001 	addiu	v0,v0,1
  800c0c:	afc20008 	sw	v0,8(s8)
  800c10:	8fc2000c 	lw	v0,12(s8)
  800c14:	24420001 	addiu	v0,v0,1
  800c18:	afc2000c 	sw	v0,12(s8)
  800c1c:	8fc20010 	lw	v0,16(s8)
  800c20:	1040000b 	beqz	v0,800c50 <strncmp+0x78>
  800c24:	00000000 	nop
  800c28:	8fc20008 	lw	v0,8(s8)
  800c2c:	90420000 	lbu	v0,0(v0)
  800c30:	10400007 	beqz	v0,800c50 <strncmp+0x78>
  800c34:	00000000 	nop
  800c38:	8fc20008 	lw	v0,8(s8)
  800c3c:	90430000 	lbu	v1,0(v0)
  800c40:	8fc2000c 	lw	v0,12(s8)
  800c44:	90420000 	lbu	v0,0(v0)
  800c48:	1062ffeb 	beq	v1,v0,800bf8 <strncmp+0x20>
  800c4c:	00000000 	nop
  800c50:	8fc20010 	lw	v0,16(s8)
  800c54:	10400009 	beqz	v0,800c7c <strncmp+0xa4>
  800c58:	00000000 	nop
  800c5c:	8fc20008 	lw	v0,8(s8)
  800c60:	90420000 	lbu	v0,0(v0)
  800c64:	00401821 	move	v1,v0
  800c68:	8fc2000c 	lw	v0,12(s8)
  800c6c:	90420000 	lbu	v0,0(v0)
  800c70:	00621023 	subu	v0,v1,v0
  800c74:	08200320 	j	800c80 <strncmp+0xa8>
  800c78:	00000000 	nop
  800c7c:	00001021 	move	v0,zero
  800c80:	03c0e821 	move	sp,s8
  800c84:	8fbe0004 	lw	s8,4(sp)
  800c88:	27bd0008 	addiu	sp,sp,8
  800c8c:	03e00008 	jr	ra
  800c90:	00000000 	nop

00800c94 <strchr>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
  800c94:	27bdfff8 	addiu	sp,sp,-8
  800c98:	afbe0004 	sw	s8,4(sp)
  800c9c:	03a0f021 	move	s8,sp
  800ca0:	afc40008 	sw	a0,8(s8)
  800ca4:	00a01021 	move	v0,a1
  800ca8:	a3c2000c 	sb	v0,12(s8)
  800cac:	08200338 	j	800ce0 <strchr+0x4c>
  800cb0:	00000000 	nop
  800cb4:	8fc20008 	lw	v0,8(s8)
  800cb8:	90420000 	lbu	v0,0(v0)
  800cbc:	93c3000c 	lbu	v1,12(s8)
  800cc0:	14620004 	bne	v1,v0,800cd4 <strchr+0x40>
  800cc4:	00000000 	nop
  800cc8:	8fc20008 	lw	v0,8(s8)
  800ccc:	0820033d 	j	800cf4 <strchr+0x60>
  800cd0:	00000000 	nop
  800cd4:	8fc20008 	lw	v0,8(s8)
  800cd8:	24420001 	addiu	v0,v0,1
  800cdc:	afc20008 	sw	v0,8(s8)
  800ce0:	8fc20008 	lw	v0,8(s8)
  800ce4:	90420000 	lbu	v0,0(v0)
  800ce8:	1440fff2 	bnez	v0,800cb4 <strchr+0x20>
  800cec:	00000000 	nop
  800cf0:	00001021 	move	v0,zero
  800cf4:	03c0e821 	move	sp,s8
  800cf8:	8fbe0004 	lw	s8,4(sp)
  800cfc:	27bd0008 	addiu	sp,sp,8
  800d00:	03e00008 	jr	ra
  800d04:	00000000 	nop

00800d08 <strfind>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
  800d08:	27bdfff8 	addiu	sp,sp,-8
  800d0c:	afbe0004 	sw	s8,4(sp)
  800d10:	03a0f021 	move	s8,sp
  800d14:	afc40008 	sw	a0,8(s8)
  800d18:	00a01021 	move	v0,a1
  800d1c:	a3c2000c 	sb	v0,12(s8)
  800d20:	08200352 	j	800d48 <strfind+0x40>
  800d24:	00000000 	nop
  800d28:	8fc20008 	lw	v0,8(s8)
  800d2c:	90420000 	lbu	v0,0(v0)
  800d30:	93c3000c 	lbu	v1,12(s8)
  800d34:	1062000a 	beq	v1,v0,800d60 <strfind+0x58>
  800d38:	00000000 	nop
  800d3c:	8fc20008 	lw	v0,8(s8)
  800d40:	24420001 	addiu	v0,v0,1
  800d44:	afc20008 	sw	v0,8(s8)
  800d48:	8fc20008 	lw	v0,8(s8)
  800d4c:	90420000 	lbu	v0,0(v0)
  800d50:	1440fff5 	bnez	v0,800d28 <strfind+0x20>
  800d54:	00000000 	nop
  800d58:	08200359 	j	800d64 <strfind+0x5c>
  800d5c:	00000000 	nop
  800d60:	00000000 	nop
  800d64:	8fc20008 	lw	v0,8(s8)
  800d68:	03c0e821 	move	sp,s8
  800d6c:	8fbe0004 	lw	s8,4(sp)
  800d70:	27bd0008 	addiu	sp,sp,8
  800d74:	03e00008 	jr	ra
  800d78:	00000000 	nop

00800d7c <strtol>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
  800d7c:	27bdffe8 	addiu	sp,sp,-24
  800d80:	afbe0014 	sw	s8,20(sp)
  800d84:	03a0f021 	move	s8,sp
  800d88:	afc40018 	sw	a0,24(s8)
  800d8c:	afc5001c 	sw	a1,28(s8)
  800d90:	afc60020 	sw	a2,32(s8)
  800d94:	afc00008 	sw	zero,8(s8)
  800d98:	afc00004 	sw	zero,4(s8)
  800d9c:	0820036c 	j	800db0 <strtol+0x34>
  800da0:	00000000 	nop
  800da4:	8fc20018 	lw	v0,24(s8)
  800da8:	24420001 	addiu	v0,v0,1
  800dac:	afc20018 	sw	v0,24(s8)
  800db0:	8fc20018 	lw	v0,24(s8)
  800db4:	90430000 	lbu	v1,0(v0)
  800db8:	24020020 	li	v0,32
  800dbc:	1062fff9 	beq	v1,v0,800da4 <strtol+0x28>
  800dc0:	00000000 	nop
  800dc4:	8fc20018 	lw	v0,24(s8)
  800dc8:	90430000 	lbu	v1,0(v0)
  800dcc:	24020009 	li	v0,9
  800dd0:	1062fff4 	beq	v1,v0,800da4 <strtol+0x28>
  800dd4:	00000000 	nop
  800dd8:	8fc20018 	lw	v0,24(s8)
  800ddc:	90430000 	lbu	v1,0(v0)
  800de0:	2402002b 	li	v0,43
  800de4:	14620006 	bne	v1,v0,800e00 <strtol+0x84>
  800de8:	00000000 	nop
  800dec:	8fc20018 	lw	v0,24(s8)
  800df0:	24420001 	addiu	v0,v0,1
  800df4:	afc20018 	sw	v0,24(s8)
  800df8:	0820038a 	j	800e28 <strtol+0xac>
  800dfc:	00000000 	nop
  800e00:	8fc20018 	lw	v0,24(s8)
  800e04:	90430000 	lbu	v1,0(v0)
  800e08:	2402002d 	li	v0,45
  800e0c:	14620006 	bne	v1,v0,800e28 <strtol+0xac>
  800e10:	00000000 	nop
  800e14:	8fc20018 	lw	v0,24(s8)
  800e18:	24420001 	addiu	v0,v0,1
  800e1c:	afc20018 	sw	v0,24(s8)
  800e20:	24020001 	li	v0,1
  800e24:	afc20008 	sw	v0,8(s8)
  800e28:	8fc20020 	lw	v0,32(s8)
  800e2c:	10400005 	beqz	v0,800e44 <strtol+0xc8>
  800e30:	00000000 	nop
  800e34:	8fc30020 	lw	v1,32(s8)
  800e38:	24020010 	li	v0,16
  800e3c:	14620013 	bne	v1,v0,800e8c <strtol+0x110>
  800e40:	00000000 	nop
  800e44:	8fc20018 	lw	v0,24(s8)
  800e48:	90430000 	lbu	v1,0(v0)
  800e4c:	24020030 	li	v0,48
  800e50:	1462000e 	bne	v1,v0,800e8c <strtol+0x110>
  800e54:	00000000 	nop
  800e58:	8fc20018 	lw	v0,24(s8)
  800e5c:	24420001 	addiu	v0,v0,1
  800e60:	90430000 	lbu	v1,0(v0)
  800e64:	24020078 	li	v0,120
  800e68:	14620008 	bne	v1,v0,800e8c <strtol+0x110>
  800e6c:	00000000 	nop
  800e70:	8fc20018 	lw	v0,24(s8)
  800e74:	24420002 	addiu	v0,v0,2
  800e78:	afc20018 	sw	v0,24(s8)
  800e7c:	24020010 	li	v0,16
  800e80:	afc20020 	sw	v0,32(s8)
  800e84:	082003b7 	j	800edc <strtol+0x160>
  800e88:	00000000 	nop
  800e8c:	8fc20020 	lw	v0,32(s8)
  800e90:	1440000d 	bnez	v0,800ec8 <strtol+0x14c>
  800e94:	00000000 	nop
  800e98:	8fc20018 	lw	v0,24(s8)
  800e9c:	90430000 	lbu	v1,0(v0)
  800ea0:	24020030 	li	v0,48
  800ea4:	14620008 	bne	v1,v0,800ec8 <strtol+0x14c>
  800ea8:	00000000 	nop
  800eac:	8fc20018 	lw	v0,24(s8)
  800eb0:	24420001 	addiu	v0,v0,1
  800eb4:	afc20018 	sw	v0,24(s8)
  800eb8:	24020008 	li	v0,8
  800ebc:	afc20020 	sw	v0,32(s8)
  800ec0:	082003b7 	j	800edc <strtol+0x160>
  800ec4:	00000000 	nop
  800ec8:	8fc20020 	lw	v0,32(s8)
  800ecc:	14400003 	bnez	v0,800edc <strtol+0x160>
  800ed0:	00000000 	nop
  800ed4:	2402000a 	li	v0,10
  800ed8:	afc20020 	sw	v0,32(s8)
  800edc:	8fc20018 	lw	v0,24(s8)
  800ee0:	90420000 	lbu	v0,0(v0)
  800ee4:	2c420030 	sltiu	v0,v0,48
  800ee8:	1440000c 	bnez	v0,800f1c <strtol+0x1a0>
  800eec:	00000000 	nop
  800ef0:	8fc20018 	lw	v0,24(s8)
  800ef4:	90420000 	lbu	v0,0(v0)
  800ef8:	2c42003a 	sltiu	v0,v0,58
  800efc:	10400007 	beqz	v0,800f1c <strtol+0x1a0>
  800f00:	00000000 	nop
  800f04:	8fc20018 	lw	v0,24(s8)
  800f08:	90420000 	lbu	v0,0(v0)
  800f0c:	2442ffd0 	addiu	v0,v0,-48
  800f10:	afc20000 	sw	v0,0(s8)
  800f14:	082003e5 	j	800f94 <strtol+0x218>
  800f18:	00000000 	nop
  800f1c:	8fc20018 	lw	v0,24(s8)
  800f20:	90420000 	lbu	v0,0(v0)
  800f24:	2c420061 	sltiu	v0,v0,97
  800f28:	1440000c 	bnez	v0,800f5c <strtol+0x1e0>
  800f2c:	00000000 	nop
  800f30:	8fc20018 	lw	v0,24(s8)
  800f34:	90420000 	lbu	v0,0(v0)
  800f38:	2c42007b 	sltiu	v0,v0,123
  800f3c:	10400007 	beqz	v0,800f5c <strtol+0x1e0>
  800f40:	00000000 	nop
  800f44:	8fc20018 	lw	v0,24(s8)
  800f48:	90420000 	lbu	v0,0(v0)
  800f4c:	2442ffa9 	addiu	v0,v0,-87
  800f50:	afc20000 	sw	v0,0(s8)
  800f54:	082003e5 	j	800f94 <strtol+0x218>
  800f58:	00000000 	nop
  800f5c:	8fc20018 	lw	v0,24(s8)
  800f60:	90420000 	lbu	v0,0(v0)
  800f64:	2c420041 	sltiu	v0,v0,65
  800f68:	1440001b 	bnez	v0,800fd8 <strtol+0x25c>
  800f6c:	00000000 	nop
  800f70:	8fc20018 	lw	v0,24(s8)
  800f74:	90420000 	lbu	v0,0(v0)
  800f78:	2c42005b 	sltiu	v0,v0,91
  800f7c:	10400016 	beqz	v0,800fd8 <strtol+0x25c>
  800f80:	00000000 	nop
  800f84:	8fc20018 	lw	v0,24(s8)
  800f88:	90420000 	lbu	v0,0(v0)
  800f8c:	2442ffc9 	addiu	v0,v0,-55
  800f90:	afc20000 	sw	v0,0(s8)
  800f94:	8fc30000 	lw	v1,0(s8)
  800f98:	8fc20020 	lw	v0,32(s8)
  800f9c:	0062102a 	slt	v0,v1,v0
  800fa0:	1040000c 	beqz	v0,800fd4 <strtol+0x258>
  800fa4:	00000000 	nop
  800fa8:	8fc20018 	lw	v0,24(s8)
  800fac:	24420001 	addiu	v0,v0,1
  800fb0:	afc20018 	sw	v0,24(s8)
  800fb4:	8fc30004 	lw	v1,4(s8)
  800fb8:	8fc20020 	lw	v0,32(s8)
  800fbc:	70621802 	mul	v1,v1,v0
  800fc0:	8fc20000 	lw	v0,0(s8)
  800fc4:	00621021 	addu	v0,v1,v0
  800fc8:	afc20004 	sw	v0,4(s8)
  800fcc:	082003b7 	j	800edc <strtol+0x160>
  800fd0:	00000000 	nop
  800fd4:	00000000 	nop
  800fd8:	8fc2001c 	lw	v0,28(s8)
  800fdc:	10400004 	beqz	v0,800ff0 <strtol+0x274>
  800fe0:	00000000 	nop
  800fe4:	8fc2001c 	lw	v0,28(s8)
  800fe8:	8fc30018 	lw	v1,24(s8)
  800fec:	ac430000 	sw	v1,0(v0)
  800ff0:	8fc20008 	lw	v0,8(s8)
  800ff4:	10400005 	beqz	v0,80100c <strtol+0x290>
  800ff8:	00000000 	nop
  800ffc:	8fc20004 	lw	v0,4(s8)
  801000:	00021023 	negu	v0,v0
  801004:	08200404 	j	801010 <strtol+0x294>
  801008:	00000000 	nop
  80100c:	8fc20004 	lw	v0,4(s8)
  801010:	03c0e821 	move	sp,s8
  801014:	8fbe0014 	lw	s8,20(sp)
  801018:	27bd0018 	addiu	sp,sp,24
  80101c:	03e00008 	jr	ra
  801020:	00000000 	nop

00801024 <memset>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
  801024:	27bdfff0 	addiu	sp,sp,-16
  801028:	afbe000c 	sw	s8,12(sp)
  80102c:	03a0f021 	move	s8,sp
  801030:	afc40010 	sw	a0,16(s8)
  801034:	00a01021 	move	v0,a1
  801038:	afc60018 	sw	a2,24(s8)
  80103c:	a3c20014 	sb	v0,20(s8)
  801040:	8fc20010 	lw	v0,16(s8)
  801044:	afc20000 	sw	v0,0(s8)
  801048:	0820041a 	j	801068 <memset+0x44>
  80104c:	00000000 	nop
  801050:	8fc20000 	lw	v0,0(s8)
  801054:	93c30014 	lbu	v1,20(s8)
  801058:	a0430000 	sb	v1,0(v0)
  80105c:	8fc20000 	lw	v0,0(s8)
  801060:	24420001 	addiu	v0,v0,1
  801064:	afc20000 	sw	v0,0(s8)
  801068:	8fc20018 	lw	v0,24(s8)
  80106c:	0002102b 	sltu	v0,zero,v0
  801070:	304200ff 	andi	v0,v0,0xff
  801074:	8fc30018 	lw	v1,24(s8)
  801078:	2463ffff 	addiu	v1,v1,-1
  80107c:	afc30018 	sw	v1,24(s8)
  801080:	1440fff3 	bnez	v0,801050 <memset+0x2c>
  801084:	00000000 	nop
  801088:	8fc20010 	lw	v0,16(s8)
  80108c:	03c0e821 	move	sp,s8
  801090:	8fbe000c 	lw	s8,12(sp)
  801094:	27bd0010 	addiu	sp,sp,16
  801098:	03e00008 	jr	ra
  80109c:	00000000 	nop

008010a0 <memmove>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
  8010a0:	27bdfff0 	addiu	sp,sp,-16
  8010a4:	afbe000c 	sw	s8,12(sp)
  8010a8:	03a0f021 	move	s8,sp
  8010ac:	afc40010 	sw	a0,16(s8)
  8010b0:	afc50014 	sw	a1,20(s8)
  8010b4:	afc60018 	sw	a2,24(s8)
  8010b8:	8fc20014 	lw	v0,20(s8)
  8010bc:	afc20004 	sw	v0,4(s8)
  8010c0:	8fc20010 	lw	v0,16(s8)
  8010c4:	afc20000 	sw	v0,0(s8)
  8010c8:	8fc30004 	lw	v1,4(s8)
  8010cc:	8fc20000 	lw	v0,0(s8)
  8010d0:	0062102b 	sltu	v0,v1,v0
  8010d4:	10400032 	beqz	v0,8011a0 <memmove+0x100>
  8010d8:	00000000 	nop
  8010dc:	8fc30004 	lw	v1,4(s8)
  8010e0:	8fc20018 	lw	v0,24(s8)
  8010e4:	00621821 	addu	v1,v1,v0
  8010e8:	8fc20000 	lw	v0,0(s8)
  8010ec:	0043102b 	sltu	v0,v0,v1
  8010f0:	1040002e 	beqz	v0,8011ac <memmove+0x10c>
  8010f4:	00000000 	nop
  8010f8:	8fc30004 	lw	v1,4(s8)
  8010fc:	8fc20018 	lw	v0,24(s8)
  801100:	00621021 	addu	v0,v1,v0
  801104:	afc20004 	sw	v0,4(s8)
  801108:	8fc30000 	lw	v1,0(s8)
  80110c:	8fc20018 	lw	v0,24(s8)
  801110:	00621021 	addu	v0,v1,v0
  801114:	afc20000 	sw	v0,0(s8)
  801118:	08200452 	j	801148 <memmove+0xa8>
  80111c:	00000000 	nop
  801120:	8fc20000 	lw	v0,0(s8)
  801124:	2442ffff 	addiu	v0,v0,-1
  801128:	afc20000 	sw	v0,0(s8)
  80112c:	8fc20004 	lw	v0,4(s8)
  801130:	2442ffff 	addiu	v0,v0,-1
  801134:	afc20004 	sw	v0,4(s8)
  801138:	8fc20004 	lw	v0,4(s8)
  80113c:	90430000 	lbu	v1,0(v0)
  801140:	8fc20000 	lw	v0,0(s8)
  801144:	a0430000 	sb	v1,0(v0)
  801148:	8fc20018 	lw	v0,24(s8)
  80114c:	0002102b 	sltu	v0,zero,v0
  801150:	304200ff 	andi	v0,v0,0xff
  801154:	8fc30018 	lw	v1,24(s8)
  801158:	2463ffff 	addiu	v1,v1,-1
  80115c:	afc30018 	sw	v1,24(s8)
  801160:	1440ffef 	bnez	v0,801120 <memmove+0x80>
  801164:	00000000 	nop
  801168:	08200474 	j	8011d0 <memmove+0x130>
  80116c:	00000000 	nop
  801170:	8fc20004 	lw	v0,4(s8)
  801174:	90430000 	lbu	v1,0(v0)
  801178:	8fc20000 	lw	v0,0(s8)
  80117c:	a0430000 	sb	v1,0(v0)
  801180:	8fc20000 	lw	v0,0(s8)
  801184:	24420001 	addiu	v0,v0,1
  801188:	afc20000 	sw	v0,0(s8)
  80118c:	8fc20004 	lw	v0,4(s8)
  801190:	24420001 	addiu	v0,v0,1
  801194:	afc20004 	sw	v0,4(s8)
  801198:	0820046c 	j	8011b0 <memmove+0x110>
  80119c:	00000000 	nop
  8011a0:	00000000 	nop
  8011a4:	0820046c 	j	8011b0 <memmove+0x110>
  8011a8:	00000000 	nop
  8011ac:	00000000 	nop
  8011b0:	8fc20018 	lw	v0,24(s8)
  8011b4:	0002102b 	sltu	v0,zero,v0
  8011b8:	304200ff 	andi	v0,v0,0xff
  8011bc:	8fc30018 	lw	v1,24(s8)
  8011c0:	2463ffff 	addiu	v1,v1,-1
  8011c4:	afc30018 	sw	v1,24(s8)
  8011c8:	1440ffe9 	bnez	v0,801170 <memmove+0xd0>
  8011cc:	00000000 	nop
  8011d0:	8fc20010 	lw	v0,16(s8)
  8011d4:	03c0e821 	move	sp,s8
  8011d8:	8fbe000c 	lw	s8,12(sp)
  8011dc:	27bd0010 	addiu	sp,sp,16
  8011e0:	03e00008 	jr	ra
  8011e4:	00000000 	nop

008011e8 <memcpy>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
  8011e8:	27bdfff0 	addiu	sp,sp,-16
  8011ec:	afbe000c 	sw	s8,12(sp)
  8011f0:	03a0f021 	move	s8,sp
  8011f4:	afc40010 	sw	a0,16(s8)
  8011f8:	afc50014 	sw	a1,20(s8)
  8011fc:	afc60018 	sw	a2,24(s8)
  801200:	8fc20014 	lw	v0,20(s8)
  801204:	afc20004 	sw	v0,4(s8)
  801208:	8fc20010 	lw	v0,16(s8)
  80120c:	afc20000 	sw	v0,0(s8)
  801210:	08200490 	j	801240 <memcpy+0x58>
  801214:	00000000 	nop
  801218:	8fc20004 	lw	v0,4(s8)
  80121c:	90430000 	lbu	v1,0(v0)
  801220:	8fc20000 	lw	v0,0(s8)
  801224:	a0430000 	sb	v1,0(v0)
  801228:	8fc20000 	lw	v0,0(s8)
  80122c:	24420001 	addiu	v0,v0,1
  801230:	afc20000 	sw	v0,0(s8)
  801234:	8fc20004 	lw	v0,4(s8)
  801238:	24420001 	addiu	v0,v0,1
  80123c:	afc20004 	sw	v0,4(s8)
  801240:	8fc20018 	lw	v0,24(s8)
  801244:	0002102b 	sltu	v0,zero,v0
  801248:	304200ff 	andi	v0,v0,0xff
  80124c:	8fc30018 	lw	v1,24(s8)
  801250:	2463ffff 	addiu	v1,v1,-1
  801254:	afc30018 	sw	v1,24(s8)
  801258:	1440ffef 	bnez	v0,801218 <memcpy+0x30>
  80125c:	00000000 	nop
  801260:	8fc20010 	lw	v0,16(s8)
  801264:	03c0e821 	move	sp,s8
  801268:	8fbe000c 	lw	s8,12(sp)
  80126c:	27bd0010 	addiu	sp,sp,16
  801270:	03e00008 	jr	ra
  801274:	00000000 	nop

00801278 <memcmp>:
        cnt ++;
    }
    return cnt;
}

/* *
  801278:	27bdfff0 	addiu	sp,sp,-16
  80127c:	afbe000c 	sw	s8,12(sp)
  801280:	03a0f021 	move	s8,sp
  801284:	afc40010 	sw	a0,16(s8)
  801288:	afc50014 	sw	a1,20(s8)
  80128c:	afc60018 	sw	a2,24(s8)
  801290:	8fc20010 	lw	v0,16(s8)
  801294:	afc20004 	sw	v0,4(s8)
  801298:	8fc20014 	lw	v0,20(s8)
  80129c:	afc20000 	sw	v0,0(s8)
  8012a0:	082004be 	j	8012f8 <memcmp+0x80>
  8012a4:	00000000 	nop
  8012a8:	8fc20004 	lw	v0,4(s8)
  8012ac:	90430000 	lbu	v1,0(v0)
  8012b0:	8fc20000 	lw	v0,0(s8)
  8012b4:	90420000 	lbu	v0,0(v0)
  8012b8:	10620009 	beq	v1,v0,8012e0 <memcmp+0x68>
  8012bc:	00000000 	nop
  8012c0:	8fc20004 	lw	v0,4(s8)
  8012c4:	90420000 	lbu	v0,0(v0)
  8012c8:	00401821 	move	v1,v0
  8012cc:	8fc20000 	lw	v0,0(s8)
  8012d0:	90420000 	lbu	v0,0(v0)
  8012d4:	00621023 	subu	v0,v1,v0
  8012d8:	082004c7 	j	80131c <memcmp+0xa4>
  8012dc:	00000000 	nop
  8012e0:	8fc20004 	lw	v0,4(s8)
  8012e4:	24420001 	addiu	v0,v0,1
  8012e8:	afc20004 	sw	v0,4(s8)
  8012ec:	8fc20000 	lw	v0,0(s8)
  8012f0:	24420001 	addiu	v0,v0,1
  8012f4:	afc20000 	sw	v0,0(s8)
  8012f8:	8fc20018 	lw	v0,24(s8)
  8012fc:	0002102b 	sltu	v0,zero,v0
  801300:	304200ff 	andi	v0,v0,0xff
  801304:	8fc30018 	lw	v1,24(s8)
  801308:	2463ffff 	addiu	v1,v1,-1
  80130c:	afc30018 	sw	v1,24(s8)
  801310:	1440ffe5 	bnez	v0,8012a8 <memcmp+0x30>
  801314:	00000000 	nop
  801318:	00001021 	move	v0,zero
  80131c:	03c0e821 	move	sp,s8
  801320:	8fbe000c 	lw	s8,12(sp)
  801324:	27bd0010 	addiu	sp,sp,16
  801328:	03e00008 	jr	ra
  80132c:	00000000 	nop

00801330 <printnum>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
  801330:	27bdffc0 	addiu	sp,sp,-64
  801334:	afbf003c 	sw	ra,60(sp)
  801338:	afbe0038 	sw	s8,56(sp)
  80133c:	03a0f021 	move	s8,sp
  801340:	afc40040 	sw	a0,64(s8)
  801344:	afc50044 	sw	a1,68(s8)
  801348:	afc60048 	sw	a2,72(s8)
  80134c:	afc7004c 	sw	a3,76(s8)
  801350:	8fc40048 	lw	a0,72(s8)
  801354:	8fc5004c 	lw	a1,76(s8)
  801358:	afc40030 	sw	a0,48(s8)
  80135c:	afc50034 	sw	a1,52(s8)
  801360:	8fc50050 	lw	a1,80(s8)
  801364:	2404000a 	li	a0,10
  801368:	14a40040 	bne	a1,a0,80146c <printnum+0x13c>
  80136c:	00000000 	nop
  801370:	8fc40034 	lw	a0,52(s8)
  801374:	000427c0 	sll	a0,a0,0x1f
  801378:	8fc50030 	lw	a1,48(s8)
  80137c:	00055042 	srl	t2,a1,0x1
  801380:	008a5025 	or	t2,a0,t2
  801384:	8fc40034 	lw	a0,52(s8)
  801388:	00045842 	srl	t3,a0,0x1
  80138c:	01402821 	move	a1,t2
  801390:	8fc40034 	lw	a0,52(s8)
  801394:	00042780 	sll	a0,a0,0x1e
  801398:	8fc60030 	lw	a2,48(s8)
  80139c:	00064082 	srl	t0,a2,0x2
  8013a0:	00884025 	or	t0,a0,t0
  8013a4:	8fc40034 	lw	a0,52(s8)
  8013a8:	00044882 	srl	t1,a0,0x2
  8013ac:	01002021 	move	a0,t0
  8013b0:	00a42021 	addu	a0,a1,a0
  8013b4:	afc40020 	sw	a0,32(s8)
  8013b8:	8fc40020 	lw	a0,32(s8)
  8013bc:	00042102 	srl	a0,a0,0x4
  8013c0:	8fc50020 	lw	a1,32(s8)
  8013c4:	00a42021 	addu	a0,a1,a0
  8013c8:	afc40020 	sw	a0,32(s8)
  8013cc:	8fc40020 	lw	a0,32(s8)
  8013d0:	00042202 	srl	a0,a0,0x8
  8013d4:	8fc50020 	lw	a1,32(s8)
  8013d8:	00a42021 	addu	a0,a1,a0
  8013dc:	afc40020 	sw	a0,32(s8)
  8013e0:	8fc40020 	lw	a0,32(s8)
  8013e4:	00042402 	srl	a0,a0,0x10
  8013e8:	8fc50020 	lw	a1,32(s8)
  8013ec:	00a42021 	addu	a0,a1,a0
  8013f0:	afc40020 	sw	a0,32(s8)
  8013f4:	8fc40020 	lw	a0,32(s8)
  8013f8:	000420c2 	srl	a0,a0,0x3
  8013fc:	afc40020 	sw	a0,32(s8)
  801400:	8fc50030 	lw	a1,48(s8)
  801404:	8fc40020 	lw	a0,32(s8)
  801408:	00043080 	sll	a2,a0,0x2
  80140c:	8fc40020 	lw	a0,32(s8)
  801410:	00c42021 	addu	a0,a2,a0
  801414:	00042040 	sll	a0,a0,0x1
  801418:	00a42023 	subu	a0,a1,a0
  80141c:	afc40024 	sw	a0,36(s8)
  801420:	8fc40024 	lw	a0,36(s8)
  801424:	24840006 	addiu	a0,a0,6
  801428:	00042102 	srl	a0,a0,0x4
  80142c:	8fc50020 	lw	a1,32(s8)
  801430:	00a42021 	addu	a0,a1,a0
  801434:	afc40020 	sw	a0,32(s8)
  801438:	8fc50030 	lw	a1,48(s8)
  80143c:	8fc40020 	lw	a0,32(s8)
  801440:	00043080 	sll	a2,a0,0x2
  801444:	8fc40020 	lw	a0,32(s8)
  801448:	00c42021 	addu	a0,a2,a0
  80144c:	00042040 	sll	a0,a0,0x1
  801450:	00a42023 	subu	a0,a1,a0
  801454:	afc40024 	sw	a0,36(s8)
  801458:	8fc40020 	lw	a0,32(s8)
  80145c:	afc40030 	sw	a0,48(s8)
  801460:	afc00034 	sw	zero,52(s8)
  801464:	08200559 	j	801564 <printnum+0x234>
  801468:	00000000 	nop
  80146c:	8fc50050 	lw	a1,80(s8)
  801470:	24040010 	li	a0,16
  801474:	14a4000f 	bne	a1,a0,8014b4 <printnum+0x184>
  801478:	00000000 	nop
  80147c:	8fc40030 	lw	a0,48(s8)
  801480:	3084000f 	andi	a0,a0,0xf
  801484:	afc40024 	sw	a0,36(s8)
  801488:	8fc40034 	lw	a0,52(s8)
  80148c:	00042700 	sll	a0,a0,0x1c
  801490:	8fc50030 	lw	a1,48(s8)
  801494:	00052902 	srl	a1,a1,0x4
  801498:	00a42025 	or	a0,a1,a0
  80149c:	afc40030 	sw	a0,48(s8)
  8014a0:	8fc40034 	lw	a0,52(s8)
  8014a4:	00042102 	srl	a0,a0,0x4
  8014a8:	afc40034 	sw	a0,52(s8)
  8014ac:	08200559 	j	801564 <printnum+0x234>
  8014b0:	00000000 	nop
  8014b4:	8fc50050 	lw	a1,80(s8)
  8014b8:	24040008 	li	a0,8
  8014bc:	14a4000f 	bne	a1,a0,8014fc <printnum+0x1cc>
  8014c0:	00000000 	nop
  8014c4:	8fc40030 	lw	a0,48(s8)
  8014c8:	30840007 	andi	a0,a0,0x7
  8014cc:	afc40024 	sw	a0,36(s8)
  8014d0:	8fc40034 	lw	a0,52(s8)
  8014d4:	00042740 	sll	a0,a0,0x1d
  8014d8:	8fc50030 	lw	a1,48(s8)
  8014dc:	000528c2 	srl	a1,a1,0x3
  8014e0:	00a42025 	or	a0,a1,a0
  8014e4:	afc40030 	sw	a0,48(s8)
  8014e8:	8fc40034 	lw	a0,52(s8)
  8014ec:	000420c2 	srl	a0,a0,0x3
  8014f0:	afc40034 	sw	a0,52(s8)
  8014f4:	08200559 	j	801564 <printnum+0x234>
  8014f8:	00000000 	nop
  8014fc:	8fc50050 	lw	a1,80(s8)
  801500:	3c048000 	lui	a0,0x8000
  801504:	14a40011 	bne	a1,a0,80154c <printnum+0x21c>
  801508:	00000000 	nop
  80150c:	8fc50030 	lw	a1,48(s8)
  801510:	3c047fff 	lui	a0,0x7fff
  801514:	3484ffff 	ori	a0,a0,0xffff
  801518:	00a42024 	and	a0,a1,a0
  80151c:	afc40024 	sw	a0,36(s8)
  801520:	8fc40034 	lw	a0,52(s8)
  801524:	00042040 	sll	a0,a0,0x1
  801528:	8fc50030 	lw	a1,48(s8)
  80152c:	00052fc2 	srl	a1,a1,0x1f
  801530:	00a42025 	or	a0,a1,a0
  801534:	afc40030 	sw	a0,48(s8)
  801538:	8fc40034 	lw	a0,52(s8)
  80153c:	000427c2 	srl	a0,a0,0x1f
  801540:	afc40034 	sw	a0,52(s8)
  801544:	08200559 	j	801564 <printnum+0x234>
  801548:	00000000 	nop
  80154c:	24040003 	li	a0,3
  801550:	afc40024 	sw	a0,36(s8)
  801554:	24040001 	li	a0,1
  801558:	00002821 	move	a1,zero
  80155c:	afc40030 	sw	a0,48(s8)
  801560:	afc50034 	sw	a1,52(s8)
  801564:	8fc40024 	lw	a0,36(s8)
  801568:	afc40028 	sw	a0,40(s8)
  80156c:	8fc20050 	lw	v0,80(s8)
  801570:	00001821 	move	v1,zero
  801574:	8fc4004c 	lw	a0,76(s8)
  801578:	0083202b 	sltu	a0,a0,v1
  80157c:	1480001d 	bnez	a0,8015f4 <printnum+0x2c4>
  801580:	00000000 	nop
  801584:	8fc5004c 	lw	a1,76(s8)
  801588:	00602021 	move	a0,v1
  80158c:	14a40005 	bne	a1,a0,8015a4 <printnum+0x274>
  801590:	00000000 	nop
  801594:	8fc40048 	lw	a0,72(s8)
  801598:	0082102b 	sltu	v0,a0,v0
  80159c:	14400015 	bnez	v0,8015f4 <printnum+0x2c4>
  8015a0:	00000000 	nop
  8015a4:	8fc20054 	lw	v0,84(s8)
  8015a8:	2442ffff 	addiu	v0,v0,-1
  8015ac:	8fc30050 	lw	v1,80(s8)
  8015b0:	afa30010 	sw	v1,16(sp)
  8015b4:	afa20014 	sw	v0,20(sp)
  8015b8:	8fc20058 	lw	v0,88(s8)
  8015bc:	afa20018 	sw	v0,24(sp)
  8015c0:	8fc40040 	lw	a0,64(s8)
  8015c4:	8fc50044 	lw	a1,68(s8)
  8015c8:	8fc60030 	lw	a2,48(s8)
  8015cc:	8fc70034 	lw	a3,52(s8)
  8015d0:	0c2004cc 	jal	801330 <printnum>
  8015d4:	00000000 	nop
  8015d8:	08200583 	j	80160c <printnum+0x2dc>
  8015dc:	00000000 	nop
  8015e0:	8fc20040 	lw	v0,64(s8)
  8015e4:	8fc40058 	lw	a0,88(s8)
  8015e8:	8fc50044 	lw	a1,68(s8)
  8015ec:	0040f809 	jalr	v0
  8015f0:	00000000 	nop
  8015f4:	8fc20054 	lw	v0,84(s8)
  8015f8:	2442ffff 	addiu	v0,v0,-1
  8015fc:	afc20054 	sw	v0,84(s8)
  801600:	8fc20054 	lw	v0,84(s8)
  801604:	1c40fff6 	bgtz	v0,8015e0 <printnum+0x2b0>
  801608:	00000000 	nop
  80160c:	8fc30028 	lw	v1,40(s8)
  801610:	3c020080 	lui	v0,0x80
  801614:	244222f4 	addiu	v0,v0,8948
  801618:	00621021 	addu	v0,v1,v0
  80161c:	90420000 	lbu	v0,0(v0)
  801620:	00401821 	move	v1,v0
  801624:	8fc20040 	lw	v0,64(s8)
  801628:	00602021 	move	a0,v1
  80162c:	8fc50044 	lw	a1,68(s8)
  801630:	0040f809 	jalr	v0
  801634:	00000000 	nop
  801638:	03c0e821 	move	sp,s8
  80163c:	8fbf003c 	lw	ra,60(sp)
  801640:	8fbe0038 	lw	s8,56(sp)
  801644:	27bd0040 	addiu	sp,sp,64
  801648:	03e00008 	jr	ra
  80164c:	00000000 	nop

00801650 <getuint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
  801650:	27bdfff8 	addiu	sp,sp,-8
  801654:	afbe0004 	sw	s8,4(sp)
  801658:	03a0f021 	move	s8,sp
  80165c:	afc40008 	sw	a0,8(s8)
  801660:	afc5000c 	sw	a1,12(s8)
  801664:	8fc4000c 	lw	a0,12(s8)
  801668:	28840002 	slti	a0,a0,2
  80166c:	1480000e 	bnez	a0,8016a8 <getuint+0x58>
  801670:	00000000 	nop
  801674:	8fc20008 	lw	v0,8(s8)
  801678:	8c420000 	lw	v0,0(v0)
  80167c:	24420007 	addiu	v0,v0,7
  801680:	00401821 	move	v1,v0
  801684:	2402fff8 	li	v0,-8
  801688:	00621024 	and	v0,v1,v0
  80168c:	24440008 	addiu	a0,v0,8
  801690:	8fc30008 	lw	v1,8(s8)
  801694:	ac640000 	sw	a0,0(v1)
  801698:	8c430004 	lw	v1,4(v0)
  80169c:	8c420000 	lw	v0,0(v0)
  8016a0:	082005bf 	j	8016fc <getuint+0xac>
  8016a4:	00000000 	nop
  8016a8:	8fc4000c 	lw	a0,12(s8)
  8016ac:	1080000b 	beqz	a0,8016dc <getuint+0x8c>
  8016b0:	00000000 	nop
  8016b4:	8fc40008 	lw	a0,8(s8)
  8016b8:	8c840000 	lw	a0,0(a0)
  8016bc:	24860004 	addiu	a2,a0,4
  8016c0:	8fc50008 	lw	a1,8(s8)
  8016c4:	aca60000 	sw	a2,0(a1)
  8016c8:	8c840000 	lw	a0,0(a0)
  8016cc:	00801021 	move	v0,a0
  8016d0:	00001821 	move	v1,zero
  8016d4:	082005bf 	j	8016fc <getuint+0xac>
  8016d8:	00000000 	nop
  8016dc:	8fc40008 	lw	a0,8(s8)
  8016e0:	8c840000 	lw	a0,0(a0)
  8016e4:	24860004 	addiu	a2,a0,4
  8016e8:	8fc50008 	lw	a1,8(s8)
  8016ec:	aca60000 	sw	a2,0(a1)
  8016f0:	8c840000 	lw	a0,0(a0)
  8016f4:	00801021 	move	v0,a0
  8016f8:	00001821 	move	v1,zero
  8016fc:	03c0e821 	move	sp,s8
  801700:	8fbe0004 	lw	s8,4(sp)
  801704:	27bd0008 	addiu	sp,sp,8
  801708:	03e00008 	jr	ra
  80170c:	00000000 	nop

00801710 <getint>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
  801710:	27bdfff8 	addiu	sp,sp,-8
  801714:	afbe0004 	sw	s8,4(sp)
  801718:	03a0f021 	move	s8,sp
  80171c:	afc40008 	sw	a0,8(s8)
  801720:	afc5000c 	sw	a1,12(s8)
  801724:	8fc4000c 	lw	a0,12(s8)
  801728:	28840002 	slti	a0,a0,2
  80172c:	1480000e 	bnez	a0,801768 <getint+0x58>
  801730:	00000000 	nop
  801734:	8fc20008 	lw	v0,8(s8)
  801738:	8c420000 	lw	v0,0(v0)
  80173c:	24420007 	addiu	v0,v0,7
  801740:	00401821 	move	v1,v0
  801744:	2402fff8 	li	v0,-8
  801748:	00621024 	and	v0,v1,v0
  80174c:	24440008 	addiu	a0,v0,8
  801750:	8fc30008 	lw	v1,8(s8)
  801754:	ac640000 	sw	a0,0(v1)
  801758:	8c430004 	lw	v1,4(v0)
  80175c:	8c420000 	lw	v0,0(v0)
  801760:	082005f1 	j	8017c4 <getint+0xb4>
  801764:	00000000 	nop
  801768:	8fc4000c 	lw	a0,12(s8)
  80176c:	1080000c 	beqz	a0,8017a0 <getint+0x90>
  801770:	00000000 	nop
  801774:	8fc40008 	lw	a0,8(s8)
  801778:	8c840000 	lw	a0,0(a0)
  80177c:	24860004 	addiu	a2,a0,4
  801780:	8fc50008 	lw	a1,8(s8)
  801784:	aca60000 	sw	a2,0(a1)
  801788:	8c840000 	lw	a0,0(a0)
  80178c:	00801021 	move	v0,a0
  801790:	000427c3 	sra	a0,a0,0x1f
  801794:	00801821 	move	v1,a0
  801798:	082005f1 	j	8017c4 <getint+0xb4>
  80179c:	00000000 	nop
  8017a0:	8fc40008 	lw	a0,8(s8)
  8017a4:	8c840000 	lw	a0,0(a0)
  8017a8:	24860004 	addiu	a2,a0,4
  8017ac:	8fc50008 	lw	a1,8(s8)
  8017b0:	aca60000 	sw	a2,0(a1)
  8017b4:	8c840000 	lw	a0,0(a0)
  8017b8:	00801021 	move	v0,a0
  8017bc:	000427c3 	sra	a0,a0,0x1f
  8017c0:	00801821 	move	v1,a0
  8017c4:	03c0e821 	move	sp,s8
  8017c8:	8fbe0004 	lw	s8,4(sp)
  8017cc:	27bd0008 	addiu	sp,sp,8
  8017d0:	03e00008 	jr	ra
  8017d4:	00000000 	nop

008017d8 <printfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
  8017d8:	27bdffe0 	addiu	sp,sp,-32
  8017dc:	afbf001c 	sw	ra,28(sp)
  8017e0:	afbe0018 	sw	s8,24(sp)
  8017e4:	03a0f021 	move	s8,sp
  8017e8:	afc40020 	sw	a0,32(s8)
  8017ec:	afc50024 	sw	a1,36(s8)
  8017f0:	afc7002c 	sw	a3,44(s8)
  8017f4:	afc60028 	sw	a2,40(s8)
  8017f8:	27c2002c 	addiu	v0,s8,44
  8017fc:	afc20010 	sw	v0,16(s8)
  801800:	8fc20010 	lw	v0,16(s8)
  801804:	8fc40020 	lw	a0,32(s8)
  801808:	8fc50024 	lw	a1,36(s8)
  80180c:	8fc60028 	lw	a2,40(s8)
  801810:	00403821 	move	a3,v0
  801814:	0c20060d 	jal	801834 <vprintfmt>
  801818:	00000000 	nop
  80181c:	03c0e821 	move	sp,s8
  801820:	8fbf001c 	lw	ra,28(sp)
  801824:	8fbe0018 	lw	s8,24(sp)
  801828:	27bd0020 	addiu	sp,sp,32
  80182c:	03e00008 	jr	ra
  801830:	00000000 	nop

00801834 <vprintfmt>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
  801834:	27bdffb0 	addiu	sp,sp,-80
  801838:	afbf004c 	sw	ra,76(sp)
  80183c:	afbe0048 	sw	s8,72(sp)
  801840:	afb10044 	sw	s1,68(sp)
  801844:	afb00040 	sw	s0,64(sp)
  801848:	03a0f021 	move	s8,sp
  80184c:	afc40050 	sw	a0,80(s8)
  801850:	afc50054 	sw	a1,84(s8)
  801854:	afc60058 	sw	a2,88(s8)
  801858:	afc7005c 	sw	a3,92(s8)
  80185c:	08200620 	j	801880 <vprintfmt+0x4c>
  801860:	00000000 	nop
  801864:	12000184 	beqz	s0,801e78 <vprintfmt+0x644>
  801868:	00000000 	nop
  80186c:	8fc20050 	lw	v0,80(s8)
  801870:	02002021 	move	a0,s0
  801874:	8fc50054 	lw	a1,84(s8)
  801878:	0040f809 	jalr	v0
  80187c:	00000000 	nop
  801880:	8fc20058 	lw	v0,88(s8)
  801884:	90420000 	lbu	v0,0(v0)
  801888:	00408021 	move	s0,v0
  80188c:	3a020025 	xori	v0,s0,0x25
  801890:	0002102b 	sltu	v0,zero,v0
  801894:	304200ff 	andi	v0,v0,0xff
  801898:	8fc30058 	lw	v1,88(s8)
  80189c:	24630001 	addiu	v1,v1,1
  8018a0:	afc30058 	sw	v1,88(s8)
  8018a4:	1440ffef 	bnez	v0,801864 <vprintfmt+0x30>
  8018a8:	00000000 	nop
  8018ac:	24020020 	li	v0,32
  8018b0:	a3c20020 	sb	v0,32(s8)
  8018b4:	2402ffff 	li	v0,-1
  8018b8:	afc2002c 	sw	v0,44(s8)
  8018bc:	8fc2002c 	lw	v0,44(s8)
  8018c0:	afc20030 	sw	v0,48(s8)
  8018c4:	afc00024 	sw	zero,36(s8)
  8018c8:	8fc20024 	lw	v0,36(s8)
  8018cc:	afc20028 	sw	v0,40(s8)
  8018d0:	0820063a 	j	8018e8 <vprintfmt+0xb4>
  8018d4:	00000000 	nop
  8018d8:	00000000 	nop
  8018dc:	0820063a 	j	8018e8 <vprintfmt+0xb4>
  8018e0:	00000000 	nop
  8018e4:	00000000 	nop
  8018e8:	8fc20058 	lw	v0,88(s8)
  8018ec:	90420000 	lbu	v0,0(v0)
  8018f0:	00408021 	move	s0,v0
  8018f4:	02001021 	move	v0,s0
  8018f8:	8fc30058 	lw	v1,88(s8)
  8018fc:	24630001 	addiu	v1,v1,1
  801900:	afc30058 	sw	v1,88(s8)
  801904:	2442ffdd 	addiu	v0,v0,-35
  801908:	2c430056 	sltiu	v1,v0,86
  80190c:	10600144 	beqz	v1,801e20 <vprintfmt+0x5ec>
  801910:	00000000 	nop
  801914:	00021880 	sll	v1,v0,0x2
  801918:	3c020080 	lui	v0,0x80
  80191c:	24422320 	addiu	v0,v0,8992
  801920:	00621021 	addu	v0,v1,v0
  801924:	8c420000 	lw	v0,0(v0)
  801928:	00400008 	jr	v0
  80192c:	00000000 	nop
  801930:	2402002d 	li	v0,45
  801934:	a3c20020 	sb	v0,32(s8)
  801938:	0820063a 	j	8018e8 <vprintfmt+0xb4>
  80193c:	00000000 	nop
  801940:	24020030 	li	v0,48
  801944:	a3c20020 	sb	v0,32(s8)
  801948:	0820063a 	j	8018e8 <vprintfmt+0xb4>
  80194c:	00000000 	nop
  801950:	afc0002c 	sw	zero,44(s8)
  801954:	8fc2002c 	lw	v0,44(s8)
  801958:	00021040 	sll	v0,v0,0x1
  80195c:	00021880 	sll	v1,v0,0x2
  801960:	00431021 	addu	v0,v0,v1
  801964:	00501021 	addu	v0,v0,s0
  801968:	2442ffd0 	addiu	v0,v0,-48
  80196c:	afc2002c 	sw	v0,44(s8)
  801970:	8fc20058 	lw	v0,88(s8)
  801974:	90420000 	lbu	v0,0(v0)
  801978:	00408021 	move	s0,v0
  80197c:	2a020030 	slti	v0,s0,48
  801980:	1440001a 	bnez	v0,8019ec <vprintfmt+0x1b8>
  801984:	00000000 	nop
  801988:	2a02003a 	slti	v0,s0,58
  80198c:	1040001a 	beqz	v0,8019f8 <vprintfmt+0x1c4>
  801990:	00000000 	nop
  801994:	8fc20058 	lw	v0,88(s8)
  801998:	24420001 	addiu	v0,v0,1
  80199c:	afc20058 	sw	v0,88(s8)
  8019a0:	08200655 	j	801954 <vprintfmt+0x120>
  8019a4:	00000000 	nop
  8019a8:	8fc2005c 	lw	v0,92(s8)
  8019ac:	24430004 	addiu	v1,v0,4
  8019b0:	afc3005c 	sw	v1,92(s8)
  8019b4:	8c420000 	lw	v0,0(v0)
  8019b8:	afc2002c 	sw	v0,44(s8)
  8019bc:	0820067f 	j	8019fc <vprintfmt+0x1c8>
  8019c0:	00000000 	nop
  8019c4:	8fc20030 	lw	v0,48(s8)
  8019c8:	0441ffc3 	bgez	v0,8018d8 <vprintfmt+0xa4>
  8019cc:	00000000 	nop
  8019d0:	afc00030 	sw	zero,48(s8)
  8019d4:	0820063a 	j	8018e8 <vprintfmt+0xb4>
  8019d8:	00000000 	nop
  8019dc:	24020001 	li	v0,1
  8019e0:	afc20024 	sw	v0,36(s8)
  8019e4:	0820063a 	j	8018e8 <vprintfmt+0xb4>
  8019e8:	00000000 	nop
  8019ec:	00000000 	nop
  8019f0:	0820067f 	j	8019fc <vprintfmt+0x1c8>
  8019f4:	00000000 	nop
  8019f8:	00000000 	nop
  8019fc:	8fc20030 	lw	v0,48(s8)
  801a00:	0441ffb8 	bgez	v0,8018e4 <vprintfmt+0xb0>
  801a04:	00000000 	nop
  801a08:	8fc2002c 	lw	v0,44(s8)
  801a0c:	afc20030 	sw	v0,48(s8)
  801a10:	2402ffff 	li	v0,-1
  801a14:	afc2002c 	sw	v0,44(s8)
  801a18:	0820063a 	j	8018e8 <vprintfmt+0xb4>
  801a1c:	00000000 	nop
  801a20:	8fc20028 	lw	v0,40(s8)
  801a24:	24420001 	addiu	v0,v0,1
  801a28:	afc20028 	sw	v0,40(s8)
  801a2c:	0820063a 	j	8018e8 <vprintfmt+0xb4>
  801a30:	00000000 	nop
  801a34:	8fc2005c 	lw	v0,92(s8)
  801a38:	24430004 	addiu	v1,v0,4
  801a3c:	afc3005c 	sw	v1,92(s8)
  801a40:	8c430000 	lw	v1,0(v0)
  801a44:	8fc20050 	lw	v0,80(s8)
  801a48:	00602021 	move	a0,v1
  801a4c:	8fc50054 	lw	a1,84(s8)
  801a50:	0040f809 	jalr	v0
  801a54:	00000000 	nop
  801a58:	0820079b 	j	801e6c <vprintfmt+0x638>
  801a5c:	00000000 	nop
  801a60:	8fc2005c 	lw	v0,92(s8)
  801a64:	24430004 	addiu	v1,v0,4
  801a68:	afc3005c 	sw	v1,92(s8)
  801a6c:	8c5f0000 	lw	ra,0(v0)
  801a70:	07e10002 	bgez	ra,801a7c <vprintfmt+0x248>
  801a74:	00000000 	nop
  801a78:	001ff823 	negu	ra,ra
  801a7c:	2be20019 	slti	v0,ra,25
  801a80:	10400009 	beqz	v0,801aa8 <vprintfmt+0x274>
  801a84:	00000000 	nop
  801a88:	03e01821 	move	v1,ra
  801a8c:	3c020080 	lui	v0,0x80
  801a90:	00031880 	sll	v1,v1,0x2
  801a94:	24422290 	addiu	v0,v0,8848
  801a98:	00621021 	addu	v0,v1,v0
  801a9c:	8c510000 	lw	s1,0(v0)
  801aa0:	1620000b 	bnez	s1,801ad0 <vprintfmt+0x29c>
  801aa4:	00000000 	nop
  801aa8:	8fc40050 	lw	a0,80(s8)
  801aac:	8fc50054 	lw	a1,84(s8)
  801ab0:	3c020080 	lui	v0,0x80
  801ab4:	24462308 	addiu	a2,v0,8968
  801ab8:	03e03821 	move	a3,ra
  801abc:	0c2005f6 	jal	8017d8 <printfmt>
  801ac0:	00000000 	nop
  801ac4:	00000000 	nop
  801ac8:	0820079b 	j	801e6c <vprintfmt+0x638>
  801acc:	00000000 	nop
  801ad0:	8fc40050 	lw	a0,80(s8)
  801ad4:	8fc50054 	lw	a1,84(s8)
  801ad8:	3c020080 	lui	v0,0x80
  801adc:	24462314 	addiu	a2,v0,8980
  801ae0:	02203821 	move	a3,s1
  801ae4:	0c2005f6 	jal	8017d8 <printfmt>
  801ae8:	00000000 	nop
  801aec:	0820079b 	j	801e6c <vprintfmt+0x638>
  801af0:	00000000 	nop
  801af4:	8fc2005c 	lw	v0,92(s8)
  801af8:	24430004 	addiu	v1,v0,4
  801afc:	afc3005c 	sw	v1,92(s8)
  801b00:	8c510000 	lw	s1,0(v0)
  801b04:	16200003 	bnez	s1,801b14 <vprintfmt+0x2e0>
  801b08:	00000000 	nop
  801b0c:	3c020080 	lui	v0,0x80
  801b10:	24512318 	addiu	s1,v0,8984
  801b14:	8fc20030 	lw	v0,48(s8)
  801b18:	18400037 	blez	v0,801bf8 <vprintfmt+0x3c4>
  801b1c:	00000000 	nop
  801b20:	93c30020 	lbu	v1,32(s8)
  801b24:	2402002d 	li	v0,45
  801b28:	10620036 	beq	v1,v0,801c04 <vprintfmt+0x3d0>
  801b2c:	00000000 	nop
  801b30:	8fd00030 	lw	s0,48(s8)
  801b34:	8fc2002c 	lw	v0,44(s8)
  801b38:	02202021 	move	a0,s1
  801b3c:	00402821 	move	a1,v0
  801b40:	0c200274 	jal	8009d0 <strnlen>
  801b44:	00000000 	nop
  801b48:	02021023 	subu	v0,s0,v0
  801b4c:	afc20030 	sw	v0,48(s8)
  801b50:	082006df 	j	801b7c <vprintfmt+0x348>
  801b54:	00000000 	nop
  801b58:	93c30020 	lbu	v1,32(s8)
  801b5c:	8fc20050 	lw	v0,80(s8)
  801b60:	00602021 	move	a0,v1
  801b64:	8fc50054 	lw	a1,84(s8)
  801b68:	0040f809 	jalr	v0
  801b6c:	00000000 	nop
  801b70:	8fc20030 	lw	v0,48(s8)
  801b74:	2442ffff 	addiu	v0,v0,-1
  801b78:	afc20030 	sw	v0,48(s8)
  801b7c:	8fc20030 	lw	v0,48(s8)
  801b80:	1c40fff5 	bgtz	v0,801b58 <vprintfmt+0x324>
  801b84:	00000000 	nop
  801b88:	08200702 	j	801c08 <vprintfmt+0x3d4>
  801b8c:	00000000 	nop
  801b90:	8fc20024 	lw	v0,36(s8)
  801b94:	1040000e 	beqz	v0,801bd0 <vprintfmt+0x39c>
  801b98:	00000000 	nop
  801b9c:	2a020020 	slti	v0,s0,32
  801ba0:	14400004 	bnez	v0,801bb4 <vprintfmt+0x380>
  801ba4:	00000000 	nop
  801ba8:	2a02007f 	slti	v0,s0,127
  801bac:	14400008 	bnez	v0,801bd0 <vprintfmt+0x39c>
  801bb0:	00000000 	nop
  801bb4:	8fc20050 	lw	v0,80(s8)
  801bb8:	2404003f 	li	a0,63
  801bbc:	8fc50054 	lw	a1,84(s8)
  801bc0:	0040f809 	jalr	v0
  801bc4:	00000000 	nop
  801bc8:	082006f9 	j	801be4 <vprintfmt+0x3b0>
  801bcc:	00000000 	nop
  801bd0:	8fc20050 	lw	v0,80(s8)
  801bd4:	02002021 	move	a0,s0
  801bd8:	8fc50054 	lw	a1,84(s8)
  801bdc:	0040f809 	jalr	v0
  801be0:	00000000 	nop
  801be4:	8fc20030 	lw	v0,48(s8)
  801be8:	2442ffff 	addiu	v0,v0,-1
  801bec:	afc20030 	sw	v0,48(s8)
  801bf0:	08200702 	j	801c08 <vprintfmt+0x3d4>
  801bf4:	00000000 	nop
  801bf8:	00000000 	nop
  801bfc:	08200702 	j	801c08 <vprintfmt+0x3d4>
  801c00:	00000000 	nop
  801c04:	00000000 	nop
  801c08:	92220000 	lbu	v0,0(s1)
  801c0c:	00408021 	move	s0,v0
  801c10:	0010102b 	sltu	v0,zero,s0
  801c14:	304200ff 	andi	v0,v0,0xff
  801c18:	26310001 	addiu	s1,s1,1
  801c1c:	10400014 	beqz	v0,801c70 <vprintfmt+0x43c>
  801c20:	00000000 	nop
  801c24:	8fc2002c 	lw	v0,44(s8)
  801c28:	0440ffd9 	bltz	v0,801b90 <vprintfmt+0x35c>
  801c2c:	00000000 	nop
  801c30:	8fc2002c 	lw	v0,44(s8)
  801c34:	2442ffff 	addiu	v0,v0,-1
  801c38:	afc2002c 	sw	v0,44(s8)
  801c3c:	8fc2002c 	lw	v0,44(s8)
  801c40:	0441ffd3 	bgez	v0,801b90 <vprintfmt+0x35c>
  801c44:	00000000 	nop
  801c48:	0820071c 	j	801c70 <vprintfmt+0x43c>
  801c4c:	00000000 	nop
  801c50:	8fc20050 	lw	v0,80(s8)
  801c54:	24040020 	li	a0,32
  801c58:	8fc50054 	lw	a1,84(s8)
  801c5c:	0040f809 	jalr	v0
  801c60:	00000000 	nop
  801c64:	8fc20030 	lw	v0,48(s8)
  801c68:	2442ffff 	addiu	v0,v0,-1
  801c6c:	afc20030 	sw	v0,48(s8)
  801c70:	8fc20030 	lw	v0,48(s8)
  801c74:	1c40fff6 	bgtz	v0,801c50 <vprintfmt+0x41c>
  801c78:	00000000 	nop
  801c7c:	0820079b 	j	801e6c <vprintfmt+0x638>
  801c80:	00000000 	nop
  801c84:	27c2005c 	addiu	v0,s8,92
  801c88:	00402021 	move	a0,v0
  801c8c:	8fc50028 	lw	a1,40(s8)
  801c90:	0c2005c4 	jal	801710 <getint>
  801c94:	00000000 	nop
  801c98:	afc20038 	sw	v0,56(s8)
  801c9c:	afc3003c 	sw	v1,60(s8)
  801ca0:	8fc20038 	lw	v0,56(s8)
  801ca4:	8fc3003c 	lw	v1,60(s8)
  801ca8:	04610011 	bgez	v1,801cf0 <vprintfmt+0x4bc>
  801cac:	00000000 	nop
  801cb0:	8fc20050 	lw	v0,80(s8)
  801cb4:	2404002d 	li	a0,45
  801cb8:	8fc50054 	lw	a1,84(s8)
  801cbc:	0040f809 	jalr	v0
  801cc0:	00000000 	nop
  801cc4:	8fc60038 	lw	a2,56(s8)
  801cc8:	8fc7003c 	lw	a3,60(s8)
  801ccc:	00002021 	move	a0,zero
  801cd0:	00002821 	move	a1,zero
  801cd4:	00861023 	subu	v0,a0,a2
  801cd8:	0082402b 	sltu	t0,a0,v0
  801cdc:	00a71823 	subu	v1,a1,a3
  801ce0:	00682023 	subu	a0,v1,t0
  801ce4:	00801821 	move	v1,a0
  801ce8:	afc20038 	sw	v0,56(s8)
  801cec:	afc3003c 	sw	v1,60(s8)
  801cf0:	2402000a 	li	v0,10
  801cf4:	afc20034 	sw	v0,52(s8)
  801cf8:	08200773 	j	801dcc <vprintfmt+0x598>
  801cfc:	00000000 	nop
  801d00:	27c2005c 	addiu	v0,s8,92
  801d04:	00402021 	move	a0,v0
  801d08:	8fc50028 	lw	a1,40(s8)
  801d0c:	0c200594 	jal	801650 <getuint>
  801d10:	00000000 	nop
  801d14:	afc20038 	sw	v0,56(s8)
  801d18:	afc3003c 	sw	v1,60(s8)
  801d1c:	2402000a 	li	v0,10
  801d20:	afc20034 	sw	v0,52(s8)
  801d24:	08200773 	j	801dcc <vprintfmt+0x598>
  801d28:	00000000 	nop
  801d2c:	27c2005c 	addiu	v0,s8,92
  801d30:	00402021 	move	a0,v0
  801d34:	8fc50028 	lw	a1,40(s8)
  801d38:	0c200594 	jal	801650 <getuint>
  801d3c:	00000000 	nop
  801d40:	afc20038 	sw	v0,56(s8)
  801d44:	afc3003c 	sw	v1,60(s8)
  801d48:	24020008 	li	v0,8
  801d4c:	afc20034 	sw	v0,52(s8)
  801d50:	08200773 	j	801dcc <vprintfmt+0x598>
  801d54:	00000000 	nop
  801d58:	8fc20050 	lw	v0,80(s8)
  801d5c:	24040030 	li	a0,48
  801d60:	8fc50054 	lw	a1,84(s8)
  801d64:	0040f809 	jalr	v0
  801d68:	00000000 	nop
  801d6c:	8fc20050 	lw	v0,80(s8)
  801d70:	24040078 	li	a0,120
  801d74:	8fc50054 	lw	a1,84(s8)
  801d78:	0040f809 	jalr	v0
  801d7c:	00000000 	nop
  801d80:	8fc2005c 	lw	v0,92(s8)
  801d84:	24430004 	addiu	v1,v0,4
  801d88:	afc3005c 	sw	v1,92(s8)
  801d8c:	8c420000 	lw	v0,0(v0)
  801d90:	afc20038 	sw	v0,56(s8)
  801d94:	afc0003c 	sw	zero,60(s8)
  801d98:	24020010 	li	v0,16
  801d9c:	afc20034 	sw	v0,52(s8)
  801da0:	08200773 	j	801dcc <vprintfmt+0x598>
  801da4:	00000000 	nop
  801da8:	27c2005c 	addiu	v0,s8,92
  801dac:	00402021 	move	a0,v0
  801db0:	8fc50028 	lw	a1,40(s8)
  801db4:	0c200594 	jal	801650 <getuint>
  801db8:	00000000 	nop
  801dbc:	afc20038 	sw	v0,56(s8)
  801dc0:	afc3003c 	sw	v1,60(s8)
  801dc4:	24020010 	li	v0,16
  801dc8:	afc20034 	sw	v0,52(s8)
  801dcc:	8fc30034 	lw	v1,52(s8)
  801dd0:	93c20020 	lbu	v0,32(s8)
  801dd4:	afa30010 	sw	v1,16(sp)
  801dd8:	8fc30030 	lw	v1,48(s8)
  801ddc:	afa30014 	sw	v1,20(sp)
  801de0:	afa20018 	sw	v0,24(sp)
  801de4:	8fc40050 	lw	a0,80(s8)
  801de8:	8fc50054 	lw	a1,84(s8)
  801dec:	8fc60038 	lw	a2,56(s8)
  801df0:	8fc7003c 	lw	a3,60(s8)
  801df4:	0c2004cc 	jal	801330 <printnum>
  801df8:	00000000 	nop
  801dfc:	0820079b 	j	801e6c <vprintfmt+0x638>
  801e00:	00000000 	nop
  801e04:	8fc20050 	lw	v0,80(s8)
  801e08:	02002021 	move	a0,s0
  801e0c:	8fc50054 	lw	a1,84(s8)
  801e10:	0040f809 	jalr	v0
  801e14:	00000000 	nop
  801e18:	0820079b 	j	801e6c <vprintfmt+0x638>
  801e1c:	00000000 	nop
  801e20:	8fc20050 	lw	v0,80(s8)
  801e24:	24040025 	li	a0,37
  801e28:	8fc50054 	lw	a1,84(s8)
  801e2c:	0040f809 	jalr	v0
  801e30:	00000000 	nop
  801e34:	8fc20058 	lw	v0,88(s8)
  801e38:	2442ffff 	addiu	v0,v0,-1
  801e3c:	afc20058 	sw	v0,88(s8)
  801e40:	08200795 	j	801e54 <vprintfmt+0x620>
  801e44:	00000000 	nop
  801e48:	8fc20058 	lw	v0,88(s8)
  801e4c:	2442ffff 	addiu	v0,v0,-1
  801e50:	afc20058 	sw	v0,88(s8)
  801e54:	8fc20058 	lw	v0,88(s8)
  801e58:	2442ffff 	addiu	v0,v0,-1
  801e5c:	90430000 	lbu	v1,0(v0)
  801e60:	24020025 	li	v0,37
  801e64:	1462fff8 	bne	v1,v0,801e48 <vprintfmt+0x614>
  801e68:	00000000 	nop
  801e6c:	00000000 	nop
  801e70:	08200620 	j	801880 <vprintfmt+0x4c>
  801e74:	00000000 	nop
  801e78:	03c0e821 	move	sp,s8
  801e7c:	8fbf004c 	lw	ra,76(sp)
  801e80:	8fbe0048 	lw	s8,72(sp)
  801e84:	8fb10044 	lw	s1,68(sp)
  801e88:	8fb00040 	lw	s0,64(sp)
  801e8c:	27bd0050 	addiu	sp,sp,80
  801e90:	03e00008 	jr	ra
  801e94:	00000000 	nop

00801e98 <sprintputch>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
  801e98:	27bdfff8 	addiu	sp,sp,-8
  801e9c:	afbe0004 	sw	s8,4(sp)
  801ea0:	03a0f021 	move	s8,sp
  801ea4:	afc40008 	sw	a0,8(s8)
  801ea8:	afc5000c 	sw	a1,12(s8)
  801eac:	8fc2000c 	lw	v0,12(s8)
  801eb0:	8c420008 	lw	v0,8(v0)
  801eb4:	24430001 	addiu	v1,v0,1
  801eb8:	8fc2000c 	lw	v0,12(s8)
  801ebc:	ac430008 	sw	v1,8(v0)
  801ec0:	8fc2000c 	lw	v0,12(s8)
  801ec4:	8c430000 	lw	v1,0(v0)
  801ec8:	8fc2000c 	lw	v0,12(s8)
  801ecc:	8c420004 	lw	v0,4(v0)
  801ed0:	0062102b 	sltu	v0,v1,v0
  801ed4:	10400009 	beqz	v0,801efc <sprintputch+0x64>
  801ed8:	00000000 	nop
  801edc:	8fc2000c 	lw	v0,12(s8)
  801ee0:	8c420000 	lw	v0,0(v0)
  801ee4:	8fc30008 	lw	v1,8(s8)
  801ee8:	306300ff 	andi	v1,v1,0xff
  801eec:	a0430000 	sb	v1,0(v0)
  801ef0:	24430001 	addiu	v1,v0,1
  801ef4:	8fc2000c 	lw	v0,12(s8)
  801ef8:	ac430000 	sw	v1,0(v0)
  801efc:	03c0e821 	move	sp,s8
  801f00:	8fbe0004 	lw	s8,4(sp)
  801f04:	27bd0008 	addiu	sp,sp,8
  801f08:	03e00008 	jr	ra
  801f0c:	00000000 	nop

00801f10 <snprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
  801f10:	27bdffe0 	addiu	sp,sp,-32
  801f14:	afbf001c 	sw	ra,28(sp)
  801f18:	afbe0018 	sw	s8,24(sp)
  801f1c:	03a0f021 	move	s8,sp
  801f20:	afc40020 	sw	a0,32(s8)
  801f24:	afc50024 	sw	a1,36(s8)
  801f28:	afc7002c 	sw	a3,44(s8)
  801f2c:	afc60028 	sw	a2,40(s8)
  801f30:	27c2002c 	addiu	v0,s8,44
  801f34:	afc20014 	sw	v0,20(s8)
  801f38:	8fc20014 	lw	v0,20(s8)
  801f3c:	8fc40020 	lw	a0,32(s8)
  801f40:	8fc50024 	lw	a1,36(s8)
  801f44:	8fc60028 	lw	a2,40(s8)
  801f48:	00403821 	move	a3,v0
  801f4c:	0c2007dd 	jal	801f74 <vsnprintf>
  801f50:	00000000 	nop
  801f54:	afc20010 	sw	v0,16(s8)
  801f58:	8fc20010 	lw	v0,16(s8)
  801f5c:	03c0e821 	move	sp,s8
  801f60:	8fbf001c 	lw	ra,28(sp)
  801f64:	8fbe0018 	lw	s8,24(sp)
  801f68:	27bd0020 	addiu	sp,sp,32
  801f6c:	03e00008 	jr	ra
  801f70:	00000000 	nop

00801f74 <vsnprintf>:
 * formats only.
 *
 * The special format %e takes an integer error code
 * and prints a string describing the error.
 * The integer may be positive or negative,
 * so that -E_NO_MEM and E_NO_MEM are equivalent.
  801f74:	27bdffd8 	addiu	sp,sp,-40
  801f78:	afbf0024 	sw	ra,36(sp)
  801f7c:	afbe0020 	sw	s8,32(sp)
  801f80:	03a0f021 	move	s8,sp
  801f84:	afc40028 	sw	a0,40(s8)
  801f88:	afc5002c 	sw	a1,44(s8)
  801f8c:	afc60030 	sw	a2,48(s8)
  801f90:	afc70034 	sw	a3,52(s8)
  801f94:	8fc2002c 	lw	v0,44(s8)
  801f98:	2442ffff 	addiu	v0,v0,-1
  801f9c:	8fc30028 	lw	v1,40(s8)
  801fa0:	00621021 	addu	v0,v1,v0
  801fa4:	8fc30028 	lw	v1,40(s8)
  801fa8:	afc30010 	sw	v1,16(s8)
  801fac:	afc20014 	sw	v0,20(s8)
  801fb0:	afc00018 	sw	zero,24(s8)
  801fb4:	8fc20028 	lw	v0,40(s8)
  801fb8:	10400006 	beqz	v0,801fd4 <vsnprintf+0x60>
  801fbc:	00000000 	nop
  801fc0:	8fc30010 	lw	v1,16(s8)
  801fc4:	8fc20014 	lw	v0,20(s8)
  801fc8:	0043102b 	sltu	v0,v0,v1
  801fcc:	10400004 	beqz	v0,801fe0 <vsnprintf+0x6c>
  801fd0:	00000000 	nop
  801fd4:	2402fffd 	li	v0,-3
  801fd8:	08200804 	j	802010 <vsnprintf+0x9c>
  801fdc:	00000000 	nop
  801fe0:	3c020080 	lui	v0,0x80
  801fe4:	24421e98 	addiu	v0,v0,7832
  801fe8:	00402021 	move	a0,v0
  801fec:	27c20010 	addiu	v0,s8,16
  801ff0:	00402821 	move	a1,v0
  801ff4:	8fc60030 	lw	a2,48(s8)
  801ff8:	8fc70034 	lw	a3,52(s8)
  801ffc:	0c20060d 	jal	801834 <vprintfmt>
  802000:	00000000 	nop
  802004:	8fc20010 	lw	v0,16(s8)
  802008:	a0400000 	sb	zero,0(v0)
  80200c:	8fc20018 	lw	v0,24(s8)
  802010:	03c0e821 	move	sp,s8
  802014:	8fbf0024 	lw	ra,36(sp)
  802018:	8fbe0020 	lw	s8,32(sp)
  80201c:	27bd0028 	addiu	sp,sp,40
  802020:	03e00008 	jr	ra
  802024:	00000000 	nop

00802028 <hash32>:
 * hash32 - generate a hash value in the range [0, 2^@bits - 1]
 * @val:    the input value
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
  802028:	27bdfff0 	addiu	sp,sp,-16
  80202c:	afbe000c 	sw	s8,12(sp)
  802030:	03a0f021 	move	s8,sp
  802034:	afc40010 	sw	a0,16(s8)
  802038:	afc50014 	sw	a1,20(s8)
  80203c:	8fc30010 	lw	v1,16(s8)
  802040:	3c029e37 	lui	v0,0x9e37
  802044:	34420001 	ori	v0,v0,0x1
  802048:	70621002 	mul	v0,v1,v0
  80204c:	afc20000 	sw	v0,0(s8)
  802050:	24030020 	li	v1,32
  802054:	8fc20014 	lw	v0,20(s8)
  802058:	00621023 	subu	v0,v1,v0
  80205c:	8fc30000 	lw	v1,0(s8)
  802060:	00431006 	srlv	v0,v1,v0
  802064:	03c0e821 	move	sp,s8
  802068:	8fbe000c 	lw	s8,12(sp)
  80206c:	27bd0010 	addiu	sp,sp,16
  802070:	03e00008 	jr	ra
  802074:	00000000 	nop

00802078 <rand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
  802078:	27bdfff8 	addiu	sp,sp,-8
  80207c:	afbe0004 	sw	s8,4(sp)
  802080:	03a0f021 	move	s8,sp
  802084:	3c040080 	lui	a0,0x80
  802088:	8c853004 	lw	a1,12292(a0)
  80208c:	8c843000 	lw	a0,12288(a0)
  802090:	00802821 	move	a1,a0
  802094:	3c0441c6 	lui	a0,0x41c6
  802098:	34844e6d 	ori	a0,a0,0x4e6d
  80209c:	70a42002 	mul	a0,a1,a0
  8020a0:	24843039 	addiu	a0,a0,12345
  8020a4:	00801021 	move	v0,a0
  8020a8:	00001821 	move	v1,zero
  8020ac:	3c040080 	lui	a0,0x80
  8020b0:	ac823000 	sw	v0,12288(a0)
  8020b4:	ac833004 	sw	v1,12292(a0)
  8020b8:	3c020080 	lui	v0,0x80
  8020bc:	8c433004 	lw	v1,12292(v0)
  8020c0:	8c423000 	lw	v0,12288(v0)
  8020c4:	00401821 	move	v1,v0
  8020c8:	3c027fff 	lui	v0,0x7fff
  8020cc:	3442ffff 	ori	v0,v0,0xffff
  8020d0:	00621024 	and	v0,v1,v0
  8020d4:	03c0e821 	move	sp,s8
  8020d8:	8fbe0004 	lw	s8,4(sp)
  8020dc:	27bd0008 	addiu	sp,sp,8
  8020e0:	03e00008 	jr	ra
  8020e4:	00000000 	nop

008020e8 <srand>:
#include <mips.h>
#include <stdlib.h>

static unsigned long long next = 1;

  8020e8:	27bdfff8 	addiu	sp,sp,-8
  8020ec:	afbe0004 	sw	s8,4(sp)
  8020f0:	03a0f021 	move	s8,sp
  8020f4:	afc40008 	sw	a0,8(s8)
  8020f8:	8fc20008 	lw	v0,8(s8)
  8020fc:	00001821 	move	v1,zero
  802100:	3c040080 	lui	a0,0x80
  802104:	ac823000 	sw	v0,12288(a0)
  802108:	ac833004 	sw	v1,12292(a0)
  80210c:	03c0e821 	move	sp,s8
  802110:	8fbe0004 	lw	s8,4(sp)
  802114:	27bd0008 	addiu	sp,sp,8
  802118:	03e00008 	jr	ra
  80211c:	00000000 	nop

00802120 <main>:
  802120:	27bdffe8 	addiu	sp,sp,-24
  802124:	afbf0014 	sw	ra,20(sp)
  802128:	afbe0010 	sw	s8,16(sp)
  80212c:	03a0f021 	move	s8,sp
  802130:	0c200154 	jal	800550 <getpid>
  802134:	00000000 	nop
  802138:	3c030080 	lui	v1,0x80
  80213c:	24642478 	addiu	a0,v1,9336
  802140:	00402821 	move	a1,v0
  802144:	0c2001ba 	jal	8006e8 <cprintf>
  802148:	00000000 	nop
  80214c:	0c200160 	jal	800580 <print_pgdir>
  802150:	00000000 	nop
  802154:	3c020080 	lui	v0,0x80
  802158:	24442490 	addiu	a0,v0,9360
  80215c:	0c2001ba 	jal	8006e8 <cprintf>
  802160:	00000000 	nop
  802164:	00001021 	move	v0,zero
  802168:	03c0e821 	move	sp,s8
  80216c:	8fbf0014 	lw	ra,20(sp)
  802170:	8fbe0010 	lw	s8,16(sp)
  802174:	27bd0018 	addiu	sp,sp,24
  802178:	03e00008 	jr	ra
  80217c:	00000000 	nop
