        BITS 16                         ; tell nasm to produce code running
                                        ; in 16bit mode

        org 0x7C00                      ; this is where our program begins,
                                        ; the BIOS puts it there and nasm
                                        ; needs to know

        jmp short start                 ; this is needed to correctly set
                                        ; the CS and (E)IP register

start:
        xor ax, ax                      ; clear accumulator
        cld                             ; clear the direction flag
        mov si, text_string             ; put the address of text_string in
                                        ; the source index register

        call printy                     ; call the print function

        mov eax, cr0
        inc ax
        mov cr0, eax

        jmp $                           ; stay in endless loop after return

        text_string db 'Meow ^.^', 0    ; define the string that we'll print

printy:
        mov ah, 0x0E                    ; 0x0E is the interrupt to print a
                                        ; single char, interrupt 0x10 will
                                        ; look for it in AH

.repeat:
        lodsb                           ; load a byte from the string into AL
        cmp al, 0                       ; check if it's 0
        je .done                        ; if so, we're done
        int 0x10                        ; call the video services interrupt
        jmp .repeat                     ; ...and print the next character

.done:
        ret                             ; return from printy

        times 510-($-$$) db 0           ; fill rest of sector up with zeros
        dw 0xAA55                       ; write the magic number at the end,
                                        ; that markes this stuff as bootable
