; PROCEDURE: write.asm
;
; DESCRIPTION:
;	writes the string starting at memory location rax to the screen (STD_OUTPUT_HANDLE)
;	The stack is adjusted as like it was before the push of the pointer to the string
;
; USE:
;			push	lpString	; push pointer to string on stack
;			call	write		; call procedure
;			; no pop instruction needed

option casemap:none

extern GetStdHandle : proc
extern WriteFile : proc
extern lstrlen : proc

STD_OUTPUT_HANDLE	equ	-11

.data
	crlf	db	10, 13, 0

.code
align 16

write proc lpString:qword
	local	bytesWritten : qword
	mov		bytesWritten, 0				; don't assume this local variable equals zero
	push	rcx
	push	rdx
	push	r8
	push	r9
	mov		rcx, lpString
	mov		rdx, rcx					; lpString in rdx
	call	lstrlen						; get length of string
	mov		r8, rax						; save length
	mov		rcx, STD_OUTPUT_HANDLE		; nStdHandle
	call	GetStdHandle				; handle in rax
	mov		rcx, rax
	lea		r9, bytesWritten			; pointer to bytes written in r9
	push	0							; lpOverlapped
	sub		rsp, 20h
	call	WriteFile					; write message
	add		rsp, 20h
	pop		r9
	pop		r8
	pop		rdx
	pop		rcx
	mov		rax, bytesWritten			; load the bytesWritten in rax, after this point it can be lost
	ret
write endp

end
