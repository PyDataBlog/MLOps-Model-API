PUSH    <
POP     <
SP      <
TRUE    <
FALSE   <
AND     <
OR      <
NOT     <
GET_VECT    <
SET_VECT    <
GET_OFFSET  <
SET_OFFSET  <
PUSHDOWN_SUM    <
PUSHDOWN_DIF    <
PUSHDOWN_MUL    <
PUSHDOWN_DIV    <
GET_LENGTH      <
IGUAL           <
DIFERENTE       <
MAIOR           <
MAIOR_OU_IGUAL  <
MENOR           <
MENOR_OU_IGUAL  <
BASE      <
K_0000    <
K_0001    <
K_0002    <
K_FFFF    <
WORD_TAM  <
DIM_1     <
DIM_2     <
INIT_HEAP      <
NEW_ARRAY      <
NEW_MATRIX     <
&     /0000
SC    INIT_HEAP
LD    SP
+     WORD_TAM
MM    FP
SC    main
FIM   HM FIM
FP    $ =1
; declaracao de CONSTANTES
K_000A	K /000A
K_0006	K /0006
K_0005	K /0005
K_0010	K /0010
K_0004	K /0004
; declaracao de FUNCOES
main	$ =1
LD K_000A
MM DIM_1
SC NEW_ARRAY
SC PUSH  ; var v
LD K_000A
MM DIM_1
SC NEW_ARRAY
SC PUSH  ; var y
LD K_0000
SC PUSH  ; var i
LD K_0000
SC PUSH
LD FP
MM BASE
LD K_0006
SC PUSH
SC SET_VECT
main_WHILE_1 + K_0000
LD FP
MM BASE
LD K_0006
SC PUSH
SC GET_VECT
SC PUSH
LD FP
MM BASE
LD K_0002
SC PUSH
SC GET_VECT
SC PUSH
LD K_0000
SC PUSH
SC GET_LENGTH
SC MENOR
SC POP
JZ main_END_WHILE_1
LD FP
MM BASE
LD K_0006
SC PUSH
SC GET_VECT
SC PUSH
LD FP
MM BASE
LD K_0006
SC PUSH
SC GET_VECT
SC PUSH
LD K_0005
SC PUSH
LD K_0010
SC PUSH
SC PUSHDOWN_MUL
SC PUSHDOWN_SUM
LD FP
MM BASE
LD K_0002
SC PUSH
SC GET_VECT
SC PUSH
LD WORD_TAM
SC PUSH
SC PUSHDOWN_SUM
SC SET_OFFSET
LD FP
MM BASE
LD K_0006
SC PUSH
SC GET_VECT
SC PUSH
LD K_0002
SC PUSH
LD FP
MM BASE
LD K_0006
SC PUSH
SC GET_VECT
SC PUSH
SC PUSHDOWN_MUL
LD K_0001
SC PUSH
SC PUSHDOWN_SUM
LD FP
MM BASE
LD K_0004
SC PUSH
SC GET_VECT
SC PUSH
LD WORD_TAM
SC PUSH
SC PUSHDOWN_SUM
SC SET_OFFSET
LD FP
MM BASE
LD K_0006
SC PUSH
SC GET_VECT
SC PUSH
LD K_0001
SC PUSH
SC PUSHDOWN_SUM
LD FP
MM BASE
LD K_0006
SC PUSH
SC SET_VECT
JP main_WHILE_1
main_END_WHILE_1 + K_0000
LD FP
-  WORD_TAM
MM SP
RET_main	RS	main
# FIM
