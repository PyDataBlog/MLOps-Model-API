section .data
voijuma:
	db	"Tuplattava nro: "	; Viesti.
.len:	equ	$-voijuma		; Maaritetaan .len-labelin arvoksi voijuman pituus.
newline:
	db	0Ah			; Newline.
.len	equ	$-newline		; Newlinen pituus.


section .bss
firstnum:
	resb	1			; Varataan tilaa kayttajasyotteelle.
result:
	resb	2			; Varataan tilaa tulokselle.

global _start

section .text
_start:
	; Naytetaan ohjeviesti.
	mov	rax, 1
	mov	rdi, 1
	mov	rsi, voijuma		; Viestin osoite.
	mov	rdx, voijuma.len	; Viestin pituus.
	syscall

	; Hypataan numeron lukukoodiin.
	mov	rbx, firstnum
	call	_getnum

_getnum:
	; Luetaan numero.
	mov	rax, 0			; Read-operaatio.
	mov	rdx, 1			; Merkkien maara.
	mov	rsi, rbx		; Tallennetaan rbx-rekisterin sisaltamaan muistiosoitteeseen.
	syscall

	; Validoidaan syote ja lopetetaan mikali virheellinen.
	cmp byte[rsi], 48		; Jos annettu numero on pienempi kuin 48 (ascii 0),
	jl	_error			; hyppaa virhekoodiin.
	cmp byte[rsi], 57		; Jos annettu numero on suurempi kuin 57 (ascii 9),
	jg	_error			; hyppaa virhekoodiin.

	; Oli numero joten hypataan laskukoodiin.
	call	_calculate

_calculate:
	; Suoritetaan numeron tuplaava laskuoperaatio.
	mov	al, [firstnum]		; Siirretaan numero al-rekisteriin.
	sub	al, '0'			; Muutetaan desimaaliksi poistamalla ascii-0:n verran numeroita (esim. 5: '5'-'0' = 53-48 = 5).
	add	al, al			; Summataan itsensa kanssa, tulos menee ax-rekisteriin.

	; Koska numero voi olla yli kymmenen, kaytetaan kahden rekisterin magiaa desimaali->ascii-muunnoksessa.
	mov	bl, 0			; Ensimmainen numero.
	cmp	ax, 9			; Vertaillaan tulosta ja yhdeksikkoa.
	jg	_addone			; Ruma hack joka hoitaa homman jos tulos on yli 9.
	jle	_finishcalc		; Jos alle kymmenen niin jatketaan tuloksen kasittelya.

_addone:
	add	bl, 1			; Lisataan ykkonen tuloksen ekaan numeroon.
	sub	ax, 10			; Vahennetaan 10 tuloksesta.
	jle	_finishcalc		; Jatketaan tuloksen kasittelya.

_finishcalc:
	add	bl, '0'			; Muutetaan tuloksen eka numero ascii-muotoon.
	add	ax, '0'			; Muutetaan tuloksen toinen numero ascii-muotoon.
	mov	[result], bl		; Siirretaan tuloksen eka ascii-numero resultiin.
	mov	[result+1], ax		; Siirretaan tuloksen toka ascii-numero resultiin.

	; Hypataan tuloksen tulostukseen.
	call	_showresult

_showresult:
	; Naytetaan tulos.
	mov	rax, 1
	mov	rdi, 1
	mov	rsi, result		; Viestin osoite.
	mov	rdx, 2			; Viestin pituus.
	syscall

	; Tulostetaan tyhja rivi.
	mov	rax, 1
	mov	rdi, 1
	mov	rsi, newline		; Viestin osoite.
	mov	rdx, newline.len	; Viestin pituus.
	syscall

	; Hypataan exit coden palautukseen.
	call	_success

_success:
	; Poistutaan success exit codella.
	mov	rax, 60
	xor	rdi, rdi		; Xor itsensa kanssa on aina 0.
	syscall

_error:
	; Poistutaan error exit codella.
	mov	rax, 60
	xor	rdi, 65			; 65 on Linuxin error-koodi 'data format error'.
	syscall

