global start
extern long_mode_start

section .text
bits 32
start:
    mov esp, stack_top
    mov edi, ebx

    call check_multiboot
    call check_cpuid
    call check_long_mode

    call init_page_tables
    call enable_paging
    call enable_SSE

    lgdt [gdt64.pointer]

    mov ax, gdt64.data
    mov ss, ax  ; stack
    mov ds, ax  ; data
    mov es, ax  ; extra

    jmp gdt64.code:long_mode_start

    hlt

check_multiboot:
    cmp eax, 0x36d76289
    jne .no_multiboot
    ret
.no_multiboot:
    mov al, "0"
    jmp error

; magic from http://wiki.osdev.org/
check_cpuid:
    pushfd               ; Store the FLAGS-register.
    pop eax              ; Restore the A-register.
    mov ecx, eax         ; Set the C-register to the A-register.
    xor eax, 1 << 21     ; Flip the ID-bit, which is bit 21.
    push eax             ; Store the A-register.
    popfd                ; Restore the FLAGS-register.
    pushfd               ; Store the FLAGS-register.
    pop eax              ; Restore the A-register.
    push ecx             ; Store the C-register.
    popfd                ; Restore the FLAGS-register.
    xor eax, ecx         ; XOR the A-register and the C-register.
    jz .no_cpuid         ; The zero flag is set, no CPUID.
    ret                  ; CPUID is available for use.
.no_cpuid:
    mov al, "1"
    jmp error

; same lol
check_long_mode:
    mov eax, 0x80000000    ; Set the A-register to 0x80000000.
    cpuid                  ; CPU identification.
    cmp eax, 0x80000001    ; Compare the A-register with 0x80000001.
    jb .no_long_mode       ; It is less, there is no long mode.
    mov eax, 0x80000001    ; Set the A-register to 0x80000001.
    cpuid                  ; CPU identification.
    test edx, 1 << 29      ; Test if the LM-bit is set in the D-register.
    jz .no_long_mode       ; They aren't, there is no long mode.
    ret
.no_long_mode:
    mov al, "2"
    jmp error

; ok this is making more sense now
; bare words are memory addresses, [] is derefernce
; so this puts address of pdp into eax register
; flips a couple option bits (present + writable)
; then... sets value of pml4 to that?
; actually hm these "labels" explicitly are just, addresses
; there's no "pml4_table" chunk of memory, not that high level...
; like C array name is just a pointer to start
; oh ok I got this so like `mov esp, stack_top`
; stack_top is my label, a memory address
; and that puts it in esp, a special register for a stack pointer
; ok sweet
; ohh wait lol so .lol is a label and lol is a function ok
; or "function" I guess, just jumps to address and ret jumps back
init_page_tables:
    mov eax, pdp_table
    or eax, 0b11
    mov [pml4_table], eax

    mov eax, pd_table
    or eax, 0b11
    mov [pdp_table], eax

    mov ecx, 0
.map_pd_table:
    mov eax, 0x200000   ; 2mib
    mul ecx
    or eax, 0b10000011  ; present, writable, huge
    mov [pd_table + ecx * 8], eax

    inc ecx
    cmp ecx, 512
    jne .map_pd_table

    ret

enable_paging:
    ; cr3 just the register cpu gets page table from
    mov eax, pml4_table
    mov cr3, eax

    ; physical address extension flag
    mov eax, cr4
    or eax, 1 << 5
    mov cr4, eax

    ; long mode bit
    ; msr: model-specific register
    ; efer: (model-specific) extended feature enable register
    ; rd/wr are just read/write
    mov ecx, 0xc0000080
    rdmsr
    or eax, 1 << 8
    wrmsr

    ; enable paging in cr0
    mov eax, cr0
    or eax, 1 << 31
    mov cr0, eax

    ret

enable_SSE:
    ; check
    mov eax, 0x1
    cpuid
    test edx, 1 << 25
    jz .no_SSE

    ; enable
    mov eax, cr0
    and ax, 0xfffb
    or ax, 0x2
    mov cr0, eax
    mov eax, cr4
    or ax, 3 << 9
    mov cr4, eax

    ret
.no_SSE:
    mov al, "a"
    jmp error

error:
    mov dword [0xb8000], 0x4f524f45
    mov dword [0xb8004], 0x4f3a4f52
    mov dword [0xb8008], 0x4f204f20
    mov byte [0xb800a], al
    hlt

section .rodata
; gdt always starts with zero-entry
; 44: descriptor type (set for code or data)
; 47: present
; 41: read for data write for code
; 43: executable
; 53: 64-bit
gdt64:
    dq 0;
.code: equ $ - gdt64
    dq (1<<44) | (1<<47) | (1<<41) | (1<<43) | (1<<53)
.data: equ $ - gdt64
    dq (1<<44) | (1<<47) | (1<<41)
.pointer:
    dw $ - gdt64 - 1
    dq gdt64

section .bss
align 4096
pml4_table:
    resb 4096
pdp_table:
    resb 4096
pd_table:
    resb 4096
stack_bottom:
    resb 4096
stack_top:
