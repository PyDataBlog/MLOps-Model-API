; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\TaintAnalysis\AntiTaint\Epilog\src\func-rets.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	_func
EXTRN	__imp__printf:PROC
EXTRN	__imp__gets:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
; File d:\projects\taintanalysis\antitaint\epilog\src\func-rets.c
_TEXT	SEGMENT
_buf$ = -32						; size = 8
_s$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
$T3590 = 8						; size = 4
_func	PROC

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 16   :   char buf[8];
; 17   :   struct S s;
; 18   :   s.a = (int)gets(buf) - (int)buf;

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__gets
	add	esp, 4
	lea	ecx, DWORD PTR _buf$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _s$[ebp], eax

; 19   :   s.b = printf(buf);

	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__printf
	add	esp, 4
	mov	DWORD PTR _s$[ebp+4], eax

; 20   :   s.c = s.a + s.b;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR _s$[ebp+8], eax

; 21   :   return s;

	mov	ecx, DWORD PTR $T3590[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _s$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _s$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR $T3590[ebp]

; 22   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_func	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_main
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T3597 = -144						; size = 20
$T3596 = -120						; size = 20
$T3595 = -96						; size = 20
_c$ = -68						; size = 20
_z$ = -48						; size = 4
_b$ = -44						; size = 20
_a$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_main	PROC

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 26   :   struct S a,b,c;
; 27   :   int z = 0;

	mov	DWORD PTR _z$[ebp], 0

; 28   :   a = func();

	lea	eax, DWORD PTR $T3595[ebp]
	push	eax
	call	_func
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _a$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _a$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _a$[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _a$[ebp+16], eax

; 29   :   z += a.a;

	mov	ecx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _z$[ebp], ecx

; 30   :   b = func();

	lea	edx, DWORD PTR $T3596[ebp]
	push	edx
	call	_func
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _b$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _b$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _b$[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _b$[ebp+16], eax

; 31   :   c = func();

	lea	ecx, DWORD PTR $T3597[ebp]
	push	ecx
	call	_func
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp+8], edx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _c$[ebp+12], ecx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _c$[ebp+16], edx

; 32   :   z += c.c + b.b;

	mov	eax, DWORD PTR _c$[ebp+8]
	add	eax, DWORD PTR _b$[ebp+4]
	add	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR _z$[ebp], eax

; 33   :   return z;

	mov	eax, DWORD PTR _z$[ebp]

; 34   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
END
