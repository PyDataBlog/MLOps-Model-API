DATA SEGMENT
	MAX_LEN DB 100
	STRING1	DB 100 DUP(0)
	STRING2 DB 100 DUP(0)
	
	NO_MATCH DB 'NO MATCH', 0DH, 0AH, '$'
	MATCH DB 'MATCH', 0DH, 0AH, '$'
DATA ENDS

CODE SEGMENT
	ASSUME CS:CODE, DS:DATA
START:
	MOV AX, DATA
	MOV DS, AX

	MOV BX, OFFSET STRING1
	CALL GET_STRING	
	MOV BX, OFFSET STRING2
	CALL GET_STRING		;»ñÈ¡Á½¸ö×Ö·û´®

	MOV SI, OFFSET STRING1
	MOV DI, OFFSET STRING2
	CALL CMP_STRING		;±È½Ï×Ö·û´®
	
	MOV AH, 4CH
	INT 21H

;-------------------------------------------------
;	ÊäÈë×Ö·û´®×Ó³ÌÐò£¬Èë¿ÚÎª×Ö·û´®µØÖ·, ÓÉBX´æ´¢
;-------------------------------------------------
GET_STRING PROC NEAR
	PUSH AX
	PUSH BX
	PUSH CX

	MOV CX, WORD PTR MAX_LEN - 1	;³õÊ¼»¯Ñ­»·´ÎÊý£¬ÔÚ×Ö·û´®µÄ×îºó¼ÓÈë¡®$¡¯
LOOPIN:	
	MOV AH, 1
	INT 21H

	CMP AL, 0DH
	JZ LOOPEND		;ÅÐ¶ÏÊÇ·ñÊäÈë»Ø³µ

	MOV [BX], AL
	INC BX			;½«ÊäÈëµÄ×Ö·û´æÈëÄÚ´æ
	LOOP LOOPIN

LOOPEND:
	MOV AH, 02H
	MOV DL, 0DH
	INT 21H
	MOV DL, 0AH
	INT 21H			;ÏÔÊ¾»Ø³µ»»ÐÐ
	MOV [BX], BYTE PTR '$'		;Ïò×Ö·û´®Ä©Î²¼ÓÈë'$'	
	
	POP CX
	POP BX
	POP AX

	RET
GET_STRING ENDP

;-------------------------------------------------
;	±È½Ï×Ö·û´®×Ó³ÌÐò£¬Èë¿ÚÎª×Ö·û´®µØÖ·, ÓÉSI, ºÍDI´æ´¢
;-------------------------------------------------
CMP_STRING PROC NEAR
	PUSH SI
	PUSH DI
	PUSH CX
	PUSH DX
	
CMP_LOOP:
    MOV CL, [SI]
	CMP CL, [DI]
	JNZ NEQUAL		;±È½ÏÃ¿¸ö×Ö·û
	
	CMP CL, '$'		
	JZ EQUAL		;ÅÐ¶ÏÊÇ·ñµ½×Ö·û´®Ä©Î²

	INC SI
	INC DI			
	
	JMP CMP_LOOP
	
EQUAL:
	MOV AH, 09H
	MOV DX, OFFSET MATCH
	INT 21H
	JMP FINISH

NEQUAL:
	MOV AH, 09H
	MOV DX, OFFSET NO_MATCH
	INT 21H	
	JMP FINISH

FINISH:	
	POP DX
	POP CX
	POP DI
	POP SI
	RET
CMP_STRING ENDP

CODE ENDS
	END START