; master library - superimpose
;
; Description:
;	p^[Ìo^(ÅºÊ)
;
; Function/Procedures:
;	int super_entry_at( int num, unsigned patsize, unsigned patseg ) ;
;
; Parameters:
;	num	o^æÌp^[Ô
;	patsize	p^[Ìå«³
;	seg	p^[f[^Ìi[³ê½, hmemubNZOgAhX
;		(±ÌAhXª»ÌÜÜo^³êéBgÍp^[TCYÉ
;		 ]ÁÄ mask->B->R->G->IÌÉüÁÄ¢é±Æ, Ü½Í
;		 TINY`®àÂ)
;
; Returns:
;	InsufficientMemory	(cy=1) super_bufferªmÛÅ«È¢(9216bytes)
;	GeneralFailure		(cy=1) numª 512Èã
;	NoError			(cy=0) ¬÷
;
; Binding Target:
;	Microsoft-C / Turbo-C / Turbo Pascal
;
; Running Target:
;	
;
; Requiring Resources:
;	CPU: V30
;
; Notes:
;	·ÅÉo^³êÄ¢éêÉo^·éÆAÈOÌf[^ÍJú³êÜ·B
;
; Assembly Language Note:
;	AX,flagWX^ðjóµÜ·B
;	d flagÍK¸ 0 ÉÈèÜ·B
;
; Compiler/Assembler:
;	TASM 3.0
;	OPTASM 1.6
;
; Author:
;	öËºF
;
; Revision History:
;	93/12/ 7 Initial: superat.asm/master.lib 0.22
;	95/ 2/14 [M0.22k] mem_AllocIDÎ

	.186
	.MODEL SMALL
	include func.inc
	include super.inc

	.DATA
	EXTRN	super_patdata:WORD		; superpa.asm
	EXTRN	super_patsize:WORD
	EXTRN	super_buffer:WORD
	EXTRN	super_patnum:WORD
	EXTRN mem_AllocID:WORD		; mem.asm

	.CODE
	EXTRN	HMEM_ALLOC:CALLMODEL		; memheap.asm
	EXTRN	HMEM_FREE:CALLMODEL


BUFFER_SIZE equ (16+2)*128*4

func SUPER_ENTRY_AT	; super_entry_at() {
	push	BP
	mov	BP,SP
	push	BX

	CLD

	num	= (RETSIZE+3)*2
	patsize	= (RETSIZE+2)*2
	patseg	= (RETSIZE+1)*2

	mov	BX,[BP+num]
	cmp	BX,MAXPAT
	cmc
	mov	AX,GeneralFailure
	jc	short EXIT

	; super_bufferð`FbN
	cmp	super_buffer,0
	jne	short DO_ENTRY
	; ®SÉJú³ê½óÔ(úl)¾Á½ê

	mov	mem_AllocID,MEMID_super
	push	BUFFER_SIZE/16
	_call	HMEM_ALLOC	; mÛ·é
	mov	super_buffer,AX
	mov	AX,InsufficientMemory
	jc	short EXIT

	push	ES
	push	CX
	push	DI

	push	DS
	pop	ES
	xor	AX,AX
	mov	DI,offset super_patsize	; p^[TCYzñðú»
	mov	CX,MAXPAT
	rep	stosw

	pop	DI
	pop	CX
	pop	ES

DO_ENTRY:
	mov	AX,BX
	shl	BX,1

	cmp	AX,super_patnum
	jae	short ADDING		; ÅãöÈ~Èçc

OVERWRITING:				; o^ÅãöæèOÈçã«
	cmp	super_patsize[BX],0
	je	short GO

	push	super_patdata[BX]	; ·ÅÉ½© éÈçJú
	_call	HMEM_FREE
	jmp	short GO

ADDING:
	inc	AX
	mov	super_patnum,AX

GO:
	mov	AX,[BP+patsize]
	mov	super_patsize[BX],AX
	mov	AX,[BP+patseg]
	mov	super_patdata[BX],AX
	xor	AX,AX			; clc, NoError

EXIT:
	pop	BX
	pop	BP
	ret	6
	EVEN
endfunc		; }

END
