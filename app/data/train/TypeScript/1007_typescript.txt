/*tslint:disable:no-bitwise*/
import {InjectedRouter} from 'react-router';
import * as store from 'store';

import {EcpState} from '../store/ecp.state';
import * as session from '../login/session.model';
import * as moment from 'moment';

export class Utility {

    // temporary functions (this function will only be used until all information is available from the EngagementCenterAPI)
    public static generateDebugUUID() {
        let d = new Date().getTime();
        if (window.performance && typeof window.performance.now === 'function') {
            d += performance.now(); // use high-precision timer if available
        }
        let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            let r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
        return uuid;
    }

    public static getEcpState() {
        let state: any = {};
        try {
            state.loginReducer = store.get('session');
            if (state.loginReducer && state.loginReducer.sessionExpires) {
                state.loginReducer.sessionExpires = moment.utc(state.loginReducer.sessionExpires);
            }
        } catch (e) {
            console.log(e);
        }
        return state;
    }

    public static setEcpState(session: session.SessionState) {
        try {
            store.set('session', session);
        } catch (e) {
            console.log(e);
        }
    }

    public static sessionIsValid(session: session.SessionState) {
        if (session && session.isLoggedIn && session.sessionExpires && session.sessionExpires > moment.utc()) {
            return true;
        }
        return false;
    }

}

export interface Baseprops {
    params: any;
    route: any;
    routeParams: any;
    router: InjectedRouter;
}
