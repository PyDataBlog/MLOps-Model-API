namespace shared {
    export class GenericCrudService<T> {
        private server: any;
        private mongoDb: any;
        private collectionName: string
        private mongo: any;

        constructor(collectionName: string) {
            this.mongo = require('mongodb');
            this.collectionName = collectionName;

            this.boostrap();
        }

        private boostrap(): void {
            var Server = this.mongo.Server;
            var MongoClient = this.mongo.MongoClient;
            var appSettings = new AppSettings();
            var that = this;

            MongoClient.connect(appSettings.mongoDbDatabaseUrl, function (err, db) {
                that.mongoDb = db;
                if (err) {
                    console.log('CollectionService', "Error when try to connect to database", err);
                    db.close();
                }
                else {
                    console.log('CollectionService', "Connected to database");

                    db.collection('tst', { strict: true }, function (err, collection) {
                        if (err) {
                            db.createCollection('tst');
                            db.createCollection('warehouse');
                            db.createCollection('delivery');
                            db.createCollection('travel');
                            db.createCollection('customer');
                            db.createCollection('user');
                        }
                    });
                }
            });
        }

        public findById(id: string, callback: (success: boolean, item?: T, msg?: string) => void): void {
            var that = this;
            this.mongoDb.collection(this.collectionName, function (err, collection) {
                collection
                    .find({ _id: new that.mongo.ObjectID(id) })
                    .toArray()
                    .then((value: T[]) => {
                        if (value.length > 0)
                            callback(true, value[0]);
                        else
                            callback(true, null);
                    },
                    (reason: any) => {
                        callback(false, null, reason);
                    });
            });
        }

        public find(query: any, callback: (success: boolean, lst?: T[], msg?: string) => void): void {
            this.mongoDb.collection(this.collectionName, function (err, collection) {
                collection
                    .find(query)
                    .toArray()
                    .then((value: T[]) => {
                        callback(true, value);
                    },
                    (reason: any) => {
                        callback(false, null, reason);
                    });
            });
        }

        public save(model: T, callback: (success: boolean, featched: T, msg?: string) => void): void {
            this.mongoDb.collection(this.collectionName, function (err, collection) {
                collection.save(model, { safe: true }, function (err, result) {
                    if (err) {
                        console.error('CollectionService', 'Error when inserted data in collection', err);
                        callback(false, null, err);
                    } else {
                        console.log('CollectionService', 'InsertedModel: ' + JSON.stringify(model));

                        callback(true, model);
                    }
                });
            });
        }
    }
}