import {Component, OnInit} from 'angular2/core';
import {HatenaRssFeed, HatenaRssFeedService} from './HatenaRssFeed.service';

@Component({
    selector: 'hatena-rss-feed',
    templateUrl: '/app/template/hatena-rss-feed.html'
})
export class HatenaRssFeedComponent implements OnInit {
    
    private hatenaRssFeeds: HatenaRssFeed[]
    private newHatenaRssFeed: HatenaRssFeed
    
    private errorMessage: string
    private waitingResponse: boolean
    
    constructor(private _hatenaRssItemService: HatenaRssFeedService) {
        this.errorMessage = ""
    }
    
    ngOnInit() {
        this.newHatenaRssFeed = {
            Title : "",
            URL : "",
            BookmarkCountThreshold : 0
        }
        this.refresh()
    }
    
    isValidNewFeed(): boolean {
        return this.newHatenaRssFeed.URL.length > 0 && (this.hatenaRssFeeds.findIndex(v => { return v.URL == this.newHatenaRssFeed.URL }) == -1) && this.newHatenaRssFeed.Title.length > 0
    }
    
    add() {
        if(this.newHatenaRssFeed.URL == "") {
            return
        }
        this.waitingResponse = true
        this._hatenaRssItemService.post(this.newHatenaRssFeed).subscribe(
            resp => {
                this.hatenaRssFeeds = this.hatenaRssFeeds.concat(this.newHatenaRssFeed)
                this.newHatenaRssFeed.URL = ""
                this.newHatenaRssFeed.Title = ""
                this.newHatenaRssFeed.BookmarkCountThreshold = 0       
            },
            error => {
                this.errorMessage = <string>error
                this.waitingResponse = false
            }
        )
    }
    
    delete(url:string) {
        this._hatenaRssItemService.delete(url).subscribe(
            resp => {
                this.hatenaRssFeeds = this.hatenaRssFeeds.filter((val, i, arr) => { return val.URL != url }) 
            },
            error => {
                this.errorMessage = <string>error
                this.waitingResponse = false
            }
        )
    }
    
    refresh() {
        this.waitingResponse = true
        this._hatenaRssItemService.get().subscribe(
            items => {
                this.hatenaRssFeeds = items
                this.waitingResponse = false
            },
            error => {
                this.errorMessage = <string>error
                this.waitingResponse = false
            }
        );
    }
}