import { Component, OnInit, OnChanges } from '@angular/core';
import 'rxjs/add/observable/of';
import { Observable }        from 'rxjs/Observable';
import { Subject }           from 'rxjs/Subject';
// Observable operators
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import { Note } from '../data.model';
import { NoteApi } from '../shared/sdk/services/custom/Note';
import {NoteService} from "../shared/services/note.service";


@Component({
  selector: 'app-note-search',
  templateUrl: './note-search.component.html',
  styleUrls: ['./note-search.component.css']
})
export class NoteSearchComponent implements OnInit, OnChanges {
  selectedNote: Note;
  notes: Observable<Note[]>;
  private searchTerms = new Subject<string>();

  constructor(private nAPI:NoteApi, private ns: NoteService) { }

  search(term: string): void {
    this.searchTerms.next(term);
  }

  ngOnInit(): void {
    this.getNotes();
  }

  ngOnChanges() {
    this.getNotes();
  }

  getNotes() {
  this.notes = this.searchTerms
    .debounceTime(300)
    .distinctUntilChanged()
    .switchMap(term => term ?
      this.nAPI.getNotes({where: {fullTextSearch: term}}) : Observable.of<Note[]>([]))
    .catch(err => {
      console.log(err);
      return Observable.of<Note[]>([]);
    });
  }

  selectNoteFromSearch(note: Note) {
    this.selectedNote = note;
    this.ns.noteSelected.emit(this.selectedNote);
    this.notes = null;
    this.ngOnChanges();
  }
}
