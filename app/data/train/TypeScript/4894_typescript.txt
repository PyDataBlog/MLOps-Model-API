import React from 'react'
import { useDispatch } from 'react-redux'

import Button from '@material-ui/core/Button'
import Checkbox from '@material-ui/core/Checkbox'
import { DialogProps } from '@material-ui/core/Dialog'
import DialogTitle from '@material-ui/core/DialogTitle'
import DialogContent from '@material-ui/core/DialogContent'
import DialogActions from '@material-ui/core/DialogActions'
import Divider from '@material-ui/core/Divider'
import List from '@material-ui/core/List'
import ListItem from '@material-ui/core/ListItem'
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'
import ListItemText from '@material-ui/core/ListItemText'
import Typography from '@material-ui/core/Typography'
import { Theme, createStyles } from '@material-ui/core/styles'
import { makeStyles } from '@material-ui/styles'

import { useInstances } from '../../hooks'
import * as Models from '../../models'
import { changeItemStatus } from '../../state/reducers/data/item'
import { Actions } from '../../state/reducer'
import { sortMap } from '../../utils/map'

import DialogButton from '../common/DialogButton'

const useStyles = makeStyles((theme: Theme) =>
	createStyles({
		dialog: {
			minWidth: 300
		},
		icon: {
			marginRight: 8
		},
		button: {
			marginRight: 8,
			'&:last-child': {
				marginRight: 0
			}
		},
		divider: {
			margin: '24px 0'
		}
	})
)

interface Props {
	id: number
	operationIds: number[]
	component: JSX.Element
}

const RestartDialog: React.FunctionComponent<Props> = props => {
	const { id, operationIds, component } = props
	const classes = useStyles()
	const dispatch = useDispatch()
	const [selectedIndex, setSelectedIndex] = React.useState<
		number | undefined
	>(undefined)

	const operations = useInstances<Models.Operation>('operations', {
		ids: operationIds
	})

	const handleClose = () => {
		dispatch(Actions.dialogClose())
	}

	const handleRestart = () => {
		if (selectedIndex === undefined) return

		dispatch(
			changeItemStatus(id, 'prototype', 'restart', {
				// restartToIndex: selectedIndex
			})
		)
	}

	const mapProcedure = (procedure: any) => {
		const index = procedure.workflowPosition
		return (
			<ListItem
				key={procedure.id}
				button
				onClick={() => setSelectedIndex(index)}
			>
				<ListItemText primary={procedure.name} />
				<ListItemSecondaryAction>
					<Checkbox
						checked={selectedIndex === index}
						onChange={() => setSelectedIndex(index)}
					/>
				</ListItemSecondaryAction>
			</ListItem>
		)
	}

	if (!operations) return null

	return (
		<DialogButton
			name="restartItem"
			component={component}
			DialogProps={{
				PaperProps: { className: classes.dialog }
			}}
		>
			<DialogTitle>Restart item</DialogTitle>
			<DialogContent>
				<List disablePadding>
					{sortMap(operations)('serialNumber').map(mapProcedure)}
				</List>
				<Divider className={classes.divider} />
				<Typography variant="caption">
					Choose where will begin progress of the restarted item
				</Typography>
			</DialogContent>
			<DialogActions>
				<Button onClick={handleClose}>Cancel</Button>

				<Button
					color="primary"
					variant="outlined"
					onClick={handleRestart}
				>
					Confirm
				</Button>
			</DialogActions>
		</DialogButton>
	)
}

export default RestartDialog
