import { Component, OnInit, AfterViewChecked, ViewChild } from '@angular/core';
import { FirebaseService } from '../../shared/services/firebase.service';
import { NgForm } from '@angular/forms';

@Component({
    selector: 'my-club-form',
    templateUrl: './club.form.component.html',
    styleUrls: ['./club-list.component.scss'],
})
// Form component
export class ClubFormComponent implements OnInit, AfterViewChecked {
    submitted: boolean;
    active: boolean;
    myForm: NgForm;
    event: any;
    changed: boolean;
    @ViewChild('myForm') currentForm: NgForm;
    private name: string;
    private description: string;
    public image: any;

    constructor(private firebaseService: FirebaseService) {
    }

    onSubmit(){
        let club = {
            name: this.name,
            description: this.description
        };
        this.firebaseService.addData(club);
        this.submitted = true;
        this.name = '';
        this.description = '';
    }

    onChange(event){
        event = event;
        let imageValue = (<HTMLInputElement>document.getElementById('image')).value;
        if(imageValue == null) {
            this.changed = true;
        }
    }

    ngOnInit(){
        this.submitted = false;
        this.active = true;
        this.changed = false;
    }

    ngAfterViewChecked(){
        this.formChanged();
    }

    formChanged() {
        if (this.currentForm === this.myForm) { return; }
        this.myForm = this.currentForm;
        if (this.myForm) {
        this.myForm.valueChanges
            .subscribe(data => this.onValueChanged(data));
        }
    }

    onValueChanged(data?: any) {
        data = data;
        if (!this.myForm) { return; }
        const form = this.myForm.form;

        for (const field in this.formErrors) {
        // clear previous error message (if any)
        this.formErrors[field] = '';
        const control = form.get(field);

            if (control && control.dirty && !control.valid) {
                const messages = this.validationMessages[field];
                for (const key in control.errors) {
                this.formErrors[field] += messages[key] + ' ';
                }
            }
        }
    }

    formErrors = {
        'name': '',
        'description': ''
    };

    validationMessages = {
        'name': {
            'required': 'Name is required.',
            'minlength': 'Name must be at least 4 characters long.',
            'maxlength': 'Name cannot be more than 24 characters long.'
        },
        'description': {
            'required': 'Description is required.',
            'minlength': 'Description must be from 30 to 500 characters long',
            'maxlength': 'Description cannot be more than 500 characters long.'
        }
    };
}
