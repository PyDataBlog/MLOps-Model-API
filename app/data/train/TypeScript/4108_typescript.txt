/**
 * Created by Андрей on 01.07.2017.
 */
import { Component } from '@angular/core';
import { DialogComponent, DialogService } from 'ng2-bootstrap-modal';
import { FormBuilder, FormControl, Validators } from '@angular/forms';
import { passConfirmValidation } from '../../auth-page/validators/pass-confirm.validator';
import { UserProfileService } from '../../core/user-profile.service';
import { Router } from '@angular/router';
import { MyAuthService } from '../../core/my-auth.service';

export interface PromptModel {
  title: string;
  question: string;
}

@Component({
  selector: 'prompt',
  templateUrl: './change-password-prompt.component.html',
  styleUrls: ['./change-password-prompt.component.scss']
})
export class ChangePasswordPromptComponent extends DialogComponent<PromptModel, string> {
  public title: string;
  public message: string = '';
  public serverError;
  public form = this.fb.group({ /* tslint:disable */
    old_password: new FormControl(null, [Validators.required, Validators.minLength(6), Validators.maxLength(25)]),
    new_password1: new FormControl(null, [Validators.required, Validators.minLength(6), Validators.maxLength(25)]),
    new_password2: new FormControl(null, [Validators.required]),
  }, {validator: passConfirmValidation('new_password1', 'new_password2')});

  constructor(dialogService: DialogService,
              private fb: FormBuilder,
              private userProfile: UserProfileService,
              private router: Router) {
    super(dialogService);
  }
  /**
   * Change new password
   * @param $event. This parameter contains data of the event.
   * @param value. This parameter contains data of the form for new password.
   */
  public changePassword($event, value) {
    $event.preventDefault();
    this.userProfile.changePassword(value)
      .subscribe(() => {
        this.close();
        this.router.navigate(['/sign-in']);
      },
      (error) => {
        this.serverError = JSON.parse(error._body);
      }
    );
  }
  /**
   * Close modal window
   */
  public close() {
    this.dialogService.removeDialog(this);
  }
}
