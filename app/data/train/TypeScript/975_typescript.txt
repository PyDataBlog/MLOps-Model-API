import * as React from 'react';
import { Component } from 'react';
import { Button, Checkbox, Icon, Table, Input, Container } from 'semantic-ui-react'
import { observable, action } from "mobx";
import { observer } from "mobx-react";
import { BudgetEditorModal } from '../BudgetEditorModal';
import { lazyInject } from "../../inversify-container";
import { TYPES } from "../../inversify-types";
import { BudgetStore } from "../../stores/budgets/BudgetStore";
import { BudgetTableRow } from "../BudgetTableRow";
import { Budget } from "../../stores/budgets/model/Budget";
import { BudgetRequest } from "../../stores/budgets/model/BudgetRequest";
import * as moment from 'moment';
import { DeleteConfirmModal } from "../DeleteConfirmModal";
import { authorized } from "../authorized";

@authorized({ authenticated: true })
@observer
export class BudgetsPage extends Component<{}, {}> {
    @lazyInject(TYPES.BudgetStore) private budgetStore: BudgetStore;

    @observable editing?: BudgetRequest | Budget;

    @observable budgetToDelete?: Budget;

    @action onBudgetEditClick = (budget: Budget) => {
        this.editing = budget.copy();
    }

    @action onBudgetDeleteClick = (budget: Budget) => {
        this.budgetToDelete = budget;
    }

    @action onBudgetCreateClick = () => {
        this.editing = new BudgetRequest({ from: moment().startOf('year'), to: moment().endOf('year') });
    }

    @action onModalClose = (budget: Budget | BudgetRequest) => {
        this.editing = undefined;
    }

    @action onModalSave = (budget: Budget | BudgetRequest) => {
        this.budgetStore.save(budget);
        this.editing = undefined;
    }

    @action onDeleteAccept = async () => {
        if (!this.budgetToDelete) {
            return;
        }
        await this.budgetStore.delete(this.budgetToDelete);
        this.budgetToDelete = undefined;
    }

    @action onDeleteReject = () => {
        this.budgetToDelete = undefined;
    }

    render() {
        const rows = this.budgetStore.budgets.map(it => <BudgetTableRow key={it.id} budget={it} onEditClick={this.onBudgetEditClick} onDeleteClick={this.onBudgetDeleteClick} />)
        const deleteMessage = this.budgetToDelete ? 'Budget ' + this.budgetToDelete.from.format('YYYY-MM') + ' to ' + this.budgetToDelete.to.format('YYYY-MM') : undefined;

        return (
            <Container className="BudgetsPage">
                <BudgetEditorModal budget={this.editing} onSave={this.onModalSave} onCancel={this.onModalClose} />
                <DeleteConfirmModal message={deleteMessage} onAccept={this.onDeleteAccept} onReject={this.onDeleteReject} />
                <Table celled compact>
                    <Table.Header fullWidth>
                        <Table.Row>
                            <Table.HeaderCell>From</Table.HeaderCell>
                            <Table.HeaderCell>To</Table.HeaderCell>
                            <Table.HeaderCell>Created By</Table.HeaderCell>
                            <Table.HeaderCell />
                        </Table.Row>
                    </Table.Header>

                    <Table.Body>
                        {rows}
                    </Table.Body>

                    <Table.Footer fullWidth>
                        <Table.Row>
                            <Table.HeaderCell />
                            <Table.HeaderCell colSpan="4">
                                <Button icon labelPosition="left" floated="right" primary size="small" onClick={this.onBudgetCreateClick}><Icon name="plus" /> Add Budget</Button>
                            </Table.HeaderCell>
                        </Table.Row>
                    </Table.Footer>
                </Table>
            </Container>
        )
    }
}