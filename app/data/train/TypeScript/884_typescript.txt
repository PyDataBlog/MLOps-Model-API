import DBService, { BuilderSingle } from '../DBService'

import Approval from '../../../models/extprod/Approval'
import { Map } from '../../../utils/map'
import { UndefinedError } from '../../../models/Error'

interface FindAllOptions {
	userId?: string
}

export default class ApprovalService extends DBService<Approval> {
	constructor() {
		super(Approval)
	}

	public findAll = async (options?: FindAllOptions) => {
		let query = this.Model.query().eager(
			'[user, itemPrototype.[itemBase], itemRequest.[itemBase], itemService.[itemBase]]'
		)

		if (options && options.userId) {
			query = query.where('userId', options.userId)
		}

		const approvals = await query
		if (!approvals) {
			throw new UndefinedError()
		}

		return approvals
	}
}
