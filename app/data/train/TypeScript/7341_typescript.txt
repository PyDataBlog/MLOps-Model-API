import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { NgModule, Optional, SkipSelf } from '@angular/core';

import { EffectsModule } from '@ngrx/effects';
import { StoreModule } from '@ngrx/store';

import { IndexerEffects } from './effects/indexer.effects';
import { JournalEffects } from './effects/journal.effects';
import { MovieEffects } from './effects/movie.effects';
import { ParserEffects } from './effects/parser.effects';
import { ProfileEffects } from './effects/profile.effects';
import { ReleaseEffects } from './effects/release.effects';
import { SchedulerEffects } from './effects/scheduler.effects';
import { SearchEffects } from './effects/search.effects';
import { HttpErrorInterceptor } from './interceptors/http-error.interceptor';
import { Reducer } from './reducers';
import { metaReducers } from './reducers/meta.reducer';
import { IndexerService } from './services/indexer.service';
import { JournalService } from './services/journal.service';
import { MediaInfoService } from './services/media-info.service';
import { MovieService } from './services/movie.service';
import { ParserService } from './services/parser.service';
import { ProfileService } from './services/profile.service';
import { SchedulerService } from './services/scheduler.service';
import { ToastService } from './services/toast.service';

import { SnotifyService, ToastDefaults } from 'ng-snotify';



@NgModule({
  imports: [
    /* angular stuff */
    HttpClientModule,

    /* ngrx store & effects */
    StoreModule.forRoot(Reducer.reducers, { metaReducers }),
    EffectsModule.forRoot([
      IndexerEffects,
      ProfileEffects,
      SearchEffects,
      JournalEffects,
      SchedulerEffects,
      ParserEffects,
      MovieEffects,
      ReleaseEffects,
    ])
  ],
  declarations: [],
  providers: [
    ProfileService,
    IndexerService,
    ParserService,
    MediaInfoService,
    MovieService,
    JournalService,
    SchedulerService,
    { provide: 'SnotifyToastConfig', useValue: ToastDefaults },
    SnotifyService,
    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true },
    ToastService,
  ]
})
export class CoreModule {
  constructor(
    @Optional() @SkipSelf() parentModule: CoreModule
  ) {
    if (parentModule) {
      throw new Error('CoreModule is already loaded. Import only in AppModule');
    }
  }
}
