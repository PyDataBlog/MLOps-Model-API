import { Component, OnInit }        from '@angular/core';
import { AuthenticationService }    from "../services/_security/_services/authentication.service";
import { Router }                   from "@angular/router";
import * as firebase from 'firebase';
import {NotificationsService} from "angular2-notifications";

@Component({
    selector: 'app-dashboard',
    templateUrl: './full-layout.component.html'
})
export class FullLayoutComponent implements OnInit {

    private config = {
        apiKey: "AIzaSyCLrj3gWw27yGFjaWjitfxWcDAcIJMWhNA",
        authDomain: "eul-firebase.firebaseapp.com",
        databaseURL: "https://eul-firebase.firebaseio.com",
        storageBucket: "eul-firebase.appspot.com",
        messagingSenderId: "1013021222331"
    };

    public options = {
        position: ["bottom", "right"],
        timeOut: 0,
        lastOnBottom: true
    };

    private messaging : firebase.messaging.Messaging;
    private newNotification = false;
    private notificationCounter : number = 0;
    private notifications : Array<{title : string, body : string}>;
    private login : string;
    private disabled : boolean = false;
    private status:{ isopen : boolean } = {isopen: false};

    constructor(
        private _router: Router,
        private _auth : AuthenticationService,
        private _notificationsService: NotificationsService
    ) {
        firebase.initializeApp(this.config);
        this.initializeFCM();
    }

    public toggled(open:boolean):void {
        console.log('Dropdown is now: ', open);
        console.log(this.newNotification + ' ' + this.notificationCounter);
    }

    public toggleDropdown($event: any):void {
        $event.preventDefault();
        $event.stopPropagation();
        this.status.isopen = !this.status.isopen;
    }

    public created($event: any) {
        $event.preventDefault();
        $event.stopPropagation();
        console.log('created');
    }
    public destroyed($event: any) {
        $event.preventDefault();
        $event.stopPropagation();
        console.log('destroyed');
    }

    public logout($event: any) {
        $event.preventDefault();
        $event.stopPropagation();

        this._auth.logout();
        this._router.navigate(['/pages/login']);
    }

    ngOnInit(): void {
        let currUser =  JSON.parse(localStorage.getItem('currentUser'));
        this.login = currUser && currUser.username;
    }

    public initializeFCM(): void {
        this.messaging = firebase.messaging();
        this.messaging.requestPermission()
            .then(() => {
                console.log('Have Permission!:)');
                return this.messaging.getToken()
            })
            .then((token) => {
                console.log('token: ' + token);
                localStorage.setItem('firebaseToken', token);
            })
            .catch((err) => {
                console.log('Error at firebase :( ' + err);
            });

        this.messaging.onTokenRefresh(() => this.messaging.getToken()
            .then((refreshedToken) => {
                console.log('Token refreshed');
                localStorage.setItem('firebaseToken', refreshedToken);
            })
            .catch((err) => console.log('Unable to retrieve refreshed token ' + err)));

        this.messaging.onMessage((payload) => this.handleNotification(payload));
    }

    public handleNotification(payload) {
        this.newNotification = true;
        this.notificationCounter = this.notificationCounter + 1;

        this._notificationsService.info(
            payload.notification.title,
            payload.notification.body
        )
    }
}
