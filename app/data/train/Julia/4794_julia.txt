using Vallado, Base.Test

# Vallado (2001), Example 3-2, p.150
lat_d = -7.0
lat_m = 54.0
lat_s = 23.886

lon_d = 345.0
lon_m = 35.0
lon_s = 51.0

h_ellp = 56.0 # [m]

ϕ_gd  = dms2rad(lat_d, lat_m, lat_s)
@test isapprox(ϕ_gd, deg2rad(-7.9066357), rtol=1e-6)

λ  = dms2rad(lon_d, lon_m, lon_s)
@test λ ≈ deg2rad(345.5975)

h_ellp /= 1000 # [km]

r⃗_site, v⃗_site = site(λ, ϕ_gd, h_ellp)

@test isapprox(r⃗_site[1],  6119.40026932, rtol=1e-6)
@test isapprox(r⃗_site[2], -1571.47955545, rtol=1e-6)
@test isapprox(r⃗_site[3],  -871.56112598, rtol=1e-6)
@test isapprox(norm(r⃗_site), 6377.79166651, rtol=1e-6)

@test v⃗_site ≈ zeros(3)


#Vallado (2001), Example 3-3, p.177-8
r⃗_ijk = [6524.834 6862.875 6448.296]

JD = julianDate(1995, 2, 24, 12, 0, 0)

@test JD ≈ 2449773

θ_GMST = LSTime(JD)[1]
@test θ_GMST ≈ deg2rad(333.893486)

ϕ_gd, λ, h_ellp = ijkToLatLon(r⃗_ijk, θ_GMST)

@test isapprox(ϕ_gd  , deg2rad(34.352496), rtol=1e-6)
@test isapprox(λ     , deg2rad(72.5529  ), rtol=1e-6)
@test isapprox(h_ellp, 5085.22, rtol=1e-6)

r⃗_ijk /= R⨁

ϕ_gd, λ, h_ellp = ijkToLatLon(r⃗_ijk, θ_GMST, R=1.0)

@test isapprox(ϕ_gd  , deg2rad(34.352496), rtol=1e-6)
@test isapprox(λ     , deg2rad(72.5529  ), rtol=1e-6)
@test isapprox(h_ellp, 0.797289, rtol=1e-6)



# Vallado (2001), Example 3-4, page 188.
JD = julianDate(1996, 10, 26, 14, 20, 0)
@test JD ≈ 2450383.09722222


# Vallado (2001), Example 3-5, page 192 (see errata).
JD = julianDate(1992, 8, 20, 12, 14, 0)
@test JD ≈ 2448855.009722

@test JD2JDC(JD) ≈ -0.073647919

θ_GMST, θ_LST = LSTime(JD, λ=-deg2rad(104))
@test θ_GMST ≈ deg2rad(152.578787886)
@test θ_LST  ≈ deg2rad( 48.578787886)


# Vallado (2001), p.204-5.
yr, mon, day, hr, min, sec = gregorianDate(2449877.3458762)

@test yr  == 1995
@test mon == 6
@test day == 8
@test hr  == 20
@test min == 18
@test isapprox(sec, 3.70368, rtol=1e-5)


# Random Julian <-> Gregorian tests 
for i = 1:100
    JD1 = ((2.4880695 - 2.4153855)*rand() + 2.4153855)*1e6 # Random date 1901-2100
    Y, M, D, H, m, s = gregorianDate(JD1)
    JD2 = julianDate(Y, M, D, H, m, s)
    @test isapprox(JD1, JD2, atol=1e-5)
end

for i = 1:100
    Y1, M1, D1, H1, m1, s1 = rand(1901:2100), 12, 31, rand(0:23), rand(0:59), rand()*60
    JD = julianDate(Y1, M1, D1, H1, m1, s1)
    Y2, M2, D2, H2, m2, s2 = gregorianDate(JD)
    
    @test Y1 == Y2
    @test M1 == M2
    @test D1 == D2
    @test H1 == H2
    @test m1 == m2
    @test isapprox(s1, s2, atol=1e-4)
end


# Vallado (2001), Example 7-1, p.409-10
JD     = julianDate(1995, 5, 20, 3, 17, 2)
θ_GMST = LSTime(JD)[1]

@test JD ≈ 2449857.636829
@test θ_GMST ≈ deg2rad(286.57389)


# Vallado (2001), Example 3-7, p.197-8
JD_UTC = julianDate(1990, 5, 14, 16, 43, 0)

ΔUT1 = 0.04694 # [sec]
ΔAT  = 25.0

JD_UT1, JD_TAI, JD_TT, JD_TDB, T_UT1, T_TT, T_TDB = convTime(JD_UTC, ΔUT1=ΔUT1, ΔAT=ΔAT)

@test JD_TT ≈ 2448026.1971896296
@test T_TT  ≈ -0.0963395704413
@test T_UT1 ≈ -0.0963395885469
@test T_TDB ≈ -0.0963395704409


# Vallado (2001), Example 3-14, p.223-4
JD_UTC = julianDate(1991, 4, 6, 7, 51, 28.386009)

r⃗_fk5  =  [5102.5096, 6123.01152, 6378.1363]
v⃗_fk5  =  [-4.7432196, 0.7905366, 5.53375619]

JD_UT1 = JD_UTC + 0.402521/solSecsEarth
JD_TAI = JD_UTC + 26/solSecsEarth
JD_TT  = JD_TAI + 32.184/solSecsEarth

@test JD_TT ≈ 2448352.828085301

T_TT = JD2JDC(JD_TT)
@test isapprox(T_TT, -0.087396904, rtol=1e-8)

(ζ, θ, z) = precessionAngles(T_TT)
@test isapprox(ζ, deg2rad(-0.05598722), rtol=1e-6)
@test isapprox(θ, deg2rad(-0.04865938), rtol=1e-6)
@test isapprox(z, deg2rad(-0.05598554), rtol=1e-6)

prec = rot3mat(ζ)*rot2mat(-θ)*rot3mat(z)

r⃗_mod = prec'*r⃗_fk5
v⃗_mod = prec'*v⃗_fk5

@test r⃗_mod[1] ≈ 5119.880903
@test r⃗_mod[2] ≈ 6113.022740
@test r⃗_mod[3] ≈ 6373.795530

@test v⃗_mod[1] ≈ -4.73696426
@test v⃗_mod[2] ≈  0.79980013
@test v⃗_mod[3] ≈  5.53778179


# Determine the angles for the Earth's nutation:
T_TDB = T_TT

M☾, M☉, uM☾, D☉, Ω☾ = delaunayElements(T_TDB::Float64)

@test M☾  ≈ mod2pi(deg2rad(-170.740096))
@test M☉  ≈ mod2pi(deg2rad(-268.676431))
@test uM☾ ≈ mod2pi(deg2rad( -17.088217))
@test D☉  ≈ mod2pi(deg2rad( -97.116764))
@test Ω☾  ≈ mod2pi(deg2rad( 294.082085))

ɛ̄ = meanObliquity(T_TDB)

@test ɛ̄ ≈ deg2rad(23.440427633)

ΔΨ, Δε = nutationCorrections(T_TDB)

@test isapprox(ΔΨ, deg2rad(0.004185844), rtol=1e-6)
@test isapprox(Δε, deg2rad(0.001170661), rtol=1e-6)

ɛ = ɛ̄ + Δε

@test ɛ ≈ deg2rad(23.441598295)

nut = rot1mat(-ɛ̄)*rot3mat(ΔΨ)*rot1mat(ɛ)

r⃗_tod = nut'*r⃗_mod
v⃗_tod = nut'*v⃗_mod

@test r⃗_tod[1] ≈ 5119.285915
@test r⃗_tod[2] ≈ 6113.235661
@test r⃗_tod[3] ≈ 6374.069220

@test v⃗_tod[1] ≈ -4.73717879
@test v⃗_tod[2] ≈  0.79936947
@test v⃗_tod[3] ≈  5.53766046

θ_GMST = LSTime(JD_UT1)[1]

@test θ_GMST ≈ deg2rad(311.974073920)

θ_AST = θ_GMST + ΔΨ*cos(ɛ̄)

@test θ_AST ≈ deg2rad(311.977914290)

st = rot3mat(-θ_AST)

r⃗_pef = st'*r⃗_tod

LOD = 2.04/1000
ω = 7.29211514670698e-5*(1 - LOD/86400)

q = [0.0, 0.0, ω]
v⃗_pef = st'*v⃗_tod - q × r⃗_pef

@test r⃗_pef[1] ≈ -1120.591721
@test r⃗_pef[2] ≈  7894.492556
@test r⃗_pef[3] ≈  6374.069220

@test isapprox(v⃗_pef[1], -3.18701210, rtol=1e-6)
@test v⃗_pef[2] ≈ -2.90526310
@test v⃗_pef[3] ≈  5.53766046

(xₚ, yₚ) = deg2rad([-0.21959, 0.30266])/3600

pm = rot1mat(yₚ)*rot2mat(xₚ)

r⃗_itrf = pm'*r⃗_pef
v⃗_itrf = pm'*v⃗_pef

@test r⃗_itrf[1] ≈ -1120.598506
@test r⃗_itrf[2] ≈  7894.483204
@test r⃗_itrf[3] ≈  6374.079611

@test v⃗_itrf[1] ≈ -3.18701792
@test v⃗_itrf[2] ≈ -2.90527123
@test v⃗_itrf[3] ≈  5.53765280



# Vallado (2001), Example 3-14, p.223-4
JD_UTC = julianDate(1991, 4, 6, 7, 51, 28.386009)

r⃗_fk5  = [5102.5096, 6123.01152, 6378.1363]
v⃗_fk5  = [-4.7432196, 0.7905366, 5.53375619]

r⃗_itrf = [-1120.598506, 7894.483204, 6374.079611]
v⃗_itrf = [-3.18701792, -2.90527123, 5.53765280]

(xp, yp) = deg2rad([-0.21959, 0.30266])/3600
ΔUT1 = 0.402521
ΔAT = 26.0
LOD = 2.4/1000

r⃗_itrfTest, v⃗_itrfTest = FK5Reduction(r⃗_fk5, v⃗_fk5, JD_UTC; xp=xp, yp=yp, LOD=LOD, ΔUT1=ΔUT1, ΔAT=ΔAT)

@test r⃗_itrfTest[1] ≈ r⃗_itrf[1]
@test r⃗_itrfTest[2] ≈ r⃗_itrf[2]
@test r⃗_itrfTest[3] ≈ r⃗_itrf[3]

@test v⃗_itrfTest[1] ≈ v⃗_itrf[1]
@test v⃗_itrfTest[2] ≈ v⃗_itrf[2]
@test v⃗_itrfTest[3] ≈ v⃗_itrf[3]

r⃗_fk5Test, v⃗_fk5Test = FK5Reduction(r⃗_itrf, v⃗_itrf, JD_UTC; xp=xp, yp=yp, LOD=LOD, ΔUT1=ΔUT1, ΔAT=ΔAT, reverse=true)

@test r⃗_fk5Test[1] ≈ r⃗_fk5[1]
@test r⃗_fk5Test[2] ≈ r⃗_fk5[2]
@test r⃗_fk5Test[3] ≈ r⃗_fk5[3]

@test v⃗_fk5Test[1] ≈ v⃗_fk5[1]
@test v⃗_fk5Test[2] ≈ v⃗_fk5[2]
@test v⃗_fk5Test[3] ≈ v⃗_fk5[3]


# Test days2YMDHMS
# Vallado (2001), Example 3-12, p.203.
yr, mon, day, hr, min, sec = days2YMDHMS(2001, 77.5097222)
@test mon == 3
@test day == 18
@test hr  == 12
@test min == 13
@test sec  ≈ 59.99808

# Test parseTLE
# Vallado (2001), p.115.
line1 = "1 16609U 86017A   93352.53502934  .00007889  00000 0  10529-3      34"
line2 = "2 16609  51.6190  13.3340 0005770 102.5680 257.5950 15.59114070 44786"

satnum1, class, intldesg, epoch, ṅ, n̈, b★, TLEnum, i, Ω, e, ω, M, n, revnum = parseTLE(line1, line2)

@test epoch == julianDate(1993, 12, 18, 12, 50, 26.5350)
@test n     == 15.59114070
@test ṅ     == 7.889e-5
@test n̈     == 0
@test b★    == 1.0529e-4
@test e     == 5.77e-4
@test M     == deg2rad(257.5950)
@test i     == deg2rad(51.6190)
@test Ω     == deg2rad(13.3340)
@test ω     == deg2rad(102.5680)