using Images
using DataFrames
 
#typeData could be either "train" or "test.
#labelsInfo should contain the IDs of each image to be read
#The images in the trainResized and testResized data files
#are 20x20 pixels, so imageSize is set to 400.
#path should be set to the location of the data files.


function read_data(typeData, labelsInfo, imageSize, path)
 #Intialize x matrix
 x = zeros(size(labelsInfo, 1), imageSize)

 temp = zeros(20,20,3);
 
 for (index, idImage) in enumerate(labelsInfo) 
  #Read image file 
  nameFile = "$(path)/$(typeData)Resized/$(idImage).Bmp"
  img = load(nameFile)

  #Convert img to float values 

  temp[:,:,1] = Colors.red(img);

  temp[:,:,2] = Colors.green(img);

  temp[:,:,3] = Colors.blue(img);

  #Convert color images to gray images
  #by taking the average of the color scales. 

  t2 = mean(temp, 3)
    
  #Transform image matrix to a vector and store 
  #it in data matrix 

  x[index, :] = reshape(t2, 1, imageSize);

  print("\b\b\b\b\b $(index)");

 end 
 return x
end


imageSize = 400 # 20 x 20 pixel

path = pwd()

labelsInfoTrain = readtable("$(path)/trainLabels.csv")

xTrain = read_data("train", labelsInfoTrain[:,1], 400, ".");

labelsInfoTest = readtable("$(path)/sampleSubmission.csv")

xTest = read_data("test", labelsInfoTest[:,1], 400, ".")

yTrain = map(x -> x[1], labelsInfoTrain[:Class])

yTrain = int(yTrain)


using DecisionTree

yTrain = float(yTrain)

model = build_forest(yTrain, xTrain, 20, 50, 1.0)

predTest = apply_forest(model, xTest)

labelsInfoTest[:Class] = map(char,predTest)

writetable("$(path)/juliaSubmission.csv", labelsInfoTest, separator=',', header=true)

