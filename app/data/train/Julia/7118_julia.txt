export
    siteTrack,
    site_ijk




"""
    siteTrack(λ::Float64, ϕ_gd::Float64, h_ellp::Float64, ρ::Float64, β::Float64, el::Float64, ρ̇::Float64, β̇::Float64, ėl::Float64; R::Float64=R⨁, e2::Float64=e2⨁, ω::Float64=ω⨁)

Compute a satellite's body-fixed position and velocity from site sensor data.

### Arguments (Inputs):
| Parameter | Description                       | Units  |
| --------: | :-------------------------------- | :----- |
| `λ`       | Geodetic longitude of site        | rad    |
| `ϕ_gd`    | Geodetic latitude of site         | rad    |
| `h_ellp`  | Altitude of site above ellipsoid  | DU     |
| `ρ`       | Observed satellite range          | DU     |
| `β`       | Observed satellite azimuth        | rad    |
| `el`      | Observed satellite elevation      | rad    |
| `ρ̇`       | Observed satellite range rate     | rad/TU |
| `β̇`       | Observed satellite azimuth rate   | rad/TU |
| `ėl`      | Observed satellite elevation rate | rad/TU |

#### Optional Keyword Arguments:
| Parameter | Description                        | Units  |
| --------: | :--------------------------------- | :----- |
| `R=R⨁`    | Radius of site's body (e.g. Earth) | DU     |
| `e2=e2⨁`  | Body's eccentricity squared        | -      |
| `ω=ω⨁`    | Body's rate of rotation            | rad/TU |

### Values (Outputs):
| Parameter | Description                      | Units |
| --------: | :------------------------------- | :---- |
| `r⃗`       | Satellite's ecef position vector | DU    |
| `v⃗`       | Satellite's ecef velocity vector | DU/TU |
| `r⃗_site`  | Site's ecef position vector      | DU    |

Author: James Spicer (2016.11.13) <br/>
Source: Vallado (2001), Algorithm 48, p.408-9 (See errata)
"""
function siteTrack(λ::Float64, ϕ_gd::Float64, h_ellp::Float64, ρ::Float64, β::Float64, el::Float64, ρ̇::Float64, β̇::Float64, ėl::Float64; R::Float64=R⨁, e2::Float64=e2⨁, ω::Float64=ω⨁)
    C⨁          = R/√(1-e2*sin(ϕ_gd)^2)
    S⨁          = C⨁*(1-e2)
 
    r_δ         = (C⨁ + h_ellp)*cos(ϕ_gd)
    r_K         = (S⨁ + h_ellp)*sin(ϕ_gd)

    r⃗_site      = [r_δ*cos(λ); r_δ*sin(λ); r_K]

    ρ⃗_sez       = ρ*[-cos(el)*cos(β);
                      cos(el)*sin(β);
                      sin(el)]

    ρ̇_sez       = [-ρ̇*cos(el)*cos(β) + ρ*sin(el)*cos(β)*ėl + ρ*cos(el)*sin(β)*β̇;
                    ρ̇*cos(el)*sin(β) - ρ*sin(el)*sin(β)*ėl + ρ*cos(el)*cos(β)*β̇;
                    ρ̇*sin(el)        + ρ*cos(el)       *ėl]

    ecef_C_sez  = rot3mat(-λ)*rot2mat(ϕ_gd-0.5π)

    ρ⃗           = ecef_C_sez*ρ⃗_sez
    ρ̇           = ecef_C_sez*ρ̇_sez

    ω⃗           = [0, 0, ω]

    r⃗           = ρ⃗ + r⃗_site
    v⃗           = ρ̇ + ω⃗ × r⃗

    return r⃗, v⃗, r⃗_site
end


"""
    site_ijk(θ_LST::Float64, ϕ_gd::Float64, h_ellp::Float64; R::Float64=R⨁, e2::Float64=e2⨁)

Compute a satellite's body-fixed position and velocity from site sensor data.

### Arguments (Inputs):
| Parameter | Description                       | Units  |
| --------: | :-------------------------------- | :----- |
| `θ_LST`   | Local sideFloat64 time at site       | rad    |
| `ϕ_gd`    | Geodetic latitude of site         | rad    |
| `h_ellp`  | Altitude of site above ellipsoid  | DU     |

#### Optional Keyword Arguments:
| Parameter | Description                   | Units  |
| --------: | :---------------------------- | :----- |
| `R=R⨁`    | Radius of site's central body | DU     |
| `e2=e2⨁`  | Body's eccentricity squared   | -      |

### Values (Outputs):
| Parameter | Description                      | Units |
| --------: | :------------------------------- | :---- |
| `r⃗_site`  | Site's ecef position vector      | DU    |

Author: James Spicer (2016.11.13) <br/>
Source: Vallado (2001), Algorithm 48, p.408-9 (See errata)
"""
function site_ijk(θ_LST::Float64, ϕ_gd::Float64, h_ellp::Float64; R::Float64=R⨁, e2::Float64=e2⨁)
    C   = R/√(1-e2*sin(ϕ_gd)^2)
    S   = C*(1-e2)
 
    r_δ = (C + h_ellp)*cos(ϕ_gd)
    r_K = (S + h_ellp)*sin(ϕ_gd)

    return [r_δ*cos(θ_LST) r_δ*sin(θ_LST) r_K]
end