using AutoGrad

function linear(parameters, x)
    return parameters[1] * x .+ parameters[2]
end

function lstm(parameters, input, state)
    cell, hidden = state

    gates   = parameters[1] * vcat(input, hidden) .+ parameters[2]
    hsize   = size(hidden, 1)
    forget  = sigm(gates[1:hsize, :])
    ingate  = sigm(gates[(hsize + 1):2hsize, :])
    outgate = sigm(gates[(2hsize + 1):3hsize, :])
    change  = tanh(gates[(3hsize + 1):4hsize, :])
    cell    = cell .* forget + ingate .* change
    hidden  = outgate .* tanh(cell)

    return [cell, hidden]
end

function lstm_multi(parameters, input, state; pdrop=0)
    nextstate = []

    for (p, s) in zip(parameters, state)
        input = dropout(input, pdrop)
        ns = lstm(p, input, s)
        push!(nextstate, ns)
        input = ns[2]
    end

    return nextstate
end

function dropout(x, pdrop)
    if pdrop > 0
        return x .* (rand!(similar(AutoGrad.getval(x))) .< (1 - pdrop)) / (1 - pdrop)
    else
        return x
    end
end
