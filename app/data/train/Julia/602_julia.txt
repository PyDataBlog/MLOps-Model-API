# Most existing packages use kron(...) to compute the khatri-rao product. However,
# this appears roughly 2x slower than using for loops in Julia as demonstrated in this
# simple script.
####################################################################################

using BenchmarkTools
using TensorBase

function A_kr_B_kron(A::AbstractMatrix, B::AbstractMatrix)
    # determine indices
    H = size(A,2)
    H != size(B,2) && throw(DimensionMismatch("Input matrices do not have same number of columns."))
    IJ = size(A,1)*size(B,1)

    # preallocate result
    T = Base.promote_op(*,eltype(A),eltype(B))
    C = Matrix{T}(size(A,1)*size(B,1), size(A,2))

    # compute result
    for i in 1:size(A, 2)
        @inbounds C[:, i] = kron(A[:, i], B[:, i])
    end
    return C
end

function A_kr_B_for(A::AbstractMatrix, B::AbstractMatrix)
    # determine indices
    H = size(A,2)
    H != size(B,2) && throw(DimensionMismatch("Input matrices do not have same number of columns."))
    IJ = size(A,1)*size(B,1)

    # preallocate result
    T = Base.promote_op(*,eltype(A),eltype(B))
    C = Matrix{T}(size(A,1)*size(B,1), size(A,2))
    
    # compute khatri-rao product
    for h = 1:H
        ij = 1
        for i = 1:size(A,1)
            for j = 1:size(B,1)
                @inbounds C[ij,h] = A[i,h]*B[j,h]
                ij += 1
            end
        end
    end
    return C
end

A_kr_Btranspose(A,B) = A_kr_B(A,B')

A = randn(100,100)
B = randn(100,100)
@benchmark A_kr_B_for($A,$B)
@benchmark A_kr_B_kron($A,$B)

@benchmark A_kr_Btranspose($A,$B)
@benchmark A_kr_Bt($A,$B)
