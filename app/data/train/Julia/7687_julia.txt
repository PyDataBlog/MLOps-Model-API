function subSym(x::Expr,y::Expr)
    if x == y
        return 0
    elseif x == minusSym(y)
        return mulSym(x,2)
    end
    xa = x.args
    ya = y.args
    opx = xa[1]
    opy = ya[1]
    lxa = length(xa)
    lya = length(ya)

    condlength = 0
    if lxa == 2
        a = xa[2]
        condlength = 1
    elseif lxa == 3
        a, b = xa[2], xa[3]
        condlength = 2
    else
        condlength = 3
    end

    if lya == 2
        c = ya[2]
        condlength = condlength + (1 << 2)
    elseif lya == 3
        c, d = ya[2], ya[3]
        condlength = condlength + (2 << 2)
    else
        condlength = condlength + (3 << 2)
    end

    condequal = 0
    if condlength == (1 + 2<<2)
        if a == c
            condequal = 1
        elseif a == d
            condequal = 2
        end
    elseif condlength == (2 + 1<<2)
        if a == c
            condequal = 3
        elseif b == c
            condequal = 4
        end
    elseif condlength == (2 + 2<<2)
        if a == c
            condequal = 5
        elseif a == d
            condequal = 6
        elseif b == c
            condequal = 7
        elseif b == d
            condequal = 8
        end
    end

    if opx == :-
        if opy == :-
            if lxa == 2 #(-a)-y
                if lya == 2 #(-a)-(-c)
                    return subSym(ya[2],xa[2])
                elseif lya == 3 #(-a)-(c-d)
                    c,d = ya[2],ya[3]
                    if xa[2] == c #(-a)-(a-d)
                        return subSym(d,mulSym(c,2))
                    elseif xa[2] == d #(-a)-(c-a)
                        return minusSym(c)
                    end
                    return subSym(d,addSym(xa[2],c))
                end
            elseif lxa == 3 #(a-b)-y
                a,b = xa[2],xa[3]
                if lya == 2 #(a-b)-(-c)
                    if a == ya[2] #(a-b)-(-a)
                        return subSym(mulSym(a,2),b)
                    elseif b == ya[2] #(a-b)-(-b)
                        return a
                    end
                    return subSym(addSym(a,ya[2]),b)
                elseif lya == 3 #(a-b)-(c-d)
                    c,d = ya[2],ya[3]
                    if a == c #(a-b)-(a-d)
                        return subSym(d,b)
                    elseif a == d #(a-b)-(c-a)
                        if b == c #(a-b)-(b-a)
                            return mulSym(x,2)
                        end
                        return subSym(mulSym(a,2),addSym(b,c))
                    elseif b == c #(a-b)-(b-d)
                        return subSym(addSym(a,d),mulSym(b,2))
                    elseif b == d #(a-b)-(c-b)
                        return subSym(a,c)
                    elseif isa(a,BaseReals)
                        if isa(c,BaseReals) #(a-b)-(c-d)
                            return subSym(addSym(d,subSym(a,c)),b)
                        end
                    elseif isa(b,BaseReals)
                        if isa(d,BaseReals) #(a-b)-(c-d)
                            return subSym(a,addSym(subSym(b,d),c))
                        end
                    end
                    return subSym(addSym(a,d),addSym(b,c))
                end
            end
        #skip case lxa=2 (-a) covered below in #(-a)-y except for commutative y
        elseif opy == :+
            if lxa == 3 #(a-b)-(c+d)
                a,b = xa[2],xa[3]
                c,d = ya[2],ya[3]
                if a == c #(a-b)-(a+d)
                    if b == d #(a-b)-(a+b)
                        return minusSym(mulSym(b,2))
                    end
                    return minusSym(addSym(b,d))
                elseif b == c #(a-b)-(b+d)
                    if a == d #(a-b)-(b+a)
                        return minusSym(mulSym(b,2))
                    end
                    return subSym(a,addSym(mulSym(b,2),d))
                elseif a == d #(a-b)-(c+a)
                    return minusSym(addSym(b,c))
                elseif b == d #(a-b)-(c+b)
                    return addSym(a,addSym(mulSym(b,2),c))
                elseif a == :($d + $c) #(a-b)-a
                    return minusSym(b)
                elseif b == :($d + $c) #(a-b)-b
                    return subSym(a,mulSym(b,2))
                end
            end
        elseif opy == :*
            if lxa == 3 #(a-b)-(c*d)
                a,b = xa[2],xa[3]
                c,d = ya[2],ya[3]
                if a == c #(a-b)-(a*d))
                    return minusSym(addSym(mulSym(a,subSym(d,1)),b))
                elseif b == c #(a-b)-(b*d)
                    return subSym(a,mulSym(b,addSym(d,1)))
                elseif a == d #(a-b)-(c*a)
                    return minusSym(addSym(mulSym(a,subSym(c,1)),b))
                elseif b == d #(a-b)-(c*b)
                    return subSym(a,mulSym(b,addSym(c,1)))
                elseif a == :($d * $c) #(a-b)-a
                    return minusSym(b)
                elseif b == :($d * $c) #(a-b)-b
                    return subSym(a,mulSym(b,2))
                elseif x == c #x-(x*d)
                    return minusSym(mulSym(x,subSym(d,1)))
                elseif x == d #x-(c*x)
                    return minusSym(mulSym(x,subSym(c,1)))
                elseif :($b - $a) == c #(a-b)-((b-a)*d)
                    return minusSym(mulSym(c,addSym(d,1)))
                elseif :($b - $a) == d #(a-b)-(c*(b-a))
                    return minusSym(mulSym(d,addSym(c,1)))
                end
            end
        elseif opy == :/
            if lxa == 3 #(a-b)-(c/d)
                a,b = xa[2],xa[3]
                c,d = ya[2],ya[3]
                if a == c #(a-b)-(a/d))
                    return minusSym(addSym(mulSym(a,subSym(divSym(1,d),1)),b))
                elseif b == c #(a-b)-(b/d)
                    return subSym(a,mulSym(b,addSym(divSym(1,d),1)))
                elseif x == c #c-(c/d)
                    return minusSym(mulSym(c,subSym(divSym(1,d),1)))
                elseif :($b - $a) == c #-c-(c/d)
                    return minusSym(mulSym(c,addSym(divSym(1,d),1)))
                end
            end
        end
        if lxa == 2 #(-a)-y
            return minusSym(addSym(xa[2],y))
        elseif lxa == 3 #(a-b)-y
            if xa[2] == y #(y-b)-y
                return minusSym(xa[3])
            elseif xa[3] == y #(a-y)-y
                return subSym(xa[2],mulSym(y,2))
            end
            return subSym(xa[2],addSym(xa[3],y))
        end
    end
    if opy == :-
        if opx == :+
            if lya == 3 #(a+b)-(c-d)
                a,b = xa[2],xa[3]
                c,d = ya[2],ya[3]
                if a == c #(a+b)-(a-d)
                    if b == d #(a+b)-(a-b)
                        return mulSym(b,2)
                    end
                    return addSym(b,d)
                elseif b == c #(a+b)-(b-d)
                    if a == d #(a+b)-(b-a)
                        return mulSym(a,2)
                    end
                    return addSym(a,d)
                elseif a == d #(a+b)-(c-a)
                    return subSym(addSym(mulSym(a,2),b),c)
                elseif b == d #(a+b)-(c-b)
                    return addSym(addSym(mulSym(b,2),a),c)
                elseif c == :($b + $a) #c-(c-d)
                    return d
                elseif d == :($b + $a) #d-(c-d)
                    return subSym(mulSym(d,2),c)
                end
            end
        elseif opx == :*
            if lya == 3 #(a*b)-(c-d)
                a,b = xa[2],xa[3]
                c,d = ya[2],ya[3]
                if a == c #(a*b)-(a-d))
                    return addSym(mulSym(a,subSym(b,1)),d)
                elseif b == c #(a*b)-(b-d)
                    return addSym(mulSym(b,subSym(a,1)),d)
                elseif a == d #(a*b)-(c-a)
                    return subSym(mulSym(a,addSym(b,1)),c)
                elseif b == d #(a*b)-(c-b)
                    return subSym(mulSym(b,addSym(a,1)),c)
                elseif c == :($b * $a) # c-(c-d)
                    return d
                elseif d == :($b * $a) #d-(c-d)
                    return subSym(mulSym(d,2),c)
                elseif y == a #(y*b)-y
                    return mulSym(y,subSym(b,1))
                elseif y == b #(a*y)-y
                    return mulSym(y,subSym(a,1))
                elseif :($d - $c) == a #((d-c)*b)-(c-d)
                    return mulSym(a,addSym(b,1))
                elseif :($d - $c) == b #(a*(d-c))-(c-d)
                    return mulSym(b,addSym(a,1))
                end
            end
        elseif opx == :/
            if lya == 3 #(a/b)-(c-d)
                a,b = xa[2],xa[3]
                c,d = ya[2],ya[3]
                if a == c #(a/b)-(a-d))
                    return addSym(mulSym(a,subSym(divSym(1,b),1)),d)
                elseif a == d #(a/b)-(c-a)
                    return subSym(mulSym(a,addSym(divSym(1,b),1)),c)
                elseif y == a #(a/b)-a
                    return mulSym(a,subSym(divSym(1,b),1))
                elseif :($d - $c) == a #(a/b)+a
                    return mulSym(a,addSym(divSym(1,b),1))
                end
            end
        end
        if lya == 2 #x-(-c)
            return addSym(x,ya[2])
        elseif lya == 3 #x-(c-d)
            if x == ya[2] #x-(x-d)
                return ya[3]
            elseif x == ya[3] #x-(c-x)
                return subSym(mulSym(x,2),ya[2])
            end
            return subSym(addSym(x,ya[3]),ya[2])
        end
    end

    if opx == :+
        a,b = xa[2],xa[3]
        if a == y #(y+b)-y
            return b
        elseif b == y #(a+y)-y
            return a
        end
    end
    if opy == :+
        c,d = ya[2],ya[3]
        if c == x #x-(x+d)
            return minusSym(d)
        elseif d == x #x-(c+x)
            return minusSym(c)
        end
    end

    if opx == :*
        a,b = xa[2],xa[3]
        if a == y #y*b-y
            return mulSym(y,subSym(b,1))
        elseif b == y #a*y-y
            return mulSym(y,subSym(a,1))
        end
    end
    if opy == :*
        c,d = ya[2],ya[3]
        if c == x #x-x*d
            return minusSym(mulSym(x,subSym(d,1)))
        elseif d == x #x-c*x
            return minusSym(mulSym(x,subSym(c,1)))
        end
    end

    if opx == :/
        a,b = xa[2],xa[3]
        if a == y #y/b-y
            return mulSym(y,subSym(divSym(1,b),1))
        end
    end
    if opy == :/
        c,d = ya[2],ya[3]
        if c == x #x-x/d
            return minusSym(mulSym(x,subSym(divSym(1,d),1)))
        end
    end
    l3ops = (:+, :*, :/)
    if opx in l3ops && opy in l3ops
        a,b = xa[2],xa[3]
        c,d = ya[2],ya[3]
        if opx == :+ #(a+b)-y
            if opy == :+ #(a+b)-(c+d)
                if a == c #(a+b)-(a+d)
                    return subSym(b,d)
                elseif a == d #(a+b)-(c+a)
                    if b == c #(a+b)-(b+a)
                        return 0
                    end
                    return subSym(b,c)
                elseif b == c #(a+b)-(b+d)
                    return subSym(a,d)
                elseif b == d #(a+b)-(c+b)
                    return subSym(a,c)
                elseif isa(a,BaseReals)
                    if isa(c,BaseReals) #(a+b)-(c+d)
                        return subSym(addSym(b,subSym(a,c)),d)
                    elseif isa(d,BaseReals) #(a+b)-(c+d)
                        return subSym(addSym(b,subSym(a,d)),c)
                    end
                elseif isa(b,BaseReals)
                    if isa(c,BaseReals) #(a+b)-(c+d)
                        return subSym(addSym(a,subSym(b,c)),d)
                    elseif isa(d,BaseReals) #(a+b)-(c+d)
                        return subSym(addSym(a,subSym(b,d)),c)
                    end
                end
            elseif opy == :* #(a+b)-(c*d)
                if a == c #(a+b)-(a*d)
                    return subSym(b,mulSym(a,subSym(d,1)))
                elseif a == d #(a+b)-(c*a)
                    return subSym(b,mulSym(a,subSym(c,1)))
                elseif b == c #(a+b)-(b*d)
                    return subSym(a,mulSym(b,subSym(d,1)))
                elseif b == d #(a+b)-(c*b)
                    return subSym(a,mulSym(b,subSym(c,1)))
                elseif :($b+$a) == c #x-(x*d)
                    return minusSym(mulSym(x,subSym(d,1)))
                elseif :($b+$a) == d #x-(c*x)
                    return minusSym(mulSym(x,subSym(c,1)))
                elseif :($d*$c) == a #(a+b)-a
                    return b
                elseif :($d*$c) == b #(a+b)-b
                    return a
                end
            elseif opy == :/ #(a+b)-(c/d)
                if a == c #(a+b)-(a/d)
                    return subSym(b,mulSym(a, subSym(1, divSym(1,d))))
                elseif b == c #(a+b)-(b/d)
                    return subSym(a,mulSym(b, subSym(1, divSym(1,d))))
                elseif :($b+$a) == c #x-(x/d)
                    return mulSym(x, subSym(1, divSym(1,d))))
                end
            end
        elseif opx == :*
            if opy == :+ #(a*b)-(c+d)
                if a == c #(a*b)-(a+d)
                    return subSym(mulSym(a,subSym(b,1)),d)
                elseif a == d #(a*b)-(c+a)
                    return subSym(mulSym(a,subSym(b,1)),c)
                elseif b == c #(a*b)-(b+d)
                    return subSym(mulSym(b,subSym(a,1)),d)
                elseif b == d #(a*b)-(c+b)
                    return subSym(mulSym(b,subSym(a,1)),c)
                elseif :($d+$c) == a #(a*b)-a
                    return mulSym(a,subSym(b,1))
                elseif :($d+$c) == b #(a*b)-b
                    return mulSym(b,subSym(a,1))
                elseif :($b*$a) == c #x-(x+d)
                    return minusSym(d)
                elseif :($b*$a) == d #x-(c+x)
                    return minusSym(c)
                end
            elseif opy == :* #(a*b)-(c*d)
                if a == c #(a*b)-(a*d)
                    return mulSym(a,subSym(b,d))
                elseif b == c #(a*b)-(b*d)
                    if a == d #(a*b)-(b*a)
                        return 0
                    end
                    return mulSym(b,subSym(a,d))
                elseif a == d #(a*b)-(c*a)
                    return mulSym(a,subSym(b,c))
                elseif b == d #(a*b)-(c*b)
                    return mulSym(b,subSym(a,c))
                elseif :($d*$c) == a #(a*b)-a
                    return mulSym(a,subSym(b,1))
                elseif :($d*$c) == b #(a*b)-b
                    return mulSym(b,subSym(a,1))
                elseif :($b*$a) == c #x-(x*d)
                    return minusSym(mulSym(x,subSym(d,1)))
                elseif :($b*$a) == d #x-(c*x)
                    return minusSym(mulSym(x,subSym(c,1)))
                end
            elseif opy == :/ #(a*b)-(c/d)
                if a == c #(a*b)-(a/d)
                    return minusSym(mulSym(a,subSym(divSym(1,d),b)))
                elseif b == c #(a*b)-(b/d)
                    return minusSym(mulSym(b,subSym(divSym(1,d),a)))
                elseif :($b*$a) == c #x-(x/d)
                    return minusSym(mulSym(x,subSym(divSym(1,d),1)))
                end
            end
        elseif opx == :/
            if opy == :+ #(a/b)-(c+d)
                if a == c #(a/b)-(a+d)
                    return subSym(mulSym(a,subSym(divSym(1,b),1)),d)
                elseif a == d #(a/b)-(c+a)
                    return subSym(mulSym(a,subSym(divSym(1,b),1)),c)
                elseif :($d+$c) == a #(a/b)-a
                    return mulSym(a,subSym(divSym(1,b),1))
                end
            elseif opy == :* #(a/b)-(c*d)
                if c == a #(a/b)-(a*d)
                    return mulSym(a,subSym(divSym(1,b),d))
                elseif d == a #(a/b)-(c*a)
                    return mulSym(a,subSym(divSym(1,b),c))
                elseif :($d*$c) == a #(a/b)-a
                    return mulSym(a,subSym(divSym(1,b),1))
                end
            elseif opy == :/ #(a/b)-(c/d)
                if b == d #(a/b)-(c/b)
                    return divSym(subSym(a,c),b)
                elseif a == c #(a/b)-(a/d)
                    return mulSym(a,subSym(divSym(1,b),divSym(1,d)))
                end
            end
        end
    end
    return :($x-$y)
end

function minusSym(x::Expr)
    xa  = x.args
    opx = xa[1]
    lxa = length(xa)
    if opx == :-
        if lxa==2
            return xa[2]
        elseif lxa==3
            return subSym(xa[3],xa[2])
        end
    end
    return :(-$x)
end
