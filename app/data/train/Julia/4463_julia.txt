module ControlFlow
export loops

# Various loops and other basic control flow
function loops(start::Integer, finish::Integer; operator::Function= +, amount::AbstractFloat=2)
  # Begin statement
  array = begin
      x = 0
      y = collect(1:5)
      x = x .+ y
      x .+ y
  end

  # Semi-colon
  array2 = (x = ones(5,5); y = x - 2; y .* rand(1:100, 5, 5))

  # Weird evaluation statements
  print("Short circuit &&: ")
  true && println(array[1,1])
  print("Short circuit ||: ")
  false || println(array2[1,1])

  # While loop
  println("\nWhile loop")
  i = start
  while i < finish
    array = operator(array, amount)
    println(array[1,1])
    i += 1
  end

  # Standard for loop
  println("\nFor loop")
  for i = start:finish
    array2 = operator(array2, amount)
    println(array2[1,1])
  end

  # For in loop
  # Won't actually work if there are duplicate values, but that's not a major concern here.
  # The find isn't actually necessary, of course.
  println("\nFor in loop")
  for i in array2
    @printf "Value %f found at %d.\n" i findfirst(array2, i)
  end

end

# Error handling
function errors()
  println("\nTesting out some errors now.")
  try
    println(sqrt(4))
    println("That worked.")
  catch
    println("Somehow math is broken")
  end

  try
    println(sqrt(-4))
    println("That worked. Math is broken again.")
  catch
    println("Oops")
    println(sqrt(complex(-4,0)))
  end
end

end
