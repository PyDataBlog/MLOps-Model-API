#
# Note (09.08.2017): This script to be from the first version of the Pccf (SDM-16).
#                    Which was adapted from Clojure code.
#
# Confirm PCCF by simulation
#
include("./pccf.jl")
#using PyPlot
#p=plot(freqs)
#savefig(outf)
using Gadfly
#=
function local_pccf_exact(T, mu, sigma)
    # local copy, which exactly match experimantsl results
    t = 1:T
    chp_probs = zeros(T)
    for dist_i in 1:T
        dist = Normal(dist_i * mu, sqrt(dist_i*sigma^2))
        chp_probs += pdf(dist, t)
    end
    # normalize(chp_probs)
    chp_probs
end
=#
function simulate_pccf(outf::AbstractString)
    T     = 1000 # process length
    nchps = T # maximum possible number of changes
    mu    = 50.0; sd = 5.0
    nbins = 1001 # number of bins
    nsim  = 5000

    freqs = zeros(nbins)
    edges = 0:(T/nbins):T

    for i in 1:nsim
        changes = cumsum(randn(nchps)*sd + mu)
        h       = hist(changes, edges)
        freqs   += h[2]
    end

    freqs=freqs/nsim
    exact=Pccf.pccf(T,mu,sd)
    freqs_message_passing = Pccf.pccf_mp(T,mu,sd)

    if 1==1
        #
        # draw(SVG(outf, 20inch, 10inch), plot(
        #                                    layer(x=[1:length(freqs);],y=freqs,Geom.line,
        #                                          Theme(default_color=color("red"))),
        #
        #                                    layer(x=[1:length(exact);],y=exact,Geom.line,
        #                                          Theme(default_color=color("blue")))
        #
        #                                    #layer(x=[1:length(freqs_message_passing );],y=freqs_message_passing,Geom.line,
        #                                     #     Theme(default_color=color("grey")))
        #
        #      , Coord.Cartesian(xmin=0, xmax=T, ymin=0)))

        draw(SVG("../img/pccf_sim1.svg", 20inch, 10inch), plot(x=[1:length(freqs);], y=freqs, Geom.line, Coord.Cartesian(xmin=0, xmax=T, ymin=0, ymax=0.08)))
        draw(SVG("../img/pccf_sim2.svg", 20inch, 10inch), plot(x=[1:length(exact);], y=exact, Geom.line))
        draw(SVG("../img/pccf_sim3.svg", 20inch, 10inch), plot(x=[1:length(freqs_message_passing );],y=freqs_message_passing,Geom.line))
    end
end
simulate_pccf("../img/pccf_sim.svg")
