/*
 *  EditExprView.scala
 *  (LucreSwing)
 *
 *  Copyright (c) 2014-2021 Hanns Holger Rutz. All rights reserved.
 *
 *	This software is published under the GNU Affero General Public License v3+
 *
 *
 *	For further information, please contact Hanns Holger Rutz at
 *	contact@sciss.de
 */

package de.sciss.lucre.swing.edit

import de.sciss.lucre.edit.UndoManager
import de.sciss.lucre.edit.impl.BasicUndoableEdit
import de.sciss.lucre.expr.CellView
import de.sciss.lucre.{Source, Txn}

object EditCellView {
  def apply[T <: Txn[T], A](name: String, cell: CellView.VarR[T, A], value: A)
                           (implicit tx: T, undoManager: UndoManager[T]): Unit = {
    import cell.format
    val beforeH = tx.newHandle(cell.repr)
    val res     = new Impl[T, A, cell.Repr](name, cell)(beforeH = beforeH, now = value) // IntelliJ highlight bug
    res.perform()
    undoManager.addEdit(res)
  }

  private final class Impl[T <: Txn[T], A, Repr0](val name: String, cell: CellView.VarR[T, A] { type Repr = Repr0 })
                                                 (beforeH: Source[T, Repr0], now: A)
    extends BasicUndoableEdit[T] {

    override protected def undoImpl()(implicit tx: T): Unit =
      cell.repr = beforeH()

    override protected def redoImpl()(implicit tx: T): Unit =
      perform()

    def perform()(implicit tx: T): Unit =
      cell.repr = cell.lift(now)
  }
}