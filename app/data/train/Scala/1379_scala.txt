/*
 * Copyright (c) 2018 OVO Energy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.ovoenergy.comms.model
package print

import java.time.Instant

import com.ovoenergy.comms.KafkaMessage
import com.ovoenergy.comms.model._
import com.ovoenergy.comms.model.types.OrchestratedEventV2
import com.sksamuel.avro4s.{AvroDoc, SchemaFor}

@KafkaMessage
case class OrchestratedPrint(
    metadata: MetadataV2,
    internalMetadata: InternalMetadata,
    @AvroDoc("Customer profile data") customerProfile: Option[CustomerProfile],
    @AvroDoc("Customer address data") address: CustomerAddress,
    @AvroDoc("Data to populate print template") templateData: Map[String, TemplateData],
    @AvroDoc(
      """
        A timestamp denoting a time after which the comm should no longer be sent. Value is milliseconds since Unix Epoch - UTC time.
        Note: the expiry will be checked "just in time", i.e. directly before issuing to the gateway used to deliver the comm, however,
        once issued to the gateway the expiry time will no longer be adhered to and hence may be delivered after the specified time.
        If the timestamp is in the past, the comm will be disregarded.
        If no value is set, the comm will never expire.
        """
    ) expireAt: Option[Instant]
) extends LoggableEvent
    with OrchestratedEventV2 {

  override def loggableString: Option[String] =
    prettyPrint(this, Seq("customerProfile", "templateData"))

  override def mdcMap: Map[String, String] = combineMDCS(metadata.mdcMap, internalMetadata.mdcMap)
}

object OrchestratedPrint {

  implicit val schemaFor: SchemaFor[OrchestratedPrint] = SchemaFor[OrchestratedPrint]
}
