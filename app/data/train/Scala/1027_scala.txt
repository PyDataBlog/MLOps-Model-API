package de.choffmeister.microserviceutils.auth.consumer.utils

import io.jsonwebtoken.SignatureAlgorithm
import io.jsonwebtoken.security.Keys
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec

class SignatureAlgorithmUtilsTest extends AnyWordSpec with Matchers {
  import de.choffmeister.microserviceutils.auth.consumer.utils.SignatureAlgorithmUtils._

  "writes and reads key pairs in .pem format" in {
    def test(algo: SignatureAlgorithm, keyFactoryAlgorithm: String) = {
      val keyPair = Keys.keyPairFor(algo)

      val privateKeyString = writePrivateKey(keyPair.getPrivate())
      val privateKeyString2 = writePrivateKey(readPrivateKey(privateKeyString, keyFactoryAlgorithm).get)
      privateKeyString2 should be(privateKeyString)

      val publicKeyString = writePublicKey(keyPair.getPublic())
      val publicKeyString2 = writePublicKey(readPublicKey(publicKeyString, keyFactoryAlgorithm).get)
      publicKeyString2 should be(publicKeyString)
    }

    test(SignatureAlgorithm.RS256, "RSA")
    test(SignatureAlgorithm.ES256, "EC")
  }
}
