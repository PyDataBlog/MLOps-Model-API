package shredzzz.kirkwood.junit.matchers

import breeze.linalg.DenseVector
import org.hamcrest.{BaseMatcher, Description}

class ApproximateDenseVectorMatcher[A](expected: DenseVector[A], delta: A, num: Numeric[A]) extends BaseMatcher[DenseVector[A]]
{
  def describeTo(description: Description) {
    description.appendValue(expected.toString()).appendText(" (+/- ").appendValue(delta).appendText(")")
  }

  def matches(item: AnyRef) = {
    val actual = item.asInstanceOf[DenseVector[A]]
    if (actual == null && expected == null) {
      true
    } else if (actual == null || expected == null) {
      false
    } else if (actual.length != expected.length) {
      false
    } else {
      var mismatch = false
      for (
        i <- 0 until actual.length
        if !mismatch
      ) {
        val lowerBound = num.minus(expected(i), delta)
        val upperBound = num.plus(expected(i), delta)
        mismatch = num.lt(actual(i), lowerBound) || num.gt(actual(i), upperBound)
      }
      !mismatch
    }
  }
}
