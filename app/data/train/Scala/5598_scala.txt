package knot.net.http.rendering

import java.text.{DecimalFormat, DecimalFormatSymbols}
import java.util.Locale

import scala.collection.{LinearSeq, immutable}

object Rendering {
  val floatFormat = new DecimalFormat("0.0##", DecimalFormatSymbols.getInstance(Locale.ROOT))
}

trait Rendering {
  def ~(value: Char): this.type

  def ~(value: String): this.type = {
    def loop(idx: Int = 0): this.type = {
      if (idx < value.length) {
        this ~ value.charAt(idx)
        loop(idx + 1)
      } else {
        this
      }
    }

    loop()
  }

  def ~(value: Int): this.type = this ~ value.toLong

  def ~(value: Long): this.type = if (value != 0L) this ~ value.toString else this ~ '0'

  def ~(value: Float): this.type = this ~ Rendering.floatFormat.format(value)

  def ~(value: Renderable): this.type = value.render(this)

  def ~(values: immutable.Seq[Renderable]): this.type = {
    val separator = Renderable.`, `

    def loopL(remaining: LinearSeq[Renderable]): this.type = {
      if (remaining.nonEmpty) {
        if (remaining ne values) this ~ separator
        this ~ remaining.head
        loopL(remaining.tail)
      } else this
    }

    def loop(seq: immutable.Seq[Renderable], idx: Int = 0): this.type = {
      if (idx < values.size) {
        if (idx > 0) this ~ separator
        this ~ seq(idx)
        loop(seq, idx + 1)
      } else this
    }

    values match {
      case Nil => this
      case s: LinearSeq[Renderable] => loopL(s)
      case _ => loop(values)
    }
  }

}
