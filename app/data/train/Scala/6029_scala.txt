/**
  * Copyright 2017 Andrew Robert McBurney. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may
  * not use this file except in compliance with the License. You may obtain
  * a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
package ca.andrewmcburney.skeleton

// Skeleton imports
import ca.andrewmcburney.skeleton.Globals._

// Other imports
import better.files._

/**
  * Main entry-point for Skeleton command line interface
  *
  * - Parser parses command line arguments passed in. If the arguments match
  *   some arbitrary configuration specifiable by the parser
  * - Executes an action dependent on the mode set during configuration
  */
object Main {

  def main(args: Array[String]): Unit = {
    Parser.parser.parse(args, Config()) match {
      case None ⇒ Unit
      case Some(config) ⇒ {
        Skeleton.configureVariables(defaultVariables ++ config.variables)

        // Match skeleton command, and execute corresponding function action
        config.mode match {
          case "configure" ⇒ Skeleton.configureFile(config.extension)
          case "compose" ⇒
            Skeleton.composeFiles(
              config.files.map(_.toScala),
              config.outputPath.toScala.path
            )
          case "generate" ⇒
            Skeleton.generateDirectory(
              config.folder.toScala,
              config.outputPath.toScala.path
            )
          case _ ⇒ Skeleton.processFile(config.file.toScala)
        }
      }
    }
  }

}
