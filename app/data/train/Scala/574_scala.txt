package endpoints

import akka.event.NoLogging
import akka.http.scaladsl.model.StatusCodes.OK
import akka.http.scaladsl.testkit.ScalatestRouteTest
import domain.codes.{CodesList, CodesListName}
import domain.errors.ErrorCode
import org.scalatest._
import org.scalatest.mock.MockitoSugar
import services.soap.LinkonGtsSalesConnector

import scala.concurrent.Future

class ConsumersCategoriesHttpEndpointSpec extends FlatSpec with Matchers with ScalatestRouteTest with ConsumersCategoriesHttpEndpoint with MockitoSugar {
  override val logger = NoLogging

  override def testConfigSource = "akka.loglevel = WARNING"

  override def config = testConfig


  "Consumers categories" should "respond with all available" in {
    Get("/metadata/consumers-categories") ~> routes ~> check {
      status shouldBe OK
    }
  }

  override def linkonService = new LinkonServiceForTests

  trait ItineraryConsumerCategoriesTestValues {

    val itineraryConsumerCategories =
      """
        |{
        | codes_lists: [{
        |   name: "Itinerary consumers categories",
        |   codes: [
        |      { code: "VU", description: "Adult" },
        |      { code: "BA", description: "Child 0-6 years" },
        |      { code: "B6", description: "Child 7-15 years" },
        |      { code: "U1", description: "Youth 16-19 years" },
        |      { code: "UN", description: "Youth 20-25 years" },
        |      { code: "ST", description: "Student" },
        |      { code: "PE", description: "Senior" }
        |    ]
        | }]
        |}
      """.stripMargin
  }

  class LinkonServiceForTests extends LinkonGtsSalesConnector {
    override def codes(codes: CodesListName): Future[Either[Seq[CodesList], List[ErrorCode]]] = Future(Left(Seq()))
  }

}
