package info.mornlight.oneopus

import javafx.scene.control.{TreeItem, TreeView}
import java.io.File
import javafx.scene.image.Image
import scala.collection.JavaConversions.asJavaCollection
import javafx.collections.ObservableList
import java.nio.file.Files

private class LazyFileItem(file: File, var loaded: Boolean) extends TreeItem[File](file) {
  def this(file: File) = this(file, false)


  val leaf = {
    try {
      file.list().length == 0
    } catch {
      case _: Throwable => println(file.toString)
        true
    }

    true
  }

  override def getChildren: ObservableList[TreeItem[File]] = {
    if(!loaded && !leaf) {
      loadChildren()
      loaded = true
    }
    
    super.getChildren
  }

  //todo needs better way to detect whether directory is empty
  override def isLeaf: Boolean = leaf

  def loadChildren() {
    val files = getValue.list().map { name => new File(getValue, name) }.filter( f => f.isDirectory ).filter( f => Files.isReadable(f.toPath) )
    super.getChildren.addAll(files.map { f => new LazyFileItem(f) }.toIterable)
  }
}

class DirectoryPane extends TreeView[File] {
  initUi()
  buildTree()

  //val iconFolder = new Image(getClass.getResourceAsStream("folder_16.png"))

  def initUi() {
    setShowRoot(false)
  }

  def buildTree() {
    val root = new TreeItem[File] (new File("Root"))
    root.setExpanded(true);

    val computer = new TreeItem[File](new File("Computer"))
    val desktop = new TreeItem[File](new File("Desktop"))
    root.getChildren.addAll(desktop, computer)

    //enumerate drivers
    val driverRoots = File.listRoots()
    val items = driverRoots.map { driverRoot => new LazyFileItem(driverRoot) }
    computer.getChildren.addAll(items.toIterable)

    setRoot(root)
  }
}
