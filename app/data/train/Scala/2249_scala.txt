package com.gravity.gdk.util.http

import java.util
import javax.servlet.http.HttpServletRequest

import com.gravity.gdk.util.test.GdkTest
import org.scalamock.scalatest.MockFactory
import org.scalamock.util.Defaultable

/*
              ___...---''
  ___...---'\'___
''       _.-''  _`'.______\\.
        /_.)  )..-  __..--'\\
       (    __..--''
        '-''\@


 Ⓐ Ⓐ Ⓐ Ⓐ Ⓐ Ⓐ Ⓐ Ⓐ Ⓐ Ⓐ Ⓐ
*/

class RichHttpServletRequestTest extends GdkTest with MockFactory {
  /** Boilerplate for helping stub HttpServletRequest */
  object DefaultableJavaEnumeration extends Defaultable[util.Enumeration[_]] {
    override val default: util.Enumeration[_] = null
  }

  /** Boilerplate for helping stub HttpServletRequest */
  object DefaultableJavaMap extends Defaultable[util.Map[_, _]] {
    override val default: util.Map[_, _] = null
  }

  "RichHttpServletRequest" can "getRequestURLWithQueryString" in {
    assertGetRequestyURLWithQueryString("http://example.com", "", "http://example.com")
    assertGetRequestyURLWithQueryString("http://example.com", "foo=bar", "http://example.com?foo=bar")
    assertGetRequestyURLWithQueryString("http://example.com/", "foo=bar&baz=123", "http://example.com/?foo=bar&baz=123")
  }

  def assertGetRequestyURLWithQueryString(url: String, queryString: String, expected: String): Unit = {
    val mockRequest = stub[HttpServletRequest]
    (mockRequest.getRequestURL _).when().returns(new StringBuffer(url))
    (mockRequest.getQueryString _).when().returns(queryString)

    val richRequest = new RichHttpServletRequest(mockRequest)

    richRequest.getRequestURLWithQueryString should be(expected)
  }
}
