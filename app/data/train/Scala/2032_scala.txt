package com.chitingraphics.stingray.entities

import com.chitingraphics.stingray.utils.{Ar, Color}

abstract class Geometric extends Entity {
  def setColor(newColor: Color): Entity
  final def setColor(r: Ar.RealType, g: Ar.RealType, b: Ar.RealType): Entity = setColor(Color(r, g, b))
}

case class Mesh(private val transformation: Ar = Ar.eye(4), private val color: Color = Color.white()) extends Geometric {

  override def matrix(): Ar = transformation
  override def setMatrix(newMatrix: Ar): Entity = this.copy(transformation = newMatrix)
  override def setColor(newColor: Color): Entity = this.copy(color = newColor)

}

case class Plane(private val transformation: Ar = Ar.eye(4), private val color: Color = Color.white()) extends Geometric {

  override def matrix(): Ar = transformation
  override def setMatrix(newMatrix: Ar): Entity = this.copy(transformation = newMatrix)
  override def setColor(newColor: Color): Entity = this.copy(color = newColor)

}

case class Sphere(private val transformation: Ar = Ar.eye(4), private val color: Color = Color.white()) extends Geometric {

  override def matrix(): Ar = transformation
  override def setMatrix(newMatrix: Ar): Entity = this.copy(transformation = newMatrix)
  override def setColor(newColor: Color): Entity = this.copy(color = newColor)

}
