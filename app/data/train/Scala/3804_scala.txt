package com.bigm.bot.services

import ai.api.model.{AIRequest, AIResponse}
import ai.api.{AIConfiguration, AIDataService}
import akka.actor.ActorSystem
import akka.event.LoggingAdapter
import akka.stream.Materializer
import com.google.inject.Inject
import com.typesafe.config.Config

import scala.concurrent.Future

class ApiAiService @Inject()(config: Config,
                             logger: LoggingAdapter,
                             implicit val system: ActorSystem,
                             implicit val fm: Materializer) {

  import system.dispatcher

  private val clientAccessToken = config.getString("ai.api.access.token")
  private val configuration = new AIConfiguration(clientAccessToken)
  private val dataService = new AIDataService(configuration)

  def getIntent(text: String): Future[AIResponse] = {
    logger.info("ApiAiService getting intent of [{}]", text)
    Future {
      try {
        val request = new AIRequest(text)
        val response = dataService.request(request)
        val r = if (response.getStatus.getCode == 200) {
          response
        } else {
          throw new RuntimeException(response.getStatus.getErrorDetails)
        }
        logger.debug("API.ai:\n{}", r)
        r
      } catch {
        case e: Throwable =>
          logger.error(e, e.getMessage)
          throw new RuntimeException(e.getMessage, e)
      }
    }
  }
}
