package lib.neo4j

import lib.joda._
import scala.language.implicitConversions

package object data {
  import org.neo4j.graphdb._
  import org.neo4j.graphdb.index.Index
  
  type Node = org.neo4j.graphdb.Node
  type Relationship = org.neo4j.graphdb.Relationship
  type RelationshipType = org.neo4j.graphdb.RelationshipType
  
  def escape(str: String) = "`" + str + "`"
  
  def convert(data: Any): Option[Any] = data match {
    case None => None
    case net.flatmap.ace.Unassigned => None
    case net.flatmap.ace.Assigned(x) => convert(x)
    case d: org.joda.time.LocalDate => Some(toLong(d))
    case t: org.joda.time.LocalTime => Some(toLong(t))
    case dt: org.joda.time.LocalDateTime => Some(toLong(dt))
    case Some(x) => convert(x)
    case x => Some(x)
  }
  
  def property(columnName: String) =
    Parser.getProperty(columnName)
  def property[T](columnName: String, propertyName: String)(implicit transformer: net.flatmap.ace.Column[T]) =
    Parser.getProperty(columnName, propertyName)(transformer)
  def propertyOpt[T](columnName: String, propertyName: String)(implicit transformer: net.flatmap.ace.Column[T]) =
    Parser.getPropertyOpt(columnName, propertyName)(transformer)
  
  /** Implicitly converts a `Node` into a [[lib.neo4j.data.RichNode]]. */
  implicit def node2RichNode(node: Node): RichNode = RichNode(node)
  
  /** Implicitly converts a `Relationship` into a [[lib.neo4j.data.RichRelationship]]. */
  implicit def relationship2RichRelationship(relationship: Relationship): RichRelationship = RichRelationship(relationship)
  
  /** Implicitly converts a [[lib.neo4j.data.RichNode]] into a `Node`. */
  private[data] implicit def richNode2Node(richNode: RichNode): Node = richNode.base
  
  /** Implicitly converts a `String` into a [[lib.neo4j.data.RelationshipType]]. */
  implicit def string2RelationshipType(name: String) = DynamicRelationshipType.withName(name)
  
  /** Implicitly converts a [[lib.neo4j.data.RichRelationship]] into a `Relationship`. */
  private[data] implicit def richRelationship2relation(richRelationship: RichRelationship): Relationship = richRelationship.base
  
  /** Implicitly converts an `Index` into a [[lib.neo4j.data.RichIndex]]. */
  implicit def index2RichIndex[T <: PropertyContainer](index: Index[T]): RichIndex[T] = RichIndex(index)
}