package lib.reasoner.analysis

import scala.collection.mutable.HashMap
import scala.collection.mutable.Stack

class BindMap[A]() extends HashMap[String, Stack[A]] {
  
  def isBound(key: String): Boolean =
    this.get(key) match {
      case Some(stack) => !stack.isEmpty
      case None => false
    }
  
  def bind(kvs: (String, A)*): BindMap[A] = {
    for((key, value) <- kvs) {
      this.get(key) match {
        case Some(stack) => stack.push(value)
        case None => this.put(key, Stack(value))
      }
    }
    this
  }
  
  def unbind(ks: String*): BindMap[A] = {
    for(key <- ks) {
      this.get(key).foreach {
        case stack => this.put(key, stack.drop(1))
      }
    }
    this
  }
  
  def resolve(key: String): Option[A] =
    this.get(key).flatMap(_.headOption)
  
  def resolveAs[B](key: String): Option[B] =
    this.resolve(key).map(_.asInstanceOf[B])
}

object BindMap {
  
  def apply[A](kvs: (String, A)*): BindMap[A] =
    BindMap.empty[A].bind(kvs:_*)
  
  def empty[A]: BindMap[A] =
    new BindMap[A]()
}