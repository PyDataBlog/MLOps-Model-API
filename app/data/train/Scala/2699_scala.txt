package edu.jingw.raytracer

case class Color(r: Double, g: Double, b: Double) {
  require(r >= 0 && g >= 0 && b >= 0)

  def isBlack: Boolean = r == 0 && g == 0 && b == 0

  def rgbInt(max: Double): Int = {
    val rInt = (math.min(r / max, 1) * 255).toInt
    val gInt = (math.min(g / max, 1) * 255).toInt
    val bInt = (math.min(b / max, 1) * 255).toInt
    (rInt << 16) + (gInt << 8) + bInt
  }

  def rgbInt: Int = rgbInt(1)

  def +(c: Color): Color = new Color(r + c.r, g + c.g, b + c.b)

  def *(c: Color): Color = new Color(r * c.r, g * c.g, b * c.b)

  def *(k: Double): Color = new Color(r * k, g * k, b * k)

  def /(k: Double): Color = new Color(r / k, g / k, b / k)

  override def toString: String = s"($r, $g, $b)"
}

object Color {
  val white = new Color(1, 1, 1)
  val black = new Color(0, 0, 0)

  val red = new Color(1, 0, 0)
  val green = new Color(0, 1, 0)
  val blue = new Color(0, 0, 1)

  val yellow = new Color(1, 1, 0)
  val cyan = new Color(0, 1, 1)
  val magenta = new Color(1, 0, 1)
}
