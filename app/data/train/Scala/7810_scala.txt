package autosteamgifts.contentscript.listing

import autosteamgifts.contentscript.AutoEnterToggle
import autosteamgifts.Implicits._
import org.scalajs.dom.document
import org.scalajs.dom.raw.{HTMLElement, TransitionEvent}

class Giveaway(val element: HTMLElement) extends autosteamgifts.Giveaway(element) {

  def setElementEliminationTransition(): Unit = {
    element.addEventListener("transitionend", { ev: TransitionEvent =>
      element.removeFromParent()
    })
    element.classList.add("disappear")
  }

  private lazy val entriesElement = element.query[HTMLElement](".giveaway__links").firstElementChild.children.apply(1)

  def entries: String = entriesElement.textContent

  def entries_=(value: String): Unit = {
    entriesElement.textContent = value
  }

  def entered_=(value: Boolean): Unit = {
    if (value) {
      innerElement.classList.add(EnteredClassName)
    } else {
      innerElement.classList.remove(EnteredClassName)
    }
  }

  def addAutoEnterToggle(updateUI: Boolean => Unit): Unit = {
    val columnsRow = element.query[HTMLElement](".giveaway__columns")
    AutoEnterToggle.addTo(columnsRow, game)(updateUI)
  }

  def autoEnterToggle: Option[AutoEnterToggle] = {
    AutoEnterToggle.getFrom(element)
  }

  private val EnterButtonClassName = "enter-button"

  class EnterButton(val element: HTMLElement) {
    private val RefreshIconClassName = "fa-refresh"
    private val DisabledClassName = "is-disabled"

    def disabled: Boolean = element.classList.contains(DisabledClassName)

    def isLoading: Boolean = element.firstElementChild.classList.contains(RefreshIconClassName)

    def setLoading(): Unit = {
      element.removeChildren()
      element.appendChild {
        val loadingElement = document.createElement("i").asInstanceOf[HTMLElement]
        loadingElement.classList.add("fa")
        loadingElement.classList.add(RefreshIconClassName)
        loadingElement.classList.add("fa-spin")
        loadingElement
      }
    }

    def update(username: String, userLevel: Int, userPoints: Int): Unit = {
      if (giverUsername == username) {
        setDisabled("Your own Giveaway")
      } else if (entered) {
        setEntered()
      } else if (userLevel < minUserLevel) {
        setDisabled(s"Level $minUserLevel Required")
      } else if (userPoints < requiredPoints) {
        setDisabled(s"Not Enough Points")
      } else {
        setNotEntered()
      }
    }

    private def setDisabled(text: String): Unit = {
      setClasses("sidebar__error", DisabledClassName)
      setText(text)
    }

    private def setEntered(): Unit = {
      setClasses("sidebar__entry-delete")
      setText("Leave")
    }

    private def setNotEntered(): Unit = {
      setClasses("sidebar__entry-insert")
      setText("Enter")
    }

    private def setClasses(classes: String*): Unit = {
      val classesToSet = (EnterButtonClassName +: classes).distinct
      val currentClasses = element.classList

      val classesToAdd = classesToSet diff currentClasses
      val classesToRemove = currentClasses diff classesToSet

      for (className <- classesToAdd) {
        element.classList.add(className)
      }
      for (className <- classesToRemove) {
        element.classList.remove(className)
      }
    }

    private def setText(text: String): Unit = {
      element.removeChildren()
      element.appendChild {
        val textElement = document.createSpanElement()
        textElement.textContent = text
        textElement
      }
    }
  }

  def addEnterButton(): EnterButton = {
    val button = document.createSpanElement()
    button.classList.add(EnterButtonClassName)
    innerElement.appendChild(button)
    val enterButton = new EnterButton(button)
    enterButton
  }

  def enterButton: Option[EnterButton] = {
    Option(innerElement.query[HTMLElement]("." + EnterButtonClassName)) map {
      new EnterButton(_)
    }
  }
}
