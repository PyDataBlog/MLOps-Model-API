package cwe.scala.library.math
import cwe.scala.library.boxes._
import cwe.scala.library.math.bignumbers.Integer
import cwe.scala.library.math.bignumbers.Natural

class PositiveRational[T] (numerator: T, denominator: T)(implicit nBox: Numeric[T]) 
	extends Rational[T](if(nBox.smaller(numerator, nBox.zero)) throw new IllegalArgumentException("numerator should be positive or null") else numerator, 
			denominator) {}
object PositiveRational {
	def ZERO = MathServiceProvider.getRationalOperationsService.ZERO
	def ONE = MathServiceProvider.getRationalOperationsService.ONE
	def create(n: Int, d: Int): PositiveRational[Int] = MathServiceProvider.createPositiveRational(n, d)
	def create(n: Long, d: Long): PositiveRational[Long] = MathServiceProvider.createPositiveRational(n, d)
	def create(n: Integer, d: Integer): PositiveRational[Integer] = MathServiceProvider.createPositiveRational(n, d)
	def create(n: Natural, d: Natural): PositiveRational[Natural] = MathServiceProvider.createPositiveRational(n, d)
	def create(n: Int): PositiveRational[Int] = MathServiceProvider.createPositiveRational(n, 1)
	def create(n: Long): PositiveRational[Long] = MathServiceProvider.createPositiveRational(n, 1)
	def create(n: Integer): PositiveRational[Integer] = MathServiceProvider.createPositiveRational(n, Integer.ONE)
	def create(n: Natural): PositiveRational[Natural] = MathServiceProvider.createPositiveRational(n, Natural.ONE)
	def create[T](n: T, d: T)(implicit nBox: Numeric[T]): PositiveRational[T] = MathServiceProvider.createPositiveRational(n, d)(nBox)
}