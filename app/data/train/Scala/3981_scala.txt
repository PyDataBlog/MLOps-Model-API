package kogu.spark.distribution.utils

case class GroupSummary(numRows: Long, numFeatures: Long)

case class Feature(statType: FeatureType, nullCount: Long = 0, uniqueCount: Long)

sealed trait FeatureType

case class Categorical(frequencyCount: Map[String, Int]) extends FeatureType


// graph is used to "draw" in UI
// graph - list of (x -> y) pairs
case class Continuous(stats: SummaryStats, graph: Map[String, Long]) extends FeatureType
case class Continuous2(stats: SummaryStats,
                       histogram: Map[String, Long],
                       deciles: Deciles,
                       percentiles: Percentiles) extends FeatureType

case class NGrams(source: String,
                  unigram: List[String],
                  bigram: List[String],
                  trigram: List[String]) {
  override def toString: String = {
    s"""
       |[source: $source,
       | unigram: $unigram,
       | bigram: $bigram,
       | trigram: $trigram]
     """.stripMargin
  }
}
case class Text(sampleSize: Int = 100, nGrams: List[NGrams]) extends FeatureType

case class NumericFeature(histogram: Option[Map[String, Int]] = None,
                          continuousStats: Continuous2) extends FeatureType {
  override def toString: String = {
    s"NumericFeature: histogram: ${histogram.getOrElse("-")}, distribution: $continuousStats"
  }
}

case object NativeDate extends FeatureType

// TODO: StringLyDate("hairy balls") type-checks but is WRONG!!!
// TODO(contd.): use appropriate type for supported date format
case class StringlyDate(dateFormat: String) extends FeatureType
object StringlyDates {
  val dateFormats = List("yyyyMMdd", "dd-MMM-yyyy")
  val dateTimeFormats = List("yyyy-MM-dd HH:mm:ss", "d/M/yyyy h:mm:ss a", "M/d/yyyy h:mm:ss a")
  val timeFormats = List("HH:mm:ss", "h:mm:ss a")

  val supportedFormats: List[String] = dateFormats ++ dateTimeFormats ++ timeFormats
}

case object JustString extends FeatureType
case object MaybeKey extends FeatureType
case object Unknown extends FeatureType

case class SummaryStats(average: Double, min: Double, max: Double, stdDev: Double) {
  override def toString: String = f"Summary: [$min%1.3f .... $average%1.3f|$stdDev%1.3f .... $max%1.3f]"
}

case class Percentiles(one: Double, ninetyFifth: Double, ninetyNinth: Double) {
  override def toString: String = f"[Percentiles: 1: $one%1.3f, 95: $ninetyFifth%1.3f, 99: $ninetyNinth%1.3f]"
}
case class Deciles(_10th: Double, _20th: Double, _30th: Double, _40th: Double,
                   _50th: Double, _60th: Double, _70th: Double, _80th: Double,
                   _90th: Double) {
  override def toString: String = f"[Deciles: 10: ${`_10th`}%1.3f, 20: ${`_20th`}%1.3f, 30: ${`_30th`}%1.3f, 40: ${`_40th`}%1.3f, 50: ${`_50th`}%1.3f, 60: ${`_60th`}%1.3f, 70: ${`_70th`}%1.3f, 80: ${`_80th`}%1.3f, 90: ${`_90th`}%1.3f]"
}
