/*----------------20171010------------------------*/
-- SQL语句
select * from emp;
--访问其他用户的表
select * from scott.emp;
/*
SELECT	*|{[DISTINCT] column|expression [alias],...}
FROM	table;
*/
select empno,ename 别名,job as 工作，hiredate "雇佣 时间" ,sal + 100 薪水 from emp;
--给空值提供一个默认nvl函数值
select empno, nvl(comm, 0) 福利 from emp;
--连接符||
select empno||ename employee from emp;
--字符串，日期类型 只能用单引号括起来，数字不用任何括号修饰
--删除重复行DISTINCT
select DISTINCT deptno from emp;

/*
创建表，删除表，修改表
1.oracle常用数据类型
                number(4, 2) 0.00- 9999.99
                number(4) 0-9999
                varchar2(10)可变长字符串类型
                date 日期类型
2.主键（primary key) 用于唯一标识表中的一行数据（实体）
3.创建表的命令
            creat table
*/
select * from TBL_TEACHER;

create table TBL_TEACHER
(TID number(4) primary key,
 TNAME varchar2(20),
 BRITHDAY date
);

--往表里插入数据
insert into TBL_TEACHER values(9527, '达文西', to_date('1995-12-14','yyyy-mm-dd'));

--修改数据
update TBL_TEACHER set TNAME = '达尔文' where TID = 9527;

--往表里指定列插入值
INSERT INTO tbl_teacher(tid, tname) VALUES(1007, '陈老师');

--删除表中的数据
DELETE FROM tbl_teacher WHERE tid = 1007;

--删除表
DROP TABLE tbl_teacher;

/*-------------------20171011-------------------------*/
/*----过滤和排序数据-----*/
/*SELECT	*|{[DISTINCT] column|expression [alias],...}
FROM	table
[WHERE	condition(s)];
*/
select * from emp;
SELECT * FROM emp WHERE deptno = 30;
--注意SQL不区分大小写，是指SQL关键字，表名，列表等。
--而数据表的数据是区分大小写的
SELECT * FROM emp WHERE job = 'SALESMAN';
--比较运算符 = ，>, >=, <, <=, <>(不等于)，!=(不等于)
SELECT * FROM emp WHERE sal > 2000;
--逻辑运算符 AND OR
SELECT * FROM emp WHERE sal <= 2000 OR sal >=4000;
SELECT * FROM emp WHERE sal >= 2000 AND sal >=4000;
--BETWEEN... AND...闭区间
SELECT * FROM emp WHERE sal BETWEEN 2000 AND 3000;
--IN(set)集合中的一个值
SELECT * FROM emp WHERE job IN('MANAGER');
--LIKE 模糊查找 通配符 代表一个字符 %代表多个字符[0, +∞);
--查找以A开头字母的雇员
SELECT * FROM emp WHERE ename LIKE 'A%';
SELECT * FROM emp WHERE ename LIKE '_IN%';
--IS NULL
SELECT * FROM emp WHERE mgr IS NULL;
--ESCAPE转义字符
INSERT INTO tbl_teacher(tid, tname) VALUES(5002, 'kebo_ente');
INSERT INTO tbl_teacher(tid, tname) VALUES(5003, 'kebo_ante');
INSERT INTO tbl_teacher(tid, tname) VALUES(5004, 'kebo_ente');
SELECT * FROM tbl_teacher WHERE tname LIKE '%o\_a%' ESCAPE '\';
/*
SELECT     *|{[DISTINCT] column|expression [alias],...}
FROM       table
[WHERE     condition(s)]
[ORDER BY  {column, expr, alias} [ASC|DESC]];
*/
--排序，默认升序ASC从小到大排序（可以省略）
SELECT * FROM emp ORDER BY sal ASC;
SELECT * FROM emp ORDER BY sal DESC;
SELECT * FROM emp ORDER BY job, sal;
--单行函数 function_name {(args1, args2,...)}
--字符型UPPER/LOWER/INITCAP
SELECT LOWER(ename), INITCAP(job) FROM emp;
SELECT empno, LPAD(sal, 10, '*') fill FROM emp;
SELECT empno, RPAD(sal, 10, '0') fill FROM emp;
--日期函数  系统时间 SYSDATE
SELECT empno, ename, (SYSDATE - hiredate)/7 WEEKS FROM emp;
SELECT empno, ename, MONTHS_BETWEEN(SYSDATE, hiredate)/7 AS WEEKS FROM emp;
--类型转换函数to_date,to_char,to_number
create table tbl_test
(id number(4) primary key,
 age varchar2(10)
);
insert into tbl_test values(255,'18');
select id, (to_number(age) + 3) age from tbl_test;

SELECT ename,TO_CHAR(sal, '$99,999.00') SAL
FROM  emp WHERE  ename = 'WARD';
--CASE表达式
SELECT ename, job ,sal,
       CASE job WHEN 'CLERK'  THEN  1.10*sal
                   WHEN 'SALESMAN' THEN  1.15*sal
                   WHEN 'MANAGER' THEN  1.20*sal
       ELSE sal END "newsal"
FROM emp;

--RECODE表达式
SELECT ename, job, sal,
       DECODE(job, 'CLERK',  1.10*sal,
                   'SALESMAN', 1.15*sal,
                   'MANAGER',   1.20*sal,
              sal)
      newsal
FROM emp;

--CASE表达式确立薪级
SELECT ename, sal,
       CASE  WHEN sal <= 1500 THEN '底薪阶层'
             WHEN sal > 1500 AND sal < 3000 THEN  '中薪阶层'
             WHEN sal >= 3000 THEN  '高薪阶层'
       END "newsal"
FROM emp;

SELECT ename, sal,
       DECODE(sal <= 1500, '底薪阶层',
              sal > 1500 AND sal < 3000, '中薪阶层',
             sal >= 3000, '高薪阶层'
              )
      newsal
FROM emp;
/*
SELECT	[column,] group_function(column), ...
FROM		table
[WHERE	condition]
[GROUP BY	column]
[ORDER BY	column];
*/
/*----AVG,COUNT,SUM,MIN,MAX---*/
SELECT MAX(sal) FROM emp;
SELECT MIN(sal) FROM emp;
SELECT AVG(sal) FROM emp;
--注意COUNT函数统计的是非空值的个数
SELECT COUNT(*) FROM emp;
--COUNT(expr)
SELECT COUNT(DISTINCT deptno) FROM emp;
SELECT SUM(sal) FROM emp;
SELECT MIN(hiredate), MAX(hiredate) FROM	emp;

--按照单行列表 获取部门平均工资
SELECT deptno, TRUNC(AVG(sal), 2) FROM emp GROUP BY deptno;
--按照多列分组 获取各个部门各个工种的平均工资
SELECT deptno, job,TRUNC(AVG(sal), 2) FROM emp GROUP BY deptno, job ORDER BY deptno;
--对分组后的数据进行过滤 使用having子句 分组之前使用where子句进行过滤
SELECT deptno, TRUNC(AVG(sal), 2) FROM emp GROUP BY deptno,job HAVING AVG(sal) > 2000 ORDER BY deptno; 
