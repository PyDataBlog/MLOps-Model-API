if ((Select count(*) From sys.objects where type = 'U' and Name = 'InvoicedAppointments') > 0) DROP TABLE [InvoicedAppointments]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'PaidInvoices') > 0) DROP TABLE [PaidInvoices]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'Invoice') > 0) DROP TABLE [Invoice]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'Discount') > 0) DROP TABLE [Discount]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'ContractedAppointments') > 0) DROP TABLE [ContractedAppointments]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'Appointment') > 0) DROP TABLE [Appointment]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'Contract') > 0) DROP TABLE [Contract]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'PackServices') > 0) DROP TABLE [PackServices]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'ServicePack') > 0) DROP TABLE [ServicePack]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'Payment') > 0) DROP TABLE [Payment]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'PaymentWay') > 0) DROP TABLE [PaymentWay]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'Service') > 0) DROP TABLE [Service]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'Patient') > 0) DROP TABLE [Patient]
if ((Select count(*) From sys.objects where type = 'U' and Name = 'User') > 0) DROP TABLE [User]

go

CREATE TABLE [Patient] (
	Id			nvarchar(100)	NOT NULL,
	Name		nvarchar(100)	NOT NULL,
	Inactive	bit				NULL,

	CONSTRAINT [PK_PATIENT] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (IGNORE_DUP_KEY = OFF)
)
GO
CREATE TABLE [Service] (
	Id integer NOT NULL,
	Name varchar(100) NOT NULL UNIQUE,
	Value float NOT NULL,
	IsCoTherapy bit NULL,
  CONSTRAINT [PK_SERVICE] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO
CREATE TABLE [User] (
	Id integer NOT NULL,
	Name varchar(100) NOT NULL UNIQUE,
  CONSTRAINT [PK_USER] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO
CREATE TABLE [PaymentWay] (
	Id integer NOT NULL,
	Name varchar(100) NOT NULL UNIQUE,
  CONSTRAINT [PK_PAYMENTWAY] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO
CREATE TABLE [Discount] (
	Id integer NOT NULL,
	PatientId nvarchar(100) NOT NULL,
	ServiceId integer NOT NULL,
	Percentage float NOT NULL,
  CONSTRAINT [PK_DISCOUNT] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO
CREATE TABLE [ServicePack] (
	Id integer NOT NULL,
	Name varchar(100) NOT NULL,
	Value float NOT NULL,
	Hours integer NOT NULL,
  CONSTRAINT [PK_SERVICEPACK] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)
)
GO
CREATE TABLE [PackServices] (
	ServiceId integer NOT NULL,
	PackId integer NOT NULL,
  CONSTRAINT [PK_PACKSERVICES] PRIMARY KEY CLUSTERED
  (
  [ServiceId] ASC, [PackId] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO
CREATE TABLE [Contract] (
	Id integer NOT NULL,
	Start date NOT NULL,
	PatientId nvarchar(100) NOT NULL,
	Contracted integer NOT NULL,
	ServicePackId integer NOT NULL,
  CONSTRAINT [PK_CONTRACT] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO
CREATE TABLE [Appointment] (
	Id integer NOT NULL,
	StartedAt date NOT NULL,
	PatientId nvarchar(100) NOT NULL,
	ServiceId integer NOT NULL,
	UserId integer NOT NULL,
	Hours float NOT NULL,
  CONSTRAINT [PK_APPOINTMENT] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO

CREATE TABLE [Invoice] (
	Id integer NOT NULL,
	PatientId nvarchar(100) NOT NULL,
	Value float NOT NULL,
	Date date NOT NULL,
	Description nvarchar(250) NULL,
  CONSTRAINT [PK_INVOICE] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO
CREATE TABLE [InvoicedAppointments] (
	InvoiceId integer NOT NULL,
	AppointmentId integer NOT NULL,
  CONSTRAINT [PK_INVOICEAPPOINTMENTS] PRIMARY KEY CLUSTERED
  (
  [InvoiceId] ASC, [AppointmentId] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO
CREATE TABLE [Payment] (
	Id integer NOT NULL,
	Value float NOT NULL,
	Description nvarchar(250) NOT NULL,
	PaymentWayId integer NOT NULL,
	Date date NOT NULL,
	PatientId nvarchar(100) NOT NULL,
  CONSTRAINT [PK_PAYMENT] PRIMARY KEY CLUSTERED
  (
  [Id] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO

CREATE TABLE [PaidInvoices] (
	PaymentId integer NOT NULL,
	InvoiceId integer NOT NULL,
	Value float NOT NULL,
  CONSTRAINT [PK_PAIDINVOICES] PRIMARY KEY CLUSTERED
  (
  [PaymentId] ASC, [InvoiceId] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO

CREATE TABLE [ContractedAppointments] (
	ContractId integer NOT NULL,
	AppointmentId integer NOT NULL,
  CONSTRAINT [PK_CONTRACTEDAPPOINTMENTS] PRIMARY KEY CLUSTERED
  (
  [ContractId] ASC, [AppointmentId] ASC
  ) WITH (IGNORE_DUP_KEY = OFF)

)
GO

ALTER TABLE [Contract] WITH CHECK ADD CONSTRAINT [Contract_fk0] FOREIGN KEY ([PatientId]) REFERENCES [Patient]([Id])
GO

ALTER TABLE [Contract] WITH CHECK ADD CONSTRAINT [Contract_fk1] FOREIGN KEY ([ServicePackId]) REFERENCES ServicePack([Id])

GO
ALTER TABLE [Contract] CHECK CONSTRAINT [Contract_fk0]
GO

ALTER TABLE [Appointment] WITH CHECK ADD CONSTRAINT [Appointment_fk0] FOREIGN KEY ([PatientId]) REFERENCES [Patient]([Id])

GO
ALTER TABLE [Appointment] CHECK CONSTRAINT [Appointment_fk0]
GO
ALTER TABLE [Appointment] WITH CHECK ADD CONSTRAINT [Appointment_fk1] FOREIGN KEY ([ServiceId]) REFERENCES [Service]([Id])

GO
ALTER TABLE [Appointment] CHECK CONSTRAINT [Appointment_fk1]
GO
ALTER TABLE [Appointment] WITH CHECK ADD CONSTRAINT [Appointment_fk2] FOREIGN KEY ([UserId]) REFERENCES [User]([Id])

GO
ALTER TABLE [Appointment] CHECK CONSTRAINT [Appointment_fk2]
GO

ALTER TABLE [PackServices] WITH CHECK ADD CONSTRAINT [PackServices_fk0] FOREIGN KEY ([ServiceId]) REFERENCES [Service]([Id])

GO
ALTER TABLE [PackServices] CHECK CONSTRAINT [PackServices_fk0]
GO
ALTER TABLE [PackServices] WITH CHECK ADD CONSTRAINT [PackServices_fk1] FOREIGN KEY ([PackId]) REFERENCES [ServicePack]([Id])

GO
ALTER TABLE [PackServices] CHECK CONSTRAINT [PackServices_fk1]
GO

ALTER TABLE [Invoice] WITH CHECK ADD CONSTRAINT [Invoice_fk0] FOREIGN KEY ([PatientId]) REFERENCES [Patient]([Id])

GO
ALTER TABLE [Invoice] CHECK CONSTRAINT [Invoice_fk0]
GO

ALTER TABLE [InvoicedAppointments] WITH CHECK ADD CONSTRAINT [InvoicedAppointments_fk0] FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice]([Id])

GO
ALTER TABLE [InvoicedAppointments] CHECK CONSTRAINT [InvoicedAppointments_fk0]
GO
ALTER TABLE [InvoicedAppointments] WITH CHECK ADD CONSTRAINT [InvoicedAppointments_fk1] FOREIGN KEY ([AppointmentId]) REFERENCES [Appointment]([Id])

GO
ALTER TABLE [InvoicedAppointments] CHECK CONSTRAINT [InvoicedAppointments_fk1]
GO

ALTER TABLE [Payment] WITH CHECK 
ADD CONSTRAINT [Payment_fk0] FOREIGN KEY ([PaymentWayId]) REFERENCES [PaymentWay]([Id])

GO
ALTER TABLE [Payment] CHECK CONSTRAINT [Payment_fk0]
GO
ALTER TABLE [Payment] WITH CHECK ADD CONSTRAINT [Payment_fk1] FOREIGN KEY ([PatientId]) REFERENCES [Patient]([Id])

GO
ALTER TABLE [Payment] CHECK CONSTRAINT [Payment_fk1]
GO


ALTER TABLE [PaidInvoices] WITH CHECK ADD CONSTRAINT [PaidInvoices_fk0] FOREIGN KEY ([PaymentId]) REFERENCES [Payment]([Id])

GO
ALTER TABLE [PaidInvoices] CHECK CONSTRAINT [PaidInvoices_fk0]
GO
ALTER TABLE [PaidInvoices] WITH CHECK ADD CONSTRAINT [PaidInvoices_fk1] FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice]([Id])

GO
ALTER TABLE [PaidInvoices] CHECK CONSTRAINT [PaidInvoices_fk1]
GO

ALTER TABLE [Discount] WITH CHECK ADD CONSTRAINT [Discount_fk0] FOREIGN KEY ([PatientId]) REFERENCES [Patient]([Id])
GO
ALTER TABLE [Discount] CHECK CONSTRAINT [Discount_fk0]
GO
ALTER TABLE [Discount] WITH CHECK ADD CONSTRAINT [Discount_fk1] FOREIGN KEY ([ServiceId]) REFERENCES [Service]([Id])
GO
ALTER TABLE [Discount] CHECK CONSTRAINT [Discount_fk1]
GO

ALTER TABLE [ContractedAppointments] WITH CHECK ADD CONSTRAINT [ContractedAppointments_fk0] FOREIGN KEY ([ContractId]) REFERENCES [Contract]([Id])
GO
ALTER TABLE [ContractedAppointments] CHECK CONSTRAINT [ContractedAppointments_fk0]
GO
ALTER TABLE [ContractedAppointments] WITH CHECK ADD CONSTRAINT [ContractedAppointments_fk1] FOREIGN KEY ([AppointmentId]) REFERENCES [Appointment]([Id])
GO
ALTER TABLE [ContractedAppointments] CHECK CONSTRAINT [ContractedAppointments_fk1]
GO


-- IMPORT INITIAL DATA
Insert into PaymentWay (Id, Name) Values
	(1, 'Multibanco'),
	(2, 'Numerário'),
	(3, 'Transferência'),
	(4, 'Outro')
GO

-- QUERIES AS FUNCTIONS


if ((Select count(*) From sys.objects where type = 'FN' and Name = 'CalculateUsedHours') > 0) DROP FUNCTION [CalculateUsedHours]
GO

CREATE FUNCTION [dbo].[CalculateUsedHours]
(
    @contractId int
)
RETURNS FLOAT
AS
BEGIN

    RETURN (Select isNull(Sum(Hours), 0)
			From [Appointment] A
			Inner Join [ContractedAppointments] CA On (CA.AppointmentId = A.Id)
			Where CA.ContractId = @contractId)

END
GO

if ((Select count(*) From sys.objects where type = 'FN' and Name = 'GetPackServiceIds') > 0) DROP FUNCTION [GetPackServiceIds]
GO

CREATE FUNCTION [dbo].[GetPackServiceIds]
(
    @packId int
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	Declare @Numbers AS Nvarchar(MAX)
	SELECT  @Numbers = COALESCE(@Numbers + ',', '') + Cast(ServiceId as NVARCHAR(100))
	FROM   PackServices where PackId = @packId

    RETURN @Numbers
END
GO

if ((Select count(*) From sys.objects where type = 'IF' and Name = 'GetContract') > 0) DROP FUNCTION [GetContract]
GO

CREATE FUNCTION [dbo].[GetContract]
(
    @contractId int
)
RETURNS TABLE AS RETURN
(
    SELECT 
		*,
		C.Contracted - [dbo].[CalculateUsedHours](C.Id) as Remaining,
		[dbo].[GetPackServiceIds](C.ServicePackId) as ServiceIds
	From [Contract] C
	Where C.Id = @contractId
)
GO

if ((Select count(*) From sys.objects where type = 'IF' and Name = 'GetContracts') > 0) DROP FUNCTION [GetContracts]
GO

CREATE FUNCTION [dbo].[GetContracts]()
RETURNS TABLE AS RETURN
(
    SELECT 
		*,
		C.Contracted - [dbo].[CalculateUsedHours](C.Id) as Remaining,
		[dbo].[GetPackServiceIds](C.ServicePackId) as ServiceIds
	From [Contract] C
)
GO


if ((Select count(*) From sys.objects where type = 'IF' and Name = 'GetValidContractsForAppointment') > 0) DROP FUNCTION [GetValidContractsForAppointment]
GO

CREATE FUNCTION [dbo].[GetValidContractsForAppointment]
(
	@PatientId	INT,
	@Hours		FLOAT,
	@StartedAt	DATE,
	@ServiceId	INT
)
RETURNS TABLE AS RETURN
(
    SELECT 
		*,
		(C.Contracted - [dbo].[CalculateUsedHours](C.Id)) as Remaining,
		[dbo].[GetPackServiceIds](C.ServicePackId) as ServiceIds
	From [Contract] C
	Where 1 = 1
		and C.PatientId = @PatientId
		and (C.Contracted - [dbo].[CalculateUsedHours](C.Id)) >= @Hours
		and C.Start <= @StartedAt
		and @ServiceId in (SELECT ServiceId FROM [PackServices] Where PackId = C.ServicePackId)
)
GO

-- CREATE STORE PROCEDURES

if ((Select count(*) From sys.objects where type = 'P' and Name = 'LinkToInvoice') > 0) DROP PROCEDURE [LinkToInvoice]
GO

CREATE PROCEDURE [dbo].[LinkToInvoice]
(
	@InvoiceId		INTEGER,
	@AppointmentId	INTEGER
)
AS
BEGIN

	IF (@InvoiceId IS NOT NULL)
	BEGIN
		IF (Select count(*) from [InvoicedAppointments] Where InvoiceId = @InvoiceId AND AppointmentId = @AppointmentId) = 0
		BEGIN
			INSERT Into [InvoicedAppointments] (InvoiceId, AppointmentId)
			VALUES (@InvoiceId, @AppointmentId)
		END
	END
	ELSE
	BEGIN
		Delete [InvoicedAppointments] Where AppointmentId = @AppointmentId
	END

END
GO

if ((Select count(*) From sys.objects where type = 'P' and Name = 'LinkToContract') > 0) DROP PROCEDURE [LinkToContract]
GO

CREATE PROCEDURE [dbo].[LinkToContract]
(
	@ContractId		INTEGER,
	@AppointmentId	INTEGER
)
AS
BEGIN

	IF (@ContractId IS NOT NULL)
	BEGIN
		IF (Select count(*) from [ContractedAppointments] Where ContractId = @ContractId AND AppointmentId = @AppointmentId) = 0
		BEGIN
			INSERT Into [ContractedAppointments] (ContractId, AppointmentId)
			VALUES (@ContractId, @AppointmentId)
		END
	END
	ELSE
	BEGIN
		Delete [ContractedAppointments] Where AppointmentId = @AppointmentId
	END

END
GO

if ((Select count(*) From sys.objects where type = 'P' and Name = 'StoreAppointment') > 0) DROP PROCEDURE [StoreAppointment]
GO

CREATE PROCEDURE [dbo].[StoreAppointment]
(
	@StartedAt		DATE		  ,
	@PatientId		NVARCHAR(100) ,
	@ServiceId		INTEGER		  ,
	@UserId			INTEGER		  ,
	@Hours			FLOAT		  ,
	@ContractId		INTEGER		  ,
	@InvoiceId		INTEGER
)
AS
BEGIN	
	DECLARE @Id INTEGER
	
	SET @Id = (SELECT Max(Id) + 1 from [Appointment])

	if @Id Is Null
		Set @Id = 1

	INSERT INTO [Appointment] (Id, StartedAt, PatientId, ServiceId, UserId, Hours)
	VALUES (@Id, @StartedAt, @PatientId, @ServiceId, @UserId, @Hours)
	 
	exec [dbo].[LinkToContract] @ContractId, @Id
	exec [dbo].[LinkToInvoice] @InvoiceId, @Id

    RETURN @Id
END
GO


if ((Select count(*) From sys.objects where type = 'P' and Name = 'UpdateAppointment') > 0) DROP PROCEDURE [UpdateAppointment]
GO

CREATE PROCEDURE [dbo].[UpdateAppointment]
(
	@Id				INTEGER		  ,
	@StartedAt		DATE		  ,
	@PatientId		NVARCHAR(100) ,
	@ServiceId		INTEGER		  ,
	@UserId			INTEGER		  ,
	@Hours			FLOAT		  ,
	@ContractId		INTEGER		  ,
	@InvoiceId		INTEGER
)
AS
BEGIN	
	
	IF (select count(*) from [Appointment] Where Id = @Id) = 0
	BEGIN
		exec @Id = [dbo].[StoreAppointment] @StartedAt, @PatientId, @ServiceId, @UserId, @Hours, @ContractId, @InvoiceId
	END		
	ELSE														   		    
	BEGIN														  
		UPDATE [Appointment] 							
			SET StartedAt = @StartedAt, 	
				PatientId = @PatientId, 
				ServiceId = @ServiceId, 
				UserId =	@UserId, 
				Hours =		@Hours
		WHERE Id = @Id
		
		exec [dbo].[LinkToContract] @ContractId, @Id
		exec [dbo].[LinkToInvoice] @InvoiceId, @Id
	END
	
    RETURN @Id
END
GO

