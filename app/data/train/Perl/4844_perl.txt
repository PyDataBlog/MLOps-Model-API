
package Hanjie::GridController;

use strict;
use integer;

use Carp;

use Data::Dumper;

use Hanjie::Grid;
use Hanjie::DrawSimple;
use Hanjie::Row;
use Hanjie::Column;

sub new { my ($proto) = @_;
  my ($self, $class);

  $class = ref($proto) || $proto;
  $self = { _rows => [],
            _columns => []
  };
  bless($self, $class);
  return $self;
}

sub width { my ($self) = @_;
  return scalar @{$self->{_columns}};
}

sub height { my ($self) = @_;
  return scalar @{$self->{_rows}};
}

sub get { my ($self, $i, $j) = @_;
  return $self->{_grid}{$i}{$j};
}

sub set { my ($self, $i, $j, $value) = @_;
  $self->{_grid}{$i}{$j} = $value;
}

sub grid { my ($self) = @_;
  return $self->{_grid};
}

sub addRow { my ($self, @clue) = @_;
  push @{$self->{_rows}}, Hanjie::Row->new(1 + scalar @{$self->{_rows}}, @clue);
}

sub addCol { my ($self, @clue) = @_;
  push @{$self->{_columns}}, Hanjie::Column->new(1 + scalar @{$self->{_columns}}, @clue);
}

sub OneScan { my ($self) = @_;
  my ($result, $r, $c);

  $result = 0;
  foreach $r (@{$self->{_rows}}) {
    $result += $r->solve($self->grid());
  }
  foreach $c (@{$self->{_columns}}) {
    $result += $c->solve($self->grid());
  }
  if ($result > 0) {
    drawGrid($self->grid());
  }
  return $result;
}

sub solve { my ($self) = @_;
  my ($result);

  $self->{_grid} = Hanjie::Grid->new($self->width(), $self->height());
  $result = $self->OneScan();
  while ($result > 0) {
    $result = $self->OneScan();
  }
}

1;
