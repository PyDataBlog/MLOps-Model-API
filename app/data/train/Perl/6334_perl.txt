use strict;
use warnings;
package SR::WxOptions;
use Wx::Event;

use Wx qw( :everything );
use base qw(Wx::Frame);
use Wx::Event;

our $VERSION = '0.01';
sub new {
	my(
	$self, 
	$c,$x,$extra_button_func,
	$parent, $id, $title, $pos, $size, $style, $name) = @_;

	$parent = undef              unless defined $parent;
	$id     = -1                 unless defined $id;
	$title  = ""                 unless defined $title;
	$pos    = wxDefaultPosition  unless defined $pos;
	$size   = wxDefaultSize      unless defined $size;
	$name   = ""                 unless defined $name;

	# begin wxGlade: MyFrame::new
	$style = wxDEFAULT_FRAME_STYLE 
		unless defined $style;

	$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
	
	#step 1.  set outer sizer
	my  $sizer  =  $self->{sizer} = Wx::BoxSizer->new(wxVERTICAL);
	my $cell_index = 1;
	my @text_ctrls;
	for my $key (sort(keys(%$c))){
		#step 2. for,make cell
		if($$x{__is_blacklist}){
			next if $$x{$key};
		}else{
			next unless $$x{$key};
		};
		$self->option_cell($sizer,$key,$c,\$cell_index,\@text_ctrls);
		&extra_button_func($self);
	}
	
	$self->{button_1} = Wx::Button->new($self, wxID_ANY, "update configuration");
	$sizer->Add($self->{button_1});
	
	auto_button_2({
		function => sub{
			for my $ctrl (@text_ctrls){
				$$c{$$ctrl{key}} = $$ctrl{ctrl}->GetValue();
			}
		}
	},$self->{button_1});
	
	$self->SetSizer($sizer);
	return $self;
}
sub option_cell{
	my ($self,$sizer,$key,$c,$cell_index,$text_ctrl_arref) = @_;

	my $local_sizer = $self->{"cell_$$cell_index\_sizer"} =  Wx::BoxSizer->new(wxHORIZONTAL);

	$self->{"cell_$$cell_index\_label"} = Wx::StaticText->new($self, wxID_ANY,$key);
	$self->{"cell_$$cell_index\_text"} = Wx::TextCtrl->new($self, wxID_ANY, $$c{$key});

	# 	$self->{"cell_$$cell_index\_sizer"}->SetSize(
	# 		$self->{"cell_$$cell_index\_sizer"}->ConvertDialogSizeToPixels(Wx::Size->new(200, 150))
	# 	);

	$local_sizer->Add($self->{"cell_$$cell_index\_label"},0,0,0);
	$local_sizer->Add($self->{"cell_$$cell_index\_text"},0,0,0);
	$sizer->Add($local_sizer);
	push(@$text_ctrl_arref,{
		key => $key,
		ctrl => $self->{"cell_$$cell_index\_text"},
	});
	$$cell_index++;
}
sub auto_button_2{
	my ($data,$button) = @_;
	my $old_title;
	Wx::Event::EVT_BUTTON($button,	-1,	sub	{
		my	($b,$evt) = @_;
		unless($b->IsEnabled){
			warn "tried to click a disabled button";
			return;
		}
		$b->Disable; # this doesn't work as well as might be thought,
		#Add a semaphore or something to check that the $sub isn't happening multiple times
		if ($$data{alt_title}){
			$old_title = $button->GetLabel();
			$b->SetLabel($$data{alt_title}) 
		};

		#$b->GetParent->SetFocus();#doesn't do what I wanted (grey out the button), but does work

		&{$$data{function}}; #correct way of calling a subroutine ref inside a hashref
		
		if ($$data{alt_title}){
			$b->SetLabel($old_title);
		};
		$b->Enable;
	});	
}
#on click, update ...changed?

1;
  