#!perl
package Marsh;

use strict;
use warnings;

sub new {
    my ($class, %arg) = @_;
    my $self = {
        _cell_map    => $arg{cell_map_ref}   || undef,
        _height      => undef,
    };
    bless $self, $class;
}

sub get_cell_map    { my Marsh $self=$_[0]; return $self->{_cell_map}   }

sub spawn {
    my Marsh $self = $_[0];
    my $row             = $_[1];
    my $col             = $_[2];
    my $cell_map        = $self->get_cell_map();
    my $height          = $cell_map->get_cell_height($row, $col);
    my $str             = 4;

    $self->spread_marsh($row, $col, $cell_map, $height, $str);
}

sub spread_marsh {
    my Marsh $self      = $_[0];
    my $row             = $_[1];
    my $col             = $_[2];
    my $cell_map        = $_[3];
    my $height          = $_[4];
    my $str             = $_[5];
    my $attr            = $cell_map->get_cell_marsh_attr($row, $col);

    return if ( $attr->{is_marsh} or $str < 1 );
    return unless $attr->{height} == $height;

    $cell_map->set_cell_marsh($row, $col);
    $cell_map->set_cell_tile_type( $row, $col, 'Marsh');

    my $rand_num = int(rand(100));

    my $new_str = $rand_num < 75 ? $str - 1 : $str;

    $self->spread_marsh($row - 1, $col, $cell_map, $height, $new_str);
    $self->spread_marsh($row + 1, $col, $cell_map, $height, $new_str);
    $self->spread_marsh($row, $col - 1, $cell_map, $height, $new_str);
    $self->spread_marsh($row, $col + 1, $cell_map, $height, $new_str);
}

1;
