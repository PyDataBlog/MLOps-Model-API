#!/usr/bin/perl

use File::Slurp;

opendir(my $dh, 'contestants') || die;
while(readdir $dh) {
    next if $_ !~ /^contestant/;
    my @moves = read_file("contestants/$_");
    for my $move (@moves) {
        chomp($move);
    }
    my $contestant = $_;
    my $name = shift @moves;
    $name =~ s/^Name=//;
    $contestants{$contestant} = {name => $name, moves => \@moves};
}
closedir $dh;


my $round = 1;

START:

print "\n\nROUND: $round\n";
my $winners = round(\%contestants);
%contestants = %{$winners};
if (keys %contestants > 1) {
    $round++;
    goto START;
}

exit;

sub round {
    my $contestants = shift;

    my @contestants = sort keys %$contestants;

    my %winners = ();
    while (@contestants) {
        my $c1key = shift @contestants;
        my $c2key = shift @contestants;

        my $contestant1 = $contestants{$c1key};
        my $contestant2 = $contestants{$c2key};
        print "$contestant1->{name} plays $contestant2->{name}\n";
        my $winner = match($contestant1, $contestant2);
        print "$winner->{name} wins\n";
        if ($contestant1->{name} eq $winner->{name} ) {
            $winners{$c1key} = $winner;
        }
        else {
            $winners{$c2key} = $winner;
        }
    }
    
    return \%winners;
}

    
sub match {
    my ($contestant1, $contestant2) = @_;

    my $winner;
    while (! defined $winner) {
        my $move1 = shift(@{$contestant1->{moves}});
        my $move2 = shift(@{$contestant2->{moves}});
        my $outcome = compare($move1, $move2);
        if ($outcome == 1) {
            $winner = $contestant1;
        }
        elsif ($outcome == 2) {
            $winner = $contestant2;
        }
    }

    return $winner;
}

sub compare {
    my ($move1, $move2) = @_;

    # draw
    if ($move1 eq $move2) {
        return 0;
    }
    # move2 wins
    elsif (
            ($move1 eq 'rock'     && $move2 eq 'paper') or
            ($move1 eq 'paper'    && $move2 eq 'scissors') or
            ($move1 eq 'scissors' && $move2 eq 'rock')
          ) {
        return 2;
    }
    # move1 wins
    else {
        return 1;
    }
}
