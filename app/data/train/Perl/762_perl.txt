use strict;
use warnings;

print "Start Testing Process...\n";
my $program_name = "printtokens2";
my $testcase = "rstestcase.txt";
print "Compiling Original Program...\n";
system("gcc -g -o $program_name $program_name.c");
print "Compiling Faulty Versions...\n";
my $num = 9;
my $rscount = 0;
my $flag = 0;
for (my $i = 1; $i <= $num; $i++){
    system("gcc -g -o v$i/$program_name v$i/$program_name.c");
    print "Comparing Orignal Program and Faulty Verision $i...\n";
    open (my $tcpool, "<", $testcase) || die ("Could not open temp file");
    while(my $row =  <$tcpool>){
        my $oriresult = readpipe("./$program_name $row");
        my $falresult = readpipe("v$i/$program_name $row");
#        print "$oriresult, $falresult";
        if ($oriresult eq $falresult){
#            print "version$i: equal\n";
        } else {
#            print "version$i: not equal\n";
            $flag = 1;
        }
    }
    if ($flag == 1){
        $flag = 0;
        $rscount++;
    }
    close($tcpool);
}

$testcase = "rbtestcase.txt";
my $rbcount = 0;
for (my $i = 1; $i <= $num; $i++){
    system("gcc -g -o v$i/$program_name v$i/$program_name.c");
    print "Comparing Orignal Program and Faulty Verision $i...\n";
    open (my $tcpool, "<", $testcase) || die ("Could not open temp file");
    while(my $row =  <$tcpool>){
        my $oriresult = readpipe("./$program_name $row");
        my $falresult = readpipe("v$i/$program_name $row");
        if ($oriresult eq $falresult){
        } else {
            $flag = 1;
        }
    }
    if ($flag == 1){
        $flag = 0;
        $rbcount++;
    }
    close($tcpool);
}

$testcase = "tstestcase.txt";
my $tscount = 0;
for (my $i = 1; $i <= $num; $i++){
    system("gcc -g -o v$i/$program_name v$i/$program_name.c");
    print "Comparing Orignal Program and Faulty Verision $i...\n";
    open (my $tcpool, "<", $testcase) || die ("Could not open temp file");
    while(my $row =  <$tcpool>){
        my $oriresult = readpipe("./$program_name $row");
        my $falresult = readpipe("v$i/$program_name $row");
        if ($oriresult eq $falresult){
        } else {
            $flag = 1;
        }
    }
    if ($flag == 1){
        $flag = 0;
        $tscount++;
    }
    close($tcpool);
}

$testcase = "tbtestcase.txt";
my $tbcount = 0;
for (my $i = 1; $i <= $num; $i++){
    system("gcc -g -o v$i/$program_name v$i/$program_name.c");
    print "Comparing Orignal Program and Faulty Verision $i...\n";
    open (my $tcpool, "<", $testcase) || die ("Could not open temp file");
    while(my $row =  <$tcpool>){
        my $oriresult = readpipe("./$program_name $row");
        my $falresult = readpipe("v$i/$program_name $row");
        if ($oriresult eq $falresult){
        } else {
            $flag = 1;
        }
    }
    if ($flag == 1){
        $flag = 0;
        $tbcount++;
    }
    close($tcpool);
}

$testcase = "astestcase.txt";
my $ascount = 0;
for (my $i = 1; $i <= $num; $i++){
    system("gcc -g -o v$i/$program_name v$i/$program_name.c");
    print "Comparing Orignal Program and Faulty Verision $i...\n";
    open (my $tcpool, "<", $testcase) || die ("Could not open temp file");
    while(my $row =  <$tcpool>){
        my $oriresult = readpipe("./$program_name $row");
        my $falresult = readpipe("v$i/$program_name $row");
        if ($oriresult eq $falresult){
        } else {
            $flag = 1;
        }
    }
    if ($flag == 1){
        $flag = 0;
        $ascount++;
    }
    close($tcpool);
}

$testcase = "abtestcase.txt";
my $abcount = 0;
for (my $i = 1; $i <= $num; $i++){
    system("gcc -g -o v$i/$program_name v$i/$program_name.c");
    print "Comparing Orignal Program and Faulty Verision $i...\n";
    open (my $tcpool, "<", $testcase) || die ("Could not open temp file");
    while(my $row =  <$tcpool>){
        my $oriresult = readpipe("./$program_name $row");
        my $falresult = readpipe("v$i/$program_name $row");
        if ($oriresult eq $falresult){
        } else {
            $flag = 1;
        }
    }
    if ($flag == 1){
        $flag = 0;
        $abcount++;
    }
    close($tcpool);
}
print "rs Evaluation Finished, $rscount Found\n";
print "rb Evaluation Finished, $rbcount Found\n";
print "ts Evaluation Finished, $tscount Found\n";
print "tb Evaluation Finished, $tbcount Found\n";
print "as Evaluation Finished, $ascount Found\n";
print "ab Evaluation Finished, $abcount Found\n";
