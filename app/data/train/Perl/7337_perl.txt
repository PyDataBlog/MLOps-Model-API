package Vector;

sub new {
	my $arg0 = shift;
	my $cls = ref($arg0) || $arg0;
	my $this = [];

	push @{$this},shift || 0;
	push @{$this},shift || 0;

	bless $this, $cls;
	return $this;
}

sub Substraction {
	my $a = shift;
	my $b = shift;

	my $dif = Vector->new( ${$a}[0]-${$b}[0], ${$a}[1]-${$b}[1] );
	
};

sub Addition {
	my $a = shift;
	my $b = shift;

	return Vector->new( ${$a}[0]+${$b}[0], ${$a}[1]+${$b}[1] );
	
};

sub FloatMultiplication {
	my $self = shift;
	my $factor = shift;

	return Vector->new ( ${$self}[0]*$factor,${$self}[1]*$factor );

}

sub Modulus {
	my $self = shift;
	return ( ${$self}[0]**2+${$self}[1]**2 )**.5;
}

sub Versor {
	my $self = shift;
	return $self->FloatMultiplication( $self->Modulus()**-1 );
}

sub Normal {
	my $self = shift;
	return Vector->new( -1*${$self}[1], ${$self}[0] );
}

sub Print {
	my $self = shift;

	print @{$self}[0]," ",@{$self}[1],"\n";
}

1;
