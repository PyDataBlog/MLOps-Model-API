package AgentSMS::Page;
use strict;
use warnings;

use Carp;
use English qw( -no_match_vars );
use Params::Validate qw( :all );
use Readonly;
use LWP::UserAgent;
use URI::URL;

use AgentSMS::Config;
use AgentSMS::Utils;

Readonly::Scalar my $STATUS_OK   => q{OK};
Readonly::Scalar my $METHOD_GET  => q{get};
Readonly::Scalar my $METHOD_POST => q{post};

sub getAgentsmsPage
{
    my ( $gate, $params, $method, $form_href ) = validate_pos( @_,
        { type => SCALAR },
        { type => SCALAR },
        { type => SCALAR },
        { type => HASHREF, optional => 1 }
    );

    my $gate_link = AgentSMS::Config::getAgentsmsLink( $gate );
    my $url       = sprintf( q{%s?%s}, $gate_link, $params );

    my $url_ref = URI::URL::url $url;

    my $ua = LWP::UserAgent->new;
    my $hostport = sprintf( q{%s:%d}, $url_ref->host, $url_ref->port );
    my $zone = AgentSMS::Config::getAgentsmsZone( $gate );
    my $user = AgentSMS::Config::getAgentsmsUser( $gate );
    my $pass = AgentSMS::Config::getAgentsmsPass( $gate );
    $ua->credentials( $hostport, $zone, $user, $pass );

    my $response;

    if ( $method eq $METHOD_GET )
    {
        $response = $ua->get( $url );
    }
    elsif ( $method eq $METHOD_POST )
    {
        $response = $ua->post( $url, $form_href );
    }

    if ($response->is_success)
    {
        return { result => $response->decoded_content, status => $STATUS_OK };
    }
    else
    {
        die $response->status_line;
    }
}

sub getPartnerPageById
{
    my ( $gate, $partner_id ) = validate_pos( @_,
        { type => SCALAR },
        { type => SCALAR }
    );

    my $params = sprintf( q{path=/partner/id:%d}, $partner_id );
    return AgentSMS::Utils::extractResult( getAgentsmsPage( $gate, $params, $METHOD_GET ) );
}

sub getPartnersPage
{
    my ( $gate ) = validate_pos( @_,
        { type => SCALAR }
    );

    my $params = q{path=/partner/all};
    return AgentSMS::Utils::extractResult( getAgentsmsPage( $gate, $params, $METHOD_GET ) );
}

sub addPartner
{
    my ( $gate, $form_href ) = validate_pos( @_,
        { type => SCALAR },
        { type => HASHREF }
    );

    my $params = q{path=/partner};
    return AgentSMS::Utils::extractResult( getAgentsmsPage( $gate, $params, $METHOD_POST, $form_href ) );
}

sub getServicesPage
{
    my ( $gate ) = validate_pos( @_,
        { type => SCALAR }
    );

    my $params = q{path=/service_manager/all};
    return AgentSMS::Utils::extractResult( getAgentsmsPage( $gate, $params, $METHOD_GET ) );
}

sub getServicePageById
{
    my ( $gate, $service_id ) = validate_pos( @_,
        { type => SCALAR },
        { type => SCALAR }
    );

    my $params = sprintf( q{path=/service_manager/id:%d}, $service_id );
    return AgentSMS::Utils::extractResult( getAgentsmsPage( $gate, $params, $METHOD_GET ) );
}

sub addService
{
    my ( $gate, $form_href ) = validate_pos( @_,
        { type => SCALAR },
        { type => HASHREF }
    );

    my $params = q{path=/service_manager};
    return AgentSMS::Utils::extractResult( getAgentsmsPage( $gate, $params, $METHOD_POST, $form_href ) );
}

sub getSendingRulesPage
{
    my ( $gate ) = validate_pos( @_,
        { type => SCALAR },
    );

    my $params = q{path=/sending_rules/all};
    return AgentSMS::Utils::extractResult( getAgentsmsPage( $gate, $params, $METHOD_GET ) );
}

1;
