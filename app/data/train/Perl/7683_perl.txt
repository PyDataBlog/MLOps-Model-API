package Sleipnir::MwAPI;
use Moo;
use feature 'state';

use Log::Any '$log';

use Carp qw/ confess /;
use Params::Util qw/ _INSTANCE /;
use Types::Standard qw/ Str InstanceOf HashRef ArrayRef Bool /;
use Function::Parameters ':strict';
use Sub::Quote;

use Sleipnir::MwAPI::LLAPI;

use namespace::clean;

has profile => (
    is       => 'ro',
    isa      => InstanceOf['Sleipnir::Profile'],
    required => 1,
);

has llapi => (
    is => 'lazy',
    isa => InstanceOf['Sleipnir::MwAPI::LLAPI'],
);

has _logged_in => (
    is      => 'rw',
    isa     => Bool,
    default => 0,
);

has _tokens => (
    is      => 'rw',
    isa     => InstanceOf['Sleipnir::Future'],
    clearer => 1,
);

has _tokentypelist => (
    is => 'rw',
    isa => InstanceOf['Sleipnir::Future'],
);

method _build_llapi() {
    Sleipnir::MwAPI::LLAPI->new( profile => $self->profile )
}

method BUILD {
    state $tokentype_req = Sleipnir::MwAPI::Request->new(
        action  => 'paraminfo',
        modules => 'tokens'
    );

    $self->_tokentypelist(
        $self->llapi->send_future($tokentype_req)
          ->map(sub{ $_->{paraminfo}{modules}[0]{parameters}[0]{type} })
          ->on_success(sub{ $self->refresh_tokens })
          ->on_failure(sub{ confess "Failed to fetch token types list" })
    );
}

method refresh_tokens {
    state $token_req = Sleipnir::MwAPI::Request->new(
        action => 'tokens',
        type   => $self->_tokentypelist->result->get,    # blocking
    );
    $self->_tokens( $self->llapi->send_future($token_req) );
}

method token {
    state $check = compile( Str );
    my ($type) = $check->(@_);
    $self->refresh_tokens unless defined $self->_tokens;
    $self->_tokens->result->get->{$type}
}

method login {
    return 1 if $self->_logged_in;
    my $f = $self->llapi->login_future
        ->on_success(sub{ $self->refresh_tokens; $self->_logged_in(1) })
        ->wait;
    $f->result->get;
}

method logout {
    return 1 unless $self->_logged_in;
    state $logout_req = Sleipnir::MwAPI::Request->new( action => 'logout' );
    my $f = $self->llapi->send_future($logout_req)
        ->on_success(sub{ $self->refresh_tokens; $self->_logged_in(0) })
        ->wait;
    $f->result->get;
}

method raw {
    my $req = InstanceOf['Sleipnir::MwAPI::Request']->check( $_[0] )
      ? $_[0]
      : Sleipnir::MwAPI::Request->new(@_);
    $self->llapi->send_future( $req )->wait->result->get;
}

1;
