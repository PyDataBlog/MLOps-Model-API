# -*- coding: utf-8 -*-
#!/usr/bin/perl6

v6;

use NativeCall;
                        
sub AsWMI_Open() returns int32 is native("ACPIWMI") { * }
sub AsWMI_GetDeviceStatus(int32, int32) returns int32 is native("ACPIWMI") { * }
sub AsWMI_DeviceControl(int32, int32) returns int32 is native("ACPIWMI") { * }

#`{{
class for ASUS G20 lighting color setting
Created on Wed Dec 30 26 09:27:19 2015
@author: William Herrera
Module for calls to the ASUS G20aj ACPIWMI.dll library to manipulate
the G20aj LED lighting displays.
The ASUS ACPI and dll's were analyzed by William Hererra, 2015

IMPORTANT: run as administrator
}}

unit class BIOS::LightACPI:auth<billh>:ver<0.01>;
our $VERSION = 0.01;

#`{{
OEM-UNDOCUMENTED ASUS DLL API NOTES
    The byte code for each light on the ASUS G20 desktop's LED lighting:
    left vertical light:   0xc00e0000
    right vertical light:  0xc00d0000
    base horizontal light: 0xc00c0000

    The position of color in second argument 8 byte integer (6 bytes used):
    red   0x00ff0000
    green 0x0000ff00
    blue  0x000000ff
    Note that other colors use a mix of this type of RGB color coding.

    The DLL calls from ACPIWMI.dll used by my ASUSLighting class:
    AsWMI_Open() opens the ACPI for calls
    AsWMI_GetDeviceStatus(?dhand, ?bufref) -- No idea why this seems broken
    AsWMI_DeviceControl(device, rgb_color) -- Does call to change lighting
}}

has $!RightVertical is required;
has $!LeftVertical is required;
has $!BaseHorizontal is required;
has $!DLLPath is required;
has $!DLLName is required;
has $!dhandle is required;

#`{{
initializes the DLL
}}
submethod BUILD(:$!DLLName="ACPIWMI.dll", 
                :$!DLLPath=
                "/Program Files (x86)/ASUS/ASUS Manager/Lighting") {
    $!RightVertical = 0xc00d0000;
    $!LeftVertical = 0xc00e0000,
    $!BaseHorizontal = 0xc00c0000;
    %*ENV{"Path"} = %*ENV{"Path"}   ~ ";" ~ $!DLLPath;
    $!dhandle = AsWMI_Open();
}

#`{{
verify the position
}}
method is_valid_position($pos) {
    return( ($pos == $!RightVertical ||
            $pos == $!LeftVertical ||
            $pos == $!BaseHorizontal) ?? (True) !! (False) );
}

#`{{
Get current color of the LED light
FIXME-- not working atm
}}
method get_color($pos) {
    AsWMI_GetDeviceStatus($!dhandle, $pos);
}

#`{{
Set color of the LED light as an 8-byte integer
The color is of form hex 0x00rrggbb, where rr id red, gg green,
    and bb the blue values of an RGB coded color
Black is 0, white is 0x00ffffff
}}
method set_color($pos, $colr) {
    if self.is_valid_position($pos) { 
        AsWMI_DeviceControl($pos, $colr);
    }
    else {
        warn("Bad position $pos, so color setting not done.");
    }
}

#`{{
Set RGB color as separate red, green, and blue values
}}
method set_rgb($pos, $reds, $greens, $blues) {
    my $rgb_color = ($blues +& 255) +
                    (($greens +& 255) * 0x100) +
                    (($reds +& 255) * 0x10000);
    self.set_color($pos, $rgb_color);
}

#`{{
shortcuts for positions of the lights
}}
method right() { return $!RightVertical; }
method left() { return $!LeftVertical; }
method base() { return $!BaseHorizontal; }
