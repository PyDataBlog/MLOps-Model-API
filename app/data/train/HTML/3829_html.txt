<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>gem5: dev/virtio/pci.cc Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.html"><span>Modules</span></a></li>
    <li><a href="namespaces.html"><span>Namespaces</span></a></li>
    <li><a href="classes.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>dev/virtio/pci.cc</h1><a href="pci_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2014 ARM Limited</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * The license below extends only to copyright in the software and shall</span>
<a name="l00006"></a>00006 <span class="comment"> * not be construed as granting a license to any other intellectual</span>
<a name="l00007"></a>00007 <span class="comment"> * property including but not limited to intellectual property relating</span>
<a name="l00008"></a>00008 <span class="comment"> * to a hardware implementation of the functionality of the software</span>
<a name="l00009"></a>00009 <span class="comment"> * licensed hereunder.  You may use the software subject to the license</span>
<a name="l00010"></a>00010 <span class="comment"> * terms below provided that you ensure that this notice is replicated</span>
<a name="l00011"></a>00011 <span class="comment"> * unmodified and in its entirety in all distributions of the software,</span>
<a name="l00012"></a>00012 <span class="comment"> * modified or unmodified, in source code or in binary form.</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00015"></a>00015 <span class="comment"> * modification, are permitted provided that the following conditions are</span>
<a name="l00016"></a>00016 <span class="comment"> * met: redistributions of source code must retain the above copyright</span>
<a name="l00017"></a>00017 <span class="comment"> * notice, this list of conditions and the following disclaimer;</span>
<a name="l00018"></a>00018 <span class="comment"> * redistributions in binary form must reproduce the above copyright</span>
<a name="l00019"></a>00019 <span class="comment"> * notice, this list of conditions and the following disclaimer in the</span>
<a name="l00020"></a>00020 <span class="comment"> * documentation and/or other materials provided with the distribution;</span>
<a name="l00021"></a>00021 <span class="comment"> * neither the name of the copyright holders nor the names of its</span>
<a name="l00022"></a>00022 <span class="comment"> * contributors may be used to endorse or promote products derived from</span>
<a name="l00023"></a>00023 <span class="comment"> * this software without specific prior written permission.</span>
<a name="l00024"></a>00024 <span class="comment"> *</span>
<a name="l00025"></a>00025 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>
<a name="l00026"></a>00026 <span class="comment"> * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>
<a name="l00027"></a>00027 <span class="comment"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span>
<a name="l00028"></a>00028 <span class="comment"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>
<a name="l00029"></a>00029 <span class="comment"> * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span>
<a name="l00030"></a>00030 <span class="comment"> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span>
<a name="l00031"></a>00031 <span class="comment"> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span>
<a name="l00032"></a>00032 <span class="comment"> * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span>
<a name="l00033"></a>00033 <span class="comment"> * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span>
<a name="l00034"></a>00034 <span class="comment"> * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span>
<a name="l00035"></a>00035 <span class="comment"> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>
<a name="l00036"></a>00036 <span class="comment"> *</span>
<a name="l00037"></a>00037 <span class="comment"> * Authors: Andreas Sandberg</span>
<a name="l00038"></a>00038 <span class="comment"> */</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include "debug/VIOPci.hh"</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include "<a class="code" href="pci_8hh.html">dev/virtio/pci.hh</a>"</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include "<a class="code" href="packet__access_8hh.html">mem/packet_access.hh</a>"</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include "params/PciVirtIO.hh"</span>
<a name="l00044"></a>00044 
<a name="l00045"></a><a class="code" href="classPciVirtIO.html#5a5ba2a8e289a02d0a3c0e2145675ae1">00045</a> <a class="code" href="classPciVirtIO.html#5a5ba2a8e289a02d0a3c0e2145675ae1">PciVirtIO::PciVirtIO</a>(<span class="keyword">const</span> <a class="code" href="namespaceThePipeline.html#a93998cbab17d7a8eb0acb0c9153b70a">Params</a> *params)
<a name="l00046"></a>00046     : <a class="code" href="classPciDevice.html">PciDevice</a>(params), vio(*params-&gt;vio),
<a name="l00047"></a>00047       callbackKick(this)
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049     <span class="comment">// Override the subsystem ID with the device ID from VirtIO</span>
<a name="l00050"></a>00050     <a class="code" href="classPciDevice.html#19775a45cf9573cb2ccde7824666e999">config</a>.<a class="code" href="unionPCIConfig.html#35e82ee7191cae055a477faa1e7aa3da">subsystemID</a> = <a class="code" href="byteswap_8hh.html#c65420460fe8f6fd2a34e80843fc514a">htole</a>(<a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#af5651e207b1d055984a478c3326b69d">deviceId</a>);
<a name="l00051"></a>00051     <a class="code" href="classPciDevice.html#0d23a83db00223fb8a5a68f33b916b61">BARSize</a>[0] = <a class="code" href="classPciVirtIO.html#3a6ac34b62cecdac5e5811d1b9519ede">BAR0_SIZE_BASE</a> + <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#bbbf1eef529625b6c160f40c01e3ae90">configSize</a>;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#16c34b4aba4cdce263949afbc0d9e643">registerKickCallback</a>(&amp;<a class="code" href="classPciVirtIO.html#76991de048ebf1eba1c6f5b34ae4a83d">callbackKick</a>);
<a name="l00054"></a>00054 }
<a name="l00055"></a>00055 
<a name="l00056"></a><a class="code" href="classPciVirtIO.html#fa5678b4fe63facc8945e165858850dc">00056</a> <a class="code" href="classPciVirtIO.html#fa5678b4fe63facc8945e165858850dc">PciVirtIO::~PciVirtIO</a>()
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058 }
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <a class="code" href="base_2types_8hh.html#5c8ed81b7d238c9083e1037ba6d61643">Tick</a>
<a name="l00061"></a><a class="code" href="classPciVirtIO.html#927f5d69e8c49e1655f50b8227ee30d7">00061</a> <a class="code" href="classPciVirtIO.html#927f5d69e8c49e1655f50b8227ee30d7">PciVirtIO::read</a>(<a class="code" href="classPacket.html">PacketPtr</a> pkt)
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> M5_VAR_USED size(pkt-&gt;<a class="code" href="classPacket.html#d7c96bd8cd06acddebb3a373b37e6e59">getSize</a>());
<a name="l00064"></a>00064     <span class="keywordtype">int</span> bar;
<a name="l00065"></a>00065     <a class="code" href="base_2types_8hh.html#f1bb03d6a4ee096394a6749f0a169232">Addr</a> <a class="code" href="namespaceArmISA.html#19e4a68ca5c93c6136351d804b432b09">offset</a>;
<a name="l00066"></a>00066     <span class="keywordflow">if</span> (!<a class="code" href="classPciDevice.html#76113df0e37f579fa072bcbb0b7de714">getBAR</a>(pkt-&gt;<a class="code" href="classPacket.html#1c04785186ba5aa70a40cac9b2bfc86e">getAddr</a>(), bar, offset))
<a name="l00067"></a>00067         <a class="code" href="base_2misc_8hh.html#0dfe16a40fe20bf6d482566e0ff63974">panic</a>(<span class="stringliteral">"Invalid PCI memory access to unmapped memory.\n"</span>);
<a name="l00068"></a>00068     assert(bar == 0);
<a name="l00069"></a>00069 
<a name="l00070"></a>00070     <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"Reading offset 0x%x [len: %i]\n"</span>, offset, size);
<a name="l00071"></a>00071 
<a name="l00072"></a>00072     <span class="comment">// Forward device configuration writes to the device VirtIO model</span>
<a name="l00073"></a>00073     <span class="keywordflow">if</span> (offset &gt;= <a class="code" href="classPciVirtIO.html#5dde72a2307f8360fc127caf01f07345">OFF_VIO_DEVICE</a>) {
<a name="l00074"></a>00074         <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#67726d16881dc7542fb4466b70a79f0f">readConfig</a>(pkt, offset - <a class="code" href="classPciVirtIO.html#5dde72a2307f8360fc127caf01f07345">OFF_VIO_DEVICE</a>);
<a name="l00075"></a>00075         <span class="keywordflow">return</span> 0;
<a name="l00076"></a>00076     }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078     pkt-&gt;<a class="code" href="classPacket.html#aa5d4a16d37597168dcff5857d9c6717">allocate</a>();
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="keywordflow">switch</span>(offset) {
<a name="l00081"></a>00081       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#1ef2a0ca422d566c7c3048c734cb2eff">OFF_DEVICE_FEATURES</a>:
<a name="l00082"></a>00082         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   DEVICE_FEATURES request\n"</span>);
<a name="l00083"></a>00083         assert(size == <span class="keyword">sizeof</span>(<a class="code" href="Type_8hh.html#435d1572bf3f880d55459d9805097f62">uint32_t</a>));
<a name="l00084"></a>00084         pkt-&gt;<a class="code" href="classPacket.html#c63debc6335e01dcb4941e4c760a6962">set</a>&lt;uint32_t&gt;(<a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#25e639c97dcca5bcdf40e5c176ece915">deviceFeatures</a>);
<a name="l00085"></a>00085         <span class="keywordflow">break</span>;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#556eca3ff69b3f228c0133d10f93527c">OFF_GUEST_FEATURES</a>:
<a name="l00088"></a>00088         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   GUEST_FEATURES request\n"</span>);
<a name="l00089"></a>00089         assert(size == <span class="keyword">sizeof</span>(uint32_t));
<a name="l00090"></a>00090         pkt-&gt;<a class="code" href="classPacket.html#c63debc6335e01dcb4941e4c760a6962">set</a>&lt;uint32_t&gt;(<a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#8ac8cce84100e81e98c9b84742d4082f">getGuestFeatures</a>());
<a name="l00091"></a>00091         <span class="keywordflow">break</span>;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#b70d0b6268d77f20bf11bad28410a1a0">OFF_QUEUE_ADDRESS</a>:
<a name="l00094"></a>00094         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   QUEUE_ADDRESS request\n"</span>);
<a name="l00095"></a>00095         assert(size == <span class="keyword">sizeof</span>(uint32_t));
<a name="l00096"></a>00096         pkt-&gt;<a class="code" href="classPacket.html#c63debc6335e01dcb4941e4c760a6962">set</a>&lt;uint32_t&gt;(<a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#4953ea9530f167380ca8c00a13f31d52">getQueueAddress</a>());
<a name="l00097"></a>00097         <span class="keywordflow">break</span>;
<a name="l00098"></a>00098 
<a name="l00099"></a>00099       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#85fd584f587b724191e880539fa2fb3e">OFF_QUEUE_SIZE</a>:
<a name="l00100"></a>00100         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   QUEUE_SIZE request\n"</span>);
<a name="l00101"></a>00101         assert(size == <span class="keyword">sizeof</span>(uint16_t));
<a name="l00102"></a>00102         pkt-&gt;<a class="code" href="classPacket.html#c63debc6335e01dcb4941e4c760a6962">set</a>&lt;uint16_t&gt;(<a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#89775fdd932d7a74fff10fef8dc28510">getQueueSize</a>());
<a name="l00103"></a>00103         <span class="keywordflow">break</span>;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#82d4e940f35dbf8814bc7baf3d1778d2">OFF_QUEUE_SELECT</a>:
<a name="l00106"></a>00106         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   QUEUE_SELECT\n"</span>);
<a name="l00107"></a>00107         assert(size == <span class="keyword">sizeof</span>(uint16_t));
<a name="l00108"></a>00108         pkt-&gt;<a class="code" href="classPacket.html#c63debc6335e01dcb4941e4c760a6962">set</a>&lt;uint16_t&gt;(<a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#5ab062fafc8f60ef24fbb2db9223cfe7">getQueueSelect</a>());
<a name="l00109"></a>00109         <span class="keywordflow">break</span>;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#9c54c55aa3d69dd24f2fe435899dd7bc">OFF_QUEUE_NOTIFY</a>:
<a name="l00112"></a>00112         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   QUEUE_NOTIFY request\n"</span>);
<a name="l00113"></a>00113         assert(size == <span class="keyword">sizeof</span>(uint16_t));
<a name="l00114"></a>00114         pkt-&gt;<a class="code" href="classPacket.html#c63debc6335e01dcb4941e4c760a6962">set</a>&lt;uint16_t&gt;(<a class="code" href="classPciVirtIO.html#2bc3918ad337ada7db0caa88916e5727">queueNotify</a>);
<a name="l00115"></a>00115         <span class="keywordflow">break</span>;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#19660305446c8f5fe02ea71f3b5fe4d4">OFF_DEVICE_STATUS</a>:
<a name="l00118"></a>00118         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   DEVICE_STATUS request\n"</span>);
<a name="l00119"></a>00119         assert(size == <span class="keyword">sizeof</span>(uint8_t));
<a name="l00120"></a>00120         pkt-&gt;<a class="code" href="classPacket.html#c63debc6335e01dcb4941e4c760a6962">set</a>&lt;uint8_t&gt;(<a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#c038f8456a3a56299a781f39442f8b6e">getDeviceStatus</a>());
<a name="l00121"></a>00121         <span class="keywordflow">break</span>;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#e0771798053dceb8541aeebcebaa4da2">OFF_ISR_STATUS</a>: {
<a name="l00124"></a>00124           <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   ISR_STATUS\n"</span>);
<a name="l00125"></a>00125           assert(size == <span class="keyword">sizeof</span>(uint8_t));
<a name="l00126"></a>00126           uint8_t isr_status(<a class="code" href="classPciVirtIO.html#d871c5702954213276505ea5266d6b4f">interruptDeliveryPending</a> ? 1 : 0);
<a name="l00127"></a>00127           <a class="code" href="classPciVirtIO.html#d871c5702954213276505ea5266d6b4f">interruptDeliveryPending</a> = <span class="keyword">false</span>;
<a name="l00128"></a>00128           pkt-&gt;<a class="code" href="classPacket.html#c63debc6335e01dcb4941e4c760a6962">set</a>&lt;uint8_t&gt;(isr_status);
<a name="l00129"></a>00129       } <span class="keywordflow">break</span>;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131       <span class="keywordflow">default</span>:
<a name="l00132"></a>00132         <a class="code" href="base_2misc_8hh.html#0dfe16a40fe20bf6d482566e0ff63974">panic</a>(<span class="stringliteral">"Unhandled read offset (0x%x)\n"</span>, offset);
<a name="l00133"></a>00133     }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135     <span class="keywordflow">return</span> 0;
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <a class="code" href="base_2types_8hh.html#5c8ed81b7d238c9083e1037ba6d61643">Tick</a>
<a name="l00139"></a><a class="code" href="classPciVirtIO.html#7e5af9e30bd8968499422c8ec5d87b07">00139</a> <a class="code" href="classPciVirtIO.html#7e5af9e30bd8968499422c8ec5d87b07">PciVirtIO::write</a>(<a class="code" href="classPacket.html">PacketPtr</a> pkt)
<a name="l00140"></a>00140 {
<a name="l00141"></a>00141     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> M5_VAR_USED size(pkt-&gt;<a class="code" href="classPacket.html#d7c96bd8cd06acddebb3a373b37e6e59">getSize</a>());
<a name="l00142"></a>00142     <span class="keywordtype">int</span> bar;
<a name="l00143"></a>00143     <a class="code" href="base_2types_8hh.html#f1bb03d6a4ee096394a6749f0a169232">Addr</a> <a class="code" href="namespaceArmISA.html#19e4a68ca5c93c6136351d804b432b09">offset</a>;
<a name="l00144"></a>00144     <span class="keywordflow">if</span> (!<a class="code" href="classPciDevice.html#76113df0e37f579fa072bcbb0b7de714">getBAR</a>(pkt-&gt;<a class="code" href="classPacket.html#1c04785186ba5aa70a40cac9b2bfc86e">getAddr</a>(), bar, offset))
<a name="l00145"></a>00145         <a class="code" href="base_2misc_8hh.html#0dfe16a40fe20bf6d482566e0ff63974">panic</a>(<span class="stringliteral">"Invalid PCI memory access to unmapped memory.\n"</span>);
<a name="l00146"></a>00146     assert(bar == 0);
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"Writing offset 0x%x [len: %i]\n"</span>, offset, size);
<a name="l00149"></a>00149 
<a name="l00150"></a>00150     <span class="comment">// Forward device configuration writes to the device VirtIO model</span>
<a name="l00151"></a>00151     <span class="keywordflow">if</span> (offset &gt;= <a class="code" href="classPciVirtIO.html#5dde72a2307f8360fc127caf01f07345">OFF_VIO_DEVICE</a>) {
<a name="l00152"></a>00152         <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#722e47f470225e82c452eda795f34758">writeConfig</a>(pkt, offset - <a class="code" href="classPciVirtIO.html#5dde72a2307f8360fc127caf01f07345">OFF_VIO_DEVICE</a>);
<a name="l00153"></a>00153         <span class="keywordflow">return</span> 0;
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156     pkt-&gt;<a class="code" href="classPacket.html#aa5d4a16d37597168dcff5857d9c6717">allocate</a>();
<a name="l00157"></a>00157 
<a name="l00158"></a>00158     <span class="keywordflow">switch</span>(offset) {
<a name="l00159"></a>00159       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#1ef2a0ca422d566c7c3048c734cb2eff">OFF_DEVICE_FEATURES</a>:
<a name="l00160"></a>00160         <a class="code" href="base_2misc_8hh.html#5a922fe9c81d2c97451dc19a69c1b053">warn</a>(<span class="stringliteral">"Guest tried to write device features."</span>);
<a name="l00161"></a>00161         <span class="keywordflow">break</span>;
<a name="l00162"></a>00162 
<a name="l00163"></a>00163       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#556eca3ff69b3f228c0133d10f93527c">OFF_GUEST_FEATURES</a>:
<a name="l00164"></a>00164         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   WRITE GUEST_FEATURES request\n"</span>);
<a name="l00165"></a>00165         assert(size == <span class="keyword">sizeof</span>(<a class="code" href="Type_8hh.html#435d1572bf3f880d55459d9805097f62">uint32_t</a>));
<a name="l00166"></a>00166         <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#1c4fa10c398091b8c6cf87709f7b9995">setGuestFeatures</a>(pkt-&gt;<a class="code" href="classPacket.html#4fa1463610c7bda8c0b160b1457f1a52">get</a>&lt;uint32_t&gt;());
<a name="l00167"></a>00167         <span class="keywordflow">break</span>;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#b70d0b6268d77f20bf11bad28410a1a0">OFF_QUEUE_ADDRESS</a>:
<a name="l00170"></a>00170         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   WRITE QUEUE_ADDRESS\n"</span>);
<a name="l00171"></a>00171         assert(size == <span class="keyword">sizeof</span>(uint32_t));
<a name="l00172"></a>00172         <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#0a347f18db3d32186d74edb30ad4ffc5">setQueueAddress</a>(pkt-&gt;<a class="code" href="classPacket.html#4fa1463610c7bda8c0b160b1457f1a52">get</a>&lt;uint32_t&gt;());
<a name="l00173"></a>00173         <span class="keywordflow">break</span>;
<a name="l00174"></a>00174 
<a name="l00175"></a>00175       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#85fd584f587b724191e880539fa2fb3e">OFF_QUEUE_SIZE</a>:
<a name="l00176"></a>00176         <a class="code" href="base_2misc_8hh.html#0dfe16a40fe20bf6d482566e0ff63974">panic</a>(<span class="stringliteral">"Guest tried to write queue size."</span>);
<a name="l00177"></a>00177         <span class="keywordflow">break</span>;
<a name="l00178"></a>00178 
<a name="l00179"></a>00179       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#82d4e940f35dbf8814bc7baf3d1778d2">OFF_QUEUE_SELECT</a>:
<a name="l00180"></a>00180         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   WRITE QUEUE_SELECT\n"</span>);
<a name="l00181"></a>00181         assert(size == <span class="keyword">sizeof</span>(uint16_t));
<a name="l00182"></a>00182         <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#47d9daeb2cc3b45d8df30d00e63917a0">setQueueSelect</a>(pkt-&gt;<a class="code" href="classPacket.html#4fa1463610c7bda8c0b160b1457f1a52">get</a>&lt;uint16_t&gt;());
<a name="l00183"></a>00183         <span class="keywordflow">break</span>;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#9c54c55aa3d69dd24f2fe435899dd7bc">OFF_QUEUE_NOTIFY</a>:
<a name="l00186"></a>00186         <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"   WRITE QUEUE_NOTIFY\n"</span>);
<a name="l00187"></a>00187         assert(size == <span class="keyword">sizeof</span>(uint16_t));
<a name="l00188"></a>00188         <a class="code" href="classPciVirtIO.html#2bc3918ad337ada7db0caa88916e5727">queueNotify</a> = pkt-&gt;<a class="code" href="classPacket.html#4fa1463610c7bda8c0b160b1457f1a52">get</a>&lt;uint16_t&gt;();
<a name="l00189"></a>00189         <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#5dbc32294e4bad4fd96c40a6c5128fe8">onNotify</a>(<a class="code" href="classPciVirtIO.html#2bc3918ad337ada7db0caa88916e5727">queueNotify</a>);
<a name="l00190"></a>00190         <span class="keywordflow">break</span>;
<a name="l00191"></a>00191 
<a name="l00192"></a>00192       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#19660305446c8f5fe02ea71f3b5fe4d4">OFF_DEVICE_STATUS</a>: {
<a name="l00193"></a>00193           assert(size == <span class="keyword">sizeof</span>(uint8_t));
<a name="l00194"></a>00194           uint8_t <a class="code" href="namespaceArmISA.html#b7583452c2328b9aaf5982ce3225554a">status</a>(pkt-&gt;<a class="code" href="classPacket.html#4fa1463610c7bda8c0b160b1457f1a52">get</a>&lt;uint8_t&gt;());
<a name="l00195"></a>00195           <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"VirtIO set status: 0x%x\n"</span>, status);
<a name="l00196"></a>00196           <a class="code" href="classPciVirtIO.html#995b43bb8a42c94d6bf69069a1a7e854">vio</a>.<a class="code" href="classVirtIODeviceBase.html#5d795ebfece994be522e07b6ae57d82b">setDeviceStatus</a>(status);
<a name="l00197"></a>00197       } <span class="keywordflow">break</span>;
<a name="l00198"></a>00198 
<a name="l00199"></a>00199       <span class="keywordflow">case</span> <a class="code" href="classPciVirtIO.html#e0771798053dceb8541aeebcebaa4da2">OFF_ISR_STATUS</a>:
<a name="l00200"></a>00200         <a class="code" href="base_2misc_8hh.html#5a922fe9c81d2c97451dc19a69c1b053">warn</a>(<span class="stringliteral">"Guest tried to write ISR status."</span>);
<a name="l00201"></a>00201         <span class="keywordflow">break</span>;
<a name="l00202"></a>00202 
<a name="l00203"></a>00203       <span class="keywordflow">default</span>:
<a name="l00204"></a>00204         <a class="code" href="base_2misc_8hh.html#0dfe16a40fe20bf6d482566e0ff63974">panic</a>(<span class="stringliteral">"Unhandled read offset (0x%x)\n"</span>, offset);
<a name="l00205"></a>00205     }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     <span class="keywordflow">return</span> 0;
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="keywordtype">void</span>
<a name="l00211"></a><a class="code" href="classPciVirtIO.html#6dee8e9c154a023b20d9c84b6a5218af">00211</a> <a class="code" href="classPciVirtIO.html#6dee8e9c154a023b20d9c84b6a5218af">PciVirtIO::kick</a>()
<a name="l00212"></a>00212 {
<a name="l00213"></a>00213     <a class="code" href="base_2trace_8hh.html#2df3201419df2f91d2b34b10ba16b944">DPRINTF</a>(VIOPci, <span class="stringliteral">"kick(): Sending interrupt...\n"</span>);
<a name="l00214"></a>00214     <a class="code" href="classPciVirtIO.html#d871c5702954213276505ea5266d6b4f">interruptDeliveryPending</a> = <span class="keyword">true</span>;
<a name="l00215"></a>00215     <a class="code" href="classPciDevice.html#d3e44d1ffa61c10c479507e2c68e1047">intrPost</a>();
<a name="l00216"></a>00216 }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 <a class="code" href="classPciVirtIO.html">PciVirtIO</a> *
<a name="l00219"></a>00219 PciVirtIOParams::create()
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221     <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classPciVirtIO.html#5a5ba2a8e289a02d0a3c0e2145675ae1">PciVirtIO</a>(<span class="keyword">this</span>);
<a name="l00222"></a>00222 }
</pre></div><hr size="1"><address style="align: right;"><small>
Generated on Fri Apr 17 12:38:51 2015 for gem5 by <a href="http://www.doxygen.org/index.html"> doxygen</a> 1.4.7</small></address>

</body>
</html>
