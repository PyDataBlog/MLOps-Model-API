<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>ViennaCL - The Vienna Computing Library: symbolic_vector&lt; ID, SCALARTYPE, ALIGNMENT &gt; Class Template Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">ViennaCL - The Vienna Computing Library
   &#160;<span id="projectnumber">1.3.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="hierarchy.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceviennacl.html">viennacl</a>      </li>
      <li class="navelem"><a class="el" href="namespaceviennacl_1_1generator.html">generator</a>      </li>
      <li class="navelem"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">symbolic_vector</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">symbolic_vector&lt; ID, SCALARTYPE, ALIGNMENT &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="viennacl::generator::symbolic_vector" -->
<p>Symbolic vector type.  
 <a href="classviennacl_1_1generator_1_1symbolic__vector.html#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="symbolic__vector_8hpp_source.html">symbolic_vector.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef SCALARTYPE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ae3b49295afe54045affbbd725a4b3c8a">ScalarType</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classviennacl_1_1vector.html">viennacl::vector</a><br class="typebreak"/>
&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ae3b49295afe54045affbbd725a4b3c8a">ScalarType</a>, <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a62e9ad0fa1b3d3e62e3b1368a642e2a5">Alignment</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#aade8bf0dd00cefe8123536f079269b2d">runtime_type</a></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename RHS_TYPE &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a><br class="typebreak"/>
&lt; <a class="el" href="structviennacl_1_1generator_1_1is__same__expression__type.html">is_same_expression_type</a><br class="typebreak"/>
&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, RHS_TYPE &gt;<br class="typebreak"/>
, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <br class="typebreak"/>
<a class="el" href="structviennacl_1_1generator_1_1assign__type.html">assign_type</a>, RHS_TYPE &gt;<br class="typebreak"/>
 &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#aeb8cb91f4028b791fcc42749104b544d">operator=</a> (RHS_TYPE const &amp;rhs) const </td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename RHS_TYPE &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a><br class="typebreak"/>
&lt; <a class="el" href="structviennacl_1_1generator_1_1is__scalar__expression.html">is_scalar_expression</a><br class="typebreak"/>
&lt; RHS_TYPE &gt;, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a><br class="typebreak"/>
&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <br class="typebreak"/>
<a class="el" href="structviennacl_1_1generator_1_1inplace__scal__mul__type.html">inplace_scal_mul_type</a>, <br class="typebreak"/>
RHS_TYPE &gt; &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ad37ae116375b6ff040de8361aa7009d7">operator*=</a> (RHS_TYPE const &amp;rhs) const </td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename RHS_TYPE &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a><br class="typebreak"/>
&lt; <a class="el" href="structviennacl_1_1generator_1_1is__scalar__expression.html">is_scalar_expression</a><br class="typebreak"/>
&lt; RHS_TYPE &gt;, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a><br class="typebreak"/>
&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <br class="typebreak"/>
<a class="el" href="structviennacl_1_1generator_1_1inplace__scal__div__type.html">inplace_scal_div_type</a>, <br class="typebreak"/>
RHS_TYPE &gt; &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a7f13d96d6e99503d60a0d57e2cd3485c">operator/=</a> (RHS_TYPE const &amp;rhs) const </td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename RHS_TYPE &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a><br class="typebreak"/>
&lt; <a class="el" href="structviennacl_1_1generator_1_1is__same__expression__type.html">is_same_expression_type</a><br class="typebreak"/>
&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, RHS_TYPE &gt;<br class="typebreak"/>
, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <br class="typebreak"/>
<a class="el" href="structviennacl_1_1generator_1_1inplace__add__type.html">inplace_add_type</a>, RHS_TYPE &gt;<br class="typebreak"/>
 &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ab542044ff83a86b15f737304f0cce679">operator+=</a> (RHS_TYPE const &amp;rhs) const </td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename RHS_TYPE &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a><br class="typebreak"/>
&lt; <a class="el" href="structviennacl_1_1generator_1_1is__same__expression__type.html">is_same_expression_type</a><br class="typebreak"/>
&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, RHS_TYPE &gt;<br class="typebreak"/>
, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <br class="typebreak"/>
<a class="el" href="structviennacl_1_1generator_1_1inplace__sub__type.html">inplace_sub_type</a>, RHS_TYPE &gt;<br class="typebreak"/>
 &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ab2eb279e4aa72f47a7b9135db90d5c82">operator-=</a> (RHS_TYPE const &amp;rhs) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a71924732c1a4908b0764e83e82da5adb">operator compound_node&lt; self_type, assign_type, self_type &gt;</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a94960f47a8a5a5db6ee7785c171252f4">name</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a26eab9c2d3c2ea43c10e65c31d8bc56d">size2_name</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ac19514b9a729db6db6abd6ff453b755e">internal_size2_name</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a0948f69273927e19b864ef43297f5c5b">name_argument</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a908e68631b5e01cc82f286b563de6671">kernel_arguments</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a62e9ad0fa1b3d3e62e3b1368a642e2a5">Alignment</a> = ALIGNMENT</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a4ce1b224962dcde77ec3ce0da36357cd">id</a> = ID</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;unsigned int ID, typename SCALARTYPE, unsigned int ALIGNMENT&gt;<br/>
class viennacl::generator::symbolic_vector&lt; ID, SCALARTYPE, ALIGNMENT &gt;</h3>

<p>Symbolic vector type. </p>
<dl class=""><dt><b>Template Parameters:</b></dt><dd>
  <table class="">
    <tr><td class="paramname">ID</td><td>The argument ID of the vector in the generated code </td></tr>
    <tr><td class="paramname">SCALARTYPE</td><td>The Scalartype of the vector in the generated code </td></tr>
    <tr><td class="paramname">ALIGNMENT</td><td>The Alignment of the vector in the generated code </td></tr>
  </table>
  </dd>
</dl>
</div><hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="aade8bf0dd00cefe8123536f079269b2d"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::runtime_type" ref="aade8bf0dd00cefe8123536f079269b2d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classviennacl_1_1vector.html">viennacl::vector</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ae3b49295afe54045affbbd725a4b3c8a">ScalarType</a>,<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a62e9ad0fa1b3d3e62e3b1368a642e2a5">Alignment</a>&gt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#aade8bf0dd00cefe8123536f079269b2d">runtime_type</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae3b49295afe54045affbbd725a4b3c8a"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::ScalarType" ref="ae3b49295afe54045affbbd725a4b3c8a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef SCALARTYPE <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ae3b49295afe54045affbbd725a4b3c8a">ScalarType</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ac19514b9a729db6db6abd6ff453b755e"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::internal_size2_name" ref="ac19514b9a729db6db6abd6ff453b755e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const std::string <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#ac19514b9a729db6db6abd6ff453b755e">internal_size2_name</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a908e68631b5e01cc82f286b563de6671"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::kernel_arguments" ref="a908e68631b5e01cc82f286b563de6671" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const std::string <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a908e68631b5e01cc82f286b563de6671">kernel_arguments</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a94960f47a8a5a5db6ee7785c171252f4"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::name" ref="a94960f47a8a5a5db6ee7785c171252f4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const std::string <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a94960f47a8a5a5db6ee7785c171252f4">name</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a0948f69273927e19b864ef43297f5c5b"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::name_argument" ref="a0948f69273927e19b864ef43297f5c5b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const std::string <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a0948f69273927e19b864ef43297f5c5b">name_argument</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a71924732c1a4908b0764e83e82da5adb"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::operator compound_node&lt; self_type, assign_type, self_type &gt;" ref="a71924732c1a4908b0764e83e82da5adb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">operator <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt; <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <a class="el" href="structviennacl_1_1generator_1_1assign__type.html">assign_type</a>, <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a> &gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad37ae116375b6ff040de8361aa7009d7"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::operator*=" ref="ad37ae116375b6ff040de8361aa7009d7" args="(RHS_TYPE const &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a>&lt;<a class="el" href="structviennacl_1_1generator_1_1is__scalar__expression.html">is_scalar_expression</a>&lt;RHS_TYPE&gt;, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <a class="el" href="structviennacl_1_1generator_1_1inplace__scal__mul__type.html">inplace_scal_mul_type</a>, RHS_TYPE &gt; &gt;::type operator*= </td>
          <td>(</td>
          <td class="paramtype">RHS_TYPE const &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab542044ff83a86b15f737304f0cce679"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::operator+=" ref="ab542044ff83a86b15f737304f0cce679" args="(RHS_TYPE const &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a>&lt;<a class="el" href="structviennacl_1_1generator_1_1is__same__expression__type.html">is_same_expression_type</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>,RHS_TYPE&gt;, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <a class="el" href="structviennacl_1_1generator_1_1inplace__add__type.html">inplace_add_type</a>, RHS_TYPE &gt; &gt;::type operator+= </td>
          <td>(</td>
          <td class="paramtype">RHS_TYPE const &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab2eb279e4aa72f47a7b9135db90d5c82"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::operator&#45;=" ref="ab2eb279e4aa72f47a7b9135db90d5c82" args="(RHS_TYPE const &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a>&lt;<a class="el" href="structviennacl_1_1generator_1_1is__same__expression__type.html">is_same_expression_type</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>,RHS_TYPE&gt;, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <a class="el" href="structviennacl_1_1generator_1_1inplace__sub__type.html">inplace_sub_type</a>, RHS_TYPE &gt; &gt;::type operator-= </td>
          <td>(</td>
          <td class="paramtype">RHS_TYPE const &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a7f13d96d6e99503d60a0d57e2cd3485c"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::operator/=" ref="a7f13d96d6e99503d60a0d57e2cd3485c" args="(RHS_TYPE const &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a>&lt;<a class="el" href="structviennacl_1_1generator_1_1is__scalar__expression.html">is_scalar_expression</a>&lt;RHS_TYPE&gt;, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <a class="el" href="structviennacl_1_1generator_1_1inplace__scal__div__type.html">inplace_scal_div_type</a>, RHS_TYPE &gt; &gt;::type operator/= </td>
          <td>(</td>
          <td class="paramtype">RHS_TYPE const &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aeb8cb91f4028b791fcc42749104b544d"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::operator=" ref="aeb8cb91f4028b791fcc42749104b544d" args="(RHS_TYPE const &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structviennacl_1_1generator_1_1enable__if.html">enable_if</a>&lt;<a class="el" href="structviennacl_1_1generator_1_1is__same__expression__type.html">is_same_expression_type</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>,RHS_TYPE&gt;, <a class="el" href="classviennacl_1_1generator_1_1compound__node.html">compound_node</a>&lt;<a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html">self_type</a>, <a class="el" href="structviennacl_1_1generator_1_1assign__type.html">assign_type</a>, RHS_TYPE &gt; &gt;::type operator= </td>
          <td>(</td>
          <td class="paramtype">RHS_TYPE const &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a26eab9c2d3c2ea43c10e65c31d8bc56d"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::size2_name" ref="a26eab9c2d3c2ea43c10e65c31d8bc56d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const std::string <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a26eab9c2d3c2ea43c10e65c31d8bc56d">size2_name</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Field Documentation</h2>
<a class="anchor" id="a62e9ad0fa1b3d3e62e3b1368a642e2a5"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::Alignment" ref="a62e9ad0fa1b3d3e62e3b1368a642e2a5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a62e9ad0fa1b3d3e62e3b1368a642e2a5">Alignment</a> = ALIGNMENT<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4ce1b224962dcde77ec3ce0da36357cd"></a><!-- doxytag: member="viennacl::generator::symbolic_vector::id" ref="a4ce1b224962dcde77ec3ce0da36357cd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int <a class="el" href="classviennacl_1_1generator_1_1symbolic__vector.html#a4ce1b224962dcde77ec3ce0da36357cd">id</a> = ID<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>viennacl/generator/symbolic_types/<a class="el" href="symbolic__vector_8hpp_source.html">symbolic_vector.hpp</a></li>
</ul>
</div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Thu Aug 9 2012 19:49:12 for ViennaCL - The Vienna Computing Library by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
