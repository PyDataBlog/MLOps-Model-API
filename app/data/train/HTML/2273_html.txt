---
layout: ci_navbar_sidebar
title: Coding Standards
permalink: /practice/ci/coding_standards/
---
<div class="jumbotron">
  <h1><small>Continuous Integration</small></h1>
  <h1>Coding Standards Check</h1>
  <p>Apply code analysis and styling checks and if unsatisfactory mark the build as a failure</p>
</div>
<div class="row">
  <div id="start" class="col-md-10 col-md-offset-1" style="font-size:140%">

    <h2>About</h2>
      <p>Code can be written that appears to perform the required task; however, is it coded with consistency, will it crash if the data input is not 100% correct, have any TODO tags been forgotten?</p>
      <p>We can run automated tests for these, and more, and then set our build result to fail if we do not get a satisfactory compliance result.</p>

    <h2>Options</h2>
      <p>Many packages are available; a search on the internet will return many results. Most will only perform part of the requirement. When selecting packages, try to include: code analysis, styling, open tasks and metrics. Other packages might also be required when handling the results.</p>
      <h3>Python Projects</h3>
        <p>The Python example below uses the following:</p>
        <ul>
          <li><h4>PYLINT</h4>
            <p>PyLint is a static code analyser of coding standards and quality.</p>
            <p>PyLint's tests include checking for docstrings, duplication, open tasks, PEP8 styling and bugs.</p>
            <p>It highlights problems and gives the code a score out of 10.</p>
          </li>
          <li>
            <h4>VIOLATIONS PLUGIN</h4>
              <p>This Jenkins plugin will display the PyLint results on the Jenkins view of the project.</p>
          </li>
          <li>
            <h4>TEXTFINDER PLUGIN</h4>
              <p>This Jenkins plugin will search text files against a regular expression. The result of which can be used to set a build to pass, fail, unstable.</p>
          </li>
        </ul>
      <h3>Java Projects</h3>
        <p>TODO</p>

    <h2>PyLint</h2>
      <h3>Prerequisites</h3>
        <h4>PYTHON PACKAGES</h4>
          <p><code>pip install pylint</code></p>

      <h3>Add to your Project</h3>
        <p>Select <button>Add build step</button> and choose "Execute Windows batch command".</p>
        <p>Enter in the Command box:</p>
        <pre>pylint project_name.py --output-format=parseable | tee pylint.out</pre>
        <p>You might need to drag this step to follow existing actions.</p>

      <h3>Explanation of Commands</h3>
        <p><code>Pylint project_name.py</code>: this starts the pylint application and tells it to analyse the specified python module.</p>
        <p>For multiple files names, just add them to the list. There is no current means of specifying <i>all files</i>. Writing a python file discovery function might be worthwhile.</p>
        <p>Is there a way of doing this programmatically? - <i>Under investigation.</i></p>
        <p><code>--output-format=parseable</code>: the output can be in many formats, including text and html. Parseable is a format that the Violations plugin can read.</p>
        <p><code>| tee pylint.out</code>: The pipe (|) is a means of redirecting the output, tee sends the output to both the screen and to a file, in this case a file named pylint.out.</p>
        <p><img src="../../../images/ci/coding_standards_pylint_command.png" alt="Screenshot of PyLint configuration in Jenkins" class = "img-thumbnail"/></p>

      <h3>Example</h3>
        <p>Click <a href="/practice/ci_pylint_text_output">here</a> for a simple example of PyLint's text output for the calculator.</p>
        <p>Lint report graph</p>

      <h3>Customization</h3>
        <p>PyLint tests can be tailored to your requires by using the a config file (rcfile). Enter <code>pylint --help</code> in the command line for info. <code>--generate-rcfile, --rcfile=&lt;file&gt;</code></p>

    <h2>Violations Plugin</h2>
      <h3>Prerequisites</h3>
        <p>"Violations plugin"</p>

      <h3>Add to your Project</h3>
        <p>Select <button>Add post-build action</button> and choose <samp>Report Violations</samp>.</p>
        <p>A long list of options will appear; we only need to complete the line for <samp>pylint</samp>. Place the file name in the box provided, e.g. <code>**/pylint.out</code></p>

      <h3>Example</h3>
        <p><img src="../../../images/ci/coding_standards_violations_report.png" alt="Screenshot of Violations report"  class = "img-thumbnail"></p>
        <p>Running the project a few times will provide a graph that can be drilled down to the detail.</p>
        <p><img src="../../../images/ci/coding_standards_pylint_report_graph.png" alt="Screenshot of PyLint report"  class = "img-thumbnail"></p>
        <p><img src="../../../images/ci/coding_standards_pylint_report_drill_down_1.png" alt="Screenshot of PyLint report drill down level 1"  class = "img-thumbnail"></p>
        <p><img src="../../../images/ci/coding_standards_pylint_report_drill_down_2.png" alt="Screenshot of PyLint report drill down level 2"  class = "img-thumbnail"></p>

    <h2>TextFinder</h2>
      <h3>Prerequisites</h3>
        <p>"TextFinder plugin"</p>

      <h3>Add to your Project</h3>
        <p>In this example, we scan the output of PyLint for the rating. If the rating is lower than eight the build is marked as unstable.</p>
        <p>Select <button>Add post-build action</button> and choose "Jenkins Text Finder".</p>
        <p>Enter the file name of the PyLint output file, for example, pylint.out.</p>
        <p>For the "Regular expression" enter: <code>"Your code has been rated at ([0-7]).\d*\/10"</code></p>
        <p>Then tick the "Unstable if found" option.</p>
        <p>Note that using "Succeed if found" will override previously obtained Fail results.</p>
        <p><img src="../../../images/ci/coding_standards_text_finder.png" class="img-thumbnail" alt="Screenshot of TextFinder"></p>

      <h3>Explanation of Regular Expression</h3>
        <p>This expression checks for the string "Your code has been rated at".</p>
        <p>Then it checks for 0 to 7, a decimal point, and any number of digits.</p>
        <p>Then it checks for "/10" to check that the value has been scored out of ten.</p>
        <p>If a rating less than 8 out of ten is present, the expression is true.</p>
        <p>If a rating 8 or more out of ten is present, the expression is false.</p>

      <h3>Example</h3>
        <p>In the screenshot below you can see build #82 and #83 set to unstable due to a low score obtained in PyLint.</p>
        <p><img src="../../../images/ci/coding_standards_pylint_affect_in_build_history.png" class="img-thumbnail" alt="Screenshot showing unstable build in Build History"></p>

    <h2>Open Tasks</h2>
      <p>The PyLint report includes Open Tasks; nevertheless, if you want the Open Tasks count on the project view screen, you need the Open Tasks Plugin.</p>
      <p>If required, add the plugin and configure it with the open task keywords, such as, TODO and FIXME.</p>
      <p><img src="../../../images/ci/coding_standards_open_task_config.png" class="img-thumbnail" alt="Screenshot showing Open Tasks configuration"></p>
      <p>After a build, the count will show on the project view that one can select and drill down.</p>
      <p><img src="../../../images/ci/coding_standards_open_task_result.png" class="img-thumbnail" alt="Screenshot showing Open Tasks count"></p>
      <p><img src="../../../images/ci/coding_standards_open_task_result_drill_down.png" class="img-thumbnail" alt="Screenshot showing Open Tasks drill down"></p>

  </div>
</div>
