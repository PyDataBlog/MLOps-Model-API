<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_55) on Wed Jun 11 14:26:13 PDT 2014 -->
<title>FVector (Javadocs: FLib)</title>
<meta name="date" content="2014-06-11">
<link rel="stylesheet" type="text/css" href="../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="FVector (Javadocs: FLib)";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../index-all.html">Index</a></li>
<li><a href="../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../flib/core/FShape.html" title="class in flib.core"><span class="strong">Prev Class</span></a></li>
<li>Next Class</li>
</ul>
<ul class="navList">
<li><a href="../../index.html?flib/core/FVector.html" target="_top">Frames</a></li>
<li><a href="FVector.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">flib.core</div>
<h2 title="Class FVector" class="title">Class FVector</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>processing.core.PVector</li>
<li>
<ul class="inheritance">
<li>flib.core.FVector</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.io.Serializable</dd>
</dl>
<hr>
<br>
<pre>public class <span class="strong">FVector</span>
extends processing.core.PVector</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../serialized-form.html#flib.core.FVector">Serialized Form</a></dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#SNAP_GRID">SNAP_GRID</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#SNAP_ISOMETRIC">SNAP_ISOMETRIC</a></strong></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields_inherited_from_class_processing.core.PVector">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;processing.core.PVector</h3>
<code>x, y, z</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../flib/core/FVector.html#FVector()">FVector</a></strong>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static float</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#area(processing.core.PVector, processing.core.PVector, processing.core.PVector)">area</a></strong>(processing.core.PVector&nbsp;a,
    processing.core.PVector&nbsp;b,
    processing.core.PVector&nbsp;c)</code>
<div class="block">Get the area of a triangle spanned by the three given points.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#collinear(processing.core.PVector, processing.core.PVector, processing.core.PVector)">collinear</a></strong>(processing.core.PVector&nbsp;a,
         processing.core.PVector&nbsp;b,
         processing.core.PVector&nbsp;c)</code>
<div class="block">Check if three points are collinear
 https://github.com/schteppe/poly-decomp.js/blob/master/src/Point.js</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#collinear(processing.core.PVector, processing.core.PVector, processing.core.PVector, float)">collinear</a></strong>(processing.core.PVector&nbsp;a,
         processing.core.PVector&nbsp;b,
         processing.core.PVector&nbsp;c,
         float&nbsp;thresholdAngle)</code>
<div class="block">Check if three points are collinear
 https://github.com/schteppe/poly-decomp.js/blob/master/src/Point.js</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>float</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#distSq(processing.core.PVector)">distSq</a></strong>(processing.core.PVector&nbsp;v1)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static float</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#distSq(processing.core.PVector, processing.core.PVector)">distSq</a></strong>(processing.core.PVector&nbsp;v1,
      processing.core.PVector&nbsp;v2)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static processing.core.PVector</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#findNormal(processing.core.PVector, processing.core.PVector, processing.core.PVector, float)">findNormal</a></strong>(processing.core.PVector&nbsp;p0,
          processing.core.PVector&nbsp;p1,
          processing.core.PVector&nbsp;p2,
          float&nbsp;distance)</code>
<div class="block">Finds the normal at p0 - the intersection of two vectors p1 and p2.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.List&lt;processing.core.PVector&gt;</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#getDecimatedVertices(java.util.List, float, boolean)">getDecimatedVertices</a></strong>(java.util.List&lt;processing.core.PVector&gt;&nbsp;vertices,
                    float&nbsp;step,
                    boolean&nbsp;doAddFinalVertex)</code>
<div class="block">breaks a line (defined as a space between points) into
  a specified number of line segments code was taken directly from toxilibs

  https://bitbucket.org/postspectacular/toxiclibs/src/9d124c80e8af/src.core/toxi/geom/LineStrip2D.java

  modified for use with Processing's native PVector</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static float</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#getEstimatedArcLength(java.util.List)">getEstimatedArcLength</a></strong>(java.util.List&lt;processing.core.PVector&gt;&nbsp;vertices)</code>
<div class="block">Get estimated arc length</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static processing.core.PVector[]</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#getParallelLine(processing.core.PVector[], float)">getParallelLine</a></strong>(processing.core.PVector[]&nbsp;points,
               float&nbsp;distance)</code>
<div class="block">Calculates the vertex positions of a line parallel to the original
  line at an approximate fixed distance.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.util.ArrayList&lt;processing.core.PVector&gt;</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#grid(int, int, processing.core.PVector)">grid</a></strong>(int&nbsp;width,
    int&nbsp;height,
    processing.core.PVector&nbsp;spacing)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.ArrayList&lt;processing.core.PVector&gt;</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#grid(int, int, processing.core.PVector, boolean)">grid</a></strong>(int&nbsp;width,
    int&nbsp;height,
    processing.core.PVector&nbsp;spacing,
    boolean&nbsp;bRandom)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#interpolateTo(processing.core.PVector, float)">interpolateTo</a></strong>(processing.core.PVector&nbsp;v2,
             float&nbsp;amt)</code>
<div class="block">interpolate from one PVector to another</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static processing.core.PVector</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#interpolateTo(processing.core.PVector, processing.core.PVector, float)">interpolateTo</a></strong>(processing.core.PVector&nbsp;v1,
             processing.core.PVector&nbsp;v2,
             float&nbsp;amt)</code>
<div class="block">interpolate from one PVector to another</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static processing.core.PVector</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#limit(processing.core.PVector, float)">limit</a></strong>(processing.core.PVector&nbsp;v1,
     float&nbsp;lim)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static processing.core.PVector</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#max(processing.core.PVector[])">max</a></strong>(processing.core.PVector[]&nbsp;points)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static processing.core.PVector</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#min(processing.core.PVector[])">min</a></strong>(processing.core.PVector[]&nbsp;points)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>processing.core.PVector</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#snap(float, int)">snap</a></strong>(float&nbsp;scale,
    int&nbsp;type)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>processing.core.PVector</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#snap(processing.core.PVector, int)">snap</a></strong>(processing.core.PVector&nbsp;spacing,
    int&nbsp;type)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.List&lt;processing.core.PVector&gt;</code></td>
<td class="colLast"><code><strong><a href="../../flib/core/FVector.html#splitIntoSegments(processing.core.PVector, processing.core.PVector, java.util.List, float, boolean)">splitIntoSegments</a></strong>(processing.core.PVector&nbsp;a,
                 processing.core.PVector&nbsp;b,
                 java.util.List&lt;processing.core.PVector&gt;&nbsp;segments,
                 float&nbsp;stepLength,
                 boolean&nbsp;addFirst)</code>
<div class="block">Split into segments</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_processing.core.PVector">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;processing.core.PVector</h3>
<code>add, add, add, add, angleBetween, array, cross, cross, cross, dist, dist, div, div, div, dot, dot, dot, equals, fromAngle, fromAngle, get, get, hashCode, heading, heading2D, lerp, lerp, lerp, limit, mag, magSq, mult, mult, mult, normalize, normalize, random2D, random2D, random2D, random2D, random3D, random3D, random3D, random3D, rotate, set, set, set, set, setMag, setMag, sub, sub, sub, sub, toString</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>getClass, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="SNAP_GRID">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SNAP_GRID</h4>
<pre>public static&nbsp;int SNAP_GRID</pre>
</li>
</ul>
<a name="SNAP_ISOMETRIC">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>SNAP_ISOMETRIC</h4>
<pre>public static&nbsp;int SNAP_ISOMETRIC</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="FVector()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>FVector</h4>
<pre>public&nbsp;FVector()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="interpolateTo(processing.core.PVector, processing.core.PVector, float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>interpolateTo</h4>
<pre>public static&nbsp;processing.core.PVector&nbsp;interpolateTo(processing.core.PVector&nbsp;v1,
                                    processing.core.PVector&nbsp;v2,
                                    float&nbsp;amt)</pre>
<div class="block">interpolate from one PVector to another</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - </dd><dd><code>v2</code> - </dd><dd><code>amt</code> - between 0.0 and 1.0</dd>
<dt><span class="strong">Returns:</span></dt><dd>interpolated point</dd></dl>
</li>
</ul>
<a name="interpolateTo(processing.core.PVector, float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>interpolateTo</h4>
<pre>public&nbsp;void&nbsp;interpolateTo(processing.core.PVector&nbsp;v2,
                 float&nbsp;amt)</pre>
<div class="block">interpolate from one PVector to another</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v2</code> - </dd><dd><code>amt</code> - between 0.0 and 1.0</dd></dl>
</li>
</ul>
<a name="limit(processing.core.PVector, float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>limit</h4>
<pre>public static&nbsp;processing.core.PVector&nbsp;limit(processing.core.PVector&nbsp;v1,
                            float&nbsp;lim)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - </dd><dd><code>lim</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>new limited PVector</dd></dl>
</li>
</ul>
<a name="distSq(processing.core.PVector)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>distSq</h4>
<pre>public&nbsp;float&nbsp;distSq(processing.core.PVector&nbsp;v1)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>squared value</dd></dl>
</li>
</ul>
<a name="distSq(processing.core.PVector, processing.core.PVector)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>distSq</h4>
<pre>public static&nbsp;float&nbsp;distSq(processing.core.PVector&nbsp;v1,
           processing.core.PVector&nbsp;v2)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>v1</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>squared value</dd></dl>
</li>
</ul>
<a name="grid(int, int, processing.core.PVector)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>grid</h4>
<pre>public static&nbsp;java.util.ArrayList&lt;processing.core.PVector&gt;&nbsp;grid(int&nbsp;width,
                                                int&nbsp;height,
                                                processing.core.PVector&nbsp;spacing)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>width</code> - width of the entire grid</dd><dd><code>height</code> - height of the entire grid</dd><dd><code>spacing</code> - a PVector representing the spacing (or size of cells)</dd>
<dt><span class="strong">Returns:</span></dt><dd>Grid with specified spacing between cells</dd></dl>
</li>
</ul>
<a name="grid(int, int, processing.core.PVector, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>grid</h4>
<pre>public static&nbsp;java.util.ArrayList&lt;processing.core.PVector&gt;&nbsp;grid(int&nbsp;width,
                                                int&nbsp;height,
                                                processing.core.PVector&nbsp;spacing,
                                                boolean&nbsp;bRandom)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>width</code> - width of the entire grid</dd><dd><code>height</code> - height of the entire grid</dd><dd><code>spacing</code> - a PVector representing the spacing (or size of cells)</dd><dd><code>bRandom</code> - return a random grid of points</dd>
<dt><span class="strong">Returns:</span></dt><dd>arraylist of PVector in a grid with specified spacing between cells</dd></dl>
</li>
</ul>
<a name="snap(processing.core.PVector, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>snap</h4>
<pre>public&nbsp;processing.core.PVector&nbsp;snap(processing.core.PVector&nbsp;spacing,
                           int&nbsp;type)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>spacing</code> - </dd><dd><code>type</code> - snap type: SNAP_GRID, SNAP_ISOMETRIC</dd>
<dt><span class="strong">Returns:</span></dt><dd>a PVector that snaps to a specific grid (starting at 0,0)</dd></dl>
</li>
</ul>
<a name="snap(float, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>snap</h4>
<pre>public&nbsp;processing.core.PVector&nbsp;snap(float&nbsp;scale,
                           int&nbsp;type)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>scale</code> - </dd><dd><code>type</code> - snap type: SNAP_GRID, SNAP_ISOMETRIC</dd>
<dt><span class="strong">Returns:</span></dt><dd>a PVector that snaps to a specific grid (starting at 0,0)</dd></dl>
</li>
</ul>
<a name="max(processing.core.PVector[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>max</h4>
<pre>public static&nbsp;processing.core.PVector&nbsp;max(processing.core.PVector[]&nbsp;points)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>points</code> - list of PVector points</dd>
<dt><span class="strong">Returns:</span></dt><dd>point furthest from origin</dd></dl>
</li>
</ul>
<a name="min(processing.core.PVector[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>min</h4>
<pre>public static&nbsp;processing.core.PVector&nbsp;min(processing.core.PVector[]&nbsp;points)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>points</code> - list of PVector points</dd>
<dt><span class="strong">Returns:</span></dt><dd>point closest to origin</dd></dl>
</li>
</ul>
<a name="getParallelLine(processing.core.PVector[], float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getParallelLine</h4>
<pre>public static&nbsp;processing.core.PVector[]&nbsp;getParallelLine(processing.core.PVector[]&nbsp;points,
                                        float&nbsp;distance)</pre>
<div class="block">Calculates the vertex positions of a line parallel to the original
  line at an approximate fixed distance.

  https://forum.processing.org/topic/points-with-equal-distance-repulsion-from-a-line</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>points</code> - a collection of points</dd><dd><code>distance</code> - the distance to maitain in result</dd>
<dt><span class="strong">Returns:</span></dt><dd>a collection of points parallel to input points at specified distance</dd></dl>
</li>
</ul>
<a name="findNormal(processing.core.PVector, processing.core.PVector, processing.core.PVector, float)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findNormal</h4>
<pre>public static&nbsp;processing.core.PVector&nbsp;findNormal(processing.core.PVector&nbsp;p0,
                                 processing.core.PVector&nbsp;p1,
                                 processing.core.PVector&nbsp;p2,
                                 float&nbsp;distance)</pre>
<div class="block">Finds the normal at p0 - the intersection of two vectors p1 and p2.
  Joining adjacent normals maintains parallelism with points p1-p0-p2.

  https://forum.processing.org/topic/points-with-equal-distance-repulsion-from-a-line</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>p0</code> - first point</dd><dd><code>p1</code> - second point</dd><dd><code>p2</code> - third point</dd><dd><code>distance</code> - distance to maintain</dd>
<dt><span class="strong">Returns:</span></dt><dd>{PVector}</dd></dl>
</li>
</ul>
<a name="getDecimatedVertices(java.util.List, float, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDecimatedVertices</h4>
<pre>public static&nbsp;java.util.List&lt;processing.core.PVector&gt;&nbsp;getDecimatedVertices(java.util.List&lt;processing.core.PVector&gt;&nbsp;vertices,
                                                           float&nbsp;step,
                                                           boolean&nbsp;doAddFinalVertex)</pre>
<div class="block">breaks a line (defined as a space between points) into
  a specified number of line segments code was taken directly from toxilibs

  https://bitbucket.org/postspectacular/toxiclibs/src/9d124c80e8af/src.core/toxi/geom/LineStrip2D.java

  modified for use with Processing's native PVector</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>vertices</code> - a List<PVector> of vertices to break</dd><dd><code>step</code> - the number of steps between the start point and end point</dd><dd><code>doAddFinalVertex</code> - include final vertex in results</dd>
<dt><span class="strong">Returns:</span></dt><dd>List<PVector> the stepped number of points</dd></dl>
</li>
</ul>
<a name="getEstimatedArcLength(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getEstimatedArcLength</h4>
<pre>public static&nbsp;float&nbsp;getEstimatedArcLength(java.util.List&lt;processing.core.PVector&gt;&nbsp;vertices)</pre>
<div class="block">Get estimated arc length</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>vertices</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>the length of the arc</dd></dl>
</li>
</ul>
<a name="splitIntoSegments(processing.core.PVector, processing.core.PVector, java.util.List, float, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>splitIntoSegments</h4>
<pre>public static&nbsp;java.util.List&lt;processing.core.PVector&gt;&nbsp;splitIntoSegments(processing.core.PVector&nbsp;a,
                                                        processing.core.PVector&nbsp;b,
                                                        java.util.List&lt;processing.core.PVector&gt;&nbsp;segments,
                                                        float&nbsp;stepLength,
                                                        boolean&nbsp;addFirst)</pre>
<div class="block">Split into segments</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - </dd><dd><code>b</code> - </dd><dd><code>segments</code> - </dd><dd><code>stepLength</code> - </dd><dd><code>addFirst</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>List<PVector></dd></dl>
</li>
</ul>
<a name="area(processing.core.PVector, processing.core.PVector, processing.core.PVector)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>area</h4>
<pre>public static&nbsp;float&nbsp;area(processing.core.PVector&nbsp;a,
         processing.core.PVector&nbsp;b,
         processing.core.PVector&nbsp;c)</pre>
<div class="block">Get the area of a triangle spanned by the three given points.
 Note that the area will be negative if the points are not given in counter-clockwise order.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - </dd><dd><code>b</code> - </dd><dd><code>c</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>float</dd></dl>
</li>
</ul>
<a name="collinear(processing.core.PVector, processing.core.PVector, processing.core.PVector)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>collinear</h4>
<pre>public static&nbsp;boolean&nbsp;collinear(processing.core.PVector&nbsp;a,
                processing.core.PVector&nbsp;b,
                processing.core.PVector&nbsp;c)</pre>
<div class="block">Check if three points are collinear
 https://github.com/schteppe/poly-decomp.js/blob/master/src/Point.js</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - </dd><dd><code>b</code> - </dd><dd><code>c</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
<a name="collinear(processing.core.PVector, processing.core.PVector, processing.core.PVector, float)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>collinear</h4>
<pre>public static&nbsp;boolean&nbsp;collinear(processing.core.PVector&nbsp;a,
                processing.core.PVector&nbsp;b,
                processing.core.PVector&nbsp;c,
                float&nbsp;thresholdAngle)</pre>
<div class="block">Check if three points are collinear
 https://github.com/schteppe/poly-decomp.js/blob/master/src/Point.js</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - </dd><dd><code>b</code> - </dd><dd><code>c</code> - </dd><dd><code>thresholdAngle</code> - Threshold angle to use when comparing the vectors.
          The function will return true if the angle between the resulting vectors is less than this value.
          Use zero for max precision.</dd>
<dt><span class="strong">Returns:</span></dt><dd>boolean</dd></dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../index-all.html">Index</a></li>
<li><a href="../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../flib/core/FShape.html" title="class in flib.core"><span class="strong">Prev Class</span></a></li>
<li>Next Class</li>
</ul>
<ul class="navList">
<li><a href="../../index.html?flib/core/FVector.html" target="_top">Frames</a></li>
<li><a href="FVector.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
<p class="legalCopy"><small>processing library FLib by Ken Frederick. (c) 2014</small></p>
</body>
</html>
