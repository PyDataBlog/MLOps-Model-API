var EcommerceProductsEdit = function () {

    var handleImages = function() {

        // see http://www.plupload.com/
        var uploader = new plupload.Uploader({
            runtimes : 'html5,html4',         
            browse_button : document.getElementById('tab_images_uploader_pickfiles'), // you can pass in id...
            container: document.getElementById('tab_images_uploader_container'), // ... or DOM Element itsel 
            url : "assets/ajax/product-images.php",             
            filters : {
                max_file_size : '10mb',
                mime_types: [
                    {title : "Image files", extensions : "jpg,gif,png"},
                ]
            },
			multipart_params: {'oper': "addproductimages"},			
            // Flash settings
            flash_swf_url : 'assets/global/plugins/plupload/js/Moxie.swf',
     
            // Silverlight settings
            silverlight_xap_url : 'assets/global/plugins/plupload/js/Moxie.xap',             
         
            init: {
                PostInit: function() {
                    $('#tab_images_uploader_filelist').html("");     
					
                    $('#tab_images_uploader_uploadfiles').click(function() {
                        uploader.start();
                        return false;
                    });

                    $('#tab_images_uploader_filelist').on('click', '.added-files .remove', function(){
                        uploader.removeFile($(this).parent('.added-files').attr("id"));    
                        $(this).parent('.added-files').remove();                     
                    });
                },
				BeforeUpload: function(up, file) {
					
				},
         
                FilesAdded: function(up, files) {
                    plupload.each(files, function(file) {
                        $('#tab_images_uploader_filelist').append('<div class="alert col-md-6 col-sm-12 alert-warning added-files" id="uploaded_file_' + file.id + '">' + file.name + '(' + plupload.formatSize(file.size) + ') <span class="status label label-info"></span>&nbsp;<a href="javascript:;" style="margin-top:0px" class="remove pull-right btn btn-xs red"><i class="fa fa-times"></i> </a></div>');
				});
                },
         
                UploadProgress: function(up, file) {
                    $('#uploaded_file_' + file.id + ' > .status').html(file.percent + '%');
                },

                FileUploaded: function(up, file, response) {
                    var response = $.parseJSON(response.response);
                    if (response.error && response.error == 'no') {
						var $uplaod_path = "../images/products/";
                        var newfile = response.newfilename.trim(); // uploaded file's unique name. Here you can collect uploaded file names and submit an jax request to your server side script to process the uploaded files and update the images tabke
                        if(newfile != ""){
							$image_names = $("#image-names").val();
							$img_lists = new Array();
							$img_lists.push(newfile);
							if($image_names != ""){
								$img_lists = $image_names.split("::::");
								$img_lists.push(newfile);
							}
							$("#image-names").val($img_lists.join("::::"));
							$('#uploaded_file_' + file.id + ' > .status').removeClass("label-info").addClass("label-success").html('<i class="fa fa-check"></i> Done'); // set successfull upload							
							var imgContaint = '<div class="col-md-3 product-image-div"><div class=mt-overlay-1><div class=item-image><img alt="'+newfile+'"src="'+$uplaod_path+newfile+'"></div><div class=mt-overlay><ul class=mt-info><li><a class="btn btn-outline green" href="'+$uplaod_path+newfile+'"><i class=icon-magnifier></i></a><li><a class="btn btn-outline btn-product-image-delete red" href=javascript:; data-image="'+newfile+'"><i class="fa fa-trash-o"></i></a></ul></div></div></div>';
							$('#Product-iamge-list').append(imgContaint);
						}
                    } else {
                        $('#uploaded_file_' + file.id + ' > .status').removeClass("label-info").addClass("label-danger").html('<i class="fa fa-warning"></i> Failed'); // set failed upload
                        Metronic.alert({type: 'danger', message: response.msg, closeInSeconds: 10, icon: 'warning'});
                    }
                },
         
                Error: function(up, err) {
                    Metronic.alert({type: 'danger', message: err.message, closeInSeconds: 10, icon: 'warning'});
                }
            }
        });
        uploader.init();
		// delete images();
		
		
		//varient image handing
		var optgroupContainer = $("#optiongroup-containner");
		optgroupContainer.on("click", ".option-img-upload", function(e){
			e.preventDefault();
			$(this).closest('.mt-overlay-1').find(".option-img-upload-input").trigger("click");
		});
		optgroupContainer.on("change", ".option-img-upload-input", function(e){
			e.preventDefault();
			var $fileInput = $(this);
			var fileInputImageContainer = $(this).closest('.mt-overlay-1');
			var el = $fileInput.closest(".portlet").children(".portlet-body");
			var $oper = 'saveoptionimage';
			//over initialization
			Metronic.blockUI({ target: el, animate: true, overlayColor: '#000000' });
			var formData = new FormData();
			formData.append('oper', $oper);
			formData.append('file', $fileInput[0].files[0]);
			$.ajax({
				url: "assets/ajax/ajax1.php",
				data: formData,
				method: "post",
				contentType: false,
				processData: false,
				dataType: 'json',
				success : function(response){
					if(response.error == "no"){
						var d = new Date();
						fileInputImageContainer.find("img").attr('src', "../images/products/"+response.filename+"?"+d.getTime());
						fileInputImageContainer.find('input[name^="product-option-img"]').val(response.filename);
						$fileInput.val('');
					}else{
						Metronic.alert({type: 'danger', message: response.msg, closeInSeconds: 10, icon: 'warning'});
					}
				}
			});	
			Metronic.unblockUI(el);
		});

    }
	var initComponents = function(){
		var summerEditer = $('#product-description');
		summerEditer.summernote({
			height: 150,                 // set editor height
			minHeight: 100,             // set minimum height of editor
			maxHeight: 300,             // set maximum height of editor
			placeholder: 'Product Description here...',
			toolbar: [
			['style', ['bold', 'italic', 'underline', 'clear']],
			['font', ['superscript', 'subscript']],
			['color', ['color']],
			['para', ['ul', 'ol', 'paragraph']]
			]
			
		});
		$('.note-editable').on('blur', function() {
			if($(summerEditer.summernote('code')).text().length > 20){
				$('.summernote-error').hide();
			}else{
				$('.summernote-error').show();
			}
		});
		$.fn.select2.defaults.set("theme", "bootstrap");
		$.fn.select2.defaults.set("id", function(object){ return object.text; });
		$.fn.select2.defaults.set("tags", true);
		/*$.fn.select2.defaults.set("createTag", function (params) {  return { id: params.term, text: params.term, newOption: true}});
		$.fn.select2.defaults.set("createSearchChoice", function(term, data){
			if ( $(data).filter( function() { 
				return term.localeCompare(this.text)===0; //even if the this.text is undefined it works
			}).length===0) { 
				if(confirm("Are you do you want to add item.")){
					return {id:term, text:term};}  
			}
		}) */
		// non casesensetive matcher....
		$.fn.select2.defaults.set("matcher", function(params, data) {
			// If there are no search terms, return all of the data
			if ($.trim(params.term) === '') {
				return data;
			}
			// `params.term` should be the term that is used for searching
			// `data.text` is the text that is displayed for the data object
			if (data.text.toLowerCase().indexOf(params.term.toLowerCase()) > -1) {
				return data;
			}
			// Return `null` if the term should not be displayed
			return null;
		});
		// non casesensitive tags creater
		$.fn.select2.defaults.set("createTag", function(params) {
			var term = $.trim(params.term);
			if(term === "") { return null; }
			var optionsMatch = false;
			this.$element.find("option").each(function() {
				// if(this.value.toLowerCase().indexOf(term.toLowerCase()) > -1) {  // for caompare values 
				if($(this).text().toLowerCase().indexOf(term.toLowerCase()) > -1) {  // for caompare option text 				
					optionsMatch = true;
				}
			});
			if(optionsMatch) {
				return null;
			}
			return {id: term, text: term, tag:true};
		});
		$('#product-category').select2({placeholder:"Select Category"});
		$('#product-brand').select2({placeholder:"Select Manufacturer"});
		$("#product-collection").select2().on("select2:select", function(e){
			if(e.params.data.tag == true){
				$this = $(this);
				var el = $this.closest(".portlet").children(".portlet-body");
				Metronic.blockUI({ target: el, animate: true, overlayColor: '#000000' });
				$.post("assets/ajax/ajax1.php", {"oper": "saverandomcollection", "collection-name": $.trim(e.params.data.text)}, function(data){
					Metronic.unblockUI(el);
					if(data.error == "no"){
						$('<option value="' + e.params.data.id + '">' + e.params.data.text + '</option>').appendTo($this);
					}
				}, "json");
			}
		});
		$("#product-tags").select2();
		
		var removeArrayItem = function (array, item){
			for(var i in array){
				if(array[i]==item){
					array.splice(i,1);
					break;
				}
			}
		}
		$("#Product-iamge-list").on("click", ".btn-product-image-delete", function(){
			var $this = $(this);
			if(confirm("Are you sure you want to remove image")){
				var $image_container = $this.closest(".product-image-div");
				var $img_name = $this.data("image");
				var el = $(this).closest(".portlet").children(".portlet-body");
				Metronic.blockUI({ target: el, animate: true, overlayColor: '#000000' });
				$.post( "assets/ajax/product-images.php", {'product-image':$img_name, 'oper':'deleteproductimages'},function(data){
				data = jQuery.parseJSON(data);
				if(data.error =="no"){
					$image_container.fadeOut(300, function(){ $(this).remove();});
					var $image_names = $("#image-names").val();
					var $img_lists = new Array();
					if($image_names != ""){
						$img_lists = $image_names.split("::::");
						removeArrayItem($img_lists, $img_name);
					}
					$("#image-names").val($img_lists.join("::::"));
				}
				Metronic.unblockUI(el);
				});
			}
		});
		// product attribuets
		var addCustomAttrVal = function(){
			$('select[name^="product-attributes-value"]').select2().on("select2:select", function(e){
				$this = $(this); 
				$attribute_id = $.trim($this.data("attribute"));
				if(e.params.data.tag == true && $attribute_id > 0){
					var el = $this.closest(".portlet").children(".portlet-body");
					Metronic.blockUI({ target: el, animate: true, overlayColor: '#000000' });
					$.post("assets/ajax/ajax1.php", {"oper": "savenewattributevalue", "attribute-value": $.trim(e.params.data.text), "attribute-id":$attribute_id}, function(data){
						Metronic.unblockUI(el);
						if(data.error == "no"){
							$('<option value="' + e.params.data.id + '">' + e.params.data.text + '</option>').appendTo($this);
						}
					}, "json");
				}
			});
		}
		
		$("#product-category").on('change', function(){
			$(".categoey-name-span").html($(this).find(":selected").html());
		});
		$(".categoey-name-span").html($("#product-category").find(":selected").html());
		$("#btn-attribute-load").on("click", function(e){
			e.preventDefault();
			var filled_field = false;
			$('input[name^="product-attributes-value"]').each(function() {
				if($.trim($(this).val())){
					filled_field = true;
					return false;
				}
			});
			var Confirm = true;
			if(filled_field) Confirm = confirm("Previous specification data will erased. Are you sure want to reload Specification data.");
			if(Confirm){
				var el = $(this).closest(".portlet").children(".portlet-body");
				Metronic.blockUI({ target: el, animate: true, overlayColor: '#000000' });
				$.post( "assets/ajax/ajax1.php", {'category-id':$("#product-category").val(), 'oper':'getattributebycategory'},function(data){
					data = $.parseJSON(data);
					if(data.error =="no"){
						var $_html = "";
						if(!$.isEmptyObject(data.attributeCollection)){
							$i = 0;
							$.each(data.attributeCollection, function(index, attributeGroup){
								$_html += '<tr><td colspan="2" class="text-danger text-center"><strong>' + attributeGroup.name + '</strong></td></tr>';
								$.each(attributeGroup.attributes, function(indexJ, attribute){
									$_html += '<tr><td class="text-right"><label class="control-label input-sm">'+attribute.text +' : </label></td><input type="hidden" name="product-attributes-id['+$i+']" value="' + attribute.id + '"/><td>'
									if(attribute.isfilter > 0){
										$_html += '<select data-attribute="' + attribute.id + '" style="width:100%;" name="product-attributes-value['+$i+']" class="form-control input-sm">';
											var filterArray = attribute.filters.split(",");
											$.each(filterArray, function(index, filter){
												$_html += '<option value = "'+filter+'">'+filter+'</option>';
											});
										$_html += "</select>";
									}else{
										$_html += '<input type="type" name="product-attributes-value['+$i+']" class="form-control input-sm">';
									}
									$_html += '</td></tr>';
									$i++;
								});
							});
						}else{
							$_html = '<tr><td colspan="2" class="text-center">No Attributes Found. </td></tr>';
						}
						$("#attribute-list-table tbody").html($_html);
						addCustomAttrVal();
						
					}
					Metronic.unblockUI(el);
				});
			}
				
		});
		
		addCustomAttrVal();
		
		$("img", "#Product-iamge-list").error(function() {
			$this = $(this);
			$this.error = null;
			$this.attr("src", "http://placehold.it/400?text=image")
        });
		$('[data-toggle="tooltip"]').tooltip();
		// product varients
		var optiongroupMaster = $("#optiongroupmaster").html();
		var optgroupContainer = $("#optiongroup-containner");
		
		var createCombinations = function($elements){
			var CombinationArray = {};
			var $i = 0;
			$elements.each(function(index, element){
				var SelectedOptGgroup = $(element).select2("data");
				if(SelectedOptGgroup.length > 0){
					var temp_array = {};
					$.each(SelectedOptGgroup, function(index, data){
						temp_array[index] = {text:data.text, id:data.id};
					});
					CombinationArray[$i++] = temp_array;	
				}
			});
			var $totalCombinations = {};
			var i=0, k=0;
			var combinations = [];
			$.each(CombinationArray, function(index1, varients){
				if(i== 0){
					//combinations = varients;
					$.each(varients, function(index, varient){
						combinations.push(varient);
					});
					}else{
					k = 0;
					tempCombination = [];
					$.each(combinations, function(index2, combination){
						$.each(varients, function(index3, varient){
							tempCombination[k] = [];
							if(i == 1){
								tempCombination[k].push(combination);
								}else{
								$.each(combination, function(index4, subCombination){
									tempCombination[k].push(subCombination);
								});	
							}
							tempCombination[k].push(varient);
							k++;
						});
					});
					combinations = tempCombination; 
				}
				i++;
			});
			return combinations;
		}		
		var loadCombination = function(){
			var $combinations = createCombinations($(".product-options-select2", optgroupContainer));
			var $_html = "";
			$.each($combinations, function(index, combination){
				$_html += '<tr><td class="text-center">';
				var combination_id = [];
				if(Array.isArray(combination)){
					combination_length = combination.length;
					$.each(combination, function(index1, varient){
						$_html += '<label class="label label-sm label-success lh2"><strong>'+varient.text+'</strong></label>';
						combination_id.push(varient.id);
						if(index1+1 < combination_length) $_html += " X ";
					});
					}else{
					$_html += '<label class="label label-sm label-success lh2"><strong>'+combination.text+'</strong></label>';
					combination_id.push(combination.id);
				}
				
				var comb_id_text = combination_id.join("-")
				$_html += '<input type="hidden" name="combination-id[]" value="'+comb_id_text+'"></td><td><input type="text" name="combination-qty['+comb_id_text+']" placeholder="Quantity" class="form-control input-sm"></td><td><input type="text" name="combination-price['+comb_id_text+']" placeholder="Price" class="form-control input-sm"></td><!---<td><button type="button" class="btn btn-sm red btn-combination-delete">Delete</button></td>---></tr>'; 
			});
			$("tbody", "#verient-form-table").html($_html);
		}
		var has_img_html = '';
		var insertImageDiv = function(id, text){
			return '<div class="col-md-3 col-sm-6 text-center" id="selected-option-'+id+'" ><div class="mt-overlay-1"><div class="item-image"><img src="http://placehold.it/400?text='+text+'"></div><div class="mt-overlay"><ul class="mt-info"><li><input type="file" class="option-img-upload-input display-hide"><input type="hidden" name="product-option-img['+id+']"><a class="btn green btn-outline" href="javascript:;"><i class="icon-magnifier"></i></a></li><li><a class="btn yellow btn-outline option-img-upload" href="javascript:;"><i class="fa fa-upload"></i></a></li></ul></div></div><div class="bg-blue label-full">'+text+'</div></div>';
		}
		$(".product-options-select2", optgroupContainer).select2({tags : false});
		$("#add_attrbut_btn").on("click", function(){
			optgroupContainer.append(optiongroupMaster);
			var otgrouplength = optgroupContainer.find(".optiongroups").length - 1;
			var lastOptgroup = optgroupContainer.find(".optiongroups:last");
			lastOptgroup.find(".product-options-select2:last").select2({tags: false})
			.on("change", function(e) {
				$this = $(this);
				e.preventDefault();
				loadCombination();
			})
			.on("select2:select", function(e){
				$this = $(this);
					if($this.closest(".optiongroups").find('.product-optgroup-select option:selected').data("type") == "image")
						$this.closest(".optiongroups").find(".optgroup-image-div .swatches").append(insertImageDiv(e.params.data.id, e.params.data.text));
			})
			.on("select2:unselect", function(e){
				$this = $(this);
				$this.closest(".optiongroups").find(".optgroup-image-div .swatches").find("#selected-option-"+e.params.data.id).remove();
			})
		});
		optgroupContainer.find(".product-options-select2").select2()
		.on("change", function(e) { 
			e.preventDefault();
			loadCombination();
		})
		.on("select2:select", function(e){
			$this = $(this);
			if($this.closest(".optiongroups").find('.product-optgroup-select option:selected').data("type") == "image")
				$this.closest(".optiongroups").find(".optgroup-image-div .swatches").append(insertImageDiv(e.params.data.id, e.params.data.text));
		})
		.on("select2:unselect", function(e){
			$this = $(this);
			$this.closest(".optiongroups").find(".optgroup-image-div .swatches").find("#selected-option-"+e.params.data.id).remove();
		});
		optgroupContainer.on('click', ".optiongroup-delete-btn" , function(){
			$(this).closest(".optiongroups").fadeOut(300, function(){ $(this).remove(); loadCombination();});
		});
		optgroupContainer.on("change", '.product-optgroup-select', function(){
			var $this = $(this);
			$found = false;
			optgroupContainer.find(".product-optgroup-select").each(function(index, optgroup_select){
				if($this.val() == $(optgroup_select).val() && !$this.is($(optgroup_select))){
					$found = true;
					return;
				}
			});
			if($found){
				Metronic.alert({type: 'danger', message: "This varient is already selected", closeInSeconds: 4, icon: 'warning'});
				$this.val("").trigger("change");
				return;
			}
			var optionGroupSelect = $this.closest(".optiongroups").find('.product-options-select2');
			optionGroupSelect.select2("val", "");
			if($.trim($this.val()) > 0){
				$.post("assets/ajax/ajax1.php", {"option-group-id": $this.val(), "oper": "getoptionbyoptiongroup"}, function(data){
					data = $.parseJSON(data);
					if(data.error == "no"){
						var $_html = "";
						$.each(data.options, function(index, option){
							$_html += '<option value="'+option.id+'">'+option.text+'</option>';
						});
						optionGroupSelect.html($_html);
						$this.closest(".optiongroups").find(".optgroup-image-div .swatches").html("");
					}
				});
			}
			if($this.find("option:selected").data("type") == "image"){
				$this.closest(".optiongroups").find(".optgroup-image-btn").removeClass("display-hide");
				$this.closest(".optiongroups").find(".optgroup-image-div").collapse("show");
			}else{
				$this.closest(".optiongroups").find(".optgroup-image-btn").addClass("display-hide");
				$this.closest(".optiongroups").find(".optgroup-image-div").collapse("hide");
			}
		});
		$("#verient-form-table tbody").on("click", ".btn-combination-delete",function(){
			$(this).closest("tr").fadeOut(300, function(){ $(this).remove()});
		});
		optgroupContainer.on("click", ".optgroup-image-btn",function(e){
			e.preventDefault();
			$(this).closest(".optiongroups").find(".optgroup-image-div").collapse("toggle");
		});
	}
	var handleForms = function() {
		$.validator.setDefaults({
			highlight: function(element) {
				$(element).closest('.form-group').addClass('has-error');
			},
			unhighlight: function(element) {
				$(element).closest('.form-group').removeClass('has-error');
			},
			errorElement: 'span',
			errorClass: 'help-block',
			errorPlacement: function(error, element) {
				if(element.parent('.input-group').length) {
					error.insertAfter(element.parent());
				} else {
					error.insertAfter(element);
				}
			}
		});
		var product_form_validater = $("#product-form").validate();
		$("#tab_images_uploader_pickfiles").on('click', function(){
			$(".alert-product-image").hide();
		});
		$("#product-form").on('submit', function(e){
			e.preventDefault();
			$(".alert-product-image").hide();
			if(product_form_validater.valid() === true){
				$this = $(this);
				var el = $this.closest(".portlet").children(".portlet-body");
				image_vals = $("#image-names").val().trim();
				$productDescription = $('#product-description').summernote('code');
				if($($productDescription).text().length < 20){ // summernote validation....
					$('.summernote-error').show();
					$('#product-description').summernote('focus');
					return false;
					Metronic.unblockUI(el);
				}
				if(image_vals == "" || image_vals.indexOf(".") < 5){ // image valiadation 
					$(".alert-product-image").fadeIn("300").show();
					var $target = $('html,body'); 
					$target.animate({scrollTop: $target.height()}, 1000);
					return false;
					Metronic.unblockUI(el);
				}
				var $data = $this.serializeArray(); // convert form to array
				$data.push({name: "product-description", value: $productDescription});
				var optionGroups = $(".optiongroups", "#optiongroup-containner");
				if(optionGroups.length > 0){
					optionGroups.each(function(index, optiongroup){
						$data.push({name: "product-optgroup["+index+"]", value: $(optiongroup).find(".product-optgroup-select").val()}); 
						$data.push({name: "product-opttype["+index+"]", value: $(optiongroup).find(".product-optgroup-select option:selected").data("type")}); 
						$data.push({name: "product-options["+index+"]", value: $(optiongroup).find(".product-options-select2").select2("val")});
					});
				}
				//Metronic.blockUI({ target: el, animate: true, overlayColor: '#000000' });
				$.post( "assets/ajax/ajax1.php", $data, function(data){
					data = jQuery.parseJSON(data);
					if(data.error =="no"){
						var ClickBtnVal = $("[type=submit][clicked=true]", $this).data("value");
						if(ClickBtnVal == "save-exit"){
							location.href="products.php?Saved=Successfully";
						}else{
							Metronic.alert({type: 'success', message: data.msg, closeInSeconds: 5, icon: 'check'});
						}
					}else{
						Metronic.alert({type: 'danger', message: data.msg, closeInSeconds: 5, icon: 'warning'});
					}
					Metronic.unblockUI(el);
				});
			}
		});
		$("form button[type=submit], form input[type=submit]").click(function() {
			$("button[type=submit], input[type=submit]", $(this).parents("form")).removeAttr("clicked");
			$(this).attr("clicked", "true");
		});
	}
    return {

        //main function to initiate the module
        init: function () {
            handleImages();
			initComponents();
			handleForms();
        }

    };

}();