'use strict';

describe('LoginController', function () {
    // Load the parent app
    beforeEach(module('demoSite'));

    var $controller;
    var $scope, controller, $window;

    beforeEach(inject(function (_$controller_) {
        $controller = _$controller_;
        $scope = {};
        $window = { location: {}, open: function () { } };
        controller = $controller('LoginController', { $scope: $scope, $window: $window });
    }));

    describe('isTapIn variable', function () {
        it('is true by default', function () {
            expect($scope.isTapIn).toBe(true);
        });

        it('is true if that value is passed to initiateLogin', function () {
            $scope.initiateLogin(true);
            
            expect($scope.isTapIn).toBe(true);
        });

        it('is false if that value is passed to initiateLogin', function () {
            $scope.initiateLogin(false);

            expect($scope.isTapIn).toBe(false);
        });
    });

    describe('popup creation', function () {
        it('should pop up a new window when a new login is initiated', function () {
            spyOn($window, 'open');
            $scope.initiateLogin(true);
            expect($window.open).toHaveBeenCalled();
        })
    })

    describe('error message framework', function () {
        it('should convert error codes to friendly messages', function () {
            expect($scope.showError).toBe(false);

            // Loop through each property in the errorMessages object and check that it is displayed properly.
            for (var property in $scope.errorMessages) {
                if ($scope.errorMessages.hasOwnProperty(property)) {
                    $scope.showErrorFromCode(property);
                    expect($scope.errorMessage).toBe($scope.errorMessages[property]);
                    expect($scope.showError).toBe(true);
                }
            }
        });

        it('should handle lack of connection to the server', function () {
            expect($scope.showError).toBe(false);

            $scope.handleGetURLError();

            expect($scope.errorMessage).toBe($scope.errorMessages["no_connection"]);
            expect($scope.showError).toBe(true);
        });

        it('should hide any errors when a new login is initiated', function () {
            $scope.showError = true;

            $scope.initiateLogin(true);

            expect($scope.showError).toBe(false);
        })
    });

    describe('polling framework', function () {
        beforeEach(function () {
            // Because the framework utilizes a popup, these variables are NOT inside the controller.
            dataHasReturned = false;
            returnedData = new Object();
        });

        it('should handle manually closing of the popup window', function () {
            $scope.popupWindow = window.open();
            $scope.popupWindow.close();
            $scope.pollPopupForCompletedAuth();

            expect(dataHasReturned).toBe(false);
        });

        it('should present an error if one comes back from the server', function () {
            dataHasReturned = true;
            returnedData.error = "access_denied";

            expect($scope.showError).toBe(false);
            $scope.pollPopupForCompletedAuth();
            expect($scope.showError).toBe(true);
            expect(dataHasReturned).toBe(false);
        });

        it('should redirect the user to the auth page when proper data has returned', function () {
            dataHasReturned = true;
            returnedData = {
                subject: "1111-2222-3333-4444",
                username: "Test User",
                email: "testemail@privakey.invalid",
                details: "Tech+Details"
            };
            
            $scope.pollPopupForCompletedAuth();

            expect($window.location.href).toBe('/#/auth');
        });
    })
});