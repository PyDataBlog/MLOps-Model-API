define(function(require) {
    var Checker = require("checkers/controller/Checker"),
        GameBoard = require("checkers/controller/GameBoard"),
        GameSpace = require("checkers/controller/GameSpace");
        
    var instance = null;
    
    function GameBoardUtil() {
    }
    
    var getInstance = function() {
        if (instance === null) {
            instance = new GameBoardUtil();
        }
        return instance;
    }
    
    GameBoardUtil.prototype.getValidMoves = function(checker, gameBoard, posDir) {
        var validMoves = new Array();
        $.merge(validMoves, this.getEmptySpaceMoves(checker, gameBoard, posDir));
        $.merge(validMoves, this.getJumpMoves(checker, gameBoard, posDir));
        return validMoves;
    }
    
    GameBoardUtil.prototype.getEmptySpaceMoves = function(checker, gameBoard, posDir) {
        var emptySpaceMoves = new Array();
        
        var row = checker.getRow() + posDir;
        
        // Checks left move
        if (this.isValidMove(row, checker.getColumn() - 1)) {
            var gameSpace = gameBoard.getGameSpace(row, checker.getColumn() - 1)
            if (gameSpace.isEmpty()) {
                emptySpaceMoves.push(gameSpace);
            }
        }
        
        // Checks right move
        if (this.isValidMove(row, checker.getColumn() + 1)) {
            var gameSpace = gameBoard.getGameSpace(row, checker.getColumn() + 1);
            if (gameSpace.isEmpty()) {
                emptySpaceMoves.push(gameSpace);
            }
        }    
        
        if (checker.isKing()) {
            var kRow = checker.getRow() - posDir;
            // Checks left move
            if (this.isValidMove(kRow, checker.getColumn() - 1)) {
                var gameSpace = gameBoard.getGameSpace(kRow, checker.getColumn() - 1)
                if (gameSpace.isEmpty()) {
                    emptySpaceMoves.push(gameSpace);
                }
            }

            // Checks right move
            if (this.isValidMove(kRow, checker.getColumn() + 1)) {
                var gameSpace = gameBoard.getGameSpace(kRow, checker.getColumn() + 1);
                if (gameSpace.isEmpty()) {
                    emptySpaceMoves.push(gameSpace);
                }
            }     
        }
        return emptySpaceMoves;
    }
    
    GameBoardUtil.prototype.isValidMove = function(row, column) {
        if (row < 0 || row >= GameBoard.NUMSQUARES || column < 0 || column >= GameBoard.NUMSQUARES) {
            return false;
        }
        return true;
    }
    
    GameBoardUtil.prototype.getJumpMoves = function(checker, gameBoard, posDir) {
        var jumpMoves = new Array();
        
        var row = checker.getRow() + posDir * 2;
        
        // Checks left jump move
        if (this.isValidMove(row, checker.getColumn() - 2)) {
            var gameSpace = gameBoard.getGameSpace(row, checker.getColumn() - 2);
            if (gameSpace.isEmpty()) {
                var jumpedGameSpace = gameBoard.getGameSpace(row - posDir, checker.getColumn() - 1);
                if (!jumpedGameSpace.isEmpty() && jumpedGameSpace.getChecker().getPlayerId() != checker.getPlayerId()) {
                    jumpMoves.push(gameSpace);    
                }
            }
        }
        
        // Checks right jump move
        if (this.isValidMove(row, checker.getColumn() + 2)) {
            var gameSpace = gameBoard.getGameSpace(row, checker.getColumn() + 2);
            if (gameSpace.isEmpty()) {
                var jumpedGameSpace = gameBoard.getGameSpace(row - posDir, checker.getColumn() + 1);
                if (!jumpedGameSpace.isEmpty() && jumpedGameSpace.getChecker().getPlayerId() != checker.getPlayerId()) {
                    jumpMoves.push(gameSpace);    
                }
            }
        } 
        
        if (checker.isKing()) {
            // Checks left jump move
            var kRow = checker.getRow() - posDir * 2;
            if (this.isValidMove(kRow, checker.getColumn() - 2)) {
                var gameSpace = gameBoard.getGameSpace(kRow, checker.getColumn() - 2);
                if (gameSpace.isEmpty()) {
                    var jumpedGameSpace = gameBoard.getGameSpace(kRow + posDir, checker.getColumn() - 1);
                    if (!jumpedGameSpace.isEmpty() && jumpedGameSpace.getChecker().getPlayerId() != checker.getPlayerId()) {
                        jumpMoves.push(gameSpace);    
                    }
                }
            }

            // Checks right jump move
            if (this.isValidMove(kRow, checker.getColumn() + 2)) {
                var gameSpace = gameBoard.getGameSpace(kRow, checker.getColumn() + 2);
                if (gameSpace.isEmpty()) {
                    var jumpedGameSpace = gameBoard.getGameSpace(kRow + posDir, checker.getColumn() + 1);
                    if (!jumpedGameSpace.isEmpty() && jumpedGameSpace.getChecker().getPlayerId() != checker.getPlayerId()) {
                        jumpMoves.push(gameSpace);    
                    }
                }
            }     
        }
        return jumpMoves;
    }
    
    return ({getInstance:getInstance});
});