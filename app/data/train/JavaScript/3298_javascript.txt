/**
 * Fac.js
 * (c) 2017 Owen Luke
 * https://github.com/tasjs/fac
 * Released under the MIT License.
 */

var copy = require('./copy');
var chain = require('./chain');
var super_ = require('./super');

var core = {
	new: function(options){
		typeof options === 'string' && (options = {name: options});

		var obj = chain.create(this, options);
		obj.protoName = this.name;
		obj.model = this;
		obj.super = super_;

		chain.init(obj.parent, options, obj);
		return obj;
	},

	extends: function(proto, p1){
		var obj = chain.create(this, {});
		var options = proto;

		if (typeof p1 !== 'undefined') {
			var args = Array.prototype.slice.call(arguments);

			for (var i = 0, len = args.length - 1; i < len; i ++) {
				options = args[i];
				copy.do(obj, options);
			}

			options = args[i];
		}

		copy.do(obj, options);

		obj.protoName = options.name;
		obj.super = super_;

		typeof options.default === 'function' && options.default.call(obj, options);
		return obj;
	},

	ext: function(options){
		copy.do(this, options);
		return this;
	},

	spawn: function(options) {
		typeof options === 'string' && (options = {name: options});

		var obj = Object.create(this);
		copy.do(obj, options);
		chain.init(this, options, obj);
		return obj;
	},

	isChildOf: function(obj){
		return chain.isChildOf(obj, this);
	},

	isParentOf: function(obj){
		return chain.isParentOf(obj, this);
	},

	isAncestorOf: function(obj){
		return chain.isAncestorOf(obj, this);
	},

	isDescendantOf: function(obj){
		return chain.isDescendantOf(obj, this);
	},

	isModelOf: function(obj){
		return this === obj.model;
	},

	isCopyOf: function(obj){
		return this.model === obj;
	}
};

module.exports = core;
