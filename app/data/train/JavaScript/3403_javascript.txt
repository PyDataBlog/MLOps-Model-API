/**
 * @license Copyright (c) 2012, Viet Trinh All Rights Reserved.
 * Available via MIT license.
 */

/**
 * An authorizeation interceptor used to determine if the user can access the given resource.
 */
define([ 'framework/controller/interceptor/i_interceptor', 
		 'framework/core/utils/clazz',
		 'framework/core/deferred/deferred' ],
function(IInterceptor, 
		 ClazzUtils, 
		 Deferred)
{
	var AuthorizationInterceptor = function()
		{
			IInterceptor.call(this);
			
			return this;
		}

	AuthorizationInterceptor.prototype = new IInterceptor();
	ClazzUtils.generateProperties(AuthorizationInterceptor);

	// @override
	AuthorizationInterceptor.prototype.before = function(requestContext) 
	{
		var controller = requestContext.getController(),
			secured = controller.getSecured && controller.getSecured() === true,
			securedAdmin = controller.getSecuredAdmin && controller.getSecuredAdmin() === true,
			stateService = requestContext.getStateService();

		// If this controller is secured and there's no user logged in, then fail.
		if ((secured || securedAdmin) && (!stateService.getCurrentUser() || !stateService.getCurrentUser().getId()))
		{
			requestContext.setStatusCode(401);
			requestContext.setErrorMessage('Unauthorized Access! Please log in to access the given resource.');
			return Deferred.rejectedPromise(requestContext);
		}
		// If this controller is secured admin and the user doesn't have access priveledges.
		else if (securedAdmin && stateService.getCurrentUser().getIsAdmin() !== true)
		{
			requestContext.setStatusCode(403);
			requestContext.setErrorMessage('Unauthorized Access! You are not allowed to access the given resource.');
			return Deferred.rejectedPromise(requestContext);
		}

		// Assumes this function doesn't fail.
		return Deferred.resolvedPromise(requestContext);	
	};

	// @override
	AuthorizationInterceptor.prototype.after = function(requestContext) 
	{
		return Deferred.resolvedPromise(requestContext);
	};

	return AuthorizationInterceptor;
});