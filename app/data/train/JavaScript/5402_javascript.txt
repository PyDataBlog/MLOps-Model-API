const should = require('should');
const MissionLog = require('../lib/log').MissionLog;
const Severity = require('../lib/Severity');

describe('MissionLog', function () {
   it('should test the properties', function () {
        const Log = new MissionLog();

        Log.should.have.property('severities').with.lengthOf(5);
        Log.should.have.property('defaultSeverity');
    });

    it('should return the default severity', function () {
        const Log = new MissionLog();
        Log.getDefaultSeverity().name.should.be.equal('VERBOSE');
        const severities = Log.getSeverities();
        should(severities.length).be.equal(5);
    });

    it('should add a new severity', function() {
        const severityName = 'Test123123';
        const newSeverity = new Severity(severityName);
        const Log = new MissionLog();
        Log.addSeverity(newSeverity);
        const severities = Log.getSeverities();
        const length = severities.length;
        should(length).be.equal(6);
        should(severities[5].name).be.equal(severityName.toUpperCase());
    });

    it('should switch the default severity', function() {
        const newSeverity = new Severity('Test');

        const Log = new MissionLog();

        Log.setDefaultSeverity(newSeverity);

        const defaultSeverity = Log.getDefaultSeverity();
        should(defaultSeverity.name).equal(newSeverity.name);
    });

    it('should try to add a severity twice', function() {
        const firstSeverity = new Severity('UnitTesting');
        const secondSeverity = new Severity('UnitTesting');
        const Log = new MissionLog();

        const preCount = Log.getSeverities().length;
        Log.addSeverity(firstSeverity);
        const afterFirst = Log.getSeverities().length;
        Log.addSeverity(secondSeverity);
        const afterSecond = Log.getSeverities().length;
        should(afterFirst).be.equal(afterSecond);
    });


    it('should log using verbose severity', function () {
        const Log = new MissionLog();
        Log.log('VERBOSE', 'test');
    });
});
