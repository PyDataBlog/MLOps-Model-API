'use strict'
import Macro from './macro.js'

/**
 * マクロスタック
 */
export default class MacroStack {
  /**
   * コンストラクタ
   */
  constructor () {
    /**
     * [*store manual] スタックの中身
     * @private
     * @type {Array}
     */
    this.stack = []
  }

  /**
   * スタックへ積む
   * @param {Macro} macro マクロ
   */
  push (macro) {
    this.stack.push(macro)
  }

  /**
   * スタックから降ろす
   * @return {Macro} マクロ
   */
  pop () {
    return this.stack.pop()
  }

  /**
   * スタックが空かどうか
   * @return {boolean} 空ならtrue
   */
  isEmpty () {
    return this.stack.length <= 0
  }

  /**
   * スタックの一番上のマクロを返す
   * @return {Macro} マクロ
   */
  getTop () {
    if (this.isEmpty()) {
      return null
    } else {
      return this.stack[this.stack.length - 1]
    }
  }

  /**
   * 状態を保存
   * @param {number} tick 時刻
   * @return {object} 保存データ
   */
  store (tick) {
    // Generated by genStoreMethod.js
    let data = {}

    // 保存

    // 以下、手動で復元する

    // store this.stack
    data.stack = []
    this.stack.forEach((macro) => {
      data.stack.push(macro.store(tick))
    })

    return data
  }

  /**
   * 状態を復元
   * @param {object} data 復元データ
   * @param {number} tick 時刻
   * @param {AsyncTask} task 非同期処理管理
   */
  restore (data, tick, task) {
    // Generated by genRestoreMethod.js

    // 復元

    // 以下、手動で復元する

    // restore this.stack
    this.stack = []
    // console.log(data)
    data.stack.forEach((macroData) => {
      let macro = new Macro('')
      macro.restore(macroData, tick, task)
      this.stock.push(macro)
    })
  }
}
