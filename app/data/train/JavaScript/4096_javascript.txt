import React from 'react';
import Reflux from 'reflux';
import ChatActions from '../events/chat-actions';
import ChatStore from '../events/chat-store';
import classNames from 'classnames';
import {deepEqual} from '../events/chat-store-utils';
import {Dropdown, MenuItem} from 'react-bootstrap';

var GroupHeaderPane = React.createClass({
    mixins: [Reflux.connect(ChatStore, 'store')],

    shouldComponentUpdate: function(nextProps, nextState) {
        return !deepEqual(this.state.store, nextState.store,
            ["selectedGroup.id",
                "selectedGroup.followed",
                "selectedIntegration.id",
                "selectedIntegrationGroupTopic.id",
                "selectedTopic.id",
                "selectedIntegrationTopic.id",
                "topics.id",
                "integrationTopics.id"]);
    },

    onClick: function () {
        if (this.state.store.selectedGroup) {
            ChatActions.selectTopic();
        } else if (this.state.store.selectedIntegrationGroup) {
            ChatActions.selectIntegrationTopic(this.state.store.selectedIntegration, this.state.store.selectedIntegrationGroup);
        }
    },
    
    onFollowStateChange: function (newFollowState) {
        if (this.state.store.selectedGroup) {
            ChatActions.groupFollowStatusChange(this.state.store.selectedGroup, newFollowState);
        }
    },

    render: function () {
        var self = this;
       
        var newTopicClass = classNames({
            ["selected"]: !(self.state.store.selectedTopic || self.state.store.selectedIntegrationTopic),
            ["enabled"]: ((self.state.store.selectedGroup || self.state.store.selectedIntegrationGroup))
        });

        var groupHeader = !self.state.store.selectedIntegration &&
            !self.state.store.selectedGroup ? "" :
            (!self.state.store.selectedIntegration && self.state.store.selectedGroup ? ("# " + self.state.store.selectedGroup.name) :
                    (self.state.store.selectedGroup ? self.state.store.selectedGroup.name : self.state.store.selectedIntegration.name)
            );

        var followedClass = classNames({
            ["followed"]: self.state.store.selectedGroup && self.state.store.selectedGroup.followed
        });

        var followTitle = self.state.store.selectedGroup && self.state.store.selectedGroup.followed ? "Unfollow" : "Follow";
        var star = self.state.store.selectedGroup ? (
                <span className="glyphicon glyphicon-star-empty star" onClick={self.onFollowStateChange.bind(this, !self.state.store.selectedGroup.followed)}></span>
            ) : null;

        var dropDown = self.state.store.selectedGroup ? (
                <Dropdown id="group-drop-down" className="pull-right">
                    <a href="#" bsRole="toggle">
                        <span className="glyphicon glyphicon-chevron-down"></span>
                    </a>
                    <Dropdown.Menu bsRole="menu">
                        <MenuItem eventKey="1" onSelect={self.onFollowStateChange.bind(this, !self.state.store.selectedGroup.followed)}>{followTitle}</MenuItem>
                    </Dropdown.Menu>
                </Dropdown>
            ) : null;

        return self.state.store.selectedGroup || self.state.store.selectedIntegration ? (<div id="group-header-pane">
            <a id="new-topic" className={newTopicClass}
               onClick={self.onClick}>
                New topic
            </a>
            <div id="group-header" className={followedClass}>{groupHeader}&nbsp;&nbsp;
                {star}
                {dropDown}
            </div>
            <div className="clearfix"></div>
        </div>) : ( <div className="space"></div>);
    }
});

export default GroupHeaderPane;