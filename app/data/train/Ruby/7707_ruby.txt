# frozen_string_literal: true
require 'spec_helper'

describe Flagstaff do
  it 'has a version number' do
    expect(Flagstaff::VERSION).not_to be nil
  end

  around do |example|
    old_flags = Flagstaff.flags
    example.run
    Flagstaff.flags = old_flags
  end

  describe '.configure' do
    it 'returns self' do
      expect(Flagstaff.configure({})).to be(Flagstaff)
    end

    it 'creates a flag with defaults' do
      expect(Flagstaff.configure(flag_a: nil)[:flag_a].variants.keys.sort)
        .to eq([:off, :on])
    end

    it 'creates a flag with non-defaults' do
      expect(Flagstaff.configure(flag_b: { variants: [:v1, :v2] })[:flag_b]
             .variants.keys.sort).to eq([:v1, :v2])
    end

    it 'creates a flag from strings' do
      expect(Flagstaff.configure('flag_c' => nil)[:flag_c].name).to eq(:flag_c)
    end

    it 'clears flags' do
      expect(Flagstaff.configure({}).flags).to be_empty
    end

    it 'handles non-hash input' do
      expect(Flagstaff.configure(false).flags).to be_empty
    end
  end

  describe '.[]' do
    before { Flagstaff.configure(flag_a: nil) }

    it 'looks up a flag' do
      expect(Flagstaff[:flag_a].name).to eq(:flag_a)
    end

    it 'looks up by string' do
      expect(Flagstaff['flag_a'].name).to eq(:flag_a)
    end
  end

  describe '.flag' do
    before { Flagstaff.configure(flag_a: nil) }

    it 'looks up a flag' do
      expect(Flagstaff.flag_a.name).to eq(:flag_a)
    end
  end
end
