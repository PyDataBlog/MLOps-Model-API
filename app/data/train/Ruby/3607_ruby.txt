# frozen_string_literal: true

module Lowdown
  # An object that represents a response from the Apple Push Notification service for a single notification delivery.
  #
  # @see https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/APNsProviderAPI.html
  #
  #
  # @attr   [Hash] headers
  #         The HTTP response headers from the service.
  #
  # @attr   [String] raw_body
  #         The JSON encoded response body from the service.
  #
  class Response < Struct.new(:headers, :raw_body)
    # The possible HTTP status codes and their associated messages.
    #
    STATUS_CODES = {
      200 => "Success",
      400 => "Bad request",
      403 => "There was an error with the certificate",
      405 => "The request used a bad :method value. Only POST requests are supported",
      410 => "The device token is no longer active for the topic",
      413 => "The notification payload was too large",
      429 => "The server received too many requests for the same device token",
      500 => "Internal server error",
      503 => "The server is shutting down and unavailable",
    }.freeze

    # The reasons that indicate a device token not being valid besides just being unregistered.
    #
    INVALID_TOKEN_REASONS = %( Unregistered BadDeviceToken DeviceTokenNotForTopic ).freeze

    # @return [String]
    #         either the {Notification#id} or, if none was provided, an ID generated by the service.
    #
    def id
      headers["apns-id"]
    end

    # @return [Integer]
    #         the HTTP status returned by the service.
    #
    # @see Response::STATUS_CODES
    #
    def status
      headers[":status"].to_i
    end

    # @return [String]
    #         the message belonging to the {#status} returned by the service.
    #
    # @see Response::STATUS_CODES
    #
    def message
      STATUS_CODES[status]
    end

    # @return [Boolean]
    #         whether or not the notification has been delivered.
    #
    def success?
      status == 200
    end

    # @return [Hash, nil]
    #         the response payload from the service, which is empty in the case of a successful delivery.
    #
    def body
      JSON.parse(raw_body) if raw_body
    end

    # @return [String, nil]
    #         the reason for a failed delivery.
    #
    def failure_reason
      body["reason"] unless success?
    end

    # @return [Boolean]
    #         whether or not the token is invalid for any of the reasons listed in {INVALID_TOKEN_REASONS}.
    #
    def invalid_token?
      !success? && INVALID_TOKEN_REASONS.include?(failure_reason)
    end

    # @return [Boolean]
    #         whether or not the delivery has failed due to a token no longer being active.
    #
    def inactive_token?
      status == 410
    end

    # @return [Time, nil]
    #         in case of an inactive token, the time at which the service last verified it.
    #
    def activity_last_checked_at
      Time.at(body["timestamp"].to_i / 1000) if inactive_token?
    end

    # @return [String]
    #         a formatted description of the response.
    #
    def to_s
      reason = ": #{failure_reason}" unless success?
      last_check = " last checked at #{activity_last_checked_at}" if inactive_token?
      "#{status} (#{message})#{reason}#{last_check}"
    end

    # @return [String]
    #         a formatted description of the response used for debugging.
    #
    def inspect
      "#<Lowdown::Connection::Response #{to_s}>"
    end
  end
end

