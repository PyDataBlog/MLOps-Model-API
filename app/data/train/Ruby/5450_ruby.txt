module Publisher
  module Model
    def self.included(base)
      base.send :extend, ClassMethods
    end

    module ClassMethods
      def publishable(options = {})
        send :include, InstanceMethods

        class_attribute :publisher_options
        self.publisher_options = options.dup

        scope :published, -> { where(publisher_options[:column_name] => 1) }
        scope :unpublished, -> { where(publisher_options[:column_name] => 0) }
      end

      def publish_status(option)
        case option.to_i
        when 1
          self.published
        when 2
          self.unpublished
        else
          self.where(nil)
        end
      end
    end

    module InstanceMethods
      def published?
        !send(self.class.publisher_options[:column_name]).zero?
      end

      def publish!
        write_attribute self.class.publisher_options[:column_name], 1
        update_column self.class.publisher_options[:column_name], send(self.class.publisher_options[:column_name])
      end

      def unpublish!
        write_attribute self.class.publisher_options[:column_name], 0
        update_column self.class.publisher_options[:column_name], send(self.class.publisher_options[:column_name])
      end
    end
  end
end
