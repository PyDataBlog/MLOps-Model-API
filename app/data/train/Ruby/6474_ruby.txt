module Comonovo
  class Market
    def initialize(url_factory, url_downloader, json_scraper, price_scraper)
      @url_factory = url_factory
      @url_downloader = url_downloader
      @json_scraper = json_scraper
      @price_scraper = price_scraper
    end

    def get_item_ads(item_name, search_query = nil)
      search_query = item_name unless search_query

      url = @url_factory.get_json_url(search_query)

      items = []

      begin
        information = get_information_from_url(item_name, url)
        items.concat information[:items]

        yield information[:items] if block_given?

        url = @json_scraper.extract_next_page_url information[:json] 
      end while url

      return items.uniq
    end

    def get_information_from_url(item_name, url)
      json = @url_downloader.get url 

      items = []

      total_ads = @json_scraper.extract_number_of_ads json

      if total_ads > 0
        items = @json_scraper.extract_items json

        items.each do |item|
          price = @price_scraper.extract item_name, item[:description]
          item[:price] = price if price > 0
        end
      end

      return { :items => items, :json => json }
    end
  end
end
