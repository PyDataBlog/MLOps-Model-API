require 'spec_helper'

describe 'api/v1' do

  def app
    Lunchbunch::API::V1
  end

  before(:all) do
    header 'Accept', 'application/json'
  end

  describe "GET /outings" do
    let!(:restaurant) { Restaurant.create(name: 'Sushi Bistro') }
    let(:outings) { JSON.parse(last_response.body) }
    let(:outing) { outings.first }

    before do
      Outing.create(day: '2012-03-29', restaurant: restaurant)
      Quantum.leap(Time.new(2012, 03, 31, 8, 00))
      Outing.create(restaurant: restaurant)
      get '/outings'
    end

    after do
      Quantum.leap_back
    end

    it "returns only today's outings" do
      last_response.should be_ok
      outings.size.should eq(1)
      outing['day'].should match('2012-03-31')
    end

    it "returns restaurants nested in the outings" do
      last_response.should be_ok
      outing['restaurant']['id'].should eq(restaurant.id)
    end
  end

  describe "POST /outings" do
    let(:restaurant) { Restaurant.create(name: 'Casa Maya') }
    let(:post_data) do
      { restaurant_id: restaurant.id, day: '2012-03-29' }
    end
    let(:outing) { JSON.parse(last_response.body) }

    before { post '/outings', post_data }

    context "with proper data" do
      it "creates an outing" do
        last_response.should be_ok
        outing['restaurant']['id'].should eq(restaurant.id)
        outing['day'].should match('2012-03-29')
      end
    end
  end

  describe "POST /outings/:id/join" do
    let(:restaurant) { Restaurant.create(name: 'Foreign Cinema') }
    let(:outing) { Outing.create(restaurant: restaurant) }
    let(:post_data) do
      { name: 'Matthew' }
    end

    before do
      post "/outings/#{outing.id}/join", post_data
    end

    it 'creates an attendee for an outing' do
      last_response.should be_ok
      outing.attendees.count.should eq(1)
    end
  end

end
