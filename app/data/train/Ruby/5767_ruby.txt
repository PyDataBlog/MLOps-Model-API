require 'spec_helper'

describe 'KeypayIntegration::Rest::Request' do
  let(:request_method) { :get }
  let(:path) { 'http://localhost:3000/organisations/1' }
  let(:params) { {} }
  let(:options) { {} }
  let(:request) { KeypayIntegration::Rest::Request.new(request_method, path, params, options) }
  let(:response) { double(:response) }

  describe '#perform' do
    context 'success' do
      let(:parsed_response) { {} }
      before do
        response.stub(:success?).and_return(true)
        response.stub(:parsed_response).and_return(parsed_response)
      end

      context 'raw_response = false' do
        it 'return parsed response body' do
          expect(KeypayIntegration::Rest::Request).to receive(:send).with(request_method, path, params).and_return(response)
          expect(request.perform).to eq(parsed_response)
        end
      end

      context 'raw_response = true' do
        before { options.merge!(raw_response: true) }
        it 'return raw response' do
          expect(KeypayIntegration::Rest::Request).to receive(:send).with(request_method, path, params).and_return(response)
          expect(request.perform).to eq(response)
        end
      end
    end

    context 'failure' do
      before do
        response.stub(:success?).and_return(false)
        response.stub(:code).and_return('401')
      end

      context 'raw response = false' do
        let(:error_message) { 'Not found' }
        before { expect(request).to receive(:parse_error).with(response).and_return(error_message) }

        it 'raise error message' do
          expect {
            expect(KeypayIntegration::Rest::Request).to receive(:send).with(request_method, path, params).and_return(response)
            request.perform
          }.to raise_error(KeypayIntegration::RequestError)
        end
      end

      context 'raw response = true' do
        before { options.merge!(raw_response: true) }

        it 'return raw response' do
          expect(KeypayIntegration::Rest::Request).to receive(:send).with(request_method, path, params).and_return(response)
          request.perform
        end
      end
    end
  end
end
