require 'test_helper'

class ListPolicyTest < ActiveSupport::TestCase
  def setup
    @list   = lists :one
    @member = members :one
    @current_context   = CurrentContext.new @member.user, @member.group, @member
  end

  # test exceptions

  test "should raise NotGroupMemberError when user is not part of group" do
      member = nil
      current_context = CurrentContext.new users(:one), groups(:one), member
      assert_raise GroupBasePolicy::NotGroupMemberError do
        ListPolicy.new(current_context, @list)
      end
  end

  # test update? and create?

  test "grants update access to list's creator" do
    @list.creator = @member
    assert ListPolicy.new(@current_context, @list).update?
    assert ListPolicy.new(@current_context, @list).edit?
  end

  test "denies update access when not list's creator" do
    @list.creator = members :two
    refute ListPolicy.new(@current_context, @list).update?
    refute ListPolicy.new(@current_context, @list).edit?
  end

  # test destroy?

  test "grants destroy access to list's creator" do
    @list.creator = @member
    assert ListPolicy.new(@current_context, @list).destroy?
  end

  test "denies destroy access when not list's creator" do
    @list.creator = members :two
    refute ListPolicy.new(@current_context, @list).destroy?
  end

  # test permitted_attributes

  test "permit only: title, expiration_date, visibility, description" do
    permitted = ListPolicy.new(@current_context, @list).permitted_attributes
    assert_equal %i(title expiration_date visibility description), permitted
  end
end
