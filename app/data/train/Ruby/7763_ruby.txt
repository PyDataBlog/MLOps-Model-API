dependencies = ['wangle', 'folly']
config, build, _, recipes = BuildEnv.get_settings(node, :proxygen, dependencies)
unless config['install'] then return end
include_recipe recipes


packages = BuildEnv.get_for_platform(node, {
  'ubuntu' => {
    '16.04' => [
      'autoconf-archive',
      'libcap-dev',
      'gperf',
      'wget',
      'unzip',
    ],
  },
  'centos' => {
    '7' => [
      'autoconf-archive',
      'libcap-devel',
      'gperf',
      'wget',
      'unzip',
    ],
  },
})

package packages

# TODO: Patch for proxygen. Looks like gflags somehow gets
#      included in httpclient/samples/curl/CurlClient.cpp
#      when in /usr/local/include rather than /opt/facebook/include
proxygen = compile 'proxygen' do
  deps dependencies
  output_file "#{build['install_prefix']}/lib/libproxygenlib.a"
  build_dir "#{config['src_dir']}/proxygen"
  build_cmd <<-EOF
if ! grep 'gflags\.h' httpclient/samples/curl/CurlClient.cpp; then \
  sed -i '1s|^|#include <gflags/gflags.h>\\n|' \
    httpclient/samples/curl/CurlClient.cpp; \
fi; \
autoreconf -ivf && \
./configure --prefix="#{build['install_prefix']}" && \
make #{build['make_parallelism']} && \
make install && \
make clean
EOF
end

build_package 'proxygen' do
  package_deps packages
  compiled_deps dependencies
  src_revision build['revision']
  description 'proxygen'
  build_revision lazy { proxygen.real_revision }
  files lazy { proxygen.package_files }
  output_dir build['package_output']
  only_if { build['build_package'] }
  url ''
  license 'TODO'
end
