require 'test_helper'

class TestRinqEnumerableGroup < Minitest::Test
  def setup
    @students = [
      @s0 = Student.new(111, 'Svetlana', 'Omelchenko', [97, 92, 81, 60]),
      @s1 = Student.new(112, 'Dmitry', 'Vorotilin', [75, 84, 91, 39]),
      @s2 = Student.new(113, 'Sven', 'Mortensen', [88, 94, 65, 91]),
      @s3 = Student.new(114, 'Cesar', 'Garcia', [97, 89, 85, 82]),
      @s4 = Student.new(115, 'Glass', 'Gorilla', [97, 89, 85, 82])
    ]
  end

  def test_basic
    query = from { student }.in { @students }.
            group { student }.by { student.last[0] }

    query.each_with_index do |i, (key, students)|
      assert_equal ['O', [@s0]], [key, students] if i == 0
      assert_equal ['V', [@s1]], [key, students] if i == 1
      assert_equal ['M', [@s2]], [key, students] if i == 2
      assert_equal ['G', [@s3, @s4]], [key, students] if i == 3
    end
  end

  def test_to_a
    query = from { student }.in { @students }.
            group { student }.by { student.last[0] }

    assert_equal [['O', [@s0]], ['V', [@s1]], ['M', [@s2]], ['G', [@s3, @s4]]], query.to_a
  end

  def test_to_hash
    query = from { student }.in { @students }.
            group { student }.by { student.last[0] }

    assert_equal({ 'O' => [@s0], 'V' => [@s1], 'M' => [@s2], 'G' => [@s3, @s4] }, query.to_hash)
  end

  def test_changed_object_for_grouping
    query = from { student }.in { @students }.
            group { student.last }.by { student.last[0] }

    assert_equal({
      'O' => ['Omelchenko'],
      'V' => ['Vorotilin'],
      'M' => ['Mortensen'],
      'G' => ['Garcia', 'Gorilla']
    }, query.to_hash)
  end

  def test_grouping_by_boolean
    query = from { student }.in { @students }.
            group { student }.by { student.scores.inject(:+) >= 300 }

    assert_equal({ true => [@s0, @s2, @s3, @s4], false => [@s1] }, query.to_hash)
  end
end
