#Import Libraries
import eventmaster as EM
from time import sleep
import random
import sys



""" Create new Instance of EventMasterSwitcher and turn off logging """
s3 = EM.EventMasterSwitcher()
s3.setVerbose(0)

with open('example_settings_.xml', 'r') as content_file:
    content = content_file.read()
s3.loadFromXML(content)


""" Enumerate all Inputs and print known information for each """
print("# Inputs")
for input_id, input_inst in s3.getInputs().items():

    input_name = input_inst.getName()
    frozen_string = "is Frozen" if input_inst.getFreeze() else "is not Frozen"

    print("  ({0!s}) {1!s} {2!s}".format(input_id, input_name, frozen_string))


""" Enumerate all Outputs and print known information for each """
print("\r\n# Outputs")
for output_id, output_inst in s3.getOutputs().items():

    output_name = output_inst.getName()

    print("  ({0!s}) {1!s}".format(output_id, output_name))


""" Enumerate all Presets and print known information for each """
print("\r\n# Presets")
for preset_id, preset_inst in s3.getPresets().items():

    preset_name = preset_inst.getName()

    print("  ({0!s}) {1!s}".format(preset_id, preset_name))


""" Enumerate all Destinations and print known information for each """
print("\r\n# Destinations:")
for dest_id, dest_inst in s3.getScreenDests().items():

    dest_numoflayers = len(dest_inst.getLayers())
    dest_name = dest_inst.getName()
    dest_size = dest_inst.getSize()

    print("\n  {1!s} is {2!s} x {3!s} & has {4!s} layer(s)".format( dest_id,
                                                                    dest_name,
                                                                    dest_size["HSize"],
                                                                    dest_size["VSize"],
                                                                    dest_numoflayers))

    """ Enumerate all Layers for Destination and print known information for each """
    for layer_number, layer_inst in dest_inst.getLayers().items():
        if "Pvw" in layer_inst:
            layer_name_pvw = layer_inst["Pvw"].getName()
            layer_owin_pvw = layer_inst["Pvw"].getOWIN()
            layer_hpos_pvw = layer_owin_pvw["HPos"]
            layer_hsize_pvw = layer_owin_pvw["HSize"]
            layer_vpos_pvw = layer_owin_pvw["VPos"]
            layer_vsize_pvw = layer_owin_pvw["VSize"]
            if layer_inst["Pvw"].getSource() is not None:
                layer_source_name_pvw = layer_inst["Pvw"].getSource().getName()
            else:
                layer_source_name_pvw = "(Unknown)"
            size_string_pvw = " {4!s} is on PVW - {0!s}x{1!s} at {2!s},{3!s}".format(layer_hsize_pvw, layer_vsize_pvw, layer_hpos_pvw, layer_vpos_pvw, layer_name_pvw)
            source_string_pvw = "   current source is {0!s}".format(layer_source_name_pvw)
        else:
            size_string_pvw = " Layer is not on PVW "
            source_string_pvw = ""

        if "Pgm" in layer_inst:
            layer_name_pgm = layer_inst["Pgm"].getName()
            layer_owin_pgm = layer_inst["Pgm"].getOWIN()
            layer_hpos_pgm = layer_owin_pgm["HPos"]
            layer_hsize_pgm = layer_owin_pgm["HSize"]
            layer_vpos_pgm = layer_owin_pgm["VPos"]
            layer_vsize_pgm = layer_owin_pgm["VSize"]
            if layer_inst["Pgm"].getSource() is not None:
                layer_source_name_pgm = layer_inst["Pgm"].getSource().getName()
            else:
                layer_source_name_pgm = "(Unknown)"
            size_string_pgm = " {4!s} is on PGM - {0!s}x{1!s} at {2!s},{3!s}".format(layer_hsize_pgm, layer_vsize_pgm, layer_hpos_pgm, layer_vpos_pgm, layer_name_pgm)
            source_string_pgm = "   current source is {0!s}".format(layer_source_name_pgm)

        else:
            size_string_pgm = " Layer is not on PGM "
            source_string_pgm = ""


        size_string = " {4!s} is on PGM - {0!s}x{1!s} at {2!s},{3!s}".format(layer_hsize_pgm, layer_vsize_pgm, layer_hpos_pgm, layer_vpos_pgm, layer_name_pgm)
        source_string = "   current source is {0!s}".format(layer_source_name_pgm)


        print("    ({0!s}) {1!s}\n        {2!s}\n        {3!s}\n        {4!s}".format(layer_number+1, size_string_pgm, source_string_pgm, size_string_pvw, source_string_pvw))


sys.exit()
