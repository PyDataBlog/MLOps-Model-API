# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.core.exceptions import ValidationError
from django.test import TestCase
from models import Student, StudyGroup, Task, Lab, Subject, GroupSubject


class PortalTest(TestCase):

    def setUp(self):
        self.study_group1 = StudyGroup.objects.create(name="10А")
        self.study_group2 = StudyGroup.objects.create(name="11Б")

        self.subject1 = Subject.objects.create(name="Оптика")
        self.subject2 = Subject.objects.create(name="Механика")

        self.group_subject11 = GroupSubject.objects.create(
            study_group=self.study_group1, subject=self.subject1
        )

        self.group_subject22 = GroupSubject.objects.create(
            study_group=self.study_group2, subject=self.subject2
        )

        self.student1 = Student.objects.create_user(
            username="ivan", email=None, password="123456", study_group=self.study_group1
        )

        self.student2 = Student.objects.create_user(
            username="pavel", email=None, password="123456", study_group=self.study_group2
        )

        self.lab1 = Lab.objects.create(name="Кольца ньютона", subject=self.subject1)
        self.lab2 = Lab.objects.create(name="Атвуд", subject=self.subject2)

    def test_task_create(self):
        has_error = False
        try:
            task = Task(student=self.student1, lab=self.lab1)
            task.clean()
            task.save()
        except ValidationError:
            has_error = True

        self.assertFalse(has_error)

    def test_task_create_double(self):
        """
        Должна выскочить ошибка валидации - пытаемся создать 2 одинаковых задания
        :return:
        """
        has_error = False
        try:
            task = Task(student=self.student1, lab=self.lab1)
            task.clean()
            task.save()

            task = Task(student=self.student1, lab=self.lab1)
            task.clean()
            task.save()
        except ValidationError:
            has_error = True

        self.assertTrue(has_error)

        # Проверяем что по данной учебной группе есть только одно задание
        subject = self.group_subject11.subject
        study_group = self.group_subject11.study_group

        task_count = Task.objects.filter(
            lab__subject__pk=subject.id, student__study_group__pk=study_group.id
        ).count()

        self.assertTrue(task_count, 1)
