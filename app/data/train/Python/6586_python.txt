class Solution:
    def uniquePathsIII(self, grid: 'List[List[int]]') -> 'int':
        self.res = 0
        R, C, E = len(grid), len(grid[0]), 1
        for i in range(R):
            for j in range(C):
                if grid[i][j] == 1: x,y = (i, j)
                elif grid[i][j] == 2: end = (i, j)
                elif grid[i][j] == 0: E += 1
        def dfs(x, y, E):
            if not (0 <= x < R and 0 <= y < C and grid[x][y] >= 0): return
            if (x,y) == end and E == 0:
                self.res += 1
                return
            grid[x][y] = -2
            dfs(x+1, y, E-1)
            dfs(x-1, y, E-1)
            dfs(x, y+1, E-1)
            dfs(x, y-1, E-1)
            grid[x][y] = 0
        dfs(x, y, E)
        return self.res

       
s = Solution() 
print(s.uniquePathsIII([[1,0,0,0],[0,0,0,0],[0,0,2,-1]]))
print(s.uniquePathsIII([[1,0,0,0],[0,0,0,0],[0,0,0,2]]))
print(s.uniquePathsIII([[0,1],[2,0]]))
