"""
Unit tests for the HashTask object
By Simon Jones
26/8/2017
"""

import unittest
from test.TestFunctions import *
from source.HashTask import *
from source.Channel import Channel


class HashTaskUnitTests(unittest.TestCase):
	"""
	Unit tests for the HashTask object
	"""
	def setUp(self):
		self.task1_t_channel = Channel(True)
		self.task1_c_channel = Channel(True)
		self.task2_t_channel = Channel(True)
		self.task2_c_channel = Channel(True)
		self.task1 = spawn_thread(self.task1_c_channel, self.task1_t_channel)
		self.task2 = spawn_thread(self.task2_c_channel, self.task2_t_channel)
		self.test_filename = "hash_task_unittest_file.log"
		file = open(self.test_filename, "w")
		file.write("Test Data 123\nHello, world!")
		file.close()
		print("\nNew Test case:")

	def test_spawning_and_joining_tasks(self):
		"""
		Tests that tasks can be created and joined
		:return:
		"""
		self.task1.start()
		self.task2.start()
		self.task1_t_channel.put(str(TaskMessage(TaskMessage.FLAG_ECHO, 1, TaskMessage.REQUEST, "Hello World Task1")))
		self.task2_t_channel.put(str(TaskMessage(TaskMessage.FLAG_ECHO, 2, TaskMessage.REQUEST, "Hello World Task2")))
		# Should be ignored
		self.task2_t_channel.put(str(TaskMessage(TaskMessage.FLAG_ECHO, 2, TaskMessage.RESPONSE, "Hello World Task2")))
		delay_do_nothing(1)
		self.task1_c_channel.put(str(TaskMessage(TaskMessage.FLAG_JOIN, 1, TaskMessage.REQUEST)))
		self.task2_c_channel.put(str(TaskMessage(TaskMessage.FLAG_JOIN, 2, TaskMessage.REQUEST)))
		self.task1.join()
		self.task2.join()
		empty_channel(self, self.task1_t_channel.get_in_queue(), 3)
		empty_channel(self, self.task2_t_channel.get_in_queue(), 3)
		empty_channel(self, self.task1_c_channel.get_in_queue(), 2)
		empty_channel(self, self.task2_c_channel.get_in_queue(), 2)

	def test_task_errors(self):
		"""
		Tests that HashTasks can handle errors properly
		:return:
		"""
		self.task1.start()
		self.task2.start()
		self.task1_t_channel.put(str(TaskMessage("NOT_A_FLAG", 1, TaskMessage.REQUEST, "ERROR_TASK")))
		delay_do_nothing()
		self.task1_c_channel.put(str(TaskMessage(TaskMessage.FLAG_JOIN, 1, TaskMessage.REQUEST)))
		self.task2_c_channel.put(str(TaskMessage(TaskMessage.FLAG_JOIN, 2, TaskMessage.REQUEST)))
		self.task1.join()
		self.task2.join()
		empty_channel(self, self.task1_t_channel.get_in_queue(), 3)
		empty_channel(self, self.task2_t_channel.get_in_queue(), 1)
		empty_channel(self, self.task1_c_channel.get_in_queue(), 2)
		empty_channel(self, self.task2_c_channel.get_in_queue(), 2)

	def test_another_hash_task_case(self):
		"""
		Another test for robustness
		:return:
		"""
		self.task1.start()
		self.task2.start()
		self.task1_t_channel.put(str(TaskMessage(TaskMessage.FLAG_HASH, 1, TaskMessage.REQUEST, self.test_filename, 0, 10)))
		self.task1_t_channel.put(str(TaskMessage(TaskMessage.FLAG_HASH, 1, TaskMessage.REQUEST, self.test_filename, 10, 10)))
		self.task1_t_channel.put(str(TaskMessage(TaskMessage.FLAG_HASH, 1, TaskMessage.REQUEST, self.test_filename, 20, 10)))
		delay_do_nothing(1)
		self.task1_c_channel.put(str(TaskMessage(TaskMessage.FLAG_JOIN, 1, TaskMessage.REQUEST)))
		self.task2_c_channel.put(str(TaskMessage(TaskMessage.FLAG_JOIN, 2, TaskMessage.REQUEST)))
		self.task1.join()
		self.task2.join()
		empty_channel(self,  self.task1_t_channel.get_in_queue(), 5)
		empty_channel(self,  self.task2_t_channel.get_in_queue(), 1)
		empty_channel(self,  self.task1_c_channel.get_in_queue(), 2)
		empty_channel(self, self.task2_c_channel.get_in_queue(), 2)

	def test_actions_after_join_are_executes(self):
		"""
		Tests that the messages received after a join task are executed.
		:return:
		"""
		self.task1_t_channel.put(str(TaskMessage(TaskMessage.FLAG_ECHO, 1, TaskMessage.REQUEST, "Echo 1")))
		self.task2_t_channel.put(str(TaskMessage(TaskMessage.FLAG_ECHO, 2, TaskMessage.REQUEST, "Echo 1")))
		self.task1_c_channel.put(str(TaskMessage(TaskMessage.FLAG_JOIN, 1, TaskMessage.REQUEST)))
		self.task2_c_channel.put(str(TaskMessage(TaskMessage.FLAG_JOIN, 2, TaskMessage.REQUEST)))
		self.task1_t_channel.put(str(TaskMessage(TaskMessage.FLAG_ECHO, 1, TaskMessage.REQUEST, "Echo 2")))
		self.task2_t_channel.put(str(TaskMessage(TaskMessage.FLAG_ECHO, 2, TaskMessage.REQUEST, "Echo 2")))
		self.task1.start()
		self.task2.start()
		delay_do_nothing(1)
		self.task1.join()
		self.task2.join()
		empty_channel(self, self.task1_t_channel.get_in_queue(), 2)
		empty_channel(self, self.task2_t_channel.get_in_queue(), 2)
		empty_channel(self, self.task1_c_channel.get_in_queue(), 2)
		empty_channel(self, self.task2_c_channel.get_in_queue(), 2)


if __name__ == "__main__":
	unittest.main()
