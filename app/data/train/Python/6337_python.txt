# coding: utf-8

class Solution(object):

    @staticmethod
    def dfs(candidates, target, vis, res, cur_idx, sum):
        if sum > target:
            return
        if sum == target:
            ans = [candidates[i] for i in cur_idx if i >= 0]
            res.append(ans)
            return
        if sum < target:
            for i, v in enumerate(candidates):
                if sum + v > target:
                    break
                if i != cur_idx[-1] + 1 and candidates[i] == candidates[i-1]:
                    continue
                if i >= cur_idx[-1] and (not vis[i]):
                    vis[i] = 1
                    cur_idx.append(i)
                    Solution.dfs(candidates, target, vis, res, cur_idx, sum+v)
                    vis[i] = 0
                    cur_idx.pop()

    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        candidates = sorted(candidates)
        n = len(candidates)
        res = []
        cur_idx = [-1]
        vis = [0 for _ in candidates]
        Solution.dfs(candidates, target, vis, res, cur_idx, 0)
#         return map(list, list(res))
        return res


s = Solution()
print s.combinationSum2([10,1,2,7,6,1,5], 8)
print s.combinationSum2([2,5,2,1,2], 5)
