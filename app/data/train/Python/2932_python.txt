import sys
import os
import time
import numpy
import cv2
import cv2.cv as cv
from PIL import Image

sys.path.insert(0, os.path.join(
    os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))

from picture.util import define
from picture.util.system import POINT
from picture.util.log import LOG as L

THRESHOLD = 0.96

class PatternMatch(object):

    def __init__(self):
        pass

    @classmethod
    def __patternmatch(self, reference, target):
        L.info("reference : %s" % reference)
        img_rgb = cv2.imread(reference)
        img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)
        template = cv2.imread(target, 0)
        w, h = template.shape[::-1]
        res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)
        loc = numpy.where( res >= THRESHOLD)
        result = None
        for pt in zip(*loc[::-1]):
            result = POINT(pt[0], pt[1], w, h)
        return result

    @classmethod
    def bool(self, reference, target):
        result = PatternMatch.__patternmatch(reference, target)
        if result is None:
            return False
        else:
            return True

    @classmethod
    def coordinate(self, reference, target):
        return PatternMatch.__patternmatch(reference, target)

if __name__ == "__main__":
    pmc = PatternMatch()
    print pmc.bool(os.path.join(define.APP_TMP,"screen.png"),
                   os.path.join(define.APP_TMP,"login.png"))

