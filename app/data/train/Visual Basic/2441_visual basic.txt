NameSpace Models.DMSLOG

Partial Public Class DocLogNote
   Inherits DMS.Base.Models.GenericEntity

#Region " Properties "

Public Overrides Property ID As String
   Get
      Return "{0}".FormatWith(DocLogNoteID)
   End Get
   Set(value as String)
      DocLogNoteID=ToIntegerDB(value)
   End Set
End Property

Private _DocID As Integer = -1 ' Column 1
Public Property DocID As Integer
   Get
      Return _DocID
   End Get
   Set(value as Integer)
      SetProperty(_DocID,value,"DocID")
   End Set
End Property

Private _DocLogNoteID As Integer = -1 ' Column 0
Public Property DocLogNoteID As Integer
   Get
      Return _DocLogNoteID
   End Get
   Set(value as Integer)
      SetProperty(_DocLogNoteID,value,"DocLogNoteID",{"ID"})
   End Set
End Property

Private _DocNumber As String = "" ' Column 5
Public Property DocNumber As String
   Get
      Return _DocNumber
   End Get
   Set(value as String)
      SetProperty(_DocNumber,value,"DocNumber")
   End Set
End Property

Private _ExtraNote As String = "" ' Column 11
Public Property ExtraNote As String
   Get
      Return _ExtraNote
   End Get
   Set(value as String)
      SetProperty(_ExtraNote,value,"ExtraNote")
   End Set
End Property

Private _LegacyStatus As String = "" ' Column 4
Public Property LegacyStatus As String
   Get
      Return _LegacyStatus
   End Get
   Set(value as String)
      SetProperty(_LegacyStatus,value,"LegacyStatus")
   End Set
End Property

Private _ModNote As String = "" ' Column 9
Public Property ModNote As String
   Get
      Return _ModNote
   End Get
   Set(value as String)
      SetProperty(_ModNote,value,"ModNote")
   End Set
End Property

Private _ModRef As String = "" ' Column 10
Public Property ModRef As String
   Get
      Return _ModRef
   End Get
   Set(value as String)
      SetProperty(_ModRef,value,"ModRef")
   End Set
End Property

Private _NoteDate As DateTime = Nothing ' Column 8
Public Property NoteDate As DateTime
   Get
      Return _NoteDate
   End Get
   Set(value as DateTime)
      SetProperty(_NoteDate,value,"NoteDate")
   End Set
End Property

Private _Revision As String = "" ' Column 6
Public Property Revision As String
   Get
      Return _Revision
   End Get
   Set(value as String)
      SetProperty(_Revision,value,"Revision")
   End Set
End Property

Private _Sheet As String = "" ' Column 7
Public Property Sheet As String
   Get
      Return _Sheet
   End Get
   Set(value as String)
      SetProperty(_Sheet,value,"Sheet")
   End Set
End Property

Private _StatusID As Integer = -1 ' Column 3
Public Property StatusID As Integer
   Get
      Return _StatusID
   End Get
   Set(value as Integer)
      SetProperty(_StatusID,value,"StatusID")
   End Set
End Property

Private _UserID As Integer = -1 ' Column 2
Public Property UserID As Integer
   Get
      Return _UserID
   End Get
   Set(value as Integer)
      SetProperty(_UserID,value,"UserID")
   End Set
End Property

#End Region

Public Async Function Delete(dbAccess as DMS.Base.Data.IDBAccess) As Task
   Await Delete(dbAccess,Me)
End Function

Public Overrides Sub LoadFromEntity(genericEntity As DMS.Base.Models.GenericEntity)
   If Me Is genericEntity Then
      Return
   End If
   If Not (TypeOf (genericEntity) Is DocLogNote) Then
      Return
   End If
   Dim Entity As DocLogNote = DirectCast(genericEntity, DocLogNote)

   Me.DocLogNoteID = Entity.DocLogNoteID
   Me.DocID = Entity.DocID
   Me.UserID = Entity.UserID
   Me.StatusID = Entity.StatusID
   Me.LegacyStatus = Entity.LegacyStatus
   Me.DocNumber = Entity.DocNumber
   Me.Revision = Entity.Revision
   Me.Sheet = Entity.Sheet
   Me.NoteDate = Entity.NoteDate
   Me.ModNote = Entity.ModNote
   Me.ModRef = Entity.ModRef
   Me.ExtraNote = Entity.ExtraNote
End Sub

Public Overrides Sub LoadFromReader(reader As IDataReader)
   Me.DocLogNoteID = ToIntegerDB(reader(0))
   Me.DocID = ToIntegerDB(reader(1))
   Me.UserID = ToIntegerDB(reader(2))
   Me.StatusID = ToIntegerDB(reader(3))
   Me.LegacyStatus = ToStringDB(reader(4))
   Me.DocNumber = ToStringDB(reader(5))
   Me.Revision = ToStringDB(reader(6))
   Me.Sheet = ToStringDB(reader(7))
   Me.NoteDate = ToDateTimeDB(reader(8))
   Me.ModNote = ToStringDB(reader(9))
   Me.ModRef = ToStringDB(reader(10))
   Me.ExtraNote = ToStringDB(reader(11))
End Sub

Public Overrides Sub PopulateDataRow(ByRef dataRow As System.Data.DataRow)
   dataRow.Item(0) = Me.DocLogNoteID
   dataRow.Item(1) = Me.DocID
   dataRow.Item(2) = Me.UserID
   dataRow.Item(3) = Me.StatusID
   dataRow.Item(4) = Me.LegacyStatus
   dataRow.Item(5) = Me.DocNumber
   dataRow.Item(6) = Me.Revision
   dataRow.Item(7) = Me.Sheet
   dataRow.Item(8) = Me.NoteDate
   dataRow.Item(9) = Me.ModNote
   dataRow.Item(10) = Me.ModRef
   dataRow.Item(11) = Me.ExtraNote
End Sub

Public Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess) As Task
   Await Upsert(dbAccess, Me)
End Function

Public Overrides Function GetParameters() As IDictionary(Of String, Object)
   Dim Results As New Dictionary(Of String, Object)
Results.Add("DocLogNoteID", Me.DocLogNoteID)
Results.Add("DocID", Me.DocID)
Results.Add("UserID", Me.UserID)
Results.Add("StatusID", Me.StatusID)
Results.Add("LegacyStatus", Me.LegacyStatus)
Results.Add("DocNumber", Me.DocNumber)
Results.Add("Revision", Me.Revision)
Results.Add("Sheet", Me.Sheet)
Results.Add("NoteDate", Me.NoteDate)
Results.Add("ModNote", Me.ModNote)
Results.Add("ModRef", Me.ModRef)
Results.Add("ExtraNote", Me.ExtraNote)
   Return Results
End Function

#Region " Shared "

Private Shared _DBDetails As DMS.Base.Models.DBDetails = Nothing

Public Shared Async Function Delete(dbAccess As DMS.Base.Data.IDBAccess, entities As IEnumerable(Of DocLogNote)) As Task
   Dim Tasks As New List(Of Task)
   For Each Entity As DocLogNote In entities
      Tasks.Add(Delete(dbAccess, Entity))
   Next
   Await Task.WhenAll(Tasks)
End Function

Public Shared Async Function Delete(dbAccess As DMS.Base.Data.IDBAccess, entity As DocLogNote) As Task
      Await dbAccess.ExecuteNonQuery(GetDBDetails.Delete, entity.GetParameters())
End Function

Public Shared Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess, entities As IEnumerable(Of DocLogNote)) As Task
   If entities.Count = 1 Then
      Await Upsert(dbAccess, entities.FirstOrDefault())
   Else
         Dim DBDetails As DMS.Base.Models.DBDetails = GetDBDetails()
         Using DataTable As DataTable = GetDataTable()
            For Each Entity As DocLogNote In entities
               Dim DataRow As DataRow = DataTable.NewRow
               Entity.PopulateDataRow(DataRow)
               DataTable.Rows.Add(DataRow)
            Next
            Await dbAccess.Merge(DBDetails.CreateTemp, DBDetails.DropTemp, DataTable, DBDetails.Merge, DBDetails.TableName)
         End Using
   End If
End Function

Public Shared Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess, entity As DocLogNote) As Task
      Dim Parameters As IDictionary(Of String, Object) = entity.GetParameters()
      If String.IsNullOrEmpty(entity.ID) OrElse entity.ID.Equals("-1") OrElse ToIntegerDB(Await dbAccess.ExecuteScalar(GetDBDetails.CountSingle, Parameters)) <= 0 Then
         entity.DocLogNoteID = ToIntegerDB(Await dbAccess.ExecuteScalar(GetDBDetails.Insert, Parameters))
      Else
         Await dbAccess.ExecuteNonQuery(GetDBDetails.Update, Parameters)
      End If
End Function

Public Shared Async Function GetAll(dbAccess As DMS.Base.Data.IDBAccess) As Threading.Tasks.Task(Of IEnumerable(Of DocLogNote))
      Return Await dbAccess.ExecuteReader(Of DocLogNote)(GetDBDetails.SelectAll)
End Function

Public Shared Function GetDataTable() As DataTable
   Dim DataTable As New DataTable
   DataTable.Columns.Add("DocLogNoteID")
   DataTable.Columns.Add("DocID")
   DataTable.Columns.Add("UserID")
   DataTable.Columns.Add("StatusID")
   DataTable.Columns.Add("LegacyStatus")
   DataTable.Columns.Add("DocNumber")
   DataTable.Columns.Add("Revision")
   DataTable.Columns.Add("Sheet")
   DataTable.Columns.Add("NoteDate")
   DataTable.Columns.Add("ModNote")
   DataTable.Columns.Add("ModRef")
   DataTable.Columns.Add("ExtraNote")
   Return DataTable
End Function

Public Shared Function GetDBDetails() As DMS.Base.Models.DBDetails
   If _DBDetails Is Nothing Then
      _DBDetails = New DMS.Base.Models.DBDetails
      _DBDetails.CountAll = "SELECT COUNT(*) FROM [DocLogNotes]"
      _DBDetails.CountSingle = "SELECT COUNT(*) FROM [DocLogNotes] WHERE (([DocLogNoteID]=@DocLogNoteID))"
      _DBDetails.CreateTemp = "CREATE TABLE #DocLogNotes ([DocLogNoteID] [int] NULL,[DocID] [int] NULL,[UserID] [int] NULL,[StatusID] [int] NULL,[LegacyStatus] [varchar](255) NULL,[DocNumber] [varchar](255) NULL,[Revision] [varchar](50) NULL,[Sheet] [varchar](50) NULL,[NoteDate] [datetime] NULL,[ModNote] [varchar](255) NULL,[ModRef] [varchar](255) NULL,[ExtraNote] [text] NULL)"
      _DBDetails.Delete = "DELETE FROM [DocLogNotes] WHERE (([DocLogNoteID]=@DocLogNoteID))"
      _DBDetails.DropTemp = "DROP TABLE #DocLogNotes"
      _DBDetails.GetDataTable = New DMS.Base.Delegates.GetDataTable(AddressOf GetDataTable)
      _DBDetails.Insert = "INSERT INTO [DocLogNotes] ([DocID],[UserID],[StatusID],[LegacyStatus],[DocNumber],[Revision],[Sheet],[NoteDate],[ModNote],[ModRef],[ExtraNote]) OUTPUT Inserted.[DocLogNoteID] VALUES (@DocID,@UserID,@StatusID,@LegacyStatus,@DocNumber,@Revision,@Sheet,@NoteDate,@ModNote,@ModRef,@ExtraNote)"
      _DBDetails.Merge = "MERGE INTO [DocLogNotes] As [Target] USING #DocLogNotes As [Source] ON [Target].[DocLogNoteID]=[Source].[DocLogNoteID] WHEN MATCHED THEN UPDATE SET [Target].[DocID]=[Source].[DocID],[Target].[UserID]=[Source].[UserID],[Target].[StatusID]=[Source].[StatusID],[Target].[LegacyStatus]=[Source].[LegacyStatus],[Target].[DocNumber]=[Source].[DocNumber],[Target].[Revision]=[Source].[Revision],[Target].[Sheet]=[Source].[Sheet],[Target].[NoteDate]=[Source].[NoteDate],[Target].[ModNote]=[Source].[ModNote],[Target].[ModRef]=[Source].[ModRef],[Target].[ExtraNote]=[Source].[ExtraNote] WHEN NOT MATCHED THEN INSERT ([DocID],[UserID],[StatusID],[LegacyStatus],[DocNumber],[Revision],[Sheet],[NoteDate],[ModNote],[ModRef],[ExtraNote]) VALUES ([Source].[DocID],[Source].[UserID],[Source].[StatusID],[Source].[LegacyStatus],[Source].[DocNumber],[Source].[Revision],[Source].[Sheet],[Source].[NoteDate],[Source].[ModNote],[Source].[ModRef],[Source].[ExtraNote]);"
      _DBDetails.ModelName = "DocLogNote"
      _DBDetails.SelectAll = "SELECT [DocLogNoteID],[DocID],[UserID],[StatusID],[LegacyStatus],[DocNumber],[Revision],[Sheet],[NoteDate],[ModNote],[ModRef],[ExtraNote] FROM [DocLogNotes]"
      _DBDetails.TableName = "DocLogNotes"
      _DBDetails.Update = "UPDATE [DocLogNotes] SET [DocID]=@DocID,[UserID]=@UserID,[StatusID]=@StatusID,[LegacyStatus]=@LegacyStatus,[DocNumber]=@DocNumber,[Revision]=@Revision,[Sheet]=@Sheet,[NoteDate]=@NoteDate,[ModNote]=@ModNote,[ModRef]=@ModRef,[ExtraNote]=@ExtraNote WHERE (([DocLogNoteID]=@DocLogNoteID))"
   End If
   Return _DBDetails
End Function

#End Region

End Class

End Namespace


