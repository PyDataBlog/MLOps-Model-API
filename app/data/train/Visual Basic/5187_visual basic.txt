Imports System.Text
Imports HomeSeerAPI




Friend Module Util


#Region "No Longer Needed"
#If NoLongerNeeded Then


    Public Function AddLink(ByVal ref As String, ByVal label As String, Optional ByVal image As String = "", Optional ByVal w As Integer = 0, Optional ByVal h As Integer = 0) As String
        Dim st As String = ""
        On Error Resume Next

        If image = "" Then
            st = "<a href=""" + ref + """>" + label + "</a>" + vbCrLf
        Else
            st = "<a href=""" + ref + """>" + label + "<img src=""" + image + """ width=""" + Str(w) + """ height=""" + Str(h) + """ border=""0""></a>" + vbCrLf
        End If
        AddLink = st
    End Function

    Public Function HTML_StartCell(ByVal SClass As String, ByVal colspan As Integer, Optional ByVal align As Integer = 0, Optional ByVal nowrap As Boolean = False) As String
        Dim st As String = ""
        Dim stalign As String = ""
        Dim wrap As String = ""
        On Error Resume Next


        If nowrap Then
            wrap = " nowrap"
        Else
            wrap = ""
        End If

        If align = 0 Then
            stalign = ""
        Else
            If align = ALIGN_RIGHT Then
                stalign = " align=""right"""
            ElseIf align = ALIGN_LEFT Then
                stalign = " align=""left"""
            ElseIf align = ALIGN_CENTER Then
                stalign = " align=""center"""
            End If
        End If
        If SClass = "" Then
            st = "<td" + wrap + stalign + " colspan=""" + Trim(Str(colspan)) + """>"
        Else
            st = "<td" + wrap + stalign + " colspan=""" + Trim(Str(colspan)) + """ class=""" + SClass + """>"
        End If
        HTML_StartCell = st
    End Function

    Public Function HTML_StartTable(ByVal border As Integer, Optional ByVal spacing As Integer = 0, Optional ByVal width As String = "") As String
        Dim st As String = ""
        Dim w As String
        On Error Resume Next

        If width = "" Then
            w = ""
        Else
            w = "width=""" & width & """"
        End If

        If spacing = 0 Then
            st = "<table border=""" + Trim(Str(border)) + """ cellpadding=""0"" cellspacing=""0"" " + w + ">" + vbCrLf
        Else
            st = "<table border=""" + Trim(Str(border)) + """ cellpadding=""0"" cellspacing=""" + Trim(Str(spacing)) + """" + " " + w + "> " + vbCrLf
        End If
        HTML_StartTable = st
    End Function

    Public Function AddHidden(ByVal name As String, ByVal Value As String) As String
        Dim st As String = ""
        On Error Resume Next

        st = "<input type=""hidden"" name=""" + name + """ value=""" + Value + """>"
        AddHidden = st
    End Function

    Public Function FormButton(ByVal name As String, ByVal Value As String, Optional ByVal style As String = "") As String
        Dim st As String = ""
        On Error Resume Next

        st = st + "<input " & style & " class=""formbutton"" type=""submit"" name=""" + name + """ value=""" + Value + """>" + vbCrLf
        FormButton = st
    End Function

    Public Function FormTextArea(ByRef label As String, ByRef name As String, ByRef value As String, ByRef rows As Integer, ByRef cols As Integer) As String
        Dim st As String = ""

        st = label & "<textarea rows=""" & rows.ToString & """ cols=""" & cols.ToString & """ name=""" & name & """>" & value & "</textarea>" & vbCrLf

        FormTextArea = st
    End Function

    Public Function FormTextBox(ByRef label As String, ByRef Name As String, ByRef Value As String, ByRef fieldsize As Integer) As String
        Dim st As New StringBuilder
        Dim newline As String = ""
        Dim v As String = ""
        On Error Resume Next

        If Value Is Nothing Then
            v = ""
        Else
            v = Value
        End If

        If label <> "" Then
            newline = "<br>"
        End If

        st.Append(label)
        st.Append(newline)
        st.Append("<input class=""formtext"" type=""text"" size=""" & fieldsize.ToString & """ name=""")
        st.Append(Name)
        st.Append(""" value=""")
        st.Append(v)
        st.Append(""">" & vbCrLf)

        Return st.ToString

    End Function

    Public Function FormDropDown(ByRef label As String, ByRef Name_Renamed As String, ByRef options() As pair, ByRef option_count As Short, ByRef selected As Short, Optional ByRef OnChange As Boolean = False) As String
        Dim st As New StringBuilder
        Dim i As Short
        Dim sel As String = ""
        Dim newline As String = ""
        On Error Resume Next

        If label <> "" Then
            newline = "<br>"
        End If

        st.Append(label & newline)
        If OnChange Then
            st.Append("<select class=""formdropdown"" name=""" & Name_Renamed & """ size=""1"" onchange=""submit();"">" & vbCrLf)

        Else
            st.Append("<select class=""formdropdown"" name=""" & Name_Renamed & """ size=""1"">" & vbCrLf)
        End If
        For i = 0 To option_count - 1
            If i = selected Then
                sel = "selected "
            Else
                sel = ""
            End If
            st.Append("<option " & sel & "value=""" & options(i).value & """>" & options(i).name & "</option>" & vbCrLf)
        Next
        st.Append("</select>" & vbCrLf)
        FormDropDown = st.ToString
    End Function

    Sub GetFormData(ByVal sFormData As String)
        '================================================
        ' Get the CGI data from STDIN or from QueryString
        ' Store name/value pairs
        '================================================
        Dim sBuff As String         ' buffer to receive POST method data
        Dim sname As String         ' temp string to hold a form item name
        Dim sValue As String        ' temp string to hold a form item value
        Dim lBytesRead As Integer      ' actual bytes read by POST method
        Dim rc As Integer              ' return code
        Dim pointer As Integer         ' sFormData position pointer
        Dim n As Integer               ' name/value pair counter
        Dim delim1 As Integer          ' position of "="
        Dim delim2 As Integer          ' position of "&"
        On Error Resume Next


        '=========================================
        ' Parse and decode form data
        '=========================================
        ' Data is received from browser as "name=value&name=value&...name=value"
        ' Names and values are URL-encoded
        '
        ' Store name/value pairs in array tPair(), and decode the values
        '

        ' redim tPair() based on the number of pairs found in sFormData
        pointer = 1
        lPairs = 0
        Do
            delim1 = InStr(pointer, sFormData, "=")
            If delim1 = 0 Then Exit Do
            pointer = delim1 + 1
            lPairs = lPairs + 1
        Loop

        ReDim tPair(lPairs)

        ' assign values to tPair().name and tPair().value
        pointer = 1
        For n = 0 To (lPairs - 1)
            delim1 = InStr(pointer, sFormData, "=") ' find next equal sign
            If delim1 = 0 Then Exit For ' parse complete

            tPair(n).name = UrlDecode(Mid$(sFormData, pointer, delim1 - pointer))

            delim2 = InStr(delim1, sFormData, "&")

            ' if no trailing ampersand, we are at the end of data
            If delim2 = 0 Then delim2 = Len(sFormData) + 1

            ' value is between the "=" and the "&"
            tPair(n).value = UrlDecode(Mid$(sFormData, delim1 + 1, delim2 - delim1 - 1))
            pointer = delim2 + 1
        Next n
    End Sub

    Public Function UrlDecode(ByRef sEncoded As String) As String
        '========================================================
        ' Accept url-encoded string
        ' Return decoded string
        '========================================================

        Dim x As Integer ' sEncoded position pointer
        Dim pos As Integer ' position of InStr target
        On Error Resume Next

        UrlDecode = sEncoded
        If sEncoded = "" Then Exit Function

        ' convert "+" to space
        x = 1
        Do
            pos = InStr(x, sEncoded, "+")
            If pos = 0 Then Exit Do
            Mid(sEncoded, pos, 1) = " "
            x = pos + 1
        Loop

        x = 1

        ' convert "%xx" to character
        Do
            pos = InStr(x, sEncoded, "%")
            If pos = 0 Then Exit Do

            Mid(sEncoded, pos, 1) = Chr(CInt("&H" & (Mid(sEncoded, pos + 1, 2))))
            sEncoded = Microsoft.VisualBasic.Left(sEncoded, pos) & Mid(sEncoded, pos + 3)
            x = pos + 1
        Loop
        UrlDecode = sEncoded
    End Function
#End If
#End Region

End Module
