Imports System.Runtime.InteropServices

Public Class SelectClientes
    Private tempCliCode As String
    Private valid As New Validation.Validating()
    Private listClienteValue As New Generic.List(Of Integer)

    Public Property ListCliente() As Generic.List(Of Integer)
        Get
            Return Me.listClienteValue
        End Get
        Set(ByVal value As Generic.List(Of Integer))
            Me.listClienteValue = value
        End Set
    End Property

    Private Sub btnBuscaCliente_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnBuscaCliente.Click
        Dim frm As New ListCliente()
        If frm.ShowDialog = Windows.Forms.DialogResult.OK Then
            Dim cliente As New Cliente(CInt(frm.GetRow.Cells(0).Value))
            CarregaCliente(cliente)
        End If
        frm.Dispose()
    End Sub

    Private Sub txtCodCliente_Validating(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtCodCliente.Validating
        If Not String.IsNullOrEmpty(txtCodCliente.Text) Then
            Dim cliente As New Cliente(CInt(txtCodCliente.Text))
            If cliente.Existe() Then
                CarregaCliente(cliente)
            Else
                MessageBox.Show("Cliente não encontrado", Core.STR_NOME_SISTEMA)
                txtCodCliente.Text = Me.tempCliCode
            End If
        End If
    End Sub

    Private Sub CarregaCliente(ByVal cliente As Cliente)
        Me.txtNomeFantasia.Text = cliente.NomeFantasia
        Me.mtbCnpj.Text = cliente.CNPJ
        Me.tempCliCode = cliente.ID.ToString()
        Me.txtCodCliente.Text = cliente.ID.ToString()
    End Sub

    Private Sub txtCodCliente_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCodCliente.KeyPress
        valid.InputInteiro(sender, e)
    End Sub

    Private Sub btnAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAdd.Click
        If Not String.IsNullOrEmpty(Me.txtCodCliente.Text) Then
            If Not Me.listClienteValue.Contains(CInt(Me.txtCodCliente.Text)) Then
                Me.listClienteValue.Add(CInt(Me.txtCodCliente.Text))
                Me.chkl.Items.Add(Me.txtNomeFantasia.Text, True)
            Else
                MessageBox.Show("Cliente já adicionado a lista.", Core.STR_NOME_SISTEMA)
            End If
        End If
    End Sub

    Private Sub btnDel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDel.Click
        If Me.chkl.SelectedIndex > -1 Then Me.chkl.Items.RemoveAt(Me.chkl.SelectedIndex)
        If Me.chkl.SelectedIndex = -1 Then Core.CleanFields(CType(Me.pnl, Control))
    End Sub

    Private Sub chkl_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkl.SelectedIndexChanged
        If Me.chkl.SelectedIndex > -1 Then
            Dim cliente As New Cliente(Me.listClienteValue.Item(chkl.SelectedIndex))
            CarregaCliente(cliente)
        End If
    End Sub

    Private Sub OK_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OK_Button.Click
        If Me.chkl.CheckedItems.Count = 0 Then
            MessageBox.Show("A lista está vazia. Selecione ao menos um cliente.", Core.STR_NOME_SISTEMA)
        Else
            Me.DialogResult = Windows.Forms.DialogResult.OK
        End If
    End Sub


#Region "SHADOWN AERO"

    Private drag As Boolean
    Private mouseX As Integer
    Private mouseY As Integer

    Private Sub frmDataRelatorio_MouseDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseDown
        drag = True
        mouseX = Windows.Forms.Cursor.Position.X - Me.Left
        mouseY = Windows.Forms.Cursor.Position.Y - Me.Top
    End Sub

    Private Sub frmDataRelatorio_MouseMove(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseMove
        If drag Then
            Me.Top = Windows.Forms.Cursor.Position.Y - mouseY
            Me.Left = Windows.Forms.Cursor.Position.X - mouseX
        End If
    End Sub

    Private Sub frmDataRelatorio_MouseUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseUp
        drag = False
    End Sub

    Public Class NativeStructs
        Public Structure MARGINS
            Public leftWidth As Integer
            Public rightWidth As Integer
            Public topHeight As Integer
            Public bottomHeight As Integer
        End Structure
    End Class

    Public Class NativeMethods
        <DllImport("dwmapi")> _
        Public Shared Function DwmExtendFrameIntoClientArea(ByVal hWnd As IntPtr, ByRef pMarInset As NativeStructs.MARGINS) As Integer
        End Function
        <DllImport("dwmapi")> _
        Friend Shared Function DwmSetWindowAttribute(ByVal hwnd As IntPtr, ByVal attr As Integer, ByRef attrValue As Integer, ByVal attrSize As Integer) As Integer
        End Function
        <DllImport("dwmapi.dll")> _
        Public Shared Function DwmIsCompositionEnabled(ByRef pfEnabled As Integer) As Integer
        End Function
    End Class

    Public Class NativeConstants
        Public Const CS_DROPSHADOW As Integer = &H20000
        Public Const WM_NCPAINT As Integer = &H85
    End Class

    '//////////////////SHADOWN AERO
    Private aeroEnabled As Boolean
    Protected Overrides ReadOnly Property CreateParams() As CreateParams
        Get
            CheckAeroEnabled()
            Dim cp As CreateParams = MyBase.CreateParams
            If Not aeroEnabled Then
                cp.ClassStyle = cp.ClassStyle Or NativeConstants.CS_DROPSHADOW
                Return cp
            Else
                Return cp
            End If
        End Get
    End Property

    Protected Overrides Sub WndProc(ByRef m As Message)
        Select Case m.Msg
            Case NativeConstants.WM_NCPAINT
                Dim val = 2
                If aeroEnabled Then
                    NativeMethods.DwmSetWindowAttribute(Handle, 2, val, 4)
                    Dim bla As New NativeStructs.MARGINS()
                    With bla
                        .bottomHeight = 1
                        .leftWidth = 1
                        .rightWidth = 1
                        .topHeight = 1
                    End With
                    NativeMethods.DwmExtendFrameIntoClientArea(Handle, bla)

                Else


                End If

                '  Case Else
                Exit Select
        End Select
        MyBase.WndProc(m)
    End Sub

    Private Sub CheckAeroEnabled()
        If Environment.OSVersion.Version.Major >= 6 Then
            Dim enabled As Integer = 0
            Dim response As Integer = NativeMethods.DwmIsCompositionEnabled(enabled)
            aeroEnabled = (enabled = 1)
        Else
            aeroEnabled = False
        End If
    End Sub
#End Region

End Class