Public Class StreamingDialog
    Private Sub StreamingDialog_Shown(sender As Object, e As EventArgs) Handles MyBase.Shown
        StreamWorker.RunWorkerAsync(param)
    End Sub
    Friend param As Object
    Private Sub StreamWorker_RunWorkerCompleted(sender As Object, e As ComponentModel.RunWorkerCompletedEventArgs) Handles StreamWorker.RunWorkerCompleted
        Me.Close()
        If Not IsNothing(e.Error) Then
            Throw e.Error
        End If
    End Sub

    Private Sub StreamWorker_ProgressChanged(sender As Object, e As ComponentModel.ProgressChangedEventArgs) Handles StreamWorker.ProgressChanged
        If Not e.UserState Is Nothing Then
            StatusText.Text = e.UserState.ToString
        End If
        If Not e.ProgressPercentage = -1 Then
            FileProgress.Style = System.Windows.Forms.ProgressBarStyle.Continuous
            FileProgress.Value = e.ProgressPercentage
            perc.Text = e.ProgressPercentage.ToString + "%"
            perc.Visible = True
        End If

    End Sub
End Class

Public Module Misc

    ''' <summary>
    ''' Throws up a dialog with a marquee progress bar and some text to signfy a long running operation, and runs it on a different thread.
    ''' </summary>
    ''' <param name="DialogText">The text you want the dialog to say.</param>
    ''' <param name="DialogFunction">The AddressOf the function you want to run. The method must be compatible with the DoWork event handler of BackgroundWorkers.</param>
    ''' <param name="Param">An argument which can be passed to the threaded task.</param>
    Public Sub OperationDialog(DialogText As String, DialogFunction As System.ComponentModel.DoWorkEventHandler, Optional Param As Object = Nothing, Optional ShowModal As Boolean = True)
        Dim SD As New StreamingDialog
        SD.StatusText.Text = DialogText
        AddHandler SD.StreamWorker.DoWork, DialogFunction
        SD.param = Param
        If ShowModal Then
            SD.ShowDialog()
            SD.Dispose()
        Else
            SD.Show()
        End If

    End Sub

End Module