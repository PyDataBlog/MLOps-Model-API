' ******************************************************************************
' ** 
' **  Yahoo! Managed
' **  Written by Marius Häusler 2011
' **  It would be pleasant, if you contact me when you are using this code.
' **  Contact: YahooFinanceManaged@gmail.com
' **  Project Home: http://code.google.com/p/yahoo-finance-managed/
' **  
' ******************************************************************************
' **  
' **  Copyright 2011 Marius Häusler
' **  
' **  Licensed under the Apache License, Version 2.0 (the "License");
' **  you may not use this file except in compliance with the License.
' **  You may obtain a copy of the License at
' **  
' **    http://www.apache.org/licenses/LICENSE-2.0
' **  
' **  Unless required by applicable law or agreed to in writing, software
' **  distributed under the License is distributed on an "AS IS" BASIS,
' **  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' **  See the License for the specific language governing permissions and
' **  limitations under the License.
' ** 
' ******************************************************************************


Namespace YahooManaged.Finance.API

    ''' <summary>
    ''' Provides methods for downloading quotes data.
    ''' </summary>
    ''' <remarks></remarks>
    Public Class QuotesDownload
        Inherits Base.Download
        Implements Base.IStringDownload

        ''' <summary>
        ''' Raises if an asynchronous download of quotes data completes.
        ''' </summary>
        ''' <param name="sender">The event raising object</param>
        ''' <param name="ea">The event args of the asynchronous download</param>
        ''' <remarks></remarks>
        Public Event AsyncDownloadCompleted(ByVal sender As Base.Download, ByVal ea As QuotesDownloadCompletedEventArgs)

        Friend ReadOnly mFinanceHelper As New FinanceHelper
        Private mCsvParser As New ImportExport.CSV
        Private mXmlParser As New ImportExport.XML
        Private mTextEncoding As System.Text.Encoding = System.Text.Encoding.Default

        ''' <summary>
        ''' The text encoding for CSV download.
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property TextEncoding() As System.Text.Encoding Implements Base.IStringDownload.TextEncoding
            Get
                Return mTextEncoding
            End Get
            Set(ByVal value As System.Text.Encoding)
                mTextEncoding = value
            End Set
        End Property

        ''' <summary>
        ''' Downloads quotes data.
        ''' </summary>
        ''' <param name="managedID">The managed ID</param>
        ''' <param name="properties">The properties of each quote data. If parameter is null/Nothing, Symbol and LastTradePrizeOnly will set as property. In this case, with YQL server you will get every available property.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function Download(ByVal managedID As IID, ByVal properties As IEnumerable(Of QuoteProperty)) As QuotesResponse
            If managedID Is Nothing Then Throw New ArgumentNullException("id", "The passed id is null.")
            Return Me.Download(managedID.ID, properties)
        End Function
        ''' <summary>
        ''' Downloads quotes data.
        ''' </summary>
        ''' <param name="unmanagedID">The unmanaged ID</param>
        ''' <param name="properties">The properties of each quote data. If parameter is null/Nothing, Symbol and LastTradePrizeOnly will set as property. In this case, with YQL server you will get every available property.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function Download(ByVal unmanagedID As String, ByVal properties As IEnumerable(Of QuoteProperty)) As QuotesResponse
            If unmanagedID = String.Empty Then Throw New ArgumentNullException("unmanagedID", "The passed id is empty.")
            Return Me.Download(New String() {unmanagedID}, properties)
        End Function
        ''' <summary>
        ''' Downloads quotes data.
        ''' </summary>
        ''' <param name="managedIDs">The list of managed IDs</param>
        ''' <param name="properties">The properties of each quote data. If parameter is null/Nothing, Symbol and LastTradePrizeOnly will set as property. In this case, with YQL server you will get every available property.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function Download(ByVal managedIDs As IEnumerable(Of IID), ByVal properties As IEnumerable(Of QuoteProperty)) As QuotesResponse
            If managedIDs Is Nothing Then Throw New ArgumentNullException("managedIDs", "The passed list is null.")
            Return Me.Download(mFinanceHelper.IIDsToStrings(managedIDs), properties)
        End Function
        ''' <summary>
        ''' Downloads quotes data.
        ''' </summary>
        ''' <param name="unmanagedIDs">The list of unmanaged IDs</param>
        ''' <param name="properties">The properties of each quote data. If parameter is null/Nothing, Symbol and LastTradePrizeOnly will set as property. In this case, with YQL server you will get every available property.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function Download(ByVal unmanagedIDs As IEnumerable(Of String), ByVal properties As IEnumerable(Of QuoteProperty)) As QuotesResponse
            If unmanagedIDs Is Nothing Then Throw New ArgumentNullException("unmanagedIDs", "The passed list is null.")
            Dim prps = Me.GetPropertyArray(properties)
            Return Me.ToResponse(MyBase.DownloadStream(Me.DownloadURL(mHelper.EnumToArray(unmanagedIDs), prps)), prps)
        End Function

        ''' <summary>
        ''' Starts an asynchronous download of quotes data.
        ''' </summary>
        ''' <param name="managedID">The managed ID</param>
        ''' <param name="properties">The properties of each quote data. If parameter is null/Nothing, Symbol and LastTradePrizeOnly will set as property. In this case, with YQL server you will get every available property.</param>
        ''' <param name="userArgs">Individual user argument</param>
        ''' <remarks></remarks>
        Public Overloads Sub DownloadAsync(ByVal managedID As IID, ByVal properties As IEnumerable(Of QuoteProperty), Optional ByVal userArgs As Object = Nothing)
            If managedID Is Nothing Then Throw New ArgumentNullException("managedID", "The passed ID is null.")
            Me.DownloadAsync(managedID.ID, properties, userArgs)
        End Sub
        ''' <summary>
        ''' Starts an asynchronous download of quotes data.
        ''' </summary>
        ''' <param name="unmanagedID">The unmanaged ID</param>
        ''' <param name="properties">The properties of each quote data. If parameter is null/Nothing, Symbol and LastTradePrizeOnly will set as property. In this case, with YQL server you will get every available property.</param>
        ''' <param name="userArgs">Individual user argument</param>
        ''' <remarks></remarks>
        Public Overloads Sub DownloadAsync(ByVal unmanagedID As String, ByVal properties As IEnumerable(Of QuoteProperty), Optional ByVal userArgs As Object = Nothing)
            If unmanagedID = String.Empty Then Throw New ArgumentNullException("unmanagedID", "The passed ID is empty.")
            Me.DownloadAsync(New String() {unmanagedID}, properties, userArgs)
        End Sub
        ''' <summary>
        ''' Starts an asynchronous download of quotes data.
        ''' </summary>
        ''' <param name="managedIDs">The list of managed IDs</param>
        ''' <param name="properties">The properties of each quote data. If parameter is null/Nothing, Symbol and LastTradePrizeOnly will set as property. In this case, with YQL server you will get every available property.</param>
        ''' <param name="userArgs">Individual user argument</param>
        ''' <remarks></remarks>
        Public Overloads Sub DownloadAsync(ByVal managedIDs As IEnumerable(Of IID), ByVal properties As IEnumerable(Of QuoteProperty), Optional ByVal userArgs As Object = Nothing)
            If managedIDs Is Nothing Then Throw New ArgumentNullException("managedIDs", "The passed list is null.")
            Me.DownloadAsync(mFinanceHelper.IIDsToStrings(managedIDs), properties, userArgs)
        End Sub
        ''' <summary>
        ''' Starts an asynchronous download of quotes data.
        ''' </summary>
        ''' <param name="unmanagedIDs">The list of unmanaged IDs</param>
        ''' <param name="properties">The properties of each quote data. If parameter is null/Nothing, Symbol and LastTradePrizeOnly will set as property. In this case, with YQL server you will get every available property.</param>
        ''' <param name="userArgs">Individual user argument</param>
        ''' <remarks></remarks>
        Public Overloads Sub DownloadAsync(ByVal unmanagedIDs As IEnumerable(Of String), ByVal properties As IEnumerable(Of QuoteProperty), Optional ByVal userArgs As Object = Nothing)
            If unmanagedIDs Is Nothing Then Throw New ArgumentNullException("unmanagedIDs", "The passed list is null.")
            Dim prps = Me.GetPropertyArray(properties)
            Dim args As New AsyncDownloadArgs(userArgs, mHelper.EnumToArray(unmanagedIDs), prps)
            MyBase.DownloadStreamAsync(Me.DownloadURL(args.IDs, args.Properties), args)
        End Sub

        Private Function GetPropertyArray(ByVal properties As IEnumerable(Of QuoteProperty)) As QuoteProperty()
            If properties Is Nothing Then Throw New ArgumentNullException("properties", "The properties enumerable is null.")
            Dim prps As New List(Of QuoteProperty)(properties)
            If prps.Count = 0 Then Throw New ArgumentException("properties", "There must be minimum one property available for downloading.")
            Return prps.ToArray
        End Function

        ''' <summary>
        ''' Default constructor
        ''' </summary>
        ''' <remarks></remarks>
        Public Sub New()
        End Sub

        Private Sub DownloadAsync_Completed(ByVal sender As Base.Download, ByVal e As Base.StreamDownloadCompletedEventArgs) Handles MyBase.AsyncStreamDownloadCompleted
            If e IsNot Nothing AndAlso e.UserArgs IsNot Nothing AndAlso TypeOf e.UserArgs Is AsyncDownloadArgs Then
                Dim dlArgs As AsyncDownloadArgs = DirectCast(e.UserArgs, AsyncDownloadArgs)
                Dim args As New QuotesDownloadCompletedEventArgs(dlArgs.UserArgs, Me.ToResponse(e.Response, dlArgs.Properties), dlArgs.IDs, dlArgs.Properties)
                RaiseEvent AsyncDownloadCompleted(Me, args)
            End If
        End Sub

        Private Function DownloadURL(ByVal unmanagedIDs As IEnumerable(Of String), ByVal properties() As QuoteProperty) As String
            Dim lst() As String = mHelper.EnumToArray(unmanagedIDs)
            If lst.Length > 0 Then
                Dim ids As New Text.StringBuilder
                For Each s As String In lst
                    ids.Append(mFinanceHelper.ReplaceDjiID(mHelper.CleanYqlParam(s)))
                    ids.Append("+"c)
                Next
                Dim url = "http://download.finance.yahoo.com/d/quotes.csv?s=" & Uri.EscapeDataString(ids.ToString) & "&f=" & mFinanceHelper.CsvQuotePropertyTags(properties) & "&e=.csv"
                Return url
            Else
                Throw New NotSupportedException("An empty id list will not be supported.")
            End If
        End Function

        Private Function ToResponse(ByVal resp As Base.StreamResponse, ByVal properties() As QuoteProperty) As QuotesResponse
            Dim quotes As New List(Of QuoteData)
            Dim culture As New Globalization.CultureInfo("en-US")
            quotes.AddRange(mCsvParser.ToQuotesData(mHelper.StreamToString(resp.Result, mTextEncoding), ","c, properties, culture))
            Return New QuotesResponse(resp.Connection, quotes.ToArray)
        End Function

        Private Class AsyncDownloadArgs
            Inherits Base.DownloadEventArgs
            Public IDs() As String
            Public Properties() As QuoteProperty
            Public Sub New(ByVal userArgs As Object, ByVal id() As String, ByVal prps() As QuoteProperty)
                MyBase.New(userArgs)
                Me.IDs = id
                Me.Properties = prps
            End Sub
        End Class

    End Class

    ''' <summary>
    ''' Stores the received quotes information of an asynchronous download
    ''' </summary>
    ''' <remarks></remarks>
    Public Class QuotesDownloadCompletedEventArgs
        Inherits Base.DownloadCompletedEventArgs

        Private mIDs() As String
        Private mProperties() As QuoteProperty

        Public ReadOnly Property IDs() As IEnumerable(Of String)
            Get
                Return mIDs
            End Get
        End Property
        ''' <summary>
        ''' Gets the properties that were queried for each quotes data instance
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Properties() As QuoteProperty()
            Get
                Return mProperties
            End Get
        End Property
        ''' <summary>
        ''' Gets the response with quotes data.
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads ReadOnly Property Response() As QuotesResponse
            Get
                Return DirectCast(MyBase.Response, QuotesResponse)
            End Get
        End Property

        Friend Sub New(ByVal userArgs As Object, ByVal resp As QuotesResponse, ByVal ids() As String, ByVal properties() As QuoteProperty)
            MyBase.New(userArgs, resp)
            mIDs = ids
            mProperties = properties
        End Sub

    End Class

    ''' <summary>
    ''' Provides information and response of an asynchronous quotes download.
    ''' </summary>
    ''' <remarks></remarks>
    Public Class QuotesResponse
        Inherits Base.Response

        ''' <summary>
        ''' Gets the received quotes data.
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads ReadOnly Property Result() As QuoteData()
            Get
                Return TryCast(MyBase.Result, QuoteData())
            End Get
        End Property

        Friend Sub New(ByVal info As Base.ConnectionInfo, ByVal result As QuoteData())
            MyBase.New(info, result)
        End Sub

    End Class

End Namespace