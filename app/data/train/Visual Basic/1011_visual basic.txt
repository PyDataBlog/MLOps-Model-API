Imports System.ComponentModel

Public Class DynamicPropertyDescriptor
    Inherits PropertyDescriptor

    Private _Name As String
    Private _Category As String
    Private _Description As String
    Private _PropertyType As System.Type
    Private _ConverterTypeName As String
    Private _Converter As TypeConverter
    Private _Attributes As List(Of Attribute)
    Private _GetValueHandler As GetValueHandler
    Private _SetValueHandler As SetValueHandler
    Private _CanResetValueHandler As CanResetValueHandler
    Private _ResetValueHandler As ResetValueHandler
    Private _ShouldSerializeValueHandler As ShouldSerializeValueHandler
    Private _GetChildPropertiesHandler As GetChildPropertiesHandler
    Private _ComponentType As System.Type
    Private _BaseDescriptor As PropertyDescriptor

    Public Property GetValueHandler() As GetValueHandler
        Get
            Return _GetValueHandler
        End Get
        Set(value As GetValueHandler)
            _GetValueHandler = value
        End Set
    End Property

    Public Property SetValueHandler() As SetValueHandler
        Get
            Return _SetValueHandler
        End Get
        Set(value As SetValueHandler)
            _SetValueHandler = value
        End Set
    End Property

    Public Property CanResetValueHandler() As CanResetValueHandler
        Get
            Return _CanResetValueHandler
        End Get
        Set(value As CanResetValueHandler)
            _CanResetValueHandler = value
        End Set
    End Property

    Public Property ResetValueHandler() As ResetValueHandler
        Get
            Return _ResetValueHandler
        End Get
        Set(value As ResetValueHandler)
            _ResetValueHandler = value
        End Set
    End Property

    Public Property ShouldSerializeValueHandler() As ShouldSerializeValueHandler
        Get
            Return _ShouldSerializeValueHandler
        End Get
        Set(value As ShouldSerializeValueHandler)
            _ShouldSerializeValueHandler = value
        End Set
    End Property

    Public Property GetChildPropertiesHandler() As GetChildPropertiesHandler
        Get
            Return _GetChildPropertiesHandler
        End Get
        Set(value As GetChildPropertiesHandler)
            _GetChildPropertiesHandler = value
        End Set
    End Property

    Public Overrides ReadOnly Property Attributes() As AttributeCollection
        Get
            If _Attributes IsNot Nothing Then
                Dim attributes__1 As New Dictionary(Of Object, Attribute)()
                For Each attr As Attribute In AttributeArray
                    attributes__1(attr.TypeId) = attr
                Next
                For Each attr As Attribute In _Attributes
                    If Not attr.IsDefaultAttribute() Then
                        attributes__1(attr.TypeId) = attr
                    ElseIf attributes__1.ContainsKey(attr.TypeId) Then
                        attributes__1.Remove(attr.TypeId)
                    End If
                    Dim categoryAttr As CategoryAttribute = TryCast(attr, CategoryAttribute)
                    If categoryAttr IsNot Nothing Then
                        _Category = categoryAttr.Category
                    End If
                    Dim descriptionAttr As DescriptionAttribute = TryCast(attr, DescriptionAttribute)
                    If descriptionAttr IsNot Nothing Then
                        _Description = descriptionAttr.Description
                    End If
                    Dim typeConverterAttr As TypeConverterAttribute = TryCast(attr, TypeConverterAttribute)
                    If typeConverterAttr IsNot Nothing Then
                        _ConverterTypeName = typeConverterAttr.ConverterTypeName
                        _Converter = Nothing
                    End If
                Next
                Dim newAttributes As Attribute() = New Attribute(attributes__1.Values.Count - 1) {}
                attributes__1.Values.CopyTo(newAttributes, 0)
                AttributeArray = newAttributes
                _Attributes = Nothing
            End If
            Return MyBase.Attributes
        End Get
    End Property

    Public Overrides ReadOnly Property Category() As String
        Get
            If _Category IsNot Nothing Then
                Return _Category
            End If
            Return MyBase.Category
        End Get
    End Property

    Public Overrides ReadOnly Property ComponentType() As System.Type
        Get
            If _ComponentType IsNot Nothing Then
                Return _ComponentType
            End If
            If _BaseDescriptor IsNot Nothing Then
                Return _BaseDescriptor.ComponentType
            End If
            Return Nothing
        End Get
    End Property

    Public Overrides ReadOnly Property Converter() As TypeConverter
        Get
            If _ConverterTypeName IsNot Nothing Then
                If _Converter Is Nothing Then
                    Dim converterType As System.Type = GetTypeFromName(_ConverterTypeName)
                    If GetType(TypeConverter).IsAssignableFrom(converterType) Then
                        _Converter = DirectCast(CreateInstance(converterType), TypeConverter)
                    End If
                End If
                If _Converter IsNot Nothing Then
                    Return _Converter
                End If
            End If
            Return MyBase.Converter
        End Get
    End Property

    Public Overrides ReadOnly Property Description() As String
        Get
            If _Description IsNot Nothing Then
                Return _Description
            End If
            Return MyBase.Description
        End Get
    End Property

    Public Overrides ReadOnly Property IsReadOnly() As Boolean
        Get
            Return (ReadOnlyAttribute.Yes.Equals(Attributes(GetType(ReadOnlyAttribute))))
        End Get
    End Property

    Public Overrides ReadOnly Property Name() As String
        Get
            If _Name IsNot Nothing Then
                Return _Name
            End If
            Return MyBase.Name
        End Get
    End Property

    Public Overrides ReadOnly Property PropertyType() As System.Type
        Get
            If _PropertyType IsNot Nothing Then
                Return _PropertyType
            End If
            If _BaseDescriptor IsNot Nothing Then
                Return _BaseDescriptor.PropertyType
            End If
            Return Nothing
        End Get
    End Property

    Public Sub New(name As String)
        MyBase.New(name, Nothing)
    End Sub

    Public Sub New(name As String, ParamArray attributes As Attribute())
        MyBase.New(name, FilterAttributes(attributes))
    End Sub

    Public Sub New(baseDescriptor As PropertyDescriptor)
        Me.New(baseDescriptor, Nothing)
    End Sub

    Public Sub New(baseDescriptor As PropertyDescriptor, ParamArray newAttributes As Attribute())
        MyBase.New(baseDescriptor, newAttributes)
        AttributeArray = FilterAttributes(AttributeArray)
        _BaseDescriptor = baseDescriptor
    End Sub

#If NOT_USED Then
	Public Sub New(name As String, displayName As String)
		Me.New(name, displayName, Nothing, Nothing, ReadOnlyAttribute.[Default].IsReadOnly)
	End Sub

	Public Sub New(name As String, displayName As String, category As String)
		Me.New(name, displayName, category, Nothing, ReadOnlyAttribute.[Default].IsReadOnly)
	End Sub

	Public Sub New(name As String, displayName As String, category As String, description As String)
		Me.New(name, displayName, category, description, ReadOnlyAttribute.[Default].IsReadOnly)
	End Sub

	Public Sub New(name As String, displayName As String, category As String, description As String, isReadOnly As Boolean)
		MyBase.New(name, BuildAttributes(displayName, category, description, isReadOnly))
	End Sub
#End If

    Public Sub SetName(value As String)
        If value Is Nothing Then
            value = [String].Empty
        End If
        _Name = value
    End Sub

    Public Sub SetDisplayName(value As String)
        If value Is Nothing Then
            value = DisplayNameAttribute.[Default].DisplayName
        End If
        SetAttribute(New DisplayNameAttribute(value))
    End Sub

    Public Sub SetCategory(value As String)
        If value Is Nothing Then
            value = CategoryAttribute.[Default].Category
        End If
        _Category = value
        SetAttribute(New CategoryAttribute(value))
    End Sub

    Public Sub SetDescription(value As String)
        If value Is Nothing Then
            value = DescriptionAttribute.[Default].Description
        End If
        _Description = value
        SetAttribute(New DescriptionAttribute(value))
    End Sub

    Public Sub SetPropertyType(value As System.Type)
        If value Is Nothing Then
            Throw New ArgumentNullException("value")
        End If
        _PropertyType = value
    End Sub

    Public Sub SetDesignTimeOnly(value As Boolean)
        SetAttribute(New DesignOnlyAttribute(value))
    End Sub

    Public Sub SetIsBrowsable(value As Boolean)
        SetAttribute(New BrowsableAttribute(value))
    End Sub

    Public Sub SetIsLocalizable(value As Boolean)
        SetAttribute(New LocalizableAttribute(value))
    End Sub

    Public Sub SetIsReadOnly(value As Boolean)
        SetAttribute(New ReadOnlyAttribute(value))
    End Sub

    Public Sub SetConverterType(value As System.Type)
        _ConverterTypeName = If((value IsNot Nothing), value.AssemblyQualifiedName, Nothing)
        If _ConverterTypeName IsNot Nothing Then
            SetAttribute(New TypeConverterAttribute(value))
        Else
            SetAttribute(TypeConverterAttribute.[Default])
        End If
        _Converter = Nothing
    End Sub

    Public Sub SetAttribute(value As Attribute)
        If value Is Nothing Then
            Throw New ArgumentNullException("value")
        End If
        If _Attributes Is Nothing Then
            _Attributes = New List(Of Attribute)()
        End If
        _Attributes.Add(value)
    End Sub

    Public Sub SetAttributes(ParamArray values As Attribute())
        For Each value As Attribute In values
            SetAttribute(value)
        Next
    End Sub

    Public Sub SetComponentType(value As System.Type)
        _ComponentType = value
    End Sub

    Public Overrides Function GetValue(component As Object) As Object
        If GetValueHandler IsNot Nothing Then
            Return GetValueHandler(component)
        End If
        If _BaseDescriptor IsNot Nothing Then
            Return _BaseDescriptor.GetValue(component)
        End If
        Return Nothing
    End Function

    Public Overrides Sub SetValue(component As Object, value As Object)
        If SetValueHandler IsNot Nothing Then
            SetValueHandler.Invoke(component, value)
            OnValueChanged(component, EventArgs.Empty)
        ElseIf _BaseDescriptor IsNot Nothing Then
            _BaseDescriptor.SetValue(component, value)
            OnValueChanged(component, EventArgs.Empty)
        End If
    End Sub

    Public Overrides Function CanResetValue(component As Object) As Boolean
        If CanResetValueHandler IsNot Nothing Then
            Return CanResetValueHandler(component)
        End If
        If _BaseDescriptor IsNot Nothing Then
            Return _BaseDescriptor.CanResetValue(component)
        End If
        Return (Attributes(GetType(DefaultValueAttribute)) IsNot Nothing)
    End Function

    Public Overrides Sub ResetValue(component As Object)
        If ResetValueHandler IsNot Nothing Then
            ResetValueHandler.Invoke(component)
        ElseIf _BaseDescriptor IsNot Nothing Then
            _BaseDescriptor.ResetValue(component)
        Else
            Dim attribute As DefaultValueAttribute = TryCast(Attributes(GetType(DefaultValueAttribute)), DefaultValueAttribute)
            If attribute IsNot Nothing Then
                SetValue(component, attribute.Value)
            End If
        End If
    End Sub

    Public Overrides Function ShouldSerializeValue(component As Object) As Boolean
        If ShouldSerializeValueHandler IsNot Nothing Then
            Return ShouldSerializeValueHandler(component)
        End If
        If _BaseDescriptor IsNot Nothing Then
            Return _BaseDescriptor.ShouldSerializeValue(component)
        End If
        Dim attribute As DefaultValueAttribute = TryCast(Attributes(GetType(DefaultValueAttribute)), DefaultValueAttribute)
        Return (attribute IsNot Nothing AndAlso Not [Object].Equals(GetValue(component), attribute.Value))
    End Function

    Public Overrides Function GetChildProperties(instance As Object, filter As Attribute()) As PropertyDescriptorCollection
        If GetChildPropertiesHandler IsNot Nothing Then
            Return GetChildPropertiesHandler(instance, filter)
        End If
        If _BaseDescriptor IsNot Nothing Then
            Return _BaseDescriptor.GetChildProperties(instance, filter)
        End If
        Return MyBase.GetChildProperties(instance, filter)
    End Function

    Protected Overrides ReadOnly Property NameHashCode() As Integer
        Get
            If _Name IsNot Nothing Then
                Return _Name.GetHashCode()
            End If
            Return MyBase.NameHashCode
        End Get
    End Property

#If NOT_USED Then
	Private Shared Function BuildAttributes(displayName As String, category As String, description As String, isReadOnly As Boolean) As Attribute()
		Dim attributes As New List(Of Attribute)()
		If displayName IsNot Nothing AndAlso displayName <> DisplayNameAttribute.[Default].DisplayName Then
			attributes.Add(New DisplayNameAttribute(displayName))
		End If
		If category IsNot Nothing AndAlso category <> CategoryAttribute.[Default].Category Then
			attributes.Add(New CategoryAttribute(category))
		End If
		If description IsNot Nothing AndAlso description <> DescriptionAttribute.[Default].Description Then
			attributes.Add(New DescriptionAttribute(description))
		End If
		If isReadOnly <> ReadOnlyAttribute.[Default].IsReadOnly Then
			attributes.Add(New ReadOnlyAttribute(isReadOnly))
		End If
		Return attributes.ToArray()
	End Function
#End If

    Private Shared Function FilterAttributes(attributes As Attribute()) As Attribute()
        Dim dictionary As New Dictionary(Of Object, Attribute)()
        For Each attribute As Attribute In attributes
            If Not attribute.IsDefaultAttribute() Then
                dictionary.Add(attribute.TypeId, attribute)
            End If
        Next
        Dim newAttributes As Attribute() = New Attribute(dictionary.Values.Count - 1) {}
        dictionary.Values.CopyTo(newAttributes, 0)
        Return newAttributes
    End Function

End Class
