NameSpace Models.DMSCON

Partial Public Class ApplicationDocumentCommand
   Inherits DMS.Base.Models.GenericEntity

#Region " Properties "

Public Overrides Property ID As String
   Get
      Return "{0}".FormatWith(AppDocCmdID)
   End Get
   Set(value as String)
      AppDocCmdID=ToIntegerDB(value)
   End Set
End Property

Private _AppCommand As String = "" ' Column 4
Public Property AppCommand As String
   Get
      Return _AppCommand
   End Get
   Set(value as String)
      SetProperty(_AppCommand,value,"AppCommand")
   End Set
End Property

Private _AppDocCmdID As Integer = -1 ' Column 0
Public Property AppDocCmdID As Integer
   Get
      Return _AppDocCmdID
   End Get
   Set(value as Integer)
      SetProperty(_AppDocCmdID,value,"AppDocCmdID",{"ID"})
   End Set
End Property

Private _AppDocID As Integer = -1 ' Column 1
Public Property AppDocID As Integer
   Get
      Return _AppDocID
   End Get
   Set(value as Integer)
      SetProperty(_AppDocID,value,"AppDocID")
   End Set
End Property

Private _CommandType As String = "" ' Column 6
Public Property CommandType As String
   Get
      Return _CommandType
   End Get
   Set(value as String)
      SetProperty(_CommandType,value,"CommandType")
   End Set
End Property

Private _CreateENHFile As Boolean = False ' Column 7
Public Property CreateENHFile As Boolean
   Get
      Return _CreateENHFile
   End Get
   Set(value as Boolean)
      SetProperty(_CreateENHFile,value,"CreateENHFile")
   End Set
End Property

Private _En1Command As String = "" ' Column 2
Public Property En1Command As String
   Get
      Return _En1Command
   End Get
   Set(value as String)
      SetProperty(_En1Command,value,"En1Command")
   End Set
End Property

Private _Order As Integer = -1 ' Column 3
Public Property Order As Integer
   Get
      Return _Order
   End Get
   Set(value as Integer)
      SetProperty(_Order,value,"Order")
   End Set
End Property

Private _Parameters As String = "" ' Column 5
Public Property Parameters As String
   Get
      Return _Parameters
   End Get
   Set(value as String)
      SetProperty(_Parameters,value,"Parameters")
   End Set
End Property

Private _WaitForRunApp As Boolean = False ' Column 8
Public Property WaitForRunApp As Boolean
   Get
      Return _WaitForRunApp
   End Get
   Set(value as Boolean)
      SetProperty(_WaitForRunApp,value,"WaitForRunApp")
   End Set
End Property

#End Region

Public Async Function Delete(dbAccess as DMS.Base.Data.IDBAccess) As Task
   Await Delete(dbAccess,Me)
End Function

Public Overrides Sub LoadFromEntity(genericEntity As DMS.Base.Models.GenericEntity)
   If Me Is genericEntity Then
      Return
   End If
   If Not (TypeOf (genericEntity) Is ApplicationDocumentCommand) Then
      Return
   End If
   Dim Entity As ApplicationDocumentCommand = DirectCast(genericEntity, ApplicationDocumentCommand)

   Me.AppDocCmdID = Entity.AppDocCmdID
   Me.AppDocID = Entity.AppDocID
   Me.En1Command = Entity.En1Command
   Me.Order = Entity.Order
   Me.AppCommand = Entity.AppCommand
   Me.Parameters = Entity.Parameters
   Me.CommandType = Entity.CommandType
   Me.CreateENHFile = Entity.CreateENHFile
   Me.WaitForRunApp = Entity.WaitForRunApp
End Sub

Public Overrides Sub LoadFromReader(reader As IDataReader)
   Me.AppDocCmdID = ToIntegerDB(reader(0))
   Me.AppDocID = ToIntegerDB(reader(1))
   Me.En1Command = ToStringDB(reader(2))
   Me.Order = ToIntegerDB(reader(3))
   Me.AppCommand = ToStringDB(reader(4))
   Me.Parameters = ToStringDB(reader(5))
   Me.CommandType = ToStringDB(reader(6))
   Me.CreateENHFile = ToBooleanDB(reader(7))
   Me.WaitForRunApp = ToBooleanDB(reader(8))
End Sub

Public Overrides Sub PopulateDataRow(ByRef dataRow As System.Data.DataRow)
   dataRow.Item(0) = Me.AppDocCmdID
   dataRow.Item(1) = Me.AppDocID
   dataRow.Item(2) = Me.En1Command
   dataRow.Item(3) = Me.Order
   dataRow.Item(4) = Me.AppCommand
   dataRow.Item(5) = Me.Parameters
   dataRow.Item(6) = Me.CommandType
   dataRow.Item(7) = Me.CreateENHFile
   dataRow.Item(8) = Me.WaitForRunApp
End Sub

Public Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess) As Task
   Await Upsert(dbAccess, Me)
End Function

Public Overrides Function GetParameters() As IDictionary(Of String, Object)
   Dim Results As New Dictionary(Of String, Object)
Results.Add("AppDocCmdID", Me.AppDocCmdID)
Results.Add("AppDocID", Me.AppDocID)
Results.Add("En1Command", Me.En1Command)
Results.Add("Order", Me.Order)
Results.Add("AppCommand", Me.AppCommand)
Results.Add("Parameters", Me.Parameters)
Results.Add("CommandType", Me.CommandType)
Results.Add("CreateENHFile", Me.CreateENHFile)
Results.Add("WaitForRunApp", Me.WaitForRunApp)
   Return Results
End Function

#Region " Shared "

Private Shared _DBDetails As DMS.Base.Models.DBDetails = Nothing

Public Shared Async Function Delete(dbAccess As DMS.Base.Data.IDBAccess, entities As IEnumerable(Of ApplicationDocumentCommand)) As Task
   Dim Tasks As New List(Of Task)
   For Each Entity As ApplicationDocumentCommand In entities
      Tasks.Add(Delete(dbAccess, Entity))
   Next
   Await Task.WhenAll(Tasks)
End Function

Public Shared Async Function Delete(dbAccess As DMS.Base.Data.IDBAccess, entity As ApplicationDocumentCommand) As Task
      Await dbAccess.ExecuteNonQuery(GetDBDetails.Delete, entity.GetParameters())
End Function

Public Shared Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess, entities As IEnumerable(Of ApplicationDocumentCommand)) As Task
   If entities.Count = 1 Then
      Await Upsert(dbAccess, entities.FirstOrDefault())
   Else
         Dim DBDetails As DMS.Base.Models.DBDetails = GetDBDetails()
         Using DataTable As DataTable = GetDataTable()
            For Each Entity As ApplicationDocumentCommand In entities
               Dim DataRow As DataRow = DataTable.NewRow
               Entity.PopulateDataRow(DataRow)
               DataTable.Rows.Add(DataRow)
            Next
            Await dbAccess.Merge(DBDetails.CreateTemp, DBDetails.DropTemp, DataTable, DBDetails.Merge, DBDetails.TableName)
         End Using
   End If
End Function

Public Shared Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess, entity As ApplicationDocumentCommand) As Task
      Dim Parameters As IDictionary(Of String, Object) = entity.GetParameters()
      If String.IsNullOrEmpty(entity.ID) OrElse entity.ID.Equals("-1") OrElse ToIntegerDB(Await dbAccess.ExecuteScalar(GetDBDetails.CountSingle, Parameters)) <= 0 Then
         entity.AppDocCmdID = ToIntegerDB(Await dbAccess.ExecuteScalar(GetDBDetails.Insert, Parameters))
      Else
         Await dbAccess.ExecuteNonQuery(GetDBDetails.Update, Parameters)
      End If
End Function

Public Shared Async Function GetAll(dbAccess As DMS.Base.Data.IDBAccess) As Threading.Tasks.Task(Of IEnumerable(Of ApplicationDocumentCommand))
      Return Await dbAccess.ExecuteReader(Of ApplicationDocumentCommand)(GetDBDetails.SelectAll)
End Function

Public Shared Function GetDataTable() As DataTable
   Dim DataTable As New DataTable
   DataTable.Columns.Add("AppDocCmdID")
   DataTable.Columns.Add("AppDocID")
   DataTable.Columns.Add("En1Command")
   DataTable.Columns.Add("Order")
   DataTable.Columns.Add("AppCommand")
   DataTable.Columns.Add("Parameters")
   DataTable.Columns.Add("CommandType")
   DataTable.Columns.Add("CreateENHFile")
   DataTable.Columns.Add("WaitForRunApp")
   Return DataTable
End Function

Public Shared Function GetDBDetails() As DMS.Base.Models.DBDetails
   If _DBDetails Is Nothing Then
      _DBDetails = New DMS.Base.Models.DBDetails
      _DBDetails.CountAll = "SELECT COUNT(*) FROM [ApplicationDocumentCommands]"
      _DBDetails.CountSingle = "SELECT COUNT(*) FROM [ApplicationDocumentCommands] WHERE (([AppDocCmdID]=@AppDocCmdID))"
      _DBDetails.CreateTemp = "CREATE TABLE #ApplicationDocumentCommands ([AppDocCmdID] [int] NULL,[AppDocID] [int] NULL,[En1Command] [varchar](255) NULL,[Order] [int] NULL,[AppCommand] [varchar](255) NULL,[Parameters] [varchar](255) NULL,[CommandType] [varchar](255) NULL,[CreateENHFile] [bit] NULL,[WaitForRunApp] [bit] NULL)"
      _DBDetails.Delete = "DELETE FROM [ApplicationDocumentCommands] WHERE (([AppDocCmdID]=@AppDocCmdID))"
      _DBDetails.DropTemp = "DROP TABLE #ApplicationDocumentCommands"
      _DBDetails.GetDataTable = New DMS.Base.Delegates.GetDataTable(AddressOf GetDataTable)
      _DBDetails.Insert = "INSERT INTO [ApplicationDocumentCommands] ([AppDocID],[En1Command],[Order],[AppCommand],[Parameters],[CommandType],[CreateENHFile],[WaitForRunApp]) OUTPUT Inserted.[AppDocCmdID] VALUES (@AppDocID,@En1Command,@Order,@AppCommand,@Parameters,@CommandType,@CreateENHFile,@WaitForRunApp)"
      _DBDetails.Merge = "MERGE INTO [ApplicationDocumentCommands] As [Target] USING #ApplicationDocumentCommands As [Source] ON [Target].[AppDocCmdID]=[Source].[AppDocCmdID] WHEN MATCHED THEN UPDATE SET [Target].[AppDocID]=[Source].[AppDocID],[Target].[En1Command]=[Source].[En1Command],[Target].[Order]=[Source].[Order],[Target].[AppCommand]=[Source].[AppCommand],[Target].[Parameters]=[Source].[Parameters],[Target].[CommandType]=[Source].[CommandType],[Target].[CreateENHFile]=[Source].[CreateENHFile],[Target].[WaitForRunApp]=[Source].[WaitForRunApp] WHEN NOT MATCHED THEN INSERT ([AppDocID],[En1Command],[Order],[AppCommand],[Parameters],[CommandType],[CreateENHFile],[WaitForRunApp]) VALUES ([Source].[AppDocID],[Source].[En1Command],[Source].[Order],[Source].[AppCommand],[Source].[Parameters],[Source].[CommandType],[Source].[CreateENHFile],[Source].[WaitForRunApp]);"
      _DBDetails.ModelName = "ApplicationDocumentCommand"
      _DBDetails.SelectAll = "SELECT [AppDocCmdID],[AppDocID],[En1Command],[Order],[AppCommand],[Parameters],[CommandType],[CreateENHFile],[WaitForRunApp] FROM [ApplicationDocumentCommands]"
      _DBDetails.TableName = "ApplicationDocumentCommands"
      _DBDetails.Update = "UPDATE [ApplicationDocumentCommands] SET [AppDocID]=@AppDocID,[En1Command]=@En1Command,[Order]=@Order,[AppCommand]=@AppCommand,[Parameters]=@Parameters,[CommandType]=@CommandType,[CreateENHFile]=@CreateENHFile,[WaitForRunApp]=@WaitForRunApp WHERE (([AppDocCmdID]=@AppDocCmdID))"
   End If
   Return _DBDetails
End Function

#End Region

End Class

End Namespace


