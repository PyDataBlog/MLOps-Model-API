'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("CasterLevelDataset"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CasterLevelDataset
    Inherits System.Data.DataSet
    
    Private tableCasterLevel As CasterLevelDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CasterLevel")) Is Nothing) Then
                MyBase.Tables.Add(New CasterLevelDataTable(ds.Tables("CasterLevel")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CasterLevel() As CasterLevelDataTable
        Get
            Return Me.tableCasterLevel
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As CasterLevelDataset = CType(MyBase.Clone,CasterLevelDataset)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CasterLevel")) Is Nothing) Then
                MyBase.Tables.Add(New CasterLevelDataTable(ds.Tables("CasterLevel")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCasterLevel = CType(MyBase.Tables("CasterLevel"), CasterLevelDataTable)
        If (initTable = True) Then
            If (Not (Me.tableCasterLevel) Is Nothing) Then
                Me.tableCasterLevel.InitVars()
            End If
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "CasterLevelDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CasterLevel.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCasterLevel = New CasterLevelDataTable
        MyBase.Tables.Add(Me.tableCasterLevel)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeCasterLevel() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CasterLevelDataset = New CasterLevelDataset
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function

    Public Delegate Sub CasterLevelRowChangeEventHandler(ByVal sender As Object, ByVal e As CasterLevelRowChangeEvent)

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class CasterLevelDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnClassName As System.Data.DataColumn

        Private columnLevel As System.Data.DataColumn

        Private columnL0 As System.Data.DataColumn

        Private columnL1 As System.Data.DataColumn

        Private columnL2 As System.Data.DataColumn

        Private columnL3 As System.Data.DataColumn

        Private columnL4 As System.Data.DataColumn

        Private columnL5 As System.Data.DataColumn

        Private columnL6 As System.Data.DataColumn

        Private columnL7 As System.Data.DataColumn

        Private columnL8 As System.Data.DataColumn

        Private columnL9 As System.Data.DataColumn

        Private columnSP As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "CasterLevel"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ClassNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LevelColumn() As System.Data.DataColumn
            Get
                Return Me.columnLevel
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L0Column() As System.Data.DataColumn
            Get
                Return Me.columnL0
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L1Column() As System.Data.DataColumn
            Get
                Return Me.columnL1
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L2Column() As System.Data.DataColumn
            Get
                Return Me.columnL2
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L3Column() As System.Data.DataColumn
            Get
                Return Me.columnL3
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L4Column() As System.Data.DataColumn
            Get
                Return Me.columnL4
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L5Column() As System.Data.DataColumn
            Get
                Return Me.columnL5
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L6Column() As System.Data.DataColumn
            Get
                Return Me.columnL6
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L7Column() As System.Data.DataColumn
            Get
                Return Me.columnL7
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L8Column() As System.Data.DataColumn
            Get
                Return Me.columnL8
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property L9Column() As System.Data.DataColumn
            Get
                Return Me.columnL9
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As CasterLevelRow
            Get
                Return CType(Me.Rows(index), CasterLevelRow)
            End Get
        End Property

        Public Event CasterLevelRowChanging As CasterLevelRowChangeEventHandler

        Public Event CasterLevelRowChanged As CasterLevelRowChangeEventHandler

        Public Event CasterLevelRowDeleting As CasterLevelRowChangeEventHandler

        Public Event CasterLevelRowDeleted As CasterLevelRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddCasterLevelRow(ByVal row As CasterLevelRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCasterLevelRow(ByVal ClassName As String, ByVal Level As String, ByVal L0 As String, ByVal L1 As String, ByVal L2 As String, ByVal L3 As String, ByVal L4 As String, ByVal L5 As String, ByVal L6 As String, ByVal L7 As String, ByVal L8 As String, ByVal L9 As String, ByVal SP As String) As CasterLevelRow
            Dim rowCasterLevelRow As CasterLevelRow = CType(Me.NewRow, CasterLevelRow)
            rowCasterLevelRow.ItemArray = New Object() {ClassName, Level, L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, SP}
            Me.Rows.Add(rowCasterLevelRow)
            Return rowCasterLevelRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CasterLevelDataTable = CType(MyBase.Clone, CasterLevelDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CasterLevelDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub InitVars()
            Me.columnClassName = MyBase.Columns("ClassName")
            Me.columnLevel = MyBase.Columns("Level")
            Me.columnL0 = MyBase.Columns("L0")
            Me.columnL1 = MyBase.Columns("L1")
            Me.columnL2 = MyBase.Columns("L2")
            Me.columnL3 = MyBase.Columns("L3")
            Me.columnL4 = MyBase.Columns("L4")
            Me.columnL5 = MyBase.Columns("L5")
            Me.columnL6 = MyBase.Columns("L6")
            Me.columnL7 = MyBase.Columns("L7")
            Me.columnL8 = MyBase.Columns("L8")
            Me.columnL9 = MyBase.Columns("L9")
            Me.columnSP = MyBase.Columns("SP")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnClassName = New System.Data.DataColumn("ClassName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassName)
            Me.columnLevel = New System.Data.DataColumn("Level", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLevel)
            Me.columnL0 = New System.Data.DataColumn("L0", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL0)
            Me.columnL1 = New System.Data.DataColumn("L1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL1)
            Me.columnL2 = New System.Data.DataColumn("L2", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL2)
            Me.columnL3 = New System.Data.DataColumn("L3", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL3)
            Me.columnL4 = New System.Data.DataColumn("L4", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL4)
            Me.columnL5 = New System.Data.DataColumn("L5", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL5)
            Me.columnL6 = New System.Data.DataColumn("L6", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL6)
            Me.columnL7 = New System.Data.DataColumn("L7", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL7)
            Me.columnL8 = New System.Data.DataColumn("L8", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL8)
            Me.columnL9 = New System.Data.DataColumn("L9", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL9)
            Me.columnSP = New System.Data.DataColumn("SP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP)
            Me.columnL3.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewCasterLevelRow() As CasterLevelRow
            Return CType(Me.NewRow, CasterLevelRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CasterLevelRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CasterLevelRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CasterLevelRowChangedEvent) Is Nothing) Then
                RaiseEvent CasterLevelRowChanged(Me, New CasterLevelRowChangeEvent(CType(e.Row, CasterLevelRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CasterLevelRowChangingEvent) Is Nothing) Then
                RaiseEvent CasterLevelRowChanging(Me, New CasterLevelRowChangeEvent(CType(e.Row, CasterLevelRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CasterLevelRowDeletedEvent) Is Nothing) Then
                RaiseEvent CasterLevelRowDeleted(Me, New CasterLevelRowChangeEvent(CType(e.Row, CasterLevelRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CasterLevelRowDeletingEvent) Is Nothing) Then
                RaiseEvent CasterLevelRowDeleting(Me, New CasterLevelRowChangeEvent(CType(e.Row, CasterLevelRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveCasterLevelRow(ByVal row As CasterLevelRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As CasterLevelDataset = New CasterLevelDataset
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CasterLevelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class CasterLevelRow
        Inherits System.Data.DataRow

        Private tableCasterLevel As CasterLevelDataTable

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCasterLevel = CType(Me.Table, CasterLevelDataTable)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClassName() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.ClassNameColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ClassName' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.ClassNameColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Level() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.LevelColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Level' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.LevelColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L0() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L0Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L0' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L0Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L1() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L1Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L1' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L1Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L2() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L2Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L2' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L2Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L3() As String
            Get
                Return CType(Me(Me.tableCasterLevel.L3Column), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L3Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L4() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L4Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L4' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L4Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L5() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L5Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L5' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L5Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L6() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L6Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L6' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L6Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L7() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L7Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L7' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L7Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L8() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L8Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L8' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L8Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property L9() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.L9Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'L9' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.L9Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SP() As String
            Get
                Try
                    Return CType(Me(Me.tableCasterLevel.SPColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SP' in table 'CasterLevel' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableCasterLevel.SPColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.ClassNameColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetClassNameNull()
            Me(Me.tableCasterLevel.ClassNameColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLevelNull() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.LevelColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLevelNull()
            Me(Me.tableCasterLevel.LevelColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL0Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L0Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL0Null()
            Me(Me.tableCasterLevel.L0Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL1Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L1Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL1Null()
            Me(Me.tableCasterLevel.L1Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL2Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L2Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL2Null()
            Me(Me.tableCasterLevel.L2Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL4Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L4Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL4Null()
            Me(Me.tableCasterLevel.L4Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL5Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L5Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL5Null()
            Me(Me.tableCasterLevel.L5Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL6Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L6Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL6Null()
            Me(Me.tableCasterLevel.L6Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL7Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L7Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL7Null()
            Me(Me.tableCasterLevel.L7Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL8Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L8Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL8Null()
            Me(Me.tableCasterLevel.L8Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsL9Null() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.L9Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetL9Null()
            Me(Me.tableCasterLevel.L9Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPNull() As Boolean
            Return Me.IsNull(Me.tableCasterLevel.SPColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPNull()
            Me(Me.tableCasterLevel.SPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CasterLevelRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CasterLevelRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CasterLevelRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CasterLevelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
