NameSpace Models.DMSCON

Partial Public Class PDFLineColour
   Inherits DMS.Base.Models.GenericEntity

#Region " Properties "

Public Overrides Property ID As String
   Get
      Return ""
   End Get
   Set(value as String)

   End Set
End Property

Private _EditStatus As String = "" ' Column 2
Public Property EditStatus As String
   Get
      Return _EditStatus
   End Get
   Set(value as String)
      SetProperty(_EditStatus,value,"EditStatus")
   End Set
End Property

Private _EditStatusParentID As String = "" ' Column 3
Public Property EditStatusParentID As String
   Get
      Return _EditStatusParentID
   End Get
   Set(value as String)
      SetProperty(_EditStatusParentID,value,"EditStatusParentID")
   End Set
End Property

Private _EditStatusUserID As Integer = -1 ' Column 4
Public Property EditStatusUserID As Integer
   Get
      Return _EditStatusUserID
   End Get
   Set(value as Integer)
      SetProperty(_EditStatusUserID,value,"EditStatusUserID")
   End Set
End Property

Private _LineColour As Integer = -1 ' Column 0
Public Property LineColour As Integer
   Get
      Return _LineColour
   End Get
   Set(value as Integer)
      SetProperty(_LineColour,value,"LineColour")
   End Set
End Property

Private _LineColourID As Integer = -1 ' Column 5
Public Property LineColourID As Integer
   Get
      Return _LineColourID
   End Get
   Set(value as Integer)
      SetProperty(_LineColourID,value,"LineColourID")
   End Set
End Property

Private _LineColourName As String = "" ' Column 1
Public Property LineColourName As String
   Get
      Return _LineColourName
   End Get
   Set(value as String)
      SetProperty(_LineColourName,value,"LineColourName")
   End Set
End Property

#End Region

Public Async Function Delete(dbAccess as DMS.Base.Data.IDBAccess) As Task
   Await Delete(dbAccess,Me)
End Function

Public Overrides Sub LoadFromEntity(genericEntity As DMS.Base.Models.GenericEntity)
   If Me Is genericEntity Then
      Return
   End If
   If Not (TypeOf (genericEntity) Is PDFLineColour) Then
      Return
   End If
   Dim Entity As PDFLineColour = DirectCast(genericEntity, PDFLineColour)

   Me.LineColour = Entity.LineColour
   Me.LineColourName = Entity.LineColourName
   Me.EditStatus = Entity.EditStatus
   Me.EditStatusParentID = Entity.EditStatusParentID
   Me.EditStatusUserID = Entity.EditStatusUserID
   Me.LineColourID = Entity.LineColourID
End Sub

Public Overrides Sub LoadFromReader(reader As IDataReader)
   Me.LineColour = ToIntegerDB(reader(0))
   Me.LineColourName = ToStringDB(reader(1))
   Me.EditStatus = ToStringDB(reader(2))
   Me.EditStatusParentID = ToStringDB(reader(3))
   Me.EditStatusUserID = ToIntegerDB(reader(4))
   Me.LineColourID = ToIntegerDB(reader(5))
End Sub

Public Overrides Sub PopulateDataRow(ByRef dataRow As System.Data.DataRow)
   dataRow.Item(0) = Me.LineColour
   dataRow.Item(1) = Me.LineColourName
   dataRow.Item(2) = Me.EditStatus
   dataRow.Item(3) = Me.EditStatusParentID
   dataRow.Item(4) = Me.EditStatusUserID
   dataRow.Item(5) = Me.LineColourID
End Sub

Public Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess) As Task
   Await Upsert(dbAccess, Me)
End Function

Public Overrides Function GetParameters() As IDictionary(Of String, Object)
   Dim Results As New Dictionary(Of String, Object)
Results.Add("LineColour", Me.LineColour)
Results.Add("LineColourName", Me.LineColourName)
Results.Add("EditStatus", Me.EditStatus)
Results.Add("EditStatusParentID", Me.EditStatusParentID)
Results.Add("EditStatusUserID", Me.EditStatusUserID)
Results.Add("LineColourID", Me.LineColourID)
   Return Results
End Function

#Region " Shared "

Private Shared _DBDetails As DMS.Base.Models.DBDetails = Nothing

Public Shared Async Function Delete(dbAccess As DMS.Base.Data.IDBAccess, entities As IEnumerable(Of PDFLineColour)) As Task
   Dim Tasks As New List(Of Task)
   For Each Entity As PDFLineColour In entities
      Tasks.Add(Delete(dbAccess, Entity))
   Next
   Await Task.WhenAll(Tasks)
End Function

Public Shared Async Function Delete(dbAccess As DMS.Base.Data.IDBAccess, entity As PDFLineColour) As Task
      Await dbAccess.ExecuteNonQuery(GetDBDetails.Delete, entity.GetParameters())
End Function

Public Shared Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess, entities As IEnumerable(Of PDFLineColour)) As Task
   If entities.Count = 1 Then
      Await Upsert(dbAccess, entities.FirstOrDefault())
   Else
         Dim DBDetails As DMS.Base.Models.DBDetails = GetDBDetails()
         Using DataTable As DataTable = GetDataTable()
            For Each Entity As PDFLineColour In entities
               Dim DataRow As DataRow = DataTable.NewRow
               Entity.PopulateDataRow(DataRow)
               DataTable.Rows.Add(DataRow)
            Next
            Await dbAccess.Merge(DBDetails.CreateTemp, DBDetails.DropTemp, DataTable, DBDetails.Merge, DBDetails.TableName)
         End Using
   End If
End Function

Public Shared Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess, entity As PDFLineColour) As Task
      Dim Parameters As IDictionary(Of String, Object) = entity.GetParameters()
      If String.IsNullOrEmpty(entity.ID) OrElse entity.ID.Equals("-1") OrElse ToIntegerDB(Await dbAccess.ExecuteScalar(GetDBDetails.CountSingle, Parameters)) <= 0 Then
         entity.LineColourID = ToIntegerDB(Await dbAccess.ExecuteScalar(GetDBDetails.Insert, Parameters))
      Else
         Await dbAccess.ExecuteNonQuery(GetDBDetails.Update, Parameters)
      End If
End Function

Public Shared Async Function GetAll(dbAccess As DMS.Base.Data.IDBAccess) As Threading.Tasks.Task(Of IEnumerable(Of PDFLineColour))
      Return Await dbAccess.ExecuteReader(Of PDFLineColour)(GetDBDetails.SelectAll)
End Function

Public Shared Function GetDataTable() As DataTable
   Dim DataTable As New DataTable
   DataTable.Columns.Add("LineColour")
   DataTable.Columns.Add("LineColourName")
   DataTable.Columns.Add("EditStatus")
   DataTable.Columns.Add("EditStatusParentID")
   DataTable.Columns.Add("EditStatusUserID")
   DataTable.Columns.Add("LineColourID")
   Return DataTable
End Function

Public Shared Function GetDBDetails() As DMS.Base.Models.DBDetails
   If _DBDetails Is Nothing Then
      _DBDetails = New DMS.Base.Models.DBDetails
      _DBDetails.CountAll = "SELECT COUNT(*) FROM [PDFLineColours]"
      _DBDetails.CountSingle = "SELECT COUNT(*) FROM [PDFLineColours] WHERE ()"
      _DBDetails.CreateTemp = "CREATE TABLE #PDFLineColours ([LineColour] [int] NULL,[LineColourName] [varchar](50) NULL,[EditStatus] [varchar](1) NULL,[EditStatusParentID] [varchar](50) NULL,[EditStatusUserID] [int] NULL,[LineColourID] [int] NULL)"
      _DBDetails.Delete = "DELETE FROM [PDFLineColours] WHERE ()"
      _DBDetails.DropTemp = "DROP TABLE #PDFLineColours"
      _DBDetails.GetDataTable = New DMS.Base.Delegates.GetDataTable(AddressOf GetDataTable)
      _DBDetails.Insert = "INSERT INTO [PDFLineColours] ([LineColour],[LineColourName],[EditStatus],[EditStatusParentID],[EditStatusUserID]) OUTPUT Inserted.[LineColourID] VALUES (@LineColour,@LineColourName,@EditStatus,@EditStatusParentID,@EditStatusUserID)"
      _DBDetails.Merge = "MERGE INTO [PDFLineColours] As [Target] USING #PDFLineColours As [Source] ON  WHEN MATCHED THEN UPDATE SET [Target].[LineColour]=[Source].[LineColour],[Target].[LineColourName]=[Source].[LineColourName],[Target].[EditStatus]=[Source].[EditStatus],[Target].[EditStatusParentID]=[Source].[EditStatusParentID],[Target].[EditStatusUserID]=[Source].[EditStatusUserID] WHEN NOT MATCHED THEN INSERT ([LineColour],[LineColourName],[EditStatus],[EditStatusParentID],[EditStatusUserID]) VALUES ([Source].[LineColour],[Source].[LineColourName],[Source].[EditStatus],[Source].[EditStatusParentID],[Source].[EditStatusUserID]);"
      _DBDetails.ModelName = "PDFLineColour"
      _DBDetails.SelectAll = "SELECT [LineColour],[LineColourName],[EditStatus],[EditStatusParentID],[EditStatusUserID],[LineColourID] FROM [PDFLineColours]"
      _DBDetails.TableName = "PDFLineColours"
      _DBDetails.Update = "UPDATE [PDFLineColours] SET [LineColour]=@LineColour,[LineColourName]=@LineColourName,[EditStatus]=@EditStatus,[EditStatusParentID]=@EditStatusParentID,[EditStatusUserID]=@EditStatusUserID WHERE ()"
   End If
   Return _DBDetails
End Function

#End Region

End Class

End Namespace


