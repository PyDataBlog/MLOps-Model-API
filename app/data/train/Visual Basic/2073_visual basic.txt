Module ModulatorX

#Region "ListBox to Array String"
    Friend Function ListBoxToArray(ListBoxer As ListBox) As String()
        Dim arr As String() = {"*"}
        If ListBoxer.Items.Count > 0 Then
            arr = New String(ListBoxer.Items.Count - 1) {}
            For i As Integer = 0 To ListBoxer.Items.Count - 1
                arr(i) = ListBoxer.Items(i).ToString
            Next
        End If
        Return arr
    End Function
#End Region

#Region "File Size"
    Function GetFileSize(ByVal byteLength As Long) As String
        Dim sizer As String = Nothing
        If byteLength >= 1048576 And byteLength <= 1073741823 Then
            sizer = FormatNumber(byteLength / 1048576, 2).ToString & "MB"
        ElseIf byteLength >= 1024 And byteLength <= 1048575 Then
            sizer = FormatNumber(byteLength / 1024, 2) & "KB"
        Else
            sizer = FormatNumber(byteLength, 0) & "B"
        End If
        Return sizer
    End Function
#End Region

#Region "DoubleBuffered Buff // Use Buff.DoubleBuff(<Control>)"
    Friend NotInheritable Class Buff
        Friend Shared Sub DoubleBuff(Contt As Control)
            Dim ConttType As Type = Contt.[GetType]()
            Dim propInfo As System.Reflection.PropertyInfo = ConttType.GetProperty("DoubleBuffered", System.Reflection.BindingFlags.Instance Or System.Reflection.BindingFlags.NonPublic)
            propInfo.SetValue(Contt, True, Nothing)
        End Sub
    End Class
#End Region

#Region "Text Search"
    'www.dotnetcurry.com/ShowArticle.aspx?ID=146
    Friend start As Integer = 0
    Friend indexOfSearchText As Integer = 0

    Public Function FindMyText(ByVal txtToSearch As String, ByVal searchStart As Integer, ByVal searchEnd As Integer, rtb As RichTextBox) As Integer
        ' Unselect the previously searched string
        If searchStart > 0 AndAlso searchEnd > 0 AndAlso indexOfSearchText >= 0 Then
            rtb.SelectionBackColor = Color.White
        End If

        ' Set the return value to -1 by default.
        Dim retVal As Integer = -1

        ' A valid starting index should be specified.
        ' if indexOfSearchText = -1, the end of search
        If searchStart >= 0 AndAlso indexOfSearchText >= 0 Then
            ' A valid ending index
            If searchEnd > searchStart OrElse searchEnd = -1 Then
                ' Find the position of search string in RichTextBox
                indexOfSearchText = rtb.Find(txtToSearch, searchStart, searchEnd, RichTextBoxFinds.None)
                ' Determine whether the text was found in richTextBox1.
                If indexOfSearchText <> -1 Then
                    ' Return the index to the specified search text.
                    retVal = indexOfSearchText
                Else
                    start = 0
                    indexOfSearchText = 0
                    MessageBox.Show("End of Search!", "End of the Line~", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                End If
            End If
        End If
        Return retVal
    End Function
#End Region

End Module
