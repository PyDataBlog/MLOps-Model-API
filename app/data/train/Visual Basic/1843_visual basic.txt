 

 
 
 
' Generated by Alphabank Code Generator Version V.4.0.1 Remove Is Null Property   at 01/21/2015 09:00:38
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Text

Public    Class  clsProduct_Base        
#Region "Properties"



    Friend _Change As Boolean
    Public ReadOnly Property Change As Boolean
        Get
            Return _Change

        End Get
        
    End Property



    Private _Id As Nullable(Of Integer)

    Public Overridable Property Id As Nullable(Of Integer)
        Get
            Return _Id
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _Id = Value
            _Change = True


        End Set
    End Property

    Private _ProductTypeId As Nullable(Of Integer)

    Public Overridable Property ProductTypeId As Nullable(Of Integer)
        Get
            Return _ProductTypeId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _ProductTypeId = Value
            _Change = True
        End Set
    End Property

    Private _ParentGroupedProductId As Nullable(Of Integer)

    Public Overridable Property ParentGroupedProductId As Nullable(Of Integer)
        Get
            Return _ParentGroupedProductId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _ParentGroupedProductId = Value
            _Change = True
        End Set
    End Property

    Private _VisibleIndividually As Nullable(Of Boolean)

    Public Overridable Property VisibleIndividually As Nullable(Of Boolean)
        Get
            Return _VisibleIndividually
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _VisibleIndividually = Value
            _Change = True
        End Set
    End Property

    Private _Name As String

    Public Overridable Property Name As String
        Get
            Return _Name
        End Get
        Set(ByVal Value As String)
            _Name = Value
            _Change = True
        End Set
    End Property

    Private _ShortDescription As String

    Public Overridable Property ShortDescription As String
        Get
            Return _ShortDescription
        End Get
        Set(ByVal Value As String)
            _ShortDescription = Value
            _Change = True
        End Set
    End Property

    Private _FullDescription As String

    Public Overridable Property FullDescription As String
        Get
            Return _FullDescription
        End Get
        Set(ByVal Value As String)
            _FullDescription = Value
            _Change = True
        End Set
    End Property

    Private _AdminComment As String

    Public Overridable Property AdminComment As String
        Get
            Return _AdminComment
        End Get
        Set(ByVal Value As String)
            _AdminComment = Value
            ' _Change = True
        End Set
    End Property

    Private _ProductTemplateId As Nullable(Of Integer)

    Public Overridable Property ProductTemplateId As Nullable(Of Integer)
        Get
            Return _ProductTemplateId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _ProductTemplateId = Value
            _Change = True
        End Set
    End Property

    Private _VendorId As Nullable(Of Integer)

    Public Overridable Property VendorId As Nullable(Of Integer)
        Get
            Return _VendorId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _VendorId = Value
            _Change = True
        End Set
    End Property

    Private _ShowOnHomePage As Nullable(Of Boolean)

    Public Overridable Property ShowOnHomePage As Nullable(Of Boolean)
        Get
            Return _ShowOnHomePage
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _ShowOnHomePage = Value
            _Change = True
        End Set
    End Property

    Private _MetaKeywords As String

    Public Overridable Property MetaKeywords As String
        Get
            Return _MetaKeywords
        End Get
        Set(ByVal Value As String)
            _MetaKeywords = Value
            _Change = True
        End Set
    End Property

    Private _MetaDescription As String

    Public Overridable Property MetaDescription As String
        Get
            Return _MetaDescription
        End Get
        Set(ByVal Value As String)
            _MetaDescription = Value
            _Change = True
        End Set
    End Property

    Private _MetaTitle As String

    Public Overridable Property MetaTitle As String
        Get
            Return _MetaTitle
        End Get
        Set(ByVal Value As String)
            _MetaTitle = Value
            _Change = True
        End Set
    End Property

    Private _AllowCustomerReviews As Nullable(Of Boolean)

    Public Overridable Property AllowCustomerReviews As Nullable(Of Boolean)
        Get
            Return _AllowCustomerReviews
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _AllowCustomerReviews = Value
            _Change = True
        End Set
    End Property

    Private _ApprovedRatingSum As Nullable(Of Integer)

    Public Overridable Property ApprovedRatingSum As Nullable(Of Integer)
        Get
            Return _ApprovedRatingSum
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _ApprovedRatingSum = Value
            _Change = True
        End Set
    End Property

    Private _NotApprovedRatingSum As Nullable(Of Integer)

    Public Overridable Property NotApprovedRatingSum As Nullable(Of Integer)
        Get
            Return _NotApprovedRatingSum
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _NotApprovedRatingSum = Value
            _Change = True
        End Set
    End Property

    Private _ApprovedTotalReviews As Nullable(Of Integer)

    Public Overridable Property ApprovedTotalReviews As Nullable(Of Integer)
        Get
            Return _ApprovedTotalReviews
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _ApprovedTotalReviews = Value
            _Change = True
        End Set
    End Property

    Private _NotApprovedTotalReviews As Nullable(Of Integer)

    Public Overridable Property NotApprovedTotalReviews As Nullable(Of Integer)
        Get
            Return _NotApprovedTotalReviews
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _NotApprovedTotalReviews = Value
            _Change = True
        End Set
    End Property

    Private _SubjectToAcl As Nullable(Of Boolean)

    Public Overridable Property SubjectToAcl As Nullable(Of Boolean)
        Get
            Return _SubjectToAcl
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _SubjectToAcl = Value
            _Change = True
        End Set
    End Property

    Private _LimitedToStores As Nullable(Of Boolean)

    Public Overridable Property LimitedToStores As Nullable(Of Boolean)
        Get
            Return _LimitedToStores
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _LimitedToStores = Value
            _Change = True
        End Set
    End Property

    Private _Sku As String

    Public Overridable Property Sku As String
        Get
            Return _Sku
        End Get
        Set(ByVal Value As String)
            _Sku = Value
            _Change = True
        End Set
    End Property

    Private _ManufacturerPartNumber As String

    Public Overridable Property ManufacturerPartNumber As String
        Get
            Return _ManufacturerPartNumber
        End Get
        Set(ByVal Value As String)
            _ManufacturerPartNumber = Value
            _Change = True
        End Set
    End Property

    Private _Gtin As String

    Public Overridable Property Gtin As String
        Get
            Return _Gtin
        End Get
        Set(ByVal Value As String)
            _Gtin = Value
            _Change = True
        End Set
    End Property

    Private _IsGiftCard As Nullable(Of Boolean)

    Public Overridable Property IsGiftCard As Nullable(Of Boolean)
        Get
            Return _IsGiftCard
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _IsGiftCard = Value
            _Change = True
        End Set
    End Property

    Private _GiftCardTypeId As Nullable(Of Integer)

    Public Overridable Property GiftCardTypeId As Nullable(Of Integer)
        Get
            Return _GiftCardTypeId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _GiftCardTypeId = Value
            _Change = True
        End Set
    End Property

    Private _RequireOtherProducts As Nullable(Of Boolean)

    Public Overridable Property RequireOtherProducts As Nullable(Of Boolean)
        Get
            Return _RequireOtherProducts
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _RequireOtherProducts = Value
            _Change = True
        End Set
    End Property

    Private _RequiredProductIds As String

    Public Overridable Property RequiredProductIds As String
        Get
            Return _RequiredProductIds
        End Get
        Set(ByVal Value As String)
            _RequiredProductIds = Value
            _Change = True
        End Set
    End Property

    Private _AutomaticallyAddRequiredProducts As Nullable(Of Boolean)

    Public Overridable Property AutomaticallyAddRequiredProducts As Nullable(Of Boolean)
        Get
            Return _AutomaticallyAddRequiredProducts
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _AutomaticallyAddRequiredProducts = Value
            _Change = True
        End Set
    End Property

    Private _IsDownload As Nullable(Of Boolean)

    Public Overridable Property IsDownload As Nullable(Of Boolean)
        Get
            Return _IsDownload
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _IsDownload = Value
            _Change = True
        End Set
    End Property

    Private _DownloadId As Nullable(Of Integer)

    Public Overridable Property DownloadId As Nullable(Of Integer)
        Get
            Return _DownloadId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _DownloadId = Value
            _Change = True
        End Set
    End Property

    Private _UnlimitedDownloads As Nullable(Of Boolean)

    Public Overridable Property UnlimitedDownloads As Nullable(Of Boolean)
        Get
            Return _UnlimitedDownloads
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _UnlimitedDownloads = Value
            _Change = True
        End Set
    End Property

    Private _MaxNumberOfDownloads As Nullable(Of Integer)

    Public Overridable Property MaxNumberOfDownloads As Nullable(Of Integer)
        Get
            Return _MaxNumberOfDownloads
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _MaxNumberOfDownloads = Value
            _Change = True
        End Set
    End Property

    Private _DownloadExpirationDays As Nullable(Of Integer)

    Public Overridable Property DownloadExpirationDays As Nullable(Of Integer)
        Get
            Return _DownloadExpirationDays
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _DownloadExpirationDays = Value
            _Change = True
        End Set
    End Property

    Private _DownloadActivationTypeId As Nullable(Of Integer)

    Public Overridable Property DownloadActivationTypeId As Nullable(Of Integer)
        Get
            Return _DownloadActivationTypeId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _DownloadActivationTypeId = Value
            _Change = True
        End Set
    End Property

    Private _HasSampleDownload As Nullable(Of Boolean)

    Public Overridable Property HasSampleDownload As Nullable(Of Boolean)
        Get
            Return _HasSampleDownload
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _HasSampleDownload = Value
            _Change = True
        End Set
    End Property

    Private _SampleDownloadId As Nullable(Of Integer)

    Public Overridable Property SampleDownloadId As Nullable(Of Integer)
        Get
            Return _SampleDownloadId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _SampleDownloadId = Value
            _Change = True
        End Set
    End Property

    Private _HasUserAgreement As Nullable(Of Boolean)

    Public Overridable Property HasUserAgreement As Nullable(Of Boolean)
        Get
            Return _HasUserAgreement
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _HasUserAgreement = Value
            _Change = True
        End Set
    End Property

    Private _UserAgreementText As String

    Public Overridable Property UserAgreementText As String
        Get
            Return _UserAgreementText
        End Get
        Set(ByVal Value As String)
            _UserAgreementText = Value
            _Change = True
        End Set
    End Property

    Private _IsRecurring As Nullable(Of Boolean)

    Public Overridable Property IsRecurring As Nullable(Of Boolean)
        Get
            Return _IsRecurring
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _IsRecurring = Value
            _Change = True
        End Set
    End Property

    Private _RecurringCycleLength As Nullable(Of Integer)

    Public Overridable Property RecurringCycleLength As Nullable(Of Integer)
        Get
            Return _RecurringCycleLength
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _RecurringCycleLength = Value
            _Change = True
        End Set
    End Property

    Private _RecurringCyclePeriodId As Nullable(Of Integer)

    Public Overridable Property RecurringCyclePeriodId As Nullable(Of Integer)
        Get
            Return _RecurringCyclePeriodId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _RecurringCyclePeriodId = Value
            _Change = True
        End Set
    End Property

    Private _RecurringTotalCycles As Nullable(Of Integer)

    Public Overridable Property RecurringTotalCycles As Nullable(Of Integer)
        Get
            Return _RecurringTotalCycles
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _RecurringTotalCycles = Value
            _Change = True
        End Set
    End Property

    Private _IsShipEnabled As Nullable(Of Boolean)

    Public Overridable Property IsShipEnabled As Nullable(Of Boolean)
        Get
            Return _IsShipEnabled
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _IsShipEnabled = Value
            _Change = True
        End Set
    End Property

    Private _IsFreeShipping As Nullable(Of Boolean)

    Public Overridable Property IsFreeShipping As Nullable(Of Boolean)
        Get
            Return _IsFreeShipping
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _IsFreeShipping = Value
            _Change = True
        End Set
    End Property

    Private _AdditionalShippingCharge As Nullable(Of Double)

    Public Overridable Property AdditionalShippingCharge As Nullable(Of Double)
        Get
            Return _AdditionalShippingCharge
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _AdditionalShippingCharge = Value
            _Change = True
        End Set
    End Property

    Private _DeliveryDateId As Nullable(Of Integer)

    Public Overridable Property DeliveryDateId As Nullable(Of Integer)
        Get
            Return _DeliveryDateId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _DeliveryDateId = Value
            _Change = True
        End Set
    End Property

    Private _WarehouseId As Nullable(Of Integer)

    Public Overridable Property WarehouseId As Nullable(Of Integer)
        Get
            Return _WarehouseId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _WarehouseId = Value
            _Change = True
        End Set
    End Property

    Private _IsTaxExempt As Nullable(Of Boolean)

    Public Overridable Property IsTaxExempt As Nullable(Of Boolean)
        Get
            Return _IsTaxExempt
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _IsTaxExempt = Value
            _Change = True
        End Set
    End Property

    Private _TaxCategoryId As Nullable(Of Integer)

    Public Overridable Property TaxCategoryId As Nullable(Of Integer)
        Get
            Return _TaxCategoryId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _TaxCategoryId = Value
            _Change = True
        End Set
    End Property

    Private _ManageInventoryMethodId As Nullable(Of Integer)

    Public Overridable Property ManageInventoryMethodId As Nullable(Of Integer)
        Get
            Return _ManageInventoryMethodId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _ManageInventoryMethodId = Value
            _Change = True
        End Set
    End Property

    Private _StockQuantity As Nullable(Of Integer)

    Public Overridable Property StockQuantity As Nullable(Of Integer)
        Get
            Return _StockQuantity
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _StockQuantity = Value
            _Change = True
        End Set
    End Property

    Private _DisplayStockAvailability As Nullable(Of Boolean)

    Public Overridable Property DisplayStockAvailability As Nullable(Of Boolean)
        Get
            Return _DisplayStockAvailability
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _DisplayStockAvailability = Value
            _Change = True
        End Set
    End Property

    Private _DisplayStockQuantity As Nullable(Of Boolean)

    Public Overridable Property DisplayStockQuantity As Nullable(Of Boolean)
        Get
            Return _DisplayStockQuantity
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _DisplayStockQuantity = Value
            _Change = True
        End Set
    End Property

    Private _MinStockQuantity As Nullable(Of Integer)

    Public Overridable Property MinStockQuantity As Nullable(Of Integer)
        Get
            Return _MinStockQuantity
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _MinStockQuantity = Value
            _Change = True
        End Set
    End Property

    Private _LowStockActivityId As Nullable(Of Integer)

    Public Overridable Property LowStockActivityId As Nullable(Of Integer)
        Get
            Return _LowStockActivityId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _LowStockActivityId = Value
            _Change = True
        End Set
    End Property

    Private _NotifyAdminForQuantityBelow As Nullable(Of Integer)

    Public Overridable Property NotifyAdminForQuantityBelow As Nullable(Of Integer)
        Get
            Return _NotifyAdminForQuantityBelow
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _NotifyAdminForQuantityBelow = Value
            _Change = True
        End Set
    End Property

    Private _BackorderModeId As Nullable(Of Integer)

    Public Overridable Property BackorderModeId As Nullable(Of Integer)
        Get
            Return _BackorderModeId
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _BackorderModeId = Value
            _Change = True
        End Set
    End Property

    Private _AllowBackInStockSubscriptions As Nullable(Of Boolean)

    Public Overridable Property AllowBackInStockSubscriptions As Nullable(Of Boolean)
        Get
            Return _AllowBackInStockSubscriptions
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _AllowBackInStockSubscriptions = Value
            _Change = True
        End Set
    End Property

    Private _OrderMinimumQuantity As Nullable(Of Integer)

    Public Overridable Property OrderMinimumQuantity As Nullable(Of Integer)
        Get
            Return _OrderMinimumQuantity
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _OrderMinimumQuantity = Value
            _Change = True
        End Set
    End Property

    Private _OrderMaximumQuantity As Nullable(Of Integer)

    Public Overridable Property OrderMaximumQuantity As Nullable(Of Integer)
        Get
            Return _OrderMaximumQuantity
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _OrderMaximumQuantity = Value
            _Change = True
        End Set
    End Property

    Private _AllowedQuantities As String

    Public Overridable Property AllowedQuantities As String
        Get
            Return _AllowedQuantities
        End Get
        Set(ByVal Value As String)
            _AllowedQuantities = Value
            _Change = True
        End Set
    End Property

    Private _AllowAddingOnlyExistingAttributeCombinations As Nullable(Of Boolean)

    Public Overridable Property AllowAddingOnlyExistingAttributeCombinations As Nullable(Of Boolean)
        Get
            Return _AllowAddingOnlyExistingAttributeCombinations
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _AllowAddingOnlyExistingAttributeCombinations = Value
            _Change = True
        End Set
    End Property

    Private _DisableBuyButton As Nullable(Of Boolean)

    Public Overridable Property DisableBuyButton As Nullable(Of Boolean)
        Get
            Return _DisableBuyButton
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _DisableBuyButton = Value
            _Change = True
        End Set
    End Property

    Private _DisableWishlistButton As Nullable(Of Boolean)

    Public Overridable Property DisableWishlistButton As Nullable(Of Boolean)
        Get
            Return _DisableWishlistButton
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _DisableWishlistButton = Value
            _Change = True
        End Set
    End Property

    Private _AvailableForPreOrder As Nullable(Of Boolean)

    Public Overridable Property AvailableForPreOrder As Nullable(Of Boolean)
        Get
            Return _AvailableForPreOrder
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _AvailableForPreOrder = Value
            _Change = True
        End Set
    End Property

    Private _PreOrderAvailabilityStartDateTimeUtc As Nullable(Of DateTime)

    Public Overridable Property PreOrderAvailabilityStartDateTimeUtc As Nullable(Of DateTime)
        Get
            Return _PreOrderAvailabilityStartDateTimeUtc
        End Get
        Set(ByVal Value As Nullable(Of DateTime))
            _PreOrderAvailabilityStartDateTimeUtc = Value
            _Change = True
        End Set
    End Property

    Private _CallForPrice As Nullable(Of Boolean)

    Public Overridable Property CallForPrice As Nullable(Of Boolean)
        Get
            Return _CallForPrice
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _CallForPrice = Value
            _Change = True
        End Set
    End Property

    Private _Price As Nullable(Of Double)

    Public Overridable Property Price As Nullable(Of Double)
        Get
            Return _Price
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _Price = Value
            _Change = True
        End Set
    End Property

    Private _OldPrice As Nullable(Of Double)

    Public Overridable Property OldPrice As Nullable(Of Double)
        Get
            Return _OldPrice
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _OldPrice = Value
            _Change = True
        End Set
    End Property

    Private _ProductCost As Nullable(Of Double)

    Public Overridable Property ProductCost As Nullable(Of Double)
        Get
            Return _ProductCost
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _ProductCost = Value
            _Change = True
        End Set
    End Property

    Private _SpecialPrice As Nullable(Of Double)

    Public Overridable Property SpecialPrice As Nullable(Of Double)
        Get
            Return _SpecialPrice
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _SpecialPrice = Value
            _Change = True
        End Set
    End Property

    Private _SpecialPriceStartDateTimeUtc As Nullable(Of DateTime)

    Public Overridable Property SpecialPriceStartDateTimeUtc As Nullable(Of DateTime)
        Get
            Return _SpecialPriceStartDateTimeUtc
        End Get
        Set(ByVal Value As Nullable(Of DateTime))
            _SpecialPriceStartDateTimeUtc = Value
            _Change = True
        End Set
    End Property

    Private _SpecialPriceEndDateTimeUtc As Nullable(Of DateTime)

    Public Overridable Property SpecialPriceEndDateTimeUtc As Nullable(Of DateTime)
        Get
            Return _SpecialPriceEndDateTimeUtc
        End Get
        Set(ByVal Value As Nullable(Of DateTime))
            _SpecialPriceEndDateTimeUtc = Value
            _Change = True
        End Set
    End Property

    Private _CustomerEntersPrice As Nullable(Of Boolean)

    Public Overridable Property CustomerEntersPrice As Nullable(Of Boolean)
        Get
            Return _CustomerEntersPrice
            _Change = True
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _CustomerEntersPrice = Value
        End Set
    End Property

    Private _MinimumCustomerEnteredPrice As Nullable(Of Double)

    Public Overridable Property MinimumCustomerEnteredPrice As Nullable(Of Double)
        Get
            Return _MinimumCustomerEnteredPrice
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _MinimumCustomerEnteredPrice = Value
            _Change = True
        End Set
    End Property

    Private _MaximumCustomerEnteredPrice As Nullable(Of Double)

    Public Overridable Property MaximumCustomerEnteredPrice As Nullable(Of Double)
        Get
            Return _MaximumCustomerEnteredPrice
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _MaximumCustomerEnteredPrice = Value
            _Change = True
        End Set
    End Property

    Private _HasTierPrices As Nullable(Of Boolean)

    Public Overridable Property HasTierPrices As Nullable(Of Boolean)
        Get
            Return _HasTierPrices
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _HasTierPrices = Value
            _Change = True
        End Set
    End Property

    Private _HasDiscountsApplied As Nullable(Of Boolean)

    Public Overridable Property HasDiscountsApplied As Nullable(Of Boolean)
        Get
            Return _HasDiscountsApplied
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _HasDiscountsApplied = Value
            _Change = True
        End Set
    End Property

    Private _Weight As Nullable(Of Double)

    Public Overridable Property Weight As Nullable(Of Double)
        Get
            Return _Weight

        End Get
        Set(ByVal Value As Nullable(Of Double))
            _Weight = Value
            _Change = True
        End Set
    End Property

    Private _Length As Nullable(Of Double)

    Public Overridable Property Length As Nullable(Of Double)
        Get
            Return _Length
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _Length = Value
            _Change = True
        End Set
    End Property

    Private _Width As Nullable(Of Double)

    Public Overridable Property Width As Nullable(Of Double)
        Get
            Return _Width
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _Width = Value
            _Change = True
        End Set
    End Property

    Private _Height As Nullable(Of Double)

    Public Overridable Property Height As Nullable(Of Double)
        Get
            Return _Height
        End Get
        Set(ByVal Value As Nullable(Of Double))
            _Height = Value
            _Change = True
        End Set
    End Property

    Private _AvailableStartDateTimeUtc As Nullable(Of DateTime)

    Public Overridable Property AvailableStartDateTimeUtc As Nullable(Of DateTime)
        Get
            Return _AvailableStartDateTimeUtc
        End Get
        Set(ByVal Value As Nullable(Of DateTime))
            _AvailableStartDateTimeUtc = Value
            _Change = True
        End Set
    End Property

    Private _AvailableEndDateTimeUtc As Nullable(Of DateTime)

    Public Overridable Property AvailableEndDateTimeUtc As Nullable(Of DateTime)
        Get
            Return _AvailableEndDateTimeUtc
        End Get
        Set(ByVal Value As Nullable(Of DateTime))
            _AvailableEndDateTimeUtc = Value
            _Change = True
        End Set
    End Property

    Private _DisplayOrder As Nullable(Of Integer)

    Public Overridable Property DisplayOrder As Nullable(Of Integer)
        Get
            Return _DisplayOrder
        End Get
        Set(ByVal Value As Nullable(Of Integer))
            _DisplayOrder = Value
            _Change = True
        End Set
    End Property

    Private _Published As Nullable(Of Boolean)

    Public Overridable Property Published As Nullable(Of Boolean)
        Get
            Return _Published
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _Published = Value
            _Change = True

        End Set
    End Property

    Private _Deleted As Nullable(Of Boolean)

    Public Overridable Property Deleted As Nullable(Of Boolean)
        Get
            Return _Deleted
        End Get
        Set(ByVal Value As Nullable(Of Boolean))
            _Deleted = Value
            _Change = True
        End Set
    End Property

    Private _CreatedOnUtc As Nullable(Of DateTime)

    Public Overridable Property CreatedOnUtc As Nullable(Of DateTime)
        Get
            Return _CreatedOnUtc
        End Get
        Set(ByVal Value As Nullable(Of DateTime))
            _CreatedOnUtc = Value
            _Change = True
        End Set
    End Property

    Private _UpdatedOnUtc As Nullable(Of DateTime)

    Public Overridable Property UpdatedOnUtc As Nullable(Of DateTime)
        Get
            Return _UpdatedOnUtc
        End Get
        Set(ByVal Value As Nullable(Of DateTime))
            _UpdatedOnUtc = Value
            _Change = True
        End Set
    End Property


    Private _Vendor_Comments As String

    Public Overridable Property Vendor_Comments As String
        Get
            Return _Vendor_Comments
        End Get
        Set(ByVal Value As String)
            _Vendor_Comments = Value
            _Change = True
        End Set
    End Property


#End Region

	#Region "Internal Functions"   

	 Public Sub Init()
		Try
		' Initiliaze object properties.
				 
		 _Id = Nothing
		 		 
		 _ProductTypeId = Nothing
		 		 
		 _ParentGroupedProductId = Nothing
		 		 
		 _VisibleIndividually = Nothing
		 		 
		 _Name = Nothing
		 		 
		 _ShortDescription = Nothing
		 		 
		 _FullDescription = Nothing
		 		 
		 _AdminComment = Nothing
		 		 
		 _ProductTemplateId = Nothing
		 		 
		 _VendorId = Nothing
		 		 
		 _ShowOnHomePage = Nothing
		 		 
		 _MetaKeywords = Nothing
		 		 
		 _MetaDescription = Nothing
		 		 
		 _MetaTitle = Nothing
		 		 
		 _AllowCustomerReviews = Nothing
		 		 
		 _ApprovedRatingSum = Nothing
		 		 
		 _NotApprovedRatingSum = Nothing
		 		 
		 _ApprovedTotalReviews = Nothing
		 		 
		 _NotApprovedTotalReviews = Nothing
		 		 
		 _SubjectToAcl = Nothing
		 		 
		 _LimitedToStores = Nothing
		 		 
		 _Sku = Nothing
		 		 
		 _ManufacturerPartNumber = Nothing
		 		 
		 _Gtin = Nothing
		 		 
		 _IsGiftCard = Nothing
		 		 
		 _GiftCardTypeId = Nothing
		 		 
		 _RequireOtherProducts = Nothing
		 		 
		 _RequiredProductIds = Nothing
		 		 
		 _AutomaticallyAddRequiredProducts = Nothing
		 		 
		 _IsDownload = Nothing
		 		 
		 _DownloadId = Nothing
		 		 
		 _UnlimitedDownloads = Nothing
		 		 
		 _MaxNumberOfDownloads = Nothing
		 		 
		 _DownloadExpirationDays = Nothing
		 		 
		 _DownloadActivationTypeId = Nothing
		 		 
		 _HasSampleDownload = Nothing
		 		 
		 _SampleDownloadId = Nothing
		 		 
		 _HasUserAgreement = Nothing
		 		 
		 _UserAgreementText = Nothing
		 		 
		 _IsRecurring = Nothing
		 		 
		 _RecurringCycleLength = Nothing
		 		 
		 _RecurringCyclePeriodId = Nothing
		 		 
		 _RecurringTotalCycles = Nothing
		 		 
		 _IsShipEnabled = Nothing
		 		 
		 _IsFreeShipping = Nothing
		 		 
		 _AdditionalShippingCharge = Nothing
		 		 
		 _DeliveryDateId = Nothing
		 		 
		 _WarehouseId = Nothing
		 		 
		 _IsTaxExempt = Nothing
		 		 
		 _TaxCategoryId = Nothing
		 		 
		 _ManageInventoryMethodId = Nothing
		 		 
		 _StockQuantity = Nothing
		 		 
		 _DisplayStockAvailability = Nothing
		 		 
		 _DisplayStockQuantity = Nothing
		 		 
		 _MinStockQuantity = Nothing
		 		 
		 _LowStockActivityId = Nothing
		 		 
		 _NotifyAdminForQuantityBelow = Nothing
		 		 
		 _BackorderModeId = Nothing
		 		 
		 _AllowBackInStockSubscriptions = Nothing
		 		 
		 _OrderMinimumQuantity = Nothing
		 		 
		 _OrderMaximumQuantity = Nothing
		 		 
		 _AllowedQuantities = Nothing
		 		 
		 _AllowAddingOnlyExistingAttributeCombinations = Nothing
		 		 
		 _DisableBuyButton = Nothing
		 		 
		 _DisableWishlistButton = Nothing
		 		 
		 _AvailableForPreOrder = Nothing
		 		 
		 _PreOrderAvailabilityStartDateTimeUtc = Nothing
		 		 
		 _CallForPrice = Nothing
		 		 
		 _Price = Nothing
		 		 
		 _OldPrice = Nothing
		 		 
		 _ProductCost = Nothing
		 		 
		 _SpecialPrice = Nothing
		 		 
		 _SpecialPriceStartDateTimeUtc = Nothing
		 		 
		 _SpecialPriceEndDateTimeUtc = Nothing
		 		 
		 _CustomerEntersPrice = Nothing
		 		 
		 _MinimumCustomerEnteredPrice = Nothing
		 		 
		 _MaximumCustomerEnteredPrice = Nothing
		 		 
		 _HasTierPrices = Nothing
		 		 
		 _HasDiscountsApplied = Nothing
		 		 
		 _Weight = Nothing
		 		 
		 _Length = Nothing
		 		 
		 _Width = Nothing
		 		 
		 _Height = Nothing
		 		 
		 _AvailableStartDateTimeUtc = Nothing
		 		 
		 _AvailableEndDateTimeUtc = Nothing
		 		 
		 _DisplayOrder = Nothing
		 		 
		 _Published = Nothing
		 		 
		 _Deleted = Nothing
		 		 
            _CreatedOnUtc = Nothing
		 		 
            _UpdatedOnUtc = Nothing

            _Vendor_Comments = Nothing

		 		Catch ex As Exception
			Throw new Exception("Error in  clsProduct Initiliaze Values " & ex.message)
		End Try

	 End Sub
 
    Public Overridable Function AssignValuesByRow(ByVal Dr As DataRow) As Boolean

        Try
            Init()




            If Not Dr("Vendor_Comments").Equals(System.DBNull.Value) Then

                Vendor_Comments = Dr("Vendor_Comments")
            End If

            If Not Dr("Id").Equals(System.DBNull.Value) Then

                Id = CInt(Dr("Id"))
            End If

            If Not Dr("ProductTypeId").Equals(System.DBNull.Value) Then

                ProductTypeId = CInt(Dr("ProductTypeId"))
            End If

            If Not Dr("ParentGroupedProductId").Equals(System.DBNull.Value) Then

                ParentGroupedProductId = CInt(Dr("ParentGroupedProductId"))
            End If

            If Not Dr("VisibleIndividually").Equals(System.DBNull.Value) Then

                VisibleIndividually = CBool(Dr("VisibleIndividually"))
            End If

            If Not Dr("Name").Equals(System.DBNull.Value) Then

                Name = CStr(Dr("Name"))
            End If

            If Not Dr("ShortDescription").Equals(System.DBNull.Value) Then

                ShortDescription = CStr(Dr("ShortDescription"))
            End If

            If Not Dr("FullDescription").Equals(System.DBNull.Value) Then

                FullDescription = CStr(Dr("FullDescription"))
            End If

            If Not Dr("AdminComment").Equals(System.DBNull.Value) Then

                AdminComment = CStr(Dr("AdminComment"))
            End If

            If Not Dr("ProductTemplateId").Equals(System.DBNull.Value) Then

                ProductTemplateId = CInt(Dr("ProductTemplateId"))
            End If

            If Not Dr("VendorId").Equals(System.DBNull.Value) Then

                VendorId = CInt(Dr("VendorId"))
            End If

            If Not Dr("ShowOnHomePage").Equals(System.DBNull.Value) Then

                ShowOnHomePage = CBool(Dr("ShowOnHomePage"))
            End If

            If Not Dr("MetaKeywords").Equals(System.DBNull.Value) Then

                MetaKeywords = CStr(Dr("MetaKeywords"))
            End If

            If Not Dr("MetaDescription").Equals(System.DBNull.Value) Then

                MetaDescription = CStr(Dr("MetaDescription"))
            End If

            If Not Dr("MetaTitle").Equals(System.DBNull.Value) Then

                MetaTitle = CStr(Dr("MetaTitle"))
            End If

            If Not Dr("AllowCustomerReviews").Equals(System.DBNull.Value) Then

                AllowCustomerReviews = CBool(Dr("AllowCustomerReviews"))
            End If

            If Not Dr("ApprovedRatingSum").Equals(System.DBNull.Value) Then

                ApprovedRatingSum = CInt(Dr("ApprovedRatingSum"))
            End If

            If Not Dr("NotApprovedRatingSum").Equals(System.DBNull.Value) Then

                NotApprovedRatingSum = CInt(Dr("NotApprovedRatingSum"))
            End If

            If Not Dr("ApprovedTotalReviews").Equals(System.DBNull.Value) Then

                ApprovedTotalReviews = CInt(Dr("ApprovedTotalReviews"))
            End If

            If Not Dr("NotApprovedTotalReviews").Equals(System.DBNull.Value) Then

                NotApprovedTotalReviews = CInt(Dr("NotApprovedTotalReviews"))
            End If

            If Not Dr("SubjectToAcl").Equals(System.DBNull.Value) Then

                SubjectToAcl = CBool(Dr("SubjectToAcl"))
            End If

            If Not Dr("LimitedToStores").Equals(System.DBNull.Value) Then

                LimitedToStores = CBool(Dr("LimitedToStores"))
            End If

            If Not Dr("Sku").Equals(System.DBNull.Value) Then

                Sku = CStr(Dr("Sku"))
            End If

            If Not Dr("ManufacturerPartNumber").Equals(System.DBNull.Value) Then

                ManufacturerPartNumber = CStr(Dr("ManufacturerPartNumber"))
            End If

            If Not Dr("Gtin").Equals(System.DBNull.Value) Then

                Gtin = CStr(Dr("Gtin"))
            End If

            If Not Dr("IsGiftCard").Equals(System.DBNull.Value) Then

                IsGiftCard = CBool(Dr("IsGiftCard"))
            End If

            If Not Dr("GiftCardTypeId").Equals(System.DBNull.Value) Then

                GiftCardTypeId = CInt(Dr("GiftCardTypeId"))
            End If

            If Not Dr("RequireOtherProducts").Equals(System.DBNull.Value) Then

                RequireOtherProducts = CBool(Dr("RequireOtherProducts"))
            End If

            If Not Dr("RequiredProductIds").Equals(System.DBNull.Value) Then

                RequiredProductIds = CStr(Dr("RequiredProductIds"))
            End If

            If Not Dr("AutomaticallyAddRequiredProducts").Equals(System.DBNull.Value) Then

                AutomaticallyAddRequiredProducts = CBool(Dr("AutomaticallyAddRequiredProducts"))
            End If

            If Not Dr("IsDownload").Equals(System.DBNull.Value) Then

                IsDownload = CBool(Dr("IsDownload"))
            End If

            If Not Dr("DownloadId").Equals(System.DBNull.Value) Then

                DownloadId = CInt(Dr("DownloadId"))
            End If

            If Not Dr("UnlimitedDownloads").Equals(System.DBNull.Value) Then

                UnlimitedDownloads = CBool(Dr("UnlimitedDownloads"))
            End If

            If Not Dr("MaxNumberOfDownloads").Equals(System.DBNull.Value) Then

                MaxNumberOfDownloads = CInt(Dr("MaxNumberOfDownloads"))
            End If

            If Not Dr("DownloadExpirationDays").Equals(System.DBNull.Value) Then

                DownloadExpirationDays = CInt(Dr("DownloadExpirationDays"))
            End If

            If Not Dr("DownloadActivationTypeId").Equals(System.DBNull.Value) Then

                DownloadActivationTypeId = CInt(Dr("DownloadActivationTypeId"))
            End If

            If Not Dr("HasSampleDownload").Equals(System.DBNull.Value) Then

                HasSampleDownload = CBool(Dr("HasSampleDownload"))
            End If

            If Not Dr("SampleDownloadId").Equals(System.DBNull.Value) Then

                SampleDownloadId = CInt(Dr("SampleDownloadId"))
            End If

            If Not Dr("HasUserAgreement").Equals(System.DBNull.Value) Then

                HasUserAgreement = CBool(Dr("HasUserAgreement"))
            End If

            If Not Dr("UserAgreementText").Equals(System.DBNull.Value) Then

                UserAgreementText = CStr(Dr("UserAgreementText"))
            End If

            If Not Dr("IsRecurring").Equals(System.DBNull.Value) Then

                IsRecurring = CBool(Dr("IsRecurring"))
            End If

            If Not Dr("RecurringCycleLength").Equals(System.DBNull.Value) Then

                RecurringCycleLength = CInt(Dr("RecurringCycleLength"))
            End If

            If Not Dr("RecurringCyclePeriodId").Equals(System.DBNull.Value) Then

                RecurringCyclePeriodId = CInt(Dr("RecurringCyclePeriodId"))
            End If

            If Not Dr("RecurringTotalCycles").Equals(System.DBNull.Value) Then

                RecurringTotalCycles = CInt(Dr("RecurringTotalCycles"))
            End If

            If Not Dr("IsShipEnabled").Equals(System.DBNull.Value) Then

                IsShipEnabled = CBool(Dr("IsShipEnabled"))
            End If

            If Not Dr("IsFreeShipping").Equals(System.DBNull.Value) Then

                IsFreeShipping = CBool(Dr("IsFreeShipping"))
            End If

            If Not Dr("AdditionalShippingCharge").Equals(System.DBNull.Value) Then

                AdditionalShippingCharge = CDbl(Dr("AdditionalShippingCharge"))
            End If

            If Not Dr("DeliveryDateId").Equals(System.DBNull.Value) Then

                DeliveryDateId = CInt(Dr("DeliveryDateId"))
            End If

            If Not Dr("WarehouseId").Equals(System.DBNull.Value) Then

                WarehouseId = CInt(Dr("WarehouseId"))
            End If

            If Not Dr("IsTaxExempt").Equals(System.DBNull.Value) Then

                IsTaxExempt = CBool(Dr("IsTaxExempt"))
            End If

            If Not Dr("TaxCategoryId").Equals(System.DBNull.Value) Then

                TaxCategoryId = CInt(Dr("TaxCategoryId"))
            End If

            If Not Dr("ManageInventoryMethodId").Equals(System.DBNull.Value) Then

                ManageInventoryMethodId = CInt(Dr("ManageInventoryMethodId"))
            End If

            If Not Dr("StockQuantity").Equals(System.DBNull.Value) Then

                StockQuantity = CInt(Dr("StockQuantity"))
            End If

            If Not Dr("DisplayStockAvailability").Equals(System.DBNull.Value) Then

                DisplayStockAvailability = CBool(Dr("DisplayStockAvailability"))
            End If

            If Not Dr("DisplayStockQuantity").Equals(System.DBNull.Value) Then

                DisplayStockQuantity = CBool(Dr("DisplayStockQuantity"))
            End If

            If Not Dr("MinStockQuantity").Equals(System.DBNull.Value) Then

                MinStockQuantity = CInt(Dr("MinStockQuantity"))
            End If

            If Not Dr("LowStockActivityId").Equals(System.DBNull.Value) Then

                LowStockActivityId = CInt(Dr("LowStockActivityId"))
            End If

            If Not Dr("NotifyAdminForQuantityBelow").Equals(System.DBNull.Value) Then

                NotifyAdminForQuantityBelow = CInt(Dr("NotifyAdminForQuantityBelow"))
            End If

            If Not Dr("BackorderModeId").Equals(System.DBNull.Value) Then

                BackorderModeId = CInt(Dr("BackorderModeId"))
            End If

            If Not Dr("AllowBackInStockSubscriptions").Equals(System.DBNull.Value) Then

                AllowBackInStockSubscriptions = CBool(Dr("AllowBackInStockSubscriptions"))
            End If

            If Not Dr("OrderMinimumQuantity").Equals(System.DBNull.Value) Then

                OrderMinimumQuantity = CInt(Dr("OrderMinimumQuantity"))
            End If

            If Not Dr("OrderMaximumQuantity").Equals(System.DBNull.Value) Then

                OrderMaximumQuantity = CInt(Dr("OrderMaximumQuantity"))
            End If

            If Not Dr("AllowedQuantities").Equals(System.DBNull.Value) Then

                AllowedQuantities = CStr(Dr("AllowedQuantities"))
            End If

            If Not Dr("AllowAddingOnlyExistingAttributeCombinations").Equals(System.DBNull.Value) Then

                AllowAddingOnlyExistingAttributeCombinations = CBool(Dr("AllowAddingOnlyExistingAttributeCombinations"))
            End If

            If Not Dr("DisableBuyButton").Equals(System.DBNull.Value) Then

                DisableBuyButton = CBool(Dr("DisableBuyButton"))
            End If

            If Not Dr("DisableWishlistButton").Equals(System.DBNull.Value) Then

                DisableWishlistButton = CBool(Dr("DisableWishlistButton"))
            End If

            If Not Dr("AvailableForPreOrder").Equals(System.DBNull.Value) Then

                AvailableForPreOrder = CBool(Dr("AvailableForPreOrder"))
            End If

            If Not Dr("PreOrderAvailabilityStartDateTimeUtc").Equals(System.DBNull.Value) Then

                PreOrderAvailabilityStartDateTimeUtc = CDate(Dr("PreOrderAvailabilityStartDateTimeUtc"))
            End If

            If Not Dr("CallForPrice").Equals(System.DBNull.Value) Then

                CallForPrice = CBool(Dr("CallForPrice"))
            End If

            If Not Dr("Price").Equals(System.DBNull.Value) Then

                Price = CDbl(Dr("Price"))
            End If

            If Not Dr("OldPrice").Equals(System.DBNull.Value) Then

                OldPrice = CDbl(Dr("OldPrice"))
            End If

            If Not Dr("ProductCost").Equals(System.DBNull.Value) Then

                ProductCost = CDbl(Dr("ProductCost"))
            End If

            If Not Dr("SpecialPrice").Equals(System.DBNull.Value) Then

                SpecialPrice = CDbl(Dr("SpecialPrice"))
            End If

            If Not Dr("SpecialPriceStartDateTimeUtc").Equals(System.DBNull.Value) Then

                SpecialPriceStartDateTimeUtc = CDate(Dr("SpecialPriceStartDateTimeUtc"))
            End If

            If Not Dr("SpecialPriceEndDateTimeUtc").Equals(System.DBNull.Value) Then

                SpecialPriceEndDateTimeUtc = CDate(Dr("SpecialPriceEndDateTimeUtc"))
            End If

            If Not Dr("CustomerEntersPrice").Equals(System.DBNull.Value) Then

                CustomerEntersPrice = CBool(Dr("CustomerEntersPrice"))
            End If

            If Not Dr("MinimumCustomerEnteredPrice").Equals(System.DBNull.Value) Then

                MinimumCustomerEnteredPrice = CDbl(Dr("MinimumCustomerEnteredPrice"))
            End If

            If Not Dr("MaximumCustomerEnteredPrice").Equals(System.DBNull.Value) Then

                MaximumCustomerEnteredPrice = CDbl(Dr("MaximumCustomerEnteredPrice"))
            End If

            If Not Dr("HasTierPrices").Equals(System.DBNull.Value) Then

                HasTierPrices = CBool(Dr("HasTierPrices"))
            End If

            If Not Dr("HasDiscountsApplied").Equals(System.DBNull.Value) Then

                HasDiscountsApplied = CBool(Dr("HasDiscountsApplied"))
            End If

            If Not Dr("Weight").Equals(System.DBNull.Value) Then

                Weight = CDbl(Dr("Weight"))
            End If

            If Not Dr("Length").Equals(System.DBNull.Value) Then

                Length = CDbl(Dr("Length"))
            End If

            If Not Dr("Width").Equals(System.DBNull.Value) Then

                Width = CDbl(Dr("Width"))
            End If

            If Not Dr("Height").Equals(System.DBNull.Value) Then

                Height = CDbl(Dr("Height"))
            End If

            If Not Dr("AvailableStartDateTimeUtc").Equals(System.DBNull.Value) Then

                AvailableStartDateTimeUtc = CDate(Dr("AvailableStartDateTimeUtc"))
            End If

            If Not Dr("AvailableEndDateTimeUtc").Equals(System.DBNull.Value) Then

                AvailableEndDateTimeUtc = CDate(Dr("AvailableEndDateTimeUtc"))
            End If

            If Not Dr("DisplayOrder").Equals(System.DBNull.Value) Then

                DisplayOrder = CInt(Dr("DisplayOrder"))
            End If

            If Not Dr("Published").Equals(System.DBNull.Value) Then

                Published = CBool(Dr("Published"))
            End If

            If Not Dr("Deleted").Equals(System.DBNull.Value) Then

                Deleted = CBool(Dr("Deleted"))
            End If

            If Not Dr("CreatedOnUtc").Equals(System.DBNull.Value) Then

                CreatedOnUtc = CDate(Dr("CreatedOnUtc"))
            End If

            If Not Dr("UpdatedOnUtc").Equals(System.DBNull.Value) Then

                UpdatedOnUtc = CDate(Dr("UpdatedOnUtc"))
            End If


        Catch ex As Exception
            Throw New Exception("Error in clsProduct AssignValuesByRow  " & ex.Message)
            Return False
        End Try

        Return True

    End Function
	
	Public   Sub New()		 
		 init()
	End Sub

   Public Overridable Sub AddNew()		 
        Init()
        NotifyAdminForQuantityBelow = 1

        GiftCardTypeId = 0
        ProductTypeId = 5
        ParentGroupedProductId = 0
        VisibleIndividually = True
        ProductTemplateId = 1
        ShowOnHomePage = False
        AllowCustomerReviews = True
        ApprovedRatingSum = 0
        ApprovedTotalReviews = 0
        NotApprovedRatingSum = 0
        NotApprovedTotalReviews = 0
        SubjectToAcl = False
        LimitedToStores = False
        IsGiftCard = False
        RequireOtherProducts = False
        AutomaticallyAddRequiredProducts = False
        IsDownload = False
        DownloadId = 0
        UnlimitedDownloads = False
        MaxNumberOfDownloads = 0
        DownloadActivationTypeId = 0
        HasSampleDownload = False
        SampleDownloadId = 0
        HasUserAgreement = False
        IsRecurring = False
        RecurringCycleLength = 0
        RecurringCyclePeriodId = 0
        RecurringTotalCycles = 0
        IsShipEnabled = True
        IsFreeShipping = False
        AdditionalShippingCharge = 0
        DeliveryDateId = 0
        WarehouseId = 0
        IsTaxExempt = False
        TaxCategoryId = 0
        ManageInventoryMethodId = 1
        StockQuantity = 100
        DisplayStockAvailability = True
        DisplayStockQuantity = False
        MinStockQuantity = 0
        LowStockActivityId = 1
        BackorderModeId = False
        AllowBackInStockSubscriptions = False
        OrderMaximumQuantity = 100
        OrderMinimumQuantity = 1
        AllowAddingOnlyExistingAttributeCombinations = False
        DisableBuyButton = False
        DisableWishlistButton = False
        AvailableForPreOrder = False
        CallForPrice = False
        Price = 1
        OldPrice = 0
        ProductCost = 0
        CustomerEntersPrice = False
        MinimumCustomerEnteredPrice = 0
        MaximumCustomerEnteredPrice = 0
        HasTierPrices = False
        HasDiscountsApplied = False
        Weight = 0
        Length = 0
        Height = 0
        Width = 0
        DisplayOrder = 0
        Deleted = 0
        CreatedOnUtc = Now
        UpdatedOnUtc = Now
        Published = False


      


	End Sub
	
	#end Region

		#Region "Update Functions"    
	
	''' <summary>
	''' Inset Current Object from Database
	''' </summary>
	''' <param name="transaction">Optional for Trasnactional Operations</param>
	''' <param name="closeConnectiononExit">Close Conenction on Exit</param>
	''' <returns>Number of Insert Records</returns>
	''' <remarks></remarks>
	 Public Overridable Function Insert(Optional ByVal transaction As SqlTransaction = Nothing ) As Integer
	   
    Dim objStringBuilder As New StringBuilder
	Dim SQLCmd As New SqlCommand
	Dim Result As Integer = 0
    Dim SQLConn As New  clsConnNop
		Try
		' Setup SQL query.
		  with  objStringBuilder
	    	 .Appendline("Insert into   Product ( " )
		 .Appendline("  ProductTypeId  ")
					 .Appendline(" , ParentGroupedProductId  ")
					 .Appendline(" , VisibleIndividually  ")
					 .Appendline(" , Name  ")
					 .Appendline(" , ShortDescription  ")
					 .Appendline(" , FullDescription  ")
					 .Appendline(" , AdminComment  ")
					 .Appendline(" , ProductTemplateId  ")
					 .Appendline(" , VendorId  ")
					 .Appendline(" , ShowOnHomePage  ")
					 .Appendline(" , MetaKeywords  ")
					 .Appendline(" , MetaDescription  ")
					 .Appendline(" , MetaTitle  ")
					 .Appendline(" , AllowCustomerReviews  ")
					 .Appendline(" , ApprovedRatingSum  ")
					 .Appendline(" , NotApprovedRatingSum  ")
					 .Appendline(" , ApprovedTotalReviews  ")
					 .Appendline(" , NotApprovedTotalReviews  ")
					 .Appendline(" , SubjectToAcl  ")
					 .Appendline(" , LimitedToStores  ")
					 .Appendline(" , Sku  ")
					 .Appendline(" , ManufacturerPartNumber  ")
					 .Appendline(" , Gtin  ")
					 .Appendline(" , IsGiftCard  ")
					 .Appendline(" , GiftCardTypeId  ")
					 .Appendline(" , RequireOtherProducts  ")
					 .Appendline(" , RequiredProductIds  ")
					 .Appendline(" , AutomaticallyAddRequiredProducts  ")
					 .Appendline(" , IsDownload  ")
					 .Appendline(" , DownloadId  ")
					 .Appendline(" , UnlimitedDownloads  ")
					 .Appendline(" , MaxNumberOfDownloads  ")
					 .Appendline(" , DownloadExpirationDays  ")
					 .Appendline(" , DownloadActivationTypeId  ")
					 .Appendline(" , HasSampleDownload  ")
					 .Appendline(" , SampleDownloadId  ")
					 .Appendline(" , HasUserAgreement  ")
					 .Appendline(" , UserAgreementText  ")
					 .Appendline(" , IsRecurring  ")
					 .Appendline(" , RecurringCycleLength  ")
					 .Appendline(" , RecurringCyclePeriodId  ")
					 .Appendline(" , RecurringTotalCycles  ")
					 .Appendline(" , IsShipEnabled  ")
					 .Appendline(" , IsFreeShipping  ")
					 .Appendline(" , AdditionalShippingCharge  ")
					 .Appendline(" , DeliveryDateId  ")
					 .Appendline(" , WarehouseId  ")
					 .Appendline(" , IsTaxExempt  ")
					 .Appendline(" , TaxCategoryId  ")
					 .Appendline(" , ManageInventoryMethodId  ")
					 .Appendline(" , StockQuantity  ")
					 .Appendline(" , DisplayStockAvailability  ")
					 .Appendline(" , DisplayStockQuantity  ")
					 .Appendline(" , MinStockQuantity  ")
					 .Appendline(" , LowStockActivityId  ")
					 .Appendline(" , NotifyAdminForQuantityBelow  ")
					 .Appendline(" , BackorderModeId  ")
					 .Appendline(" , AllowBackInStockSubscriptions  ")
					 .Appendline(" , OrderMinimumQuantity  ")
					 .Appendline(" , OrderMaximumQuantity  ")
					 .Appendline(" , AllowedQuantities  ")
					 .Appendline(" , AllowAddingOnlyExistingAttributeCombinations  ")
					 .Appendline(" , DisableBuyButton  ")
					 .Appendline(" , DisableWishlistButton  ")
					 .Appendline(" , AvailableForPreOrder  ")
					 .Appendline(" , PreOrderAvailabilityStartDateTimeUtc  ")
					 .Appendline(" , CallForPrice  ")
					 .Appendline(" , Price  ")
					 .Appendline(" , OldPrice  ")
					 .Appendline(" , ProductCost  ")
					 .Appendline(" , SpecialPrice  ")
					 .Appendline(" , SpecialPriceStartDateTimeUtc  ")
					 .Appendline(" , SpecialPriceEndDateTimeUtc  ")
					 .Appendline(" , CustomerEntersPrice  ")
					 .Appendline(" , MinimumCustomerEnteredPrice  ")
					 .Appendline(" , MaximumCustomerEnteredPrice  ")
					 .Appendline(" , HasTierPrices  ")
					 .Appendline(" , HasDiscountsApplied  ")
					 .Appendline(" , Weight  ")
					 .Appendline(" , Length  ")
					 .Appendline(" , Width  ")
					 .Appendline(" , Height  ")
					 .Appendline(" , AvailableStartDateTimeUtc  ")
					 .Appendline(" , AvailableEndDateTimeUtc  ")
					 .Appendline(" , DisplayOrder  ")
					 .Appendline(" , Published  ")
					 .Appendline(" , Deleted  ")
					 .Appendline(" , CreatedOnUtc  ")
                .AppendLine(" , UpdatedOnUtc , isRental,RentalPriceLength ,RentalPricePeriodID,ShipSeparately , IsTelecommunicationsOrBroadcastingOrElectronicServices,UseMultipleWarehouses")
                .AppendLine(",Vendor_Comments")
									.Appendline(" ) VALUES ( ")			''Values
					.Appendline("  @ProductTypeId  ")
					.Appendline(" , @ParentGroupedProductId  ")
					.Appendline(" , @VisibleIndividually  ")
					.Appendline(" , @Name  ")
					.Appendline(" , @ShortDescription  ")
					.Appendline(" , @FullDescription  ")
					.Appendline(" , @AdminComment  ")
					.Appendline(" , @ProductTemplateId  ")
					.Appendline(" , @VendorId  ")
					.Appendline(" , @ShowOnHomePage  ")
					.Appendline(" , @MetaKeywords  ")
					.Appendline(" , @MetaDescription  ")
					.Appendline(" , @MetaTitle  ")
					.Appendline(" , @AllowCustomerReviews  ")
					.Appendline(" , @ApprovedRatingSum  ")
					.Appendline(" , @NotApprovedRatingSum  ")
					.Appendline(" , @ApprovedTotalReviews  ")
					.Appendline(" , @NotApprovedTotalReviews  ")
					.Appendline(" , @SubjectToAcl  ")
					.Appendline(" , @LimitedToStores  ")
					.Appendline(" , @Sku  ")
					.Appendline(" , @ManufacturerPartNumber  ")
					.Appendline(" , @Gtin  ")
					.Appendline(" , @IsGiftCard  ")
					.Appendline(" , @GiftCardTypeId  ")
					.Appendline(" , @RequireOtherProducts  ")
					.Appendline(" , @RequiredProductIds  ")
					.Appendline(" , @AutomaticallyAddRequiredProducts  ")
					.Appendline(" , @IsDownload  ")
					.Appendline(" , @DownloadId  ")
					.Appendline(" , @UnlimitedDownloads  ")
					.Appendline(" , @MaxNumberOfDownloads  ")
					.Appendline(" , @DownloadExpirationDays  ")
					.Appendline(" , @DownloadActivationTypeId  ")
					.Appendline(" , @HasSampleDownload  ")
					.Appendline(" , @SampleDownloadId  ")
					.Appendline(" , @HasUserAgreement  ")
					.Appendline(" , @UserAgreementText  ")
					.Appendline(" , @IsRecurring  ")
					.Appendline(" , @RecurringCycleLength  ")
					.Appendline(" , @RecurringCyclePeriodId  ")
					.Appendline(" , @RecurringTotalCycles  ")
					.Appendline(" , @IsShipEnabled  ")
					.Appendline(" , @IsFreeShipping  ")
					.Appendline(" , @AdditionalShippingCharge  ")
					.Appendline(" , @DeliveryDateId  ")
					.Appendline(" , @WarehouseId  ")
					.Appendline(" , @IsTaxExempt  ")
					.Appendline(" , @TaxCategoryId  ")
					.Appendline(" , @ManageInventoryMethodId  ")
					.Appendline(" , @StockQuantity  ")
					.Appendline(" , @DisplayStockAvailability  ")
					.Appendline(" , @DisplayStockQuantity  ")
					.Appendline(" , @MinStockQuantity  ")
					.Appendline(" , @LowStockActivityId  ")
					.Appendline(" , @NotifyAdminForQuantityBelow  ")
					.Appendline(" , @BackorderModeId  ")
					.Appendline(" , @AllowBackInStockSubscriptions  ")
					.Appendline(" , @OrderMinimumQuantity  ")
					.Appendline(" , @OrderMaximumQuantity  ")
					.Appendline(" , @AllowedQuantities  ")
					.Appendline(" , @AllowAddingOnlyExistingAttributeCombinations  ")
					.Appendline(" , @DisableBuyButton  ")
					.Appendline(" , @DisableWishlistButton  ")
					.Appendline(" , @AvailableForPreOrder  ")
					.Appendline(" , @PreOrderAvailabilityStartDateTimeUtc  ")
					.Appendline(" , @CallForPrice  ")
					.Appendline(" , @Price  ")
					.Appendline(" , @OldPrice  ")
					.Appendline(" , @ProductCost  ")
					.Appendline(" , @SpecialPrice  ")
					.Appendline(" , @SpecialPriceStartDateTimeUtc  ")
					.Appendline(" , @SpecialPriceEndDateTimeUtc  ")
					.Appendline(" , @CustomerEntersPrice  ")
					.Appendline(" , @MinimumCustomerEnteredPrice  ")
					.Appendline(" , @MaximumCustomerEnteredPrice  ")
					.Appendline(" , @HasTierPrices  ")
					.Appendline(" , @HasDiscountsApplied  ")
					.Appendline(" , @Weight  ")
					.Appendline(" , @Length  ")
					.Appendline(" , @Width  ")
					.Appendline(" , @Height  ")
					.Appendline(" , @AvailableStartDateTimeUtc  ")
					.Appendline(" , @AvailableEndDateTimeUtc  ")
					.Appendline(" , @DisplayOrder  ")
					.Appendline(" , @Published  ")
					.Appendline(" , @Deleted  ")
					.Appendline(" , @CreatedOnUtc  ")
                .AppendLine(" , @UpdatedOnUtc ,0,0,0,0,0,0 ")
                .AppendLine(",@Vendor_Comments")
					 
    		            .AppendLine(" );SELECT SCOPE_IDENTITY();")'For Scope Identity
	         				
		 end with 
		 
		 with SQLCmd
		 
		 .CommandText =  objStringBuilder.tostring
			  .Parameters.Add(Parameters.ProductTypeId)
			 if ProductTypeId is Nothing  then
			 .Parameters.Item("@ProductTypeId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ProductTypeId").Value = ProductTypeId
			end if				
				  .Parameters.Add(Parameters.ParentGroupedProductId)
			 if ParentGroupedProductId is Nothing  then
			 .Parameters.Item("@ParentGroupedProductId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ParentGroupedProductId").Value = ParentGroupedProductId
			end if				
				  .Parameters.Add(Parameters.VisibleIndividually)
			 if VisibleIndividually is Nothing  then
			 .Parameters.Item("@VisibleIndividually").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@VisibleIndividually").Value = VisibleIndividually
			end if				
				  .Parameters.Add(Parameters.Name)
			 if Name is Nothing  then
			 .Parameters.Item("@Name").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Name").Value = Name
			end if				
				  .Parameters.Add(Parameters.ShortDescription)
			 if ShortDescription is Nothing  then
			 .Parameters.Item("@ShortDescription").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ShortDescription").Value = ShortDescription
			end if				
				  .Parameters.Add(Parameters.FullDescription)
			 if FullDescription is Nothing  then
			 .Parameters.Item("@FullDescription").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@FullDescription").Value = FullDescription
			end if				
				  .Parameters.Add(Parameters.AdminComment)
			 if AdminComment is Nothing  then
			 .Parameters.Item("@AdminComment").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AdminComment").Value = AdminComment
			end if				
				  .Parameters.Add(Parameters.ProductTemplateId)
			 if ProductTemplateId is Nothing  then
			 .Parameters.Item("@ProductTemplateId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ProductTemplateId").Value = ProductTemplateId
			end if				
				  .Parameters.Add(Parameters.VendorId)
			 if VendorId is Nothing  then
			 .Parameters.Item("@VendorId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@VendorId").Value = VendorId
			end if				
				  .Parameters.Add(Parameters.ShowOnHomePage)
			 if ShowOnHomePage is Nothing  then
			 .Parameters.Item("@ShowOnHomePage").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ShowOnHomePage").Value = ShowOnHomePage
			end if				
				  .Parameters.Add(Parameters.MetaKeywords)
			 if MetaKeywords is Nothing  then
			 .Parameters.Item("@MetaKeywords").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MetaKeywords").Value = MetaKeywords
			end if				
				  .Parameters.Add(Parameters.MetaDescription)
			 if MetaDescription is Nothing  then
			 .Parameters.Item("@MetaDescription").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MetaDescription").Value = MetaDescription
			end if				
				  .Parameters.Add(Parameters.MetaTitle)
			 if MetaTitle is Nothing  then
			 .Parameters.Item("@MetaTitle").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MetaTitle").Value = MetaTitle
			end if				
				  .Parameters.Add(Parameters.AllowCustomerReviews)
			 if AllowCustomerReviews is Nothing  then
			 .Parameters.Item("@AllowCustomerReviews").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AllowCustomerReviews").Value = AllowCustomerReviews
			end if				
				  .Parameters.Add(Parameters.ApprovedRatingSum)
			 if ApprovedRatingSum is Nothing  then
			 .Parameters.Item("@ApprovedRatingSum").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ApprovedRatingSum").Value = ApprovedRatingSum
			end if				
				  .Parameters.Add(Parameters.NotApprovedRatingSum)
			 if NotApprovedRatingSum is Nothing  then
			 .Parameters.Item("@NotApprovedRatingSum").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@NotApprovedRatingSum").Value = NotApprovedRatingSum
			end if				
				  .Parameters.Add(Parameters.ApprovedTotalReviews)
			 if ApprovedTotalReviews is Nothing  then
			 .Parameters.Item("@ApprovedTotalReviews").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ApprovedTotalReviews").Value = ApprovedTotalReviews
			end if				
				  .Parameters.Add(Parameters.NotApprovedTotalReviews)
			 if NotApprovedTotalReviews is Nothing  then
			 .Parameters.Item("@NotApprovedTotalReviews").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@NotApprovedTotalReviews").Value = NotApprovedTotalReviews
			end if				
				  .Parameters.Add(Parameters.SubjectToAcl)
			 if SubjectToAcl is Nothing  then
			 .Parameters.Item("@SubjectToAcl").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SubjectToAcl").Value = SubjectToAcl
			end if				
				  .Parameters.Add(Parameters.LimitedToStores)
			 if LimitedToStores is Nothing  then
			 .Parameters.Item("@LimitedToStores").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@LimitedToStores").Value = LimitedToStores
			end if				
				  .Parameters.Add(Parameters.Sku)
			 if Sku is Nothing  then
			 .Parameters.Item("@Sku").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Sku").Value = Sku
			end if				
				  .Parameters.Add(Parameters.ManufacturerPartNumber)
			 if ManufacturerPartNumber is Nothing  then
			 .Parameters.Item("@ManufacturerPartNumber").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ManufacturerPartNumber").Value = ManufacturerPartNumber
			end if				
				  .Parameters.Add(Parameters.Gtin)
			 if Gtin is Nothing  then
			 .Parameters.Item("@Gtin").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Gtin").Value = Gtin
			end if				
				  .Parameters.Add(Parameters.IsGiftCard)
			 if IsGiftCard is Nothing  then
			 .Parameters.Item("@IsGiftCard").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsGiftCard").Value = IsGiftCard
			end if				
				  .Parameters.Add(Parameters.GiftCardTypeId)
			 if GiftCardTypeId is Nothing  then
			 .Parameters.Item("@GiftCardTypeId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@GiftCardTypeId").Value = GiftCardTypeId
			end if				
				  .Parameters.Add(Parameters.RequireOtherProducts)
			 if RequireOtherProducts is Nothing  then
			 .Parameters.Item("@RequireOtherProducts").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RequireOtherProducts").Value = RequireOtherProducts
			end if				
				  .Parameters.Add(Parameters.RequiredProductIds)
			 if RequiredProductIds is Nothing  then
			 .Parameters.Item("@RequiredProductIds").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RequiredProductIds").Value = RequiredProductIds
			end if				
				  .Parameters.Add(Parameters.AutomaticallyAddRequiredProducts)
			 if AutomaticallyAddRequiredProducts is Nothing  then
			 .Parameters.Item("@AutomaticallyAddRequiredProducts").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AutomaticallyAddRequiredProducts").Value = AutomaticallyAddRequiredProducts
			end if				
				  .Parameters.Add(Parameters.IsDownload)
			 if IsDownload is Nothing  then
			 .Parameters.Item("@IsDownload").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsDownload").Value = IsDownload
			end if				
				  .Parameters.Add(Parameters.DownloadId)
			 if DownloadId is Nothing  then
			 .Parameters.Item("@DownloadId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DownloadId").Value = DownloadId
			end if				
				  .Parameters.Add(Parameters.UnlimitedDownloads)
			 if UnlimitedDownloads is Nothing  then
			 .Parameters.Item("@UnlimitedDownloads").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@UnlimitedDownloads").Value = UnlimitedDownloads
			end if				
				  .Parameters.Add(Parameters.MaxNumberOfDownloads)
			 if MaxNumberOfDownloads is Nothing  then
			 .Parameters.Item("@MaxNumberOfDownloads").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MaxNumberOfDownloads").Value = MaxNumberOfDownloads
			end if				
				  .Parameters.Add(Parameters.DownloadExpirationDays)
			 if DownloadExpirationDays is Nothing  then
			 .Parameters.Item("@DownloadExpirationDays").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DownloadExpirationDays").Value = DownloadExpirationDays
			end if				
				  .Parameters.Add(Parameters.DownloadActivationTypeId)
			 if DownloadActivationTypeId is Nothing  then
			 .Parameters.Item("@DownloadActivationTypeId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DownloadActivationTypeId").Value = DownloadActivationTypeId
			end if				
				  .Parameters.Add(Parameters.HasSampleDownload)
			 if HasSampleDownload is Nothing  then
			 .Parameters.Item("@HasSampleDownload").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@HasSampleDownload").Value = HasSampleDownload
			end if				
				  .Parameters.Add(Parameters.SampleDownloadId)
			 if SampleDownloadId is Nothing  then
			 .Parameters.Item("@SampleDownloadId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SampleDownloadId").Value = SampleDownloadId
			end if				
				  .Parameters.Add(Parameters.HasUserAgreement)
			 if HasUserAgreement is Nothing  then
			 .Parameters.Item("@HasUserAgreement").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@HasUserAgreement").Value = HasUserAgreement
			end if				
				  .Parameters.Add(Parameters.UserAgreementText)
			 if UserAgreementText is Nothing  then
			 .Parameters.Item("@UserAgreementText").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@UserAgreementText").Value = UserAgreementText
			end if				
				  .Parameters.Add(Parameters.IsRecurring)
			 if IsRecurring is Nothing  then
			 .Parameters.Item("@IsRecurring").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsRecurring").Value = IsRecurring
			end if				
				  .Parameters.Add(Parameters.RecurringCycleLength)
			 if RecurringCycleLength is Nothing  then
			 .Parameters.Item("@RecurringCycleLength").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RecurringCycleLength").Value = RecurringCycleLength
			end if				
				  .Parameters.Add(Parameters.RecurringCyclePeriodId)
			 if RecurringCyclePeriodId is Nothing  then
			 .Parameters.Item("@RecurringCyclePeriodId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RecurringCyclePeriodId").Value = RecurringCyclePeriodId
			end if				
				  .Parameters.Add(Parameters.RecurringTotalCycles)
			 if RecurringTotalCycles is Nothing  then
			 .Parameters.Item("@RecurringTotalCycles").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RecurringTotalCycles").Value = RecurringTotalCycles
			end if				
				  .Parameters.Add(Parameters.IsShipEnabled)
			 if IsShipEnabled is Nothing  then
			 .Parameters.Item("@IsShipEnabled").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsShipEnabled").Value = IsShipEnabled
			end if				
				  .Parameters.Add(Parameters.IsFreeShipping)
			 if IsFreeShipping is Nothing  then
			 .Parameters.Item("@IsFreeShipping").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsFreeShipping").Value = IsFreeShipping
			end if				
				  .Parameters.Add(Parameters.AdditionalShippingCharge)
			 if AdditionalShippingCharge is Nothing  then
			 .Parameters.Item("@AdditionalShippingCharge").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AdditionalShippingCharge").Value = AdditionalShippingCharge
			end if				
				  .Parameters.Add(Parameters.DeliveryDateId)
			 if DeliveryDateId is Nothing  then
			 .Parameters.Item("@DeliveryDateId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DeliveryDateId").Value = DeliveryDateId
			end if				
				  .Parameters.Add(Parameters.WarehouseId)
			 if WarehouseId is Nothing  then
			 .Parameters.Item("@WarehouseId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@WarehouseId").Value = WarehouseId
			end if				
				  .Parameters.Add(Parameters.IsTaxExempt)
			 if IsTaxExempt is Nothing  then
			 .Parameters.Item("@IsTaxExempt").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsTaxExempt").Value = IsTaxExempt
			end if				
				  .Parameters.Add(Parameters.TaxCategoryId)
			 if TaxCategoryId is Nothing  then
			 .Parameters.Item("@TaxCategoryId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@TaxCategoryId").Value = TaxCategoryId
			end if				
				  .Parameters.Add(Parameters.ManageInventoryMethodId)
			 if ManageInventoryMethodId is Nothing  then
			 .Parameters.Item("@ManageInventoryMethodId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ManageInventoryMethodId").Value = ManageInventoryMethodId
			end if				
				  .Parameters.Add(Parameters.StockQuantity)
			 if StockQuantity is Nothing  then
			 .Parameters.Item("@StockQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@StockQuantity").Value = StockQuantity
			end if				
				  .Parameters.Add(Parameters.DisplayStockAvailability)
			 if DisplayStockAvailability is Nothing  then
			 .Parameters.Item("@DisplayStockAvailability").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisplayStockAvailability").Value = DisplayStockAvailability
			end if				
				  .Parameters.Add(Parameters.DisplayStockQuantity)
			 if DisplayStockQuantity is Nothing  then
			 .Parameters.Item("@DisplayStockQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisplayStockQuantity").Value = DisplayStockQuantity
			end if				
				  .Parameters.Add(Parameters.MinStockQuantity)
			 if MinStockQuantity is Nothing  then
			 .Parameters.Item("@MinStockQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MinStockQuantity").Value = MinStockQuantity
			end if				
				  .Parameters.Add(Parameters.LowStockActivityId)
			 if LowStockActivityId is Nothing  then
			 .Parameters.Item("@LowStockActivityId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@LowStockActivityId").Value = LowStockActivityId
			end if				
				  .Parameters.Add(Parameters.NotifyAdminForQuantityBelow)
			 if NotifyAdminForQuantityBelow is Nothing  then
			 .Parameters.Item("@NotifyAdminForQuantityBelow").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@NotifyAdminForQuantityBelow").Value = NotifyAdminForQuantityBelow
			end if				
				  .Parameters.Add(Parameters.BackorderModeId)
			 if BackorderModeId is Nothing  then
			 .Parameters.Item("@BackorderModeId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@BackorderModeId").Value = BackorderModeId
			end if				
				  .Parameters.Add(Parameters.AllowBackInStockSubscriptions)
			 if AllowBackInStockSubscriptions is Nothing  then
			 .Parameters.Item("@AllowBackInStockSubscriptions").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AllowBackInStockSubscriptions").Value = AllowBackInStockSubscriptions
			end if				
				  .Parameters.Add(Parameters.OrderMinimumQuantity)
			 if OrderMinimumQuantity is Nothing  then
			 .Parameters.Item("@OrderMinimumQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@OrderMinimumQuantity").Value = OrderMinimumQuantity
			end if				
				  .Parameters.Add(Parameters.OrderMaximumQuantity)
			 if OrderMaximumQuantity is Nothing  then
			 .Parameters.Item("@OrderMaximumQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@OrderMaximumQuantity").Value = OrderMaximumQuantity
			end if				
				  .Parameters.Add(Parameters.AllowedQuantities)
			 if AllowedQuantities is Nothing  then
			 .Parameters.Item("@AllowedQuantities").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AllowedQuantities").Value = AllowedQuantities
			end if				
				  .Parameters.Add(Parameters.AllowAddingOnlyExistingAttributeCombinations)
			 if AllowAddingOnlyExistingAttributeCombinations is Nothing  then
			 .Parameters.Item("@AllowAddingOnlyExistingAttributeCombinations").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AllowAddingOnlyExistingAttributeCombinations").Value = AllowAddingOnlyExistingAttributeCombinations
			end if				
				  .Parameters.Add(Parameters.DisableBuyButton)
			 if DisableBuyButton is Nothing  then
			 .Parameters.Item("@DisableBuyButton").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisableBuyButton").Value = DisableBuyButton
			end if				
				  .Parameters.Add(Parameters.DisableWishlistButton)
			 if DisableWishlistButton is Nothing  then
			 .Parameters.Item("@DisableWishlistButton").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisableWishlistButton").Value = DisableWishlistButton
			end if				
				  .Parameters.Add(Parameters.AvailableForPreOrder)
			 if AvailableForPreOrder is Nothing  then
			 .Parameters.Item("@AvailableForPreOrder").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AvailableForPreOrder").Value = AvailableForPreOrder
			end if				
				  .Parameters.Add(Parameters.PreOrderAvailabilityStartDateTimeUtc)
			 if PreOrderAvailabilityStartDateTimeUtc is Nothing  then
			 .Parameters.Item("@PreOrderAvailabilityStartDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@PreOrderAvailabilityStartDateTimeUtc").Value = PreOrderAvailabilityStartDateTimeUtc
			end if				
				  .Parameters.Add(Parameters.CallForPrice)
			 if CallForPrice is Nothing  then
			 .Parameters.Item("@CallForPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@CallForPrice").Value = CallForPrice
			end if				
				  .Parameters.Add(Parameters.Price)
			 if Price is Nothing  then
			 .Parameters.Item("@Price").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Price").Value = Price
			end if				
				  .Parameters.Add(Parameters.OldPrice)
			 if OldPrice is Nothing  then
			 .Parameters.Item("@OldPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@OldPrice").Value = OldPrice
			end if				
				  .Parameters.Add(Parameters.ProductCost)
			 if ProductCost is Nothing  then
			 .Parameters.Item("@ProductCost").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ProductCost").Value = ProductCost
			end if				
				  .Parameters.Add(Parameters.SpecialPrice)
			 if SpecialPrice is Nothing  then
			 .Parameters.Item("@SpecialPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SpecialPrice").Value = SpecialPrice
			end if				
				  .Parameters.Add(Parameters.SpecialPriceStartDateTimeUtc)
			 if SpecialPriceStartDateTimeUtc is Nothing  then
			 .Parameters.Item("@SpecialPriceStartDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SpecialPriceStartDateTimeUtc").Value = SpecialPriceStartDateTimeUtc
			end if				
				  .Parameters.Add(Parameters.SpecialPriceEndDateTimeUtc)
			 if SpecialPriceEndDateTimeUtc is Nothing  then
			 .Parameters.Item("@SpecialPriceEndDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SpecialPriceEndDateTimeUtc").Value = SpecialPriceEndDateTimeUtc
			end if				
				  .Parameters.Add(Parameters.CustomerEntersPrice)
			 if CustomerEntersPrice is Nothing  then
			 .Parameters.Item("@CustomerEntersPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@CustomerEntersPrice").Value = CustomerEntersPrice
			end if				
				  .Parameters.Add(Parameters.MinimumCustomerEnteredPrice)
			 if MinimumCustomerEnteredPrice is Nothing  then
			 .Parameters.Item("@MinimumCustomerEnteredPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MinimumCustomerEnteredPrice").Value = MinimumCustomerEnteredPrice
			end if				
				  .Parameters.Add(Parameters.MaximumCustomerEnteredPrice)
			 if MaximumCustomerEnteredPrice is Nothing  then
			 .Parameters.Item("@MaximumCustomerEnteredPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MaximumCustomerEnteredPrice").Value = MaximumCustomerEnteredPrice
			end if				
				  .Parameters.Add(Parameters.HasTierPrices)
			 if HasTierPrices is Nothing  then
			 .Parameters.Item("@HasTierPrices").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@HasTierPrices").Value = HasTierPrices
			end if				
				  .Parameters.Add(Parameters.HasDiscountsApplied)
			 if HasDiscountsApplied is Nothing  then
			 .Parameters.Item("@HasDiscountsApplied").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@HasDiscountsApplied").Value = HasDiscountsApplied
			end if				
				  .Parameters.Add(Parameters.Weight)
			 if Weight is Nothing  then
			 .Parameters.Item("@Weight").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Weight").Value = Weight
			end if				
				  .Parameters.Add(Parameters.Length)
			 if Length is Nothing  then
			 .Parameters.Item("@Length").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Length").Value = Length
			end if				
				  .Parameters.Add(Parameters.Width)
			 if Width is Nothing  then
			 .Parameters.Item("@Width").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Width").Value = Width
			end if				
				  .Parameters.Add(Parameters.Height)
			 if Height is Nothing  then
			 .Parameters.Item("@Height").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Height").Value = Height
			end if				
				  .Parameters.Add(Parameters.AvailableStartDateTimeUtc)
			 if AvailableStartDateTimeUtc is Nothing  then
			 .Parameters.Item("@AvailableStartDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AvailableStartDateTimeUtc").Value = AvailableStartDateTimeUtc
			end if				
				  .Parameters.Add(Parameters.AvailableEndDateTimeUtc)
			 if AvailableEndDateTimeUtc is Nothing  then
			 .Parameters.Item("@AvailableEndDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AvailableEndDateTimeUtc").Value = AvailableEndDateTimeUtc
			end if				
				  .Parameters.Add(Parameters.DisplayOrder)
			 if DisplayOrder is Nothing  then
			 .Parameters.Item("@DisplayOrder").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisplayOrder").Value = DisplayOrder
			end if				
				  .Parameters.Add(Parameters.Published)
			 if Published is Nothing  then
			 .Parameters.Item("@Published").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Published").Value = Published
			end if				
				  .Parameters.Add(Parameters.Deleted)
			 if Deleted is Nothing  then
			 .Parameters.Item("@Deleted").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Deleted").Value = Deleted
			end if				
				  .Parameters.Add(Parameters.CreatedOnUtc)
			 if CreatedOnUtc is Nothing  then
			 .Parameters.Item("@CreatedOnUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@CreatedOnUtc").Value = CreatedOnUtc
			end if				
				  .Parameters.Add(Parameters.UpdatedOnUtc)
			 if UpdatedOnUtc is Nothing  then
			 .Parameters.Item("@UpdatedOnUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@UpdatedOnUtc").Value = UpdatedOnUtc
                End If

                'Vendor_Comments
                .Parameters.Add(Parameters.Vendor_Comments)
                If Vendor_Comments Is Nothing Then
                    .Parameters.Item("@Vendor_Comments").Value = System.DBNull.Value
                Else
                    .Parameters.Item("@Vendor_Comments").Value = Vendor_Comments
                End If

				 
				If transaction IsNot Nothing Then
					.Transaction = transaction
					.Connection = transaction.Connection
				Else
					.Connection = SQlconn.Conn
				End If
			 
  Id = cint(.ExecuteScalar)
			

 
		
		end with
			
		Catch ex As Exception
		 Throw new Exception("Error in clsProduct Insert  " & ex.message)
		Finally
			If transaction IsNot Nothing Then  SQLconn.CloseConnection()
		End Try
	
		
		
	 end function
 

	  
	 ''' <summary>
	''' Delete Current Object from Database
	''' </summary>
	''' <param name="transaction">Optional for Trasnactional Operations</param>
	''' <param name="closeConnectiononExit">Close Conenction on Exit</param>
	''' <returns>Number of Deleted Records</returns>
	''' <remarks></remarks>
	Public Overridable Function Delete(Optional ByVal transaction As SqlTransaction = Nothing ) As Integer
		
		Dim objStringBuilder As New StringBuilder
		Dim SQLCmd As New SqlCommand
		Dim Result As Integer = 0
		Dim SQLConn As New  clsConnNop     
		Try
		
		' Setup SQL query.
	  With objStringBuilder
                .AppendLine("Delete from  Product    ")
		  ' Construct WHERE clause
		 .Appendline(" Where ")	.Appendline("  Id = @Id  and  ")
	   		end with
	 With SQLCmd
		  .CommandText =  objStringBuilder.tostring			

	 .Parameters.Add(Parameters.Id)
		 if Id is Nothing  then
		throw new Exception("Unable to delete Record with Null  Id " )
		else
			 .Parameters.Item("@Id").Value = Id
			end if		
	     
	
		If transaction IsNot Nothing Then
			.Transaction = transaction
			.Connection = transaction.Connection
		Else
			.Connection = SQlconn.Conn
		End If
		
		Result= .ExecuteNonQuery()
			
		End With
			
		Catch ex As Exception
		 Throw new Exception("Error in clsProduct  Delete  " & ex.message)
		Finally
			If transaction IsNot Nothing then  SQlconn.CloseConnection()
		End Try
				   
		Return Result
		
	 end function
	 
	''' <summary>
	''' Update Current Object in Database
	''' </summary>
	''' <param name="transaction">Optional for Trasnactional Operations</param>
	''' <param name="closeConnectiononExit">Close Conenction on Exit</param>
	''' <returns>Reurn Update Records</returns>
	''' <remarks></remarks>
	Public Overridable  Function Update(Optional ByVal transaction As SqlTransaction = Nothing) As Integer

		Dim objStringBuilder As New StringBuilder
		Dim SQLCmd As SqlCommand
		Dim Result As Integer
		Dim SQLConn As New  clsConnNop     

		Try
		 
		  ' Setup SQL query.
			objStringBuilder = New StringBuilder
			With objStringBuilder
			.Appendline("Update Product  set ")
		 .Appendline("  ProductTypeId = @ProductTypeId  ")
             .Appendline(" , ParentGroupedProductId = @ParentGroupedProductId  ")
             .Appendline(" , VisibleIndividually = @VisibleIndividually  ")
             .Appendline(" , Name = @Name  ")
             .Appendline(" , ShortDescription = @ShortDescription  ")
             .Appendline(" , FullDescription = @FullDescription  ")
             .Appendline(" , AdminComment = @AdminComment  ")
             .Appendline(" , ProductTemplateId = @ProductTemplateId  ")
             .Appendline(" , VendorId = @VendorId  ")
             .Appendline(" , ShowOnHomePage = @ShowOnHomePage  ")
             .Appendline(" , MetaKeywords = @MetaKeywords  ")
             .Appendline(" , MetaDescription = @MetaDescription  ")
             .Appendline(" , MetaTitle = @MetaTitle  ")
             .Appendline(" , AllowCustomerReviews = @AllowCustomerReviews  ")
             .Appendline(" , ApprovedRatingSum = @ApprovedRatingSum  ")
             .Appendline(" , NotApprovedRatingSum = @NotApprovedRatingSum  ")
             .Appendline(" , ApprovedTotalReviews = @ApprovedTotalReviews  ")
             .Appendline(" , NotApprovedTotalReviews = @NotApprovedTotalReviews  ")
             .Appendline(" , SubjectToAcl = @SubjectToAcl  ")
             .Appendline(" , LimitedToStores = @LimitedToStores  ")
             .Appendline(" , Sku = @Sku  ")
             .Appendline(" , ManufacturerPartNumber = @ManufacturerPartNumber  ")
             .Appendline(" , Gtin = @Gtin  ")
             .Appendline(" , IsGiftCard = @IsGiftCard  ")
             .Appendline(" , GiftCardTypeId = @GiftCardTypeId  ")
             .Appendline(" , RequireOtherProducts = @RequireOtherProducts  ")
             .Appendline(" , RequiredProductIds = @RequiredProductIds  ")
             .Appendline(" , AutomaticallyAddRequiredProducts = @AutomaticallyAddRequiredProducts  ")
             .Appendline(" , IsDownload = @IsDownload  ")
             .Appendline(" , DownloadId = @DownloadId  ")
             .Appendline(" , UnlimitedDownloads = @UnlimitedDownloads  ")
             .Appendline(" , MaxNumberOfDownloads = @MaxNumberOfDownloads  ")
             .Appendline(" , DownloadExpirationDays = @DownloadExpirationDays  ")
             .Appendline(" , DownloadActivationTypeId = @DownloadActivationTypeId  ")
             .Appendline(" , HasSampleDownload = @HasSampleDownload  ")
             .Appendline(" , SampleDownloadId = @SampleDownloadId  ")
             .Appendline(" , HasUserAgreement = @HasUserAgreement  ")
             .Appendline(" , UserAgreementText = @UserAgreementText  ")
             .Appendline(" , IsRecurring = @IsRecurring  ")
             .Appendline(" , RecurringCycleLength = @RecurringCycleLength  ")
             .Appendline(" , RecurringCyclePeriodId = @RecurringCyclePeriodId  ")
             .Appendline(" , RecurringTotalCycles = @RecurringTotalCycles  ")
             .Appendline(" , IsShipEnabled = @IsShipEnabled  ")
             .Appendline(" , IsFreeShipping = @IsFreeShipping  ")
             .Appendline(" , AdditionalShippingCharge = @AdditionalShippingCharge  ")
             .Appendline(" , DeliveryDateId = @DeliveryDateId  ")
             .Appendline(" , WarehouseId = @WarehouseId  ")
             .Appendline(" , IsTaxExempt = @IsTaxExempt  ")
             .Appendline(" , TaxCategoryId = @TaxCategoryId  ")
             .Appendline(" , ManageInventoryMethodId = @ManageInventoryMethodId  ")
             .Appendline(" , StockQuantity = @StockQuantity  ")
             .Appendline(" , DisplayStockAvailability = @DisplayStockAvailability  ")
             .Appendline(" , DisplayStockQuantity = @DisplayStockQuantity  ")
             .Appendline(" , MinStockQuantity = @MinStockQuantity  ")
             .Appendline(" , LowStockActivityId = @LowStockActivityId  ")
             .Appendline(" , NotifyAdminForQuantityBelow = @NotifyAdminForQuantityBelow  ")
             .Appendline(" , BackorderModeId = @BackorderModeId  ")
             .Appendline(" , AllowBackInStockSubscriptions = @AllowBackInStockSubscriptions  ")
             .Appendline(" , OrderMinimumQuantity = @OrderMinimumQuantity  ")
             .Appendline(" , OrderMaximumQuantity = @OrderMaximumQuantity  ")
             .Appendline(" , AllowedQuantities = @AllowedQuantities  ")
             .Appendline(" , AllowAddingOnlyExistingAttributeCombinations = @AllowAddingOnlyExistingAttributeCombinations  ")
             .Appendline(" , DisableBuyButton = @DisableBuyButton  ")
             .Appendline(" , DisableWishlistButton = @DisableWishlistButton  ")
             .Appendline(" , AvailableForPreOrder = @AvailableForPreOrder  ")
             .Appendline(" , PreOrderAvailabilityStartDateTimeUtc = @PreOrderAvailabilityStartDateTimeUtc  ")
             .Appendline(" , CallForPrice = @CallForPrice  ")
             .Appendline(" , Price = @Price  ")
             .Appendline(" , OldPrice = @OldPrice  ")
             .Appendline(" , ProductCost = @ProductCost  ")
             .Appendline(" , SpecialPrice = @SpecialPrice  ")
             .Appendline(" , SpecialPriceStartDateTimeUtc = @SpecialPriceStartDateTimeUtc  ")
             .Appendline(" , SpecialPriceEndDateTimeUtc = @SpecialPriceEndDateTimeUtc  ")
             .Appendline(" , CustomerEntersPrice = @CustomerEntersPrice  ")
             .Appendline(" , MinimumCustomerEnteredPrice = @MinimumCustomerEnteredPrice  ")
             .Appendline(" , MaximumCustomerEnteredPrice = @MaximumCustomerEnteredPrice  ")
             .Appendline(" , HasTierPrices = @HasTierPrices  ")
             .Appendline(" , HasDiscountsApplied = @HasDiscountsApplied  ")
             .Appendline(" , Weight = @Weight  ")
             .Appendline(" , Length = @Length  ")
             .Appendline(" , Width = @Width  ")
             .Appendline(" , Height = @Height  ")
             .Appendline(" , AvailableStartDateTimeUtc = @AvailableStartDateTimeUtc  ")
             .Appendline(" , AvailableEndDateTimeUtc = @AvailableEndDateTimeUtc  ")
             .Appendline(" , DisplayOrder = @DisplayOrder  ")
             .Appendline(" , Published = @Published  ")
             .Appendline(" , Deleted = @Deleted  ")
             .Appendline(" , CreatedOnUtc = @CreatedOnUtc  ")
                .AppendLine(" , UpdatedOnUtc = @UpdatedOnUtc  ")
                .AppendLine(",Vendor_Comments=@Vendor_Comments ")
                        .Appendline(" Where ")''Where clause
			.Appendline("  Id = @Id  ")	  
					end with
		
			SQLCmd = New SqlCommand
			
			With SQLCmd
			 .CommandText =  objStringBuilder.tostring			
              .Parameters.Add(Parameters.Id)
			 if Id is Nothing  then
			 .Parameters.Item("@Id").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Id").Value = Id
			end if			
	              .Parameters.Add(Parameters.ProductTypeId)
			 if ProductTypeId is Nothing  then
			 .Parameters.Item("@ProductTypeId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ProductTypeId").Value = ProductTypeId
			end if			
	              .Parameters.Add(Parameters.ParentGroupedProductId)
			 if ParentGroupedProductId is Nothing  then
			 .Parameters.Item("@ParentGroupedProductId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ParentGroupedProductId").Value = ParentGroupedProductId
			end if			
	              .Parameters.Add(Parameters.VisibleIndividually)
			 if VisibleIndividually is Nothing  then
			 .Parameters.Item("@VisibleIndividually").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@VisibleIndividually").Value = VisibleIndividually
			end if			
	              .Parameters.Add(Parameters.Name)
			 if Name is Nothing  then
			 .Parameters.Item("@Name").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Name").Value = Name
			end if			
	              .Parameters.Add(Parameters.ShortDescription)
			 if ShortDescription is Nothing  then
			 .Parameters.Item("@ShortDescription").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ShortDescription").Value = ShortDescription
			end if			
	              .Parameters.Add(Parameters.FullDescription)
			 if FullDescription is Nothing  then
			 .Parameters.Item("@FullDescription").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@FullDescription").Value = FullDescription
			end if			
	              .Parameters.Add(Parameters.AdminComment)
			 if AdminComment is Nothing  then
			 .Parameters.Item("@AdminComment").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AdminComment").Value = AdminComment
			end if			
	              .Parameters.Add(Parameters.ProductTemplateId)
			 if ProductTemplateId is Nothing  then
			 .Parameters.Item("@ProductTemplateId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ProductTemplateId").Value = ProductTemplateId
			end if			
	              .Parameters.Add(Parameters.VendorId)
			 if VendorId is Nothing  then
			 .Parameters.Item("@VendorId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@VendorId").Value = VendorId
			end if			
	              .Parameters.Add(Parameters.ShowOnHomePage)
			 if ShowOnHomePage is Nothing  then
			 .Parameters.Item("@ShowOnHomePage").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ShowOnHomePage").Value = ShowOnHomePage
			end if			
	              .Parameters.Add(Parameters.MetaKeywords)
			 if MetaKeywords is Nothing  then
			 .Parameters.Item("@MetaKeywords").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MetaKeywords").Value = MetaKeywords
			end if			
	              .Parameters.Add(Parameters.MetaDescription)
			 if MetaDescription is Nothing  then
			 .Parameters.Item("@MetaDescription").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MetaDescription").Value = MetaDescription
			end if			
	              .Parameters.Add(Parameters.MetaTitle)
			 if MetaTitle is Nothing  then
			 .Parameters.Item("@MetaTitle").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MetaTitle").Value = MetaTitle
			end if			
	              .Parameters.Add(Parameters.AllowCustomerReviews)
			 if AllowCustomerReviews is Nothing  then
			 .Parameters.Item("@AllowCustomerReviews").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AllowCustomerReviews").Value = AllowCustomerReviews
			end if			
	              .Parameters.Add(Parameters.ApprovedRatingSum)
			 if ApprovedRatingSum is Nothing  then
			 .Parameters.Item("@ApprovedRatingSum").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ApprovedRatingSum").Value = ApprovedRatingSum
			end if			
	              .Parameters.Add(Parameters.NotApprovedRatingSum)
			 if NotApprovedRatingSum is Nothing  then
			 .Parameters.Item("@NotApprovedRatingSum").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@NotApprovedRatingSum").Value = NotApprovedRatingSum
			end if			
	              .Parameters.Add(Parameters.ApprovedTotalReviews)
			 if ApprovedTotalReviews is Nothing  then
			 .Parameters.Item("@ApprovedTotalReviews").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ApprovedTotalReviews").Value = ApprovedTotalReviews
			end if			
	              .Parameters.Add(Parameters.NotApprovedTotalReviews)
			 if NotApprovedTotalReviews is Nothing  then
			 .Parameters.Item("@NotApprovedTotalReviews").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@NotApprovedTotalReviews").Value = NotApprovedTotalReviews
			end if			
	              .Parameters.Add(Parameters.SubjectToAcl)
			 if SubjectToAcl is Nothing  then
			 .Parameters.Item("@SubjectToAcl").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SubjectToAcl").Value = SubjectToAcl
			end if			
	              .Parameters.Add(Parameters.LimitedToStores)
			 if LimitedToStores is Nothing  then
			 .Parameters.Item("@LimitedToStores").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@LimitedToStores").Value = LimitedToStores
			end if			
	              .Parameters.Add(Parameters.Sku)
			 if Sku is Nothing  then
			 .Parameters.Item("@Sku").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Sku").Value = Sku
			end if			
	              .Parameters.Add(Parameters.ManufacturerPartNumber)
			 if ManufacturerPartNumber is Nothing  then
			 .Parameters.Item("@ManufacturerPartNumber").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ManufacturerPartNumber").Value = ManufacturerPartNumber
			end if			
	              .Parameters.Add(Parameters.Gtin)
			 if Gtin is Nothing  then
			 .Parameters.Item("@Gtin").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Gtin").Value = Gtin
			end if			
	              .Parameters.Add(Parameters.IsGiftCard)
			 if IsGiftCard is Nothing  then
			 .Parameters.Item("@IsGiftCard").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsGiftCard").Value = IsGiftCard
			end if			
	              .Parameters.Add(Parameters.GiftCardTypeId)
			 if GiftCardTypeId is Nothing  then
			 .Parameters.Item("@GiftCardTypeId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@GiftCardTypeId").Value = GiftCardTypeId
			end if			
	              .Parameters.Add(Parameters.RequireOtherProducts)
			 if RequireOtherProducts is Nothing  then
			 .Parameters.Item("@RequireOtherProducts").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RequireOtherProducts").Value = RequireOtherProducts
			end if			
	              .Parameters.Add(Parameters.RequiredProductIds)
			 if RequiredProductIds is Nothing  then
			 .Parameters.Item("@RequiredProductIds").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RequiredProductIds").Value = RequiredProductIds
			end if			
	              .Parameters.Add(Parameters.AutomaticallyAddRequiredProducts)
			 if AutomaticallyAddRequiredProducts is Nothing  then
			 .Parameters.Item("@AutomaticallyAddRequiredProducts").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AutomaticallyAddRequiredProducts").Value = AutomaticallyAddRequiredProducts
			end if			
	              .Parameters.Add(Parameters.IsDownload)
			 if IsDownload is Nothing  then
			 .Parameters.Item("@IsDownload").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsDownload").Value = IsDownload
			end if			
	              .Parameters.Add(Parameters.DownloadId)
			 if DownloadId is Nothing  then
			 .Parameters.Item("@DownloadId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DownloadId").Value = DownloadId
			end if			
	              .Parameters.Add(Parameters.UnlimitedDownloads)
			 if UnlimitedDownloads is Nothing  then
			 .Parameters.Item("@UnlimitedDownloads").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@UnlimitedDownloads").Value = UnlimitedDownloads
			end if			
	              .Parameters.Add(Parameters.MaxNumberOfDownloads)
			 if MaxNumberOfDownloads is Nothing  then
			 .Parameters.Item("@MaxNumberOfDownloads").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MaxNumberOfDownloads").Value = MaxNumberOfDownloads
			end if			
	              .Parameters.Add(Parameters.DownloadExpirationDays)
			 if DownloadExpirationDays is Nothing  then
			 .Parameters.Item("@DownloadExpirationDays").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DownloadExpirationDays").Value = DownloadExpirationDays
			end if			
	              .Parameters.Add(Parameters.DownloadActivationTypeId)
			 if DownloadActivationTypeId is Nothing  then
			 .Parameters.Item("@DownloadActivationTypeId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DownloadActivationTypeId").Value = DownloadActivationTypeId
			end if			
	              .Parameters.Add(Parameters.HasSampleDownload)
			 if HasSampleDownload is Nothing  then
			 .Parameters.Item("@HasSampleDownload").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@HasSampleDownload").Value = HasSampleDownload
			end if			
	              .Parameters.Add(Parameters.SampleDownloadId)
			 if SampleDownloadId is Nothing  then
			 .Parameters.Item("@SampleDownloadId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SampleDownloadId").Value = SampleDownloadId
			end if			
	              .Parameters.Add(Parameters.HasUserAgreement)
			 if HasUserAgreement is Nothing  then
			 .Parameters.Item("@HasUserAgreement").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@HasUserAgreement").Value = HasUserAgreement
			end if			
	              .Parameters.Add(Parameters.UserAgreementText)
			 if UserAgreementText is Nothing  then
			 .Parameters.Item("@UserAgreementText").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@UserAgreementText").Value = UserAgreementText
			end if			
	              .Parameters.Add(Parameters.IsRecurring)
			 if IsRecurring is Nothing  then
			 .Parameters.Item("@IsRecurring").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsRecurring").Value = IsRecurring
			end if			
	              .Parameters.Add(Parameters.RecurringCycleLength)
			 if RecurringCycleLength is Nothing  then
			 .Parameters.Item("@RecurringCycleLength").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RecurringCycleLength").Value = RecurringCycleLength
			end if			
	              .Parameters.Add(Parameters.RecurringCyclePeriodId)
			 if RecurringCyclePeriodId is Nothing  then
			 .Parameters.Item("@RecurringCyclePeriodId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RecurringCyclePeriodId").Value = RecurringCyclePeriodId
			end if			
	              .Parameters.Add(Parameters.RecurringTotalCycles)
			 if RecurringTotalCycles is Nothing  then
			 .Parameters.Item("@RecurringTotalCycles").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@RecurringTotalCycles").Value = RecurringTotalCycles
			end if			
	              .Parameters.Add(Parameters.IsShipEnabled)
			 if IsShipEnabled is Nothing  then
			 .Parameters.Item("@IsShipEnabled").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsShipEnabled").Value = IsShipEnabled
			end if			
	              .Parameters.Add(Parameters.IsFreeShipping)
			 if IsFreeShipping is Nothing  then
			 .Parameters.Item("@IsFreeShipping").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsFreeShipping").Value = IsFreeShipping
			end if			
	              .Parameters.Add(Parameters.AdditionalShippingCharge)
			 if AdditionalShippingCharge is Nothing  then
			 .Parameters.Item("@AdditionalShippingCharge").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AdditionalShippingCharge").Value = AdditionalShippingCharge
			end if			
	              .Parameters.Add(Parameters.DeliveryDateId)
			 if DeliveryDateId is Nothing  then
			 .Parameters.Item("@DeliveryDateId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DeliveryDateId").Value = DeliveryDateId
			end if			
	              .Parameters.Add(Parameters.WarehouseId)
			 if WarehouseId is Nothing  then
			 .Parameters.Item("@WarehouseId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@WarehouseId").Value = WarehouseId
			end if			
	              .Parameters.Add(Parameters.IsTaxExempt)
			 if IsTaxExempt is Nothing  then
			 .Parameters.Item("@IsTaxExempt").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@IsTaxExempt").Value = IsTaxExempt
			end if			
	              .Parameters.Add(Parameters.TaxCategoryId)
			 if TaxCategoryId is Nothing  then
			 .Parameters.Item("@TaxCategoryId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@TaxCategoryId").Value = TaxCategoryId
			end if			
	              .Parameters.Add(Parameters.ManageInventoryMethodId)
			 if ManageInventoryMethodId is Nothing  then
			 .Parameters.Item("@ManageInventoryMethodId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ManageInventoryMethodId").Value = ManageInventoryMethodId
			end if			
	              .Parameters.Add(Parameters.StockQuantity)
			 if StockQuantity is Nothing  then
			 .Parameters.Item("@StockQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@StockQuantity").Value = StockQuantity
			end if			
	              .Parameters.Add(Parameters.DisplayStockAvailability)
			 if DisplayStockAvailability is Nothing  then
			 .Parameters.Item("@DisplayStockAvailability").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisplayStockAvailability").Value = DisplayStockAvailability
			end if			
	              .Parameters.Add(Parameters.DisplayStockQuantity)
			 if DisplayStockQuantity is Nothing  then
			 .Parameters.Item("@DisplayStockQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisplayStockQuantity").Value = DisplayStockQuantity
			end if			
	              .Parameters.Add(Parameters.MinStockQuantity)
			 if MinStockQuantity is Nothing  then
			 .Parameters.Item("@MinStockQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MinStockQuantity").Value = MinStockQuantity
			end if			
	              .Parameters.Add(Parameters.LowStockActivityId)
			 if LowStockActivityId is Nothing  then
			 .Parameters.Item("@LowStockActivityId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@LowStockActivityId").Value = LowStockActivityId
			end if			
	              .Parameters.Add(Parameters.NotifyAdminForQuantityBelow)
			 if NotifyAdminForQuantityBelow is Nothing  then
			 .Parameters.Item("@NotifyAdminForQuantityBelow").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@NotifyAdminForQuantityBelow").Value = NotifyAdminForQuantityBelow
			end if			
	              .Parameters.Add(Parameters.BackorderModeId)
			 if BackorderModeId is Nothing  then
			 .Parameters.Item("@BackorderModeId").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@BackorderModeId").Value = BackorderModeId
			end if			
	              .Parameters.Add(Parameters.AllowBackInStockSubscriptions)
			 if AllowBackInStockSubscriptions is Nothing  then
			 .Parameters.Item("@AllowBackInStockSubscriptions").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AllowBackInStockSubscriptions").Value = AllowBackInStockSubscriptions
			end if			
	              .Parameters.Add(Parameters.OrderMinimumQuantity)
			 if OrderMinimumQuantity is Nothing  then
			 .Parameters.Item("@OrderMinimumQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@OrderMinimumQuantity").Value = OrderMinimumQuantity
			end if			
	              .Parameters.Add(Parameters.OrderMaximumQuantity)
			 if OrderMaximumQuantity is Nothing  then
			 .Parameters.Item("@OrderMaximumQuantity").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@OrderMaximumQuantity").Value = OrderMaximumQuantity
			end if			
	              .Parameters.Add(Parameters.AllowedQuantities)
			 if AllowedQuantities is Nothing  then
			 .Parameters.Item("@AllowedQuantities").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AllowedQuantities").Value = AllowedQuantities
			end if			
	              .Parameters.Add(Parameters.AllowAddingOnlyExistingAttributeCombinations)
			 if AllowAddingOnlyExistingAttributeCombinations is Nothing  then
			 .Parameters.Item("@AllowAddingOnlyExistingAttributeCombinations").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AllowAddingOnlyExistingAttributeCombinations").Value = AllowAddingOnlyExistingAttributeCombinations
			end if			
	              .Parameters.Add(Parameters.DisableBuyButton)
			 if DisableBuyButton is Nothing  then
			 .Parameters.Item("@DisableBuyButton").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisableBuyButton").Value = DisableBuyButton
			end if			
	              .Parameters.Add(Parameters.DisableWishlistButton)
			 if DisableWishlistButton is Nothing  then
			 .Parameters.Item("@DisableWishlistButton").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisableWishlistButton").Value = DisableWishlistButton
			end if			
	              .Parameters.Add(Parameters.AvailableForPreOrder)
			 if AvailableForPreOrder is Nothing  then
			 .Parameters.Item("@AvailableForPreOrder").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AvailableForPreOrder").Value = AvailableForPreOrder
			end if			
	              .Parameters.Add(Parameters.PreOrderAvailabilityStartDateTimeUtc)
			 if PreOrderAvailabilityStartDateTimeUtc is Nothing  then
			 .Parameters.Item("@PreOrderAvailabilityStartDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@PreOrderAvailabilityStartDateTimeUtc").Value = PreOrderAvailabilityStartDateTimeUtc
			end if			
	              .Parameters.Add(Parameters.CallForPrice)
			 if CallForPrice is Nothing  then
			 .Parameters.Item("@CallForPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@CallForPrice").Value = CallForPrice
			end if			
	              .Parameters.Add(Parameters.Price)
			 if Price is Nothing  then
			 .Parameters.Item("@Price").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Price").Value = Price
			end if			
	              .Parameters.Add(Parameters.OldPrice)
			 if OldPrice is Nothing  then
			 .Parameters.Item("@OldPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@OldPrice").Value = OldPrice
			end if			
	              .Parameters.Add(Parameters.ProductCost)
			 if ProductCost is Nothing  then
			 .Parameters.Item("@ProductCost").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@ProductCost").Value = ProductCost
			end if			
	              .Parameters.Add(Parameters.SpecialPrice)
			 if SpecialPrice is Nothing  then
			 .Parameters.Item("@SpecialPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SpecialPrice").Value = SpecialPrice
			end if			
	              .Parameters.Add(Parameters.SpecialPriceStartDateTimeUtc)
			 if SpecialPriceStartDateTimeUtc is Nothing  then
			 .Parameters.Item("@SpecialPriceStartDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SpecialPriceStartDateTimeUtc").Value = SpecialPriceStartDateTimeUtc
			end if			
	              .Parameters.Add(Parameters.SpecialPriceEndDateTimeUtc)
			 if SpecialPriceEndDateTimeUtc is Nothing  then
			 .Parameters.Item("@SpecialPriceEndDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@SpecialPriceEndDateTimeUtc").Value = SpecialPriceEndDateTimeUtc
			end if			
	              .Parameters.Add(Parameters.CustomerEntersPrice)
			 if CustomerEntersPrice is Nothing  then
			 .Parameters.Item("@CustomerEntersPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@CustomerEntersPrice").Value = CustomerEntersPrice
			end if			
	              .Parameters.Add(Parameters.MinimumCustomerEnteredPrice)
			 if MinimumCustomerEnteredPrice is Nothing  then
			 .Parameters.Item("@MinimumCustomerEnteredPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MinimumCustomerEnteredPrice").Value = MinimumCustomerEnteredPrice
			end if			
	              .Parameters.Add(Parameters.MaximumCustomerEnteredPrice)
			 if MaximumCustomerEnteredPrice is Nothing  then
			 .Parameters.Item("@MaximumCustomerEnteredPrice").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@MaximumCustomerEnteredPrice").Value = MaximumCustomerEnteredPrice
			end if			
	              .Parameters.Add(Parameters.HasTierPrices)
			 if HasTierPrices is Nothing  then
			 .Parameters.Item("@HasTierPrices").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@HasTierPrices").Value = HasTierPrices
			end if			
	              .Parameters.Add(Parameters.HasDiscountsApplied)
			 if HasDiscountsApplied is Nothing  then
			 .Parameters.Item("@HasDiscountsApplied").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@HasDiscountsApplied").Value = HasDiscountsApplied
			end if			
	              .Parameters.Add(Parameters.Weight)
			 if Weight is Nothing  then
			 .Parameters.Item("@Weight").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Weight").Value = Weight
			end if			
	              .Parameters.Add(Parameters.Length)
			 if Length is Nothing  then
			 .Parameters.Item("@Length").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Length").Value = Length
			end if			
	              .Parameters.Add(Parameters.Width)
			 if Width is Nothing  then
			 .Parameters.Item("@Width").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Width").Value = Width
			end if			
	              .Parameters.Add(Parameters.Height)
			 if Height is Nothing  then
			 .Parameters.Item("@Height").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Height").Value = Height
			end if			
	              .Parameters.Add(Parameters.AvailableStartDateTimeUtc)
			 if AvailableStartDateTimeUtc is Nothing  then
			 .Parameters.Item("@AvailableStartDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AvailableStartDateTimeUtc").Value = AvailableStartDateTimeUtc
			end if			
	              .Parameters.Add(Parameters.AvailableEndDateTimeUtc)
			 if AvailableEndDateTimeUtc is Nothing  then
			 .Parameters.Item("@AvailableEndDateTimeUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@AvailableEndDateTimeUtc").Value = AvailableEndDateTimeUtc
			end if			
	              .Parameters.Add(Parameters.DisplayOrder)
			 if DisplayOrder is Nothing  then
			 .Parameters.Item("@DisplayOrder").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@DisplayOrder").Value = DisplayOrder
			end if			
	              .Parameters.Add(Parameters.Published)
			 if Published is Nothing  then
			 .Parameters.Item("@Published").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Published").Value = Published
			end if			
	              .Parameters.Add(Parameters.Deleted)
			 if Deleted is Nothing  then
			 .Parameters.Item("@Deleted").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@Deleted").Value = Deleted
			end if			
	              .Parameters.Add(Parameters.CreatedOnUtc)
			 if CreatedOnUtc is Nothing  then
			 .Parameters.Item("@CreatedOnUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@CreatedOnUtc").Value = CreatedOnUtc
			end if			
	              .Parameters.Add(Parameters.UpdatedOnUtc)
			 if UpdatedOnUtc is Nothing  then
			 .Parameters.Item("@UpdatedOnUtc").Value =  System.DBNull.Value
			else
			 .Parameters.Item("@UpdatedOnUtc").Value = UpdatedOnUtc
                End If
                'Vendor_Comments
                .Parameters.Add(Parameters.Vendor_Comments)
                If Vendor_Comments Is Nothing Then
                    .Parameters.Item("@Vendor_Comments").Value = System.DBNull.Value
                Else
                    .Parameters.Item("@Vendor_Comments").Value = Vendor_Comments
                End If
	       
				If transaction IsNot Nothing Then
					.Transaction = transaction
					.Connection = transaction.Connection
				Else
					.Connection = Sqlconn.Conn
				End If
				 
				Result= .ExecuteNonQuery()
	
		 end with
			
			Catch ex As Exception
			 Throw new Exception("Error in clsProduct  Update  " & ex.message)
			 Finally
			If transaction IsNot Nothing Then SQlconn.CloseConnection()
				End Try

    return Result

  end Function	  
#End Region



#Region "Parameters"
	
		Protected Class Parameters
		
				
		Public Shared ReadOnly Property Id As SqlParameter
				Get
				Dim sq as New SqlParameter("@Id", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "Id", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ProductTypeId As SqlParameter
				Get
				Dim sq as New SqlParameter("@ProductTypeId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductTypeId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ParentGroupedProductId As SqlParameter
				Get
				Dim sq as New SqlParameter("@ParentGroupedProductId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "ParentGroupedProductId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property VisibleIndividually As SqlParameter
				Get
				Dim sq as New SqlParameter("@VisibleIndividually", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "VisibleIndividually", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
        'Vendor_Comments

        Public Shared ReadOnly Property Vendor_Comments As SqlParameter
            Get
                Dim sq As New SqlParameter("@Vendor_Comments", SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Vendor_Comments", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
                sq.IsNullable = False
                Return sq
            End Get
        End Property
			 		
		Public Shared ReadOnly Property Name As SqlParameter
				Get
				Dim sq as New SqlParameter("@Name", SqlDbType.NVarChar,400, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ShortDescription As SqlParameter
				Get
				Dim sq as New SqlParameter("@ShortDescription", SqlDbType.NVarChar,2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ShortDescription", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property FullDescription As SqlParameter
				Get
				Dim sq as New SqlParameter("@FullDescription", SqlDbType.NVarChar,2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "FullDescription", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AdminComment As SqlParameter
				Get
				Dim sq as New SqlParameter("@AdminComment", SqlDbType.NVarChar,2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "AdminComment", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ProductTemplateId As SqlParameter
				Get
				Dim sq as New SqlParameter("@ProductTemplateId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductTemplateId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property VendorId As SqlParameter
				Get
				Dim sq as New SqlParameter("@VendorId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ShowOnHomePage As SqlParameter
				Get
				Dim sq as New SqlParameter("@ShowOnHomePage", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "ShowOnHomePage", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property MetaKeywords As SqlParameter
				Get
				Dim sq as New SqlParameter("@MetaKeywords", SqlDbType.NVarChar,400, Global.System.Data.ParameterDirection.Input, 0, 0, "MetaKeywords", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property MetaDescription As SqlParameter
				Get
				Dim sq as New SqlParameter("@MetaDescription", SqlDbType.NVarChar,2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "MetaDescription", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property MetaTitle As SqlParameter
				Get
				Dim sq as New SqlParameter("@MetaTitle", SqlDbType.NVarChar,400, Global.System.Data.ParameterDirection.Input, 0, 0, "MetaTitle", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AllowCustomerReviews As SqlParameter
				Get
				Dim sq as New SqlParameter("@AllowCustomerReviews", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowCustomerReviews", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ApprovedRatingSum As SqlParameter
				Get
				Dim sq as New SqlParameter("@ApprovedRatingSum", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "ApprovedRatingSum", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property NotApprovedRatingSum As SqlParameter
				Get
				Dim sq as New SqlParameter("@NotApprovedRatingSum", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "NotApprovedRatingSum", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ApprovedTotalReviews As SqlParameter
				Get
				Dim sq as New SqlParameter("@ApprovedTotalReviews", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalReviews", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property NotApprovedTotalReviews As SqlParameter
				Get
				Dim sq as New SqlParameter("@NotApprovedTotalReviews", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "NotApprovedTotalReviews", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property SubjectToAcl As SqlParameter
				Get
				Dim sq as New SqlParameter("@SubjectToAcl", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectToAcl", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property LimitedToStores As SqlParameter
				Get
				Dim sq as New SqlParameter("@LimitedToStores", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "LimitedToStores", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Sku As SqlParameter
				Get
				Dim sq as New SqlParameter("@Sku", SqlDbType.NVarChar,400, Global.System.Data.ParameterDirection.Input, 0, 0, "Sku", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ManufacturerPartNumber As SqlParameter
				Get
				Dim sq as New SqlParameter("@ManufacturerPartNumber", SqlDbType.NVarChar,400, Global.System.Data.ParameterDirection.Input, 0, 0, "ManufacturerPartNumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Gtin As SqlParameter
				Get
				Dim sq as New SqlParameter("@Gtin", SqlDbType.NVarChar,400, Global.System.Data.ParameterDirection.Input, 0, 0, "Gtin", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property IsGiftCard As SqlParameter
				Get
				Dim sq as New SqlParameter("@IsGiftCard", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "IsGiftCard", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property GiftCardTypeId As SqlParameter
				Get
				Dim sq as New SqlParameter("@GiftCardTypeId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "GiftCardTypeId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property RequireOtherProducts As SqlParameter
				Get
				Dim sq as New SqlParameter("@RequireOtherProducts", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "RequireOtherProducts", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property RequiredProductIds As SqlParameter
				Get
				Dim sq as New SqlParameter("@RequiredProductIds", SqlDbType.NVarChar,1000, Global.System.Data.ParameterDirection.Input, 0, 0, "RequiredProductIds", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AutomaticallyAddRequiredProducts As SqlParameter
				Get
				Dim sq as New SqlParameter("@AutomaticallyAddRequiredProducts", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "AutomaticallyAddRequiredProducts", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property IsDownload As SqlParameter
				Get
				Dim sq as New SqlParameter("@IsDownload", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "IsDownload", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DownloadId As SqlParameter
				Get
				Dim sq as New SqlParameter("@DownloadId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "DownloadId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property UnlimitedDownloads As SqlParameter
				Get
				Dim sq as New SqlParameter("@UnlimitedDownloads", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "UnlimitedDownloads", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property MaxNumberOfDownloads As SqlParameter
				Get
				Dim sq as New SqlParameter("@MaxNumberOfDownloads", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxNumberOfDownloads", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DownloadExpirationDays As SqlParameter
				Get
				Dim sq as New SqlParameter("@DownloadExpirationDays", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "DownloadExpirationDays", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DownloadActivationTypeId As SqlParameter
				Get
				Dim sq as New SqlParameter("@DownloadActivationTypeId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "DownloadActivationTypeId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property HasSampleDownload As SqlParameter
				Get
				Dim sq as New SqlParameter("@HasSampleDownload", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "HasSampleDownload", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property SampleDownloadId As SqlParameter
				Get
				Dim sq as New SqlParameter("@SampleDownloadId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "SampleDownloadId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property HasUserAgreement As SqlParameter
				Get
				Dim sq as New SqlParameter("@HasUserAgreement", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "HasUserAgreement", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property UserAgreementText As SqlParameter
				Get
				Dim sq as New SqlParameter("@UserAgreementText", SqlDbType.NVarChar,2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "UserAgreementText", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property IsRecurring As SqlParameter
				Get
				Dim sq as New SqlParameter("@IsRecurring", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "IsRecurring", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property RecurringCycleLength As SqlParameter
				Get
				Dim sq as New SqlParameter("@RecurringCycleLength", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "RecurringCycleLength", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property RecurringCyclePeriodId As SqlParameter
				Get
				Dim sq as New SqlParameter("@RecurringCyclePeriodId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "RecurringCyclePeriodId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property RecurringTotalCycles As SqlParameter
				Get
				Dim sq as New SqlParameter("@RecurringTotalCycles", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "RecurringTotalCycles", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property IsShipEnabled As SqlParameter
				Get
				Dim sq as New SqlParameter("@IsShipEnabled", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "IsShipEnabled", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property IsFreeShipping As SqlParameter
				Get
				Dim sq as New SqlParameter("@IsFreeShipping", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "IsFreeShipping", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AdditionalShippingCharge As SqlParameter
				Get
				Dim sq as New SqlParameter("@AdditionalShippingCharge", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "AdditionalShippingCharge", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DeliveryDateId As SqlParameter
				Get
				Dim sq as New SqlParameter("@DeliveryDateId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "DeliveryDateId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property WarehouseId As SqlParameter
				Get
				Dim sq as New SqlParameter("@WarehouseId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "WarehouseId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property IsTaxExempt As SqlParameter
				Get
				Dim sq as New SqlParameter("@IsTaxExempt", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "IsTaxExempt", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property TaxCategoryId As SqlParameter
				Get
				Dim sq as New SqlParameter("@TaxCategoryId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxCategoryId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ManageInventoryMethodId As SqlParameter
				Get
				Dim sq as New SqlParameter("@ManageInventoryMethodId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "ManageInventoryMethodId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property StockQuantity As SqlParameter
				Get
				Dim sq as New SqlParameter("@StockQuantity", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "StockQuantity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DisplayStockAvailability As SqlParameter
				Get
				Dim sq as New SqlParameter("@DisplayStockAvailability", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "DisplayStockAvailability", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DisplayStockQuantity As SqlParameter
				Get
				Dim sq as New SqlParameter("@DisplayStockQuantity", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "DisplayStockQuantity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property MinStockQuantity As SqlParameter
				Get
				Dim sq as New SqlParameter("@MinStockQuantity", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStockQuantity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property LowStockActivityId As SqlParameter
				Get
				Dim sq as New SqlParameter("@LowStockActivityId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "LowStockActivityId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property NotifyAdminForQuantityBelow As SqlParameter
				Get
				Dim sq as New SqlParameter("@NotifyAdminForQuantityBelow", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "NotifyAdminForQuantityBelow", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property BackorderModeId As SqlParameter
				Get
				Dim sq as New SqlParameter("@BackorderModeId", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "BackorderModeId", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AllowBackInStockSubscriptions As SqlParameter
				Get
				Dim sq as New SqlParameter("@AllowBackInStockSubscriptions", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowBackInStockSubscriptions", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property OrderMinimumQuantity As SqlParameter
				Get
				Dim sq as New SqlParameter("@OrderMinimumQuantity", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderMinimumQuantity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property OrderMaximumQuantity As SqlParameter
				Get
				Dim sq as New SqlParameter("@OrderMaximumQuantity", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderMaximumQuantity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AllowedQuantities As SqlParameter
				Get
				Dim sq as New SqlParameter("@AllowedQuantities", SqlDbType.NVarChar,1000, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowedQuantities", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AllowAddingOnlyExistingAttributeCombinations As SqlParameter
				Get
				Dim sq as New SqlParameter("@AllowAddingOnlyExistingAttributeCombinations", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowAddingOnlyExistingAttributeCombinations", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DisableBuyButton As SqlParameter
				Get
				Dim sq as New SqlParameter("@DisableBuyButton", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "DisableBuyButton", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DisableWishlistButton As SqlParameter
				Get
				Dim sq as New SqlParameter("@DisableWishlistButton", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "DisableWishlistButton", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AvailableForPreOrder As SqlParameter
				Get
				Dim sq as New SqlParameter("@AvailableForPreOrder", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "AvailableForPreOrder", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property PreOrderAvailabilityStartDateTimeUtc As SqlParameter
				Get
				Dim sq as New SqlParameter("@PreOrderAvailabilityStartDateTimeUtc", SqlDbType.DateTime,0, Global.System.Data.ParameterDirection.Input, 0, 0, "PreOrderAvailabilityStartDateTimeUtc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property CallForPrice As SqlParameter
				Get
				Dim sq as New SqlParameter("@CallForPrice", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "CallForPrice", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Price As SqlParameter
				Get
				Dim sq as New SqlParameter("@Price", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "Price", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property OldPrice As SqlParameter
				Get
				Dim sq as New SqlParameter("@OldPrice", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "OldPrice", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property ProductCost As SqlParameter
				Get
				Dim sq as New SqlParameter("@ProductCost", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductCost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property SpecialPrice As SqlParameter
				Get
				Dim sq as New SqlParameter("@SpecialPrice", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecialPrice", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property SpecialPriceStartDateTimeUtc As SqlParameter
				Get
				Dim sq as New SqlParameter("@SpecialPriceStartDateTimeUtc", SqlDbType.DateTime,0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecialPriceStartDateTimeUtc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property SpecialPriceEndDateTimeUtc As SqlParameter
				Get
				Dim sq as New SqlParameter("@SpecialPriceEndDateTimeUtc", SqlDbType.DateTime,0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecialPriceEndDateTimeUtc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property CustomerEntersPrice As SqlParameter
				Get
				Dim sq as New SqlParameter("@CustomerEntersPrice", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerEntersPrice", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property MinimumCustomerEnteredPrice As SqlParameter
				Get
				Dim sq as New SqlParameter("@MinimumCustomerEnteredPrice", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "MinimumCustomerEnteredPrice", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property MaximumCustomerEnteredPrice As SqlParameter
				Get
				Dim sq as New SqlParameter("@MaximumCustomerEnteredPrice", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumCustomerEnteredPrice", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property HasTierPrices As SqlParameter
				Get
				Dim sq as New SqlParameter("@HasTierPrices", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "HasTierPrices", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property HasDiscountsApplied As SqlParameter
				Get
				Dim sq as New SqlParameter("@HasDiscountsApplied", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "HasDiscountsApplied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Weight As SqlParameter
				Get
				Dim sq as New SqlParameter("@Weight", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "Weight", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Length As SqlParameter
				Get
				Dim sq as New SqlParameter("@Length", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "Length", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Width As SqlParameter
				Get
				Dim sq as New SqlParameter("@Width", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "Width", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Height As SqlParameter
				Get
				Dim sq as New SqlParameter("@Height", SqlDbType.Decimal,17, Global.System.Data.ParameterDirection.Input, 0, 0, "Height", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AvailableStartDateTimeUtc As SqlParameter
				Get
				Dim sq as New SqlParameter("@AvailableStartDateTimeUtc", SqlDbType.DateTime,0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvailableStartDateTimeUtc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property AvailableEndDateTimeUtc As SqlParameter
				Get
				Dim sq as New SqlParameter("@AvailableEndDateTimeUtc", SqlDbType.DateTime,0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvailableEndDateTimeUtc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=true
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property DisplayOrder As SqlParameter
				Get
				Dim sq as New SqlParameter("@DisplayOrder", SqlDbType.Int,4, Global.System.Data.ParameterDirection.Input, 0, 0, "DisplayOrder", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Published As SqlParameter
				Get
				Dim sq as New SqlParameter("@Published", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "Published", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property Deleted As SqlParameter
				Get
				Dim sq as New SqlParameter("@Deleted", SqlDbType.Bit,1, Global.System.Data.ParameterDirection.Input, 0, 0, "Deleted", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property CreatedOnUtc As SqlParameter
				Get
				Dim sq as New SqlParameter("@CreatedOnUtc", SqlDbType.DateTime,0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedOnUtc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		Public Shared ReadOnly Property UpdatedOnUtc As SqlParameter
				Get
				Dim sq as New SqlParameter("@UpdatedOnUtc", SqlDbType.DateTime,0, Global.System.Data.ParameterDirection.Input, 0, 0, "UpdatedOnUtc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", "")
				sq.IsNullable=false
				return sq				
				End Get				
			End Property
			
		 
			 		
		End Class
		
	#End Region





End Class
 