Imports System.Windows.Forms
Imports Visomes.MySQL
Imports System.Runtime.InteropServices
Imports Visomes.SGV.Core

''' <summary>
''' PREENCHIMENTO DE FFOS "PROCESSO DE ENVIO"
''' </summary>
''' <remarks></remarks>
Public Class CadEnvioFFOS

    Private idFFOS As Integer
    Private ffos As FFOS


#Region "SHADOWN AERO"
    Private drag As Boolean
    Private mouseX As Integer
    Private mouseY As Integer


    Public Class NativeStructs
        Public Structure MARGINS
            Public leftWidth As Integer
            Public rightWidth As Integer
            Public topHeight As Integer
            Public bottomHeight As Integer
        End Structure
    End Class

    Public Class NativeMethods
        <DllImport("dwmapi")> _
        Public Shared Function DwmExtendFrameIntoClientArea(ByVal hWnd As IntPtr, ByRef pMarInset As NativeStructs.MARGINS) As Integer
        End Function
        <DllImport("dwmapi")> _
        Friend Shared Function DwmSetWindowAttribute(ByVal hwnd As IntPtr, ByVal attr As Integer, ByRef attrValue As Integer, ByVal attrSize As Integer) As Integer
        End Function
        <DllImport("dwmapi.dll")> _
        Public Shared Function DwmIsCompositionEnabled(ByRef pfEnabled As Integer) As Integer
        End Function
    End Class

    Public Class NativeConstants
        Public Const CS_DROPSHADOW As Integer = &H20000
        Public Const WM_NCPAINT As Integer = &H85
    End Class

    '//////////////////SHADOWN AERO
    Private aeroEnabled As Boolean
    Protected Overrides ReadOnly Property CreateParams() As CreateParams
        Get
            CheckAeroEnabled()
            Dim cp As CreateParams = MyBase.CreateParams
            If Not aeroEnabled Then
                cp.ClassStyle = cp.ClassStyle Or NativeConstants.CS_DROPSHADOW
                Return cp
            Else
                Return cp
            End If
        End Get
    End Property

    Protected Overrides Sub WndProc(ByRef m As Message)
        Select Case m.Msg
            Case NativeConstants.WM_NCPAINT
                Dim val = 2
                If aeroEnabled Then
                    NativeMethods.DwmSetWindowAttribute(Handle, 2, val, 4)
                    Dim bla As New NativeStructs.MARGINS()
                    With bla
                        .bottomHeight = 1
                        .leftWidth = 1
                        .rightWidth = 1
                        .topHeight = 1
                    End With
                    NativeMethods.DwmExtendFrameIntoClientArea(Handle, bla)

                Else


                End If

                '  Case Else
                Exit Select
        End Select
        MyBase.WndProc(m)
    End Sub

    Private Sub CheckAeroEnabled()
        If Environment.OSVersion.Version.Major >= 6 Then
            Dim enabled As Integer = 0
            Dim response As Integer = NativeMethods.DwmIsCompositionEnabled(enabled)
            aeroEnabled = (enabled = 1)
        Else
            aeroEnabled = False
        End If
    End Sub

    Private Sub FrSobre_KeyDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles MyBase.KeyDown
        If e.KeyCode = Keys.Escape Then
            Me.Close()
        End If
    End Sub

    Private Sub frmAboutBox_MouseDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseDown
        drag = True
        mouseX = Windows.Forms.Cursor.Position.X - Me.Left
        mouseY = Windows.Forms.Cursor.Position.Y - Me.Top
    End Sub

    Private Sub frmAboutBox_MouseMove(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseMove
        If drag Then
            Me.Top = Windows.Forms.Cursor.Position.Y - mouseY
            Me.Left = Windows.Forms.Cursor.Position.X - mouseX
        End If
    End Sub

    Private Sub frmAboutBox_MouseUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseUp
        drag = False
    End Sub
#End Region

    ''' <summary>
    ''' INICIA UMA NOVA INSTÂNCIA DE frmFFOSCert
    ''' </summary>
    ''' <param name="idOs"></param>
    ''' <remarks></remarks>
    Public Sub New(ByVal idOs As String)
        InitializeComponent()
        Me.ffos = New FFOS(idOs)
        Me.txtCodOs.Text = idOs
        If ffos.IsNew() Then
            Me.txtResp.Text = Core.Usuario.Funcionario.NomeCompleto
            Me.ffos.DataEnvio = Core.CurrentDate().ToShortDateString()
            Me.ffos.DataColeta = Core.CurrentDate().ToShortDateString()
            Me.ffos.ResponsavelEnvio = New Funcionario(Core.Usuario.Funcionario.ID)
        Else
            CarregaCampos()
        End If
    End Sub

    ''' <summary>
    ''' CARREGA CAMPOS
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub CarregaCampos()
        If Not String.IsNullOrEmpty(ffos.DataEnvio) Then
            Me.dtpDtCad.Value = CDate(ffos.DataEnvio)
        Else
            Me.ffos.DataEnvio = Core.CurrentDate().ToShortDateString()
        End If
        If Not String.IsNullOrEmpty(ffos.DataColeta) Then
            Me.dtpColeta.Value = CDate(ffos.DataColeta)
        Else
            Me.ffos.DataColeta = Core.CurrentDate().ToShortDateString()
        End If
        If Me.ffos.ResponsavelEnvio IsNot Nothing Then
            Me.txtResp.Text = Me.ffos.ResponsavelEnvio.NomeCompleto
        Else
            Me.txtResp.Text = Core.Usuario.Funcionario.NomeCompleto
            Me.ffos.ResponsavelEnvio = New Funcionario(Core.Usuario.Funcionario.ID)
        End If
        Me.txtRetirado.Text = Me.ffos.RetiradoPor
        Me.txtEmp.Text = Me.ffos.EmpresaColeta
        Me.txtObs.Text = Me.ffos.ObsEnvio
    End Sub

    ''' <summary>
    ''' FECHAMENTO
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub frmFFOSCert_FormClosing(ByVal sender As System.Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing
        SGV.FFOS.LiberarFFOS()
    End Sub

    ''' <summary>
    ''' OK
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub OK_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OK_Button.Click
        If ValidSalvamento() Then
            SalvaDados()
            Me.DialogResult = Windows.Forms.DialogResult.OK
            Me.Close()
        End If
    End Sub

    ''' <summary>
    ''' VALIDA CAMPOS PARA SALVAMENTO
    ''' </summary>
    ''' <returns>TRUE - SALVA - FALSE - NÃO SALAVA</returns>
    ''' <remarks></remarks>
    Private Function ValidSalvamento() As Boolean
        If ValidatesOutPut And IsNullField() Then
            Return True
        Else
            MessageBox.Show(ErrorSavamento.ToString() & FieldBlank.ToString() & "Por favor, verifique-os e tente novamente.", _
                            Core.STR_NOME_SISTEMA, _
                            MessageBoxButtons.OK, _
                            MessageBoxIcon.Error)

            ErrorSavamento = New System.Text.StringBuilder("Campos incorretos: " & vbCrLf)
            FieldBlank = New System.Text.StringBuilder("Os seguintes campos estão em braco e são obrigatórios: " & vbCrLf)
            Return False
        End If
    End Function


    ''' <summary>
    ''' VERIFICA SE OS CAMPOS OBRIGATÓRIOS ESTÃO PREENCHIDOS
    ''' </summary>
    ''' <returns>TRUE - COMPLETO - FALSE - INCOMPLETO</returns>
    Private Function IsNullField() As Boolean
        Return True
    End Function

    ''' <summary>
    ''' SALVA DADOS
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub SalvaDados()
        If Me.ffos.Commit() Then
            Me.ffos.SetSituacao(Me.ffos.ConfiguraSituacao())
            MessageBox.Show("Dados Salvos com sucesso!", STR_NOME_SISTEMA)
        End If
    End Sub

    ''' <summary>
    ''' RETIRADO POR
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub txtRetirado_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtRetirado.TextChanged
        Me.ffos.RetiradoPor = Me.txtRetirado.Text
    End Sub

    ''' <summary>
    ''' DATA COLETA
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub dtpColeta_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpColeta.ValueChanged
        Me.ffos.DataColeta = Me.dtpColeta.Value.ToShortDateString()
    End Sub

    ''' <summary>
    ''' EMPRESA
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub txtEmp_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtEmp.TextChanged
        Me.ffos.EmpresaColeta = Me.txtEmp.Text
    End Sub

    ''' <summary>
    ''' OBS
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub txtObs_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtObs.TextChanged
        Me.ffos.ObsEnvio = Me.txtObs.Text
    End Sub

    ''' <summary>
    ''' DATA CADASTRO
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub dtpDtCad_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpDtCad.ValueChanged
        Me.ffos.DataEnvio = Me.dtpDtCad.Value.ToShortDateString()
    End Sub

    Private Sub Cancel_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Cancel_Button.Click
        Me.Close()
    End Sub
End Class