Imports Keysight.Visa
Imports Ivi.Visa
Imports NLog
Imports NLog.Logger
Imports Transporter_AEHF.Objects.Enumerations
Imports NationalInstruments

Public Class MySignalFinder
    '    Public PositionerControl As PositionerForm2
    '    Public Main As Main
    '    Public Amplitude As String, PositionerAzimuth As Double
    '    Public DirectionFinderThread As New Threading.Thread(AddressOf DirectionFinder) 'for running survey and allowing control to work
    '    Public ClosingDirectionFinderThread As Boolean = False
    '    Public SigLocker As New Object
    '    Public MySigFinderForm As MySignalFinderForm
    '    Public InvalidAzimuth As Double = 999999.999999
    '    Public FirstTime As Boolean = True
    '    Public StateRun As Boolean = False
    '    Dim _mode As ScanMode
    '    Dim _conectionString As String = "" '"TCPIP0::169.254.209.88::inst0::INSTR"
    '    Dim _findFrequency As String
    '    Public AzrSession As TcpipSession
    '    Public PositionerCorrectionForNorth As Double = 0
    '    Public DataController As DataController
    '    Public MarkerArry() As String
    '    Public FreqIdx As Integer = 0
    '    Public LevelIdx As Integer = 1
    '    Public MarkerTrace As Integer = 1

    '    Public SpinPositionerThread As New Threading.Thread(AddressOf SpinPositioner)
    '    Private Shared _log As Logger = LogManager.GetCurrentClassLogger()
    '    Public ClosingSpinPositionerthread As Boolean = False

    '    Public Sub New(ByRef aMain As Main, ByVal newConnectionString As String, Optional ByVal centerFrequency As String = Nothing) 'passing the connection string avoids cross threading problems
    '        _log.Debug(aMain.LoggerComboBox.Text & " -Starting sub 'New()'.")
    '        Me.Main = aMain
    '        'Me.PositionerControl = New PositionerForm2("ASRL" & Trim(Me.Main.ToolStripTextBoxPosSerPortNum.Text) & "::INSTR", Me.Main.signalStartedOnce, Me.Main.preventCableWrap)
    '        If Me.Main.signalStartedOnce = False Then
    '            Me.Main.signalStartedOnce = True
    '            Me.Main.cmbBxPositionerStartedOnce.Text = "True"
    '        End If
    '        Me.DataController = New DataController
    '        Me.mySigFinderForm = New MySignalFinderForm(Me)
    '        Me.updateRadialLabels()
    '        Me.mySigFinderForm.Visible = True
    '        _mode = ScanMode.Continuous
    '        _conectionString = NewConnectionString
    '        Try
    '            Dim mgr = New ResourceManager
    '            Me.AzrSession = CType(mgr.Open(_conectionString), MessageBasedSession)
    '        Catch ex As Exception
    '            MsgBox("Exception occured.  Most likely cause is the software could not make connection with analyzer.", MsgBoxStyle.MsgBoxSetForeground)
    '        End Try
    '        _findFrequency = CenterFrequency
    '        Me.markerTrace = Me.Main.missionObj.getSearchAnalyzerClass.getMarkerTraceAssignment
    '        _log.Debug(aMain.LoggerComboBox.Text & " -Ending sub 'New()'.")
    '    End Sub

    '    Public Sub UpdateRadialLabels()
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'updateRadialLabels().")
    '        Try
    '            'come up with the offset for the top label
    '            Dim tempLabel As Double = System.Math.Round(CDbl(Trim(Me.Main.Van_Heading.Text)), 0)
    '            Dim positionerOffset As Double = System.Math.Round(CDbl(Trim(Me.Main.PositionerOffset.Text)), 0)
    '            'ensure the positioner offset is >0 for the math to stay correct
    '            While (positionerOffset < 0)
    '                positionerOffset += 360
    '            End While

    '            positionerCorrectionForNorth = tempLabel + positionerOffset

    '            'now put a tick mark on the plot where the front of the van is
    '            Dim vanFront As Double = System.Math.Round(CDbl(Trim(Me.Main.Van_Heading.Text)), 0)
    '            While vanFront >= 360
    '                vanFront -= 360
    '            End While

    '            Dim polarMuliplier As Double = Double.Parse(Me.mySigFinderForm.cmbMultiplier.Text)
    '            Dim blankingLineLength As Double = PolarMuliplier * 9 / 16
    '            Dim tickLength As Double = PolarMuliplier * 12 / 16

    '            Me.mySigFinderForm.TickLine.ClearData()
    '            Me.mySigFinderForm.TickLine.PlotXYAppend(0, 0)
    '            Me.mySigFinderForm.TickLine.PlotXYAppend(tickLength * System.Math.Sin(vanFront * System.Math.PI / 180), tickLength * System.Math.Cos(vanFront * System.Math.PI / 180))
    '            'Me.mySigFinderForm.BlankingLine.PlotXYAppend(0, 0)
    '            'Me.mySigFinderForm.BlankingLine.PlotXYAppend(blankingLineLength * System.Math.Sin(vanFront * System.Math.PI / 180), blankingLineLength * System.Math.Cos(vanFront * System.Math.PI / 180))

    '        Catch ex As Exception
    '            _log.Error(Me.Main.LoggerComboBox.Text & " -Error in sub 'updateRadialLabels()' updating azimuth labels on radial plot. " & ex.Message)
    '            MsgBox("Error updating azimuth labels on radial plot. " & ex.Message, MsgBoxStyle.MsgBoxSetForeground)
    '        End Try
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'updateRadialLabels()'.")
    '    End Sub

    '    Function ShowAzrTrace() As Boolean
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting function 'ShowAZRTrace()'.")
    '        Try
    '            Dim mTrace As Trace = GetXSeriesTraceBinary4(4,
    '                                                              Transporter_AEHF.Main.MXAPXATrace.TRACE1,
    '                                                              Me.Main.MissionObj.GetSearchAnalyzerClass.GetMarkerTraceAssignment,
    '                                                              Me.Main.MissionObj.GetAnalyzer(Me.Main.cmbBxSearchAzr.SelectedIndex).GetAnalyzerModel)
    '            Dim currentTraceData As Double(,) = DataArrayConverterDoubles(mTrace)
    '            ' Dim ScaledData As Double(,) = Main.ScaleData(CurrentTraceData, Main.CALData4, Main.AntennaData4)
    '            Dim scaledData As Double(,) = CurrentTraceData
    '            If mTrace.StartFrequency = mTrace.StopFrequency Then
    '                '0 span change axis
    '                Dim numPoints As Integer = mTrace.DataSingles.Length
    '                Dim sweepTime As Double = mTrace.SweepTime
    '                For ii As Integer = 0 To numPoints - 1
    '                    ScaledData(0, ii) = ii * sweepTime / numPoints
    '                Next
    '                Me.mySigFinderForm.ScatterPlot1.XAxis.Range = New NationalInstruments.UI.Range(0, sweepTime)
    '            End If

    '            Me.mySigFinderForm.ScatterPlot1.PlotXY(Analysis.Math.ArrayOperation.CopyRow(ScaledData, 0), Analysis.Math.ArrayOperation.CopyRow(ScaledData, 1))
    '            Me.mySigFinderForm.DataScatterGraph.Refresh()
    '            Return True

    '        Catch ex As Exception
    '            _log.Error(Me.Main.LoggerComboBox.Text & " -Error in function 'ShowAZRTrace()': " & ex.Message)
    '            MsgBox("Error grabbing trace in signal finder. " & ex.Message)
    '        End Try
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending function 'ShowAZRTrace()'.")
    '    End Function

    '    Sub DirectionFinder()
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'DirectionFinder()'.")
    '        Try
    '            Control.CheckForIllegalCrossThreadCalls = False
    '            Dim elevation As Double = 0
    '            Dim speed As Double = CDbl(Me.mySigFinderForm.cmbPanSpeed.Text)
    '            Dim amplitude As String
    '            'Dim PositionerAzimuth As Double
    '            Me.mySigFinderForm.Frequency.Text = Main.searchFreq

    '            Select Case _mode
    '                Case ScanMode.Continuous
    '                    If Not _findFrequency = Nothing Then
    '                        AzrSession.FormattedIO.WriteLine("FREQuency:CENTer " + _findFrequency + " MHz")
    '                    End If
    '                    AzrSession.FormattedIO.WriteLine("FREQuency:CENTer?")
    '                    _findFrequency = AzrSession.FormattedIO.ReadString
    '                    Me.mySigFinderForm.Frequency.Text = System.Math.Round((CDbl(_findFrequency) / 10 ^ 6), 2).ToString
    '                    'AzrSession.Write("CALCulate:MARKer:X " + FindFrequency)

    '                    Try

    '                        With Me.mySigFinderForm
    '                            .numUpDwnCenterFreq.Value = _findFrequency / 10 ^ 6
    '                            AzrSession.FormattedIO.WriteLine("FREQuency:SPAN?")
    '                            .numUpDwnSpan.Value = AzrSession.FormattedIO.ReadString() / 10 ^ 6
    '                            AzrSession.FormattedIO.WriteLine("Bandwidth:Resolution?")
    '                            .numUpDwnRBW.Value = AzrSession.FormattedIO.ReadString() / 10 ^ 6
    '                            AzrSession.FormattedIO.WriteLine("sweep:points?")
    '                            .numUpDwnNumPoints.Value = AzrSession.FormattedIO.ReadString()

    '                            Dim tmp As String = ""
    '                            Dim tmp1 As String = ""
    '                            If Me.Main.missionObj.getAnalyzer(Me.Main.cmbBxSearchAzr.SelectedIndex).getAnalyzerModel = Enumerations.AnalyzerModels.AgilentFieldFox Then
    '                                AzrSession.FormattedIO.WriteLine(":SENSe:SWEep:ACQuisition:AUTO?")
    '                                tmp = AzrSession.FormattedIO.ReadString()
    '                                AzrSession.FormattedIO.WriteLine(":SENSe:SWEep:ACQ?")
    '                                tmp1 = AzrSession.FormattedIO.ReadString()
    '                                .numUpDwnSeepTime.Value = tmp1
    '                            Else
    '                                AzrSession.FormattedIO.WriteLine(":SWEep:TIME:AUTO?")
    '                                tmp = AzrSession.FormattedIO.ReadString()
    '                                AzrSession.FormattedIO.WriteLine(":SENSe:SWEep:TIME?")
    '                                tmp1 = AzrSession.FormattedIO.ReadString()
    '                                .numUpDwnSeepTime.Value = tmp1 * 10 ^ 3
    '                            End If
    '                            If tmp.Contains("1") Then
    '                                .chkBxAutoSwpTime.Checked = True
    '                            Else
    '                                .chkBxAutoSwpTime.Checked = False
    '                            End If
    '                            .numUpDwnSpeedRPM.Value = 500 * Me.PositionerControl.DegreesPerPanPosition * 60 / 360
    '                            Me.markerArry = Me.DataController.getMarkerValue(Me.markerTrace, Me.AzrSession, Me.Main.missionObj.getAnalyzer(Me.Main.cmbBxSearchAzr.SelectedIndex).getAnalyzerModel, False)
    '                            .numUpDwnMarkerFreq.Value = Me.markerArry(Me.freqIdx) / 10 ^ 6

    '                            'RPM = Pan Speed (PS) * DegreesPerPanPosition* 60secondsPerMinute /360degreesPerRevolution
    '                        End With
    '                    Catch ex As Exception
    '                        _log.Error(Me.Main.LoggerComboBox.Text & " -Error in sub 'DirectionFinder()' configuring azr settings on signal finder form:  " & ex.Message)
    '                    End Try
    '                    'PositionerControl.SpeedMode = Speed / Me.PositionerControl.DegreesPerPanPosition
    '                    mySigFinderForm.MaxHold1.Visible = True
    '                    Dim currrentAz As Double = PositionerControl.PanPosition
    '                    Dim fCommand As String = ""


    '                    ' If Main.signalStartedOnce = False Then


    '                    'fCommand = PositionerControl.QueryPTU300("FT") ' Set unit to Terse Mode. 
    '                    'fCommand = PositionerControl.QueryPTU300("ED") ' Set unit to Echo Off
    '                    'fCommand = PositionerControl.QueryPTU300("H") ' Stop Moving!!!!!
    '                    'fCommand = PositionerControl.QueryPTU300("LD") ' Disable Pan Limits
    '                    'fCommand = PositionerControl.QueryPTU300("I") ' Imediate 
    '                    'fCommand = PositionerControl.QueryPTU300("PMR") ' Stationary Power Mode  Low
    '                    'fCommand = PositionerControl.QueryPTU300("TMR") ' Stationary Power Mode  Low
    '                    'fCommand = PositionerControl.QueryPTU300("S") ' slave mode alows the next command to complete before proceeding
    '                    'fCommand = PositionerControl.QueryPTU300("RP") ' reset PAN axis only 'umcommented 2/11/14
    '                    'fCommand = PositionerControl.QueryPTU300("A") ' initiate reset 
    '                    'fCommand = PositionerControl.QueryPTU300("I") ' reinstate imediate
    '                    ''fCommand = PositionerControl.QueryPTU300("CV") ' Pure Velocity Mode
    '                    ''fCommand = PositionerControl.QueryPTU300("%%1CPT")
    '                    'Main.signalStartedOnce = True

    '                    ''check for cable wrap
    '                    '    If Me.Main.preventCableWrap = True Then
    '                    '        PositionerControl.prevenCableWrap = True
    '                    '        PositionerControl.SpinWrapThread.Start()

    '                    '    Else
    '                    '        fCommand = PositionerControl.QueryPTU300("CV") ' Pure Velocity Mode
    '                    '        fCommand = PositionerControl.QueryPTU300("%%1CPT")
    '                    '        fCommand = PositionerControl.QueryPTU300("PS500") ' + CDbl(Me.mySigFinderForm.cmbPanSpeed.Text) / Me.PositionerControl.DegreesPerPanPosition) ' + Speed.ToString) ' spin at speed rate
    '                    '    End If
    '                    'Else

    '                    'check for cable wrap
    '                    'If Me.Main.preventCableWrap = True Then
    '                    '    PositionerControl.prevenCableWrap = True
    '                    '    'MsgBox("starting spinPreventWrap() ", MsgBoxStyle.MsgBoxSetForeground)
    '                    '    PositionerControl.SpinWrapThread.Start()

    '                    'Else
    '                    '    fCommand = PositionerControl.QueryPTU300("CV") ' Pure Velocity Mode
    '                    '    fCommand = PositionerControl.QueryPTU300("%%1CPT")
    '                    '    fCommand = PositionerControl.QueryPTU300("PS500") ' + CDbl(Me.mySigFinderForm.cmbPanSpeed.Text) / Me.PositionerControl.DegreesPerPanPosition) ' + Speed.ToString) ' spin at speed rate
    '                    'End If

    '                    'End If

    '                    'Me.PositionerControl.mbSession.Flush(BufferTypes.InBuffer, True)


    '                    Dim polarMuliplier As Double = Double.Parse(Me.mySigFinderForm.cmbMultiplier.Text)
    '                    Me.DrawALargeCircle()
    '                    Me.DrawASmallerCircle()
    '                    Me.drawSomeCrossHairs()
    '                    Me.updateRadialLabels()

    '                    Me.mySigFinderForm.isInitialized = True

    '                    Do Until closingDirectionFinderThread
    '                        Try

    '                            If stateRun <> False Then
    '                                Control.CheckForIllegalCrossThreadCalls = False

    '                                System.Threading.Monitor.Enter(sigLocker)
    '                                Me.markerArry = Me.DataController.getMarkerValue(Me.markerTrace, Me.AzrSession, Me.Main.missionObj.getAnalyzer(Me.Main.cmbBxSearchAzr.SelectedIndex).getAnalyzerModel, False)
    '                                _findFrequency = Me.markerArry(Me.freqIdx)
    '                                ' FindFrequency = System.Math.Round(CDbl(AzrSession.Query("CALCulate:MARKer:X?")) / 10 ^ 6, 2).ToString
    '                                If CDbl(_findFrequency) < 1 Then
    '                                    AzrSession.FormattedIO.WriteLine("FREQuency:CENTer?")
    '                                    _findFrequency = System.Math.Round(CDbl(AzrSession.FormattedIO.ReadString()) / 10 ^ 6, 2).ToString
    '                                End If
    '                                Amplitude = Me.markerArry(levelIdx)
    '                                'Amplitude = System.Math.Round(CDbl(AzrSession.Query("CALCulate:MARKer:Y?")), 2).ToString

    '                                System.Threading.Monitor.Exit(sigLocker)
    '                                Me.mySigFinderForm.powerLabel.Text = System.Math.Round(CDbl(Amplitude), 2).ToString
    '                                Me.mySigFinderForm.Frequency.Text = System.Math.Round(CDbl(_findFrequency), 2).ToString

    '                                PolarMuliplier = Double.Parse(Me.mySigFinderForm.cmbMultiplier.Text)
    '                                Try
    '                                    'PositionerAzimuth = PositionerControl.PanPosition
    '                                    'tmpAzPos = PositionerControl.QueryPTU300("PP")
    '                                    'Me.mySigFinderForm.lblAzPosUnits.Text = tmpAzPos
    '                                    'Me.mySigFinderForm.lblAzimuth.Text = PositionerAzimuth
    '                                    'Me.Main.azimuthValue = PositionerAzimuth
    '                                Finally

    '                                End Try

    '                                If PositionerAzimuth <> Me.invalidAzimuth Or CDbl(Amplitude) > 900 Then
    '                                    PositionerAzimuth += Me.positionerCorrectionForNorth
    '                                    Me.mySigFinderForm.Radial.ClearData()
    '                                    Threading.Thread.Sleep(50)
    '                                    Me.mySigFinderForm.Radial.PlotXYAppend(0, 0)
    '                                    Threading.Thread.Sleep(50)
    '                                    Me.mySigFinderForm.Radial.PlotXYAppend(CDbl(Amplitude + PolarMuliplier) * System.Math.Sin(PositionerAzimuth * System.Math.PI / 180), _
    '                                                                           CDbl(Amplitude + PolarMuliplier) * System.Math.Cos(PositionerAzimuth * System.Math.PI / 180))
    '                                    Me.mySigFinderForm.ScatterPlotCurrent.PlotXYAppend(CDbl(Amplitude + PolarMuliplier) * System.Math.Sin(PositionerAzimuth * System.Math.PI / 180), _
    '                                                                                       CDbl(Amplitude + PolarMuliplier) * System.Math.Cos(PositionerAzimuth * System.Math.PI / 180))
    '                                    Threading.Thread.Sleep(50)
    '                                End If

    '                                'Do
    '                                '    If PositionerAzimuth > 180 Then
    '                                '        PositionerAzimuth -= 360
    '                                '        'ElseIf PositionerAzimuth < -180 Then
    '                                '        '    PositionerAzimuth += 360
    '                                '    Else
    '                                '        Exit Do
    '                                '    End If

    '                                'Loop
    '                                ' txtAzimuth.Text = PositionerAzimuth.ToString("000.0")
    '                                Me.mySigFinderForm.MaxHold1.PlotXYAppend(PositionerAzimuth, CDbl(Amplitude))
    '                                Me.mySigFinderForm.DataScatterGraph.Refresh()

    '                                'If Me.mySigFinderForm.chkContinue.Checked = False Then Exit Do
    '                            Else
    '                                PositionerControl.preventingCableWrap = False
    '                            End If

    '                        Catch ex As Exception
    '                            _log.Error(Me.Main.LoggerComboBox.Text & " -Error in sub 'DirectionFinder()': " & ex.Message)
    '                            MsgBox("Error in sub 'DirectionFinder'. Message: " & ex.Message, MsgBoxStyle.MsgBoxSetForeground)
    '                        End Try

    '                    Loop

    '            End Select

    '        Catch ex As Exception
    '            _log.Error(Me.Main.LoggerComboBox.Text & " -Error in sub 'DirectionFinder()': " & ex.Message)
    '            MsgBox("Error in sub 'DirectionFinder'. Message: " & ex.Message, MsgBoxStyle.MsgBoxSetForeground)
    '        End Try
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'DirectionFinder()'.")
    '    End Sub



    '    Function GetXSeriesTraceBinary4(ByVal azr As Integer, ByVal trace As MxapxaTrace, ByVal traceNum As Integer, ByVal azrType As Enumerations.AnalyzerModels) As Trace

    '        Try

    '            'If SearchAzrSession Is Nothing Then
    '            Dim mgr = New ResourceManager
    '            Dim ipStr As String = Me.MissionObj.GetAnalyzer(cmbBxSearchAzr.SelectedIndex).GetIPaddress
    '            Me._searchAzrSession = CType(mgr.Open(ipStr), MessageBasedSession)
    '            'End If

    '            Dim newTrace As New Trace
    '            ' step 1. Get the traces

    '            With newTrace

    '                _searchAzrSession.FormattedIO.WriteLine("POWer:ATTenuation?")
    '                .Attenuation = _searchAzrSession.FormattedIO.ReadString
    '                _searchAzrSession.FormattedIO.WriteLine("DISPlay:WINDow:TRACe:Y:RLEVel?")
    '                .ReferenceLevel = _searchAzrSession.FormattedIO.ReadString
    '                _searchAzrSession.FormattedIO.WriteLine("Bandwidth:Resolution?")
    '                .ResolutionBandwidth = _searchAzrSession.FormattedIO.ReadString
    '                _searchAzrSession.FormattedIO.WriteLine("Bandwidth:video?")
    '                .VideoBandwidth = _searchAzrSession.FormattedIO.ReadString
    '                _searchAzrSession.FormattedIO.WriteLine("Sweep:Time?")
    '                .SweepTime = _searchAzrSession.FormattedIO.ReadString
    '                _searchAzrSession.FormattedIO.WriteLine("FREQuency:STARt?")
    '                .StartFrequency = _searchAzrSession.FormattedIO.ReadString
    '                txtStartFreq.Text = .StartFrequency.ToString
    '                _searchAzrSession.FormattedIO.WriteLine("FREQuency:STOP?")
    '                .StopFrequency = _searchAzrSession.FormattedIO.ReadString
    '                txtStopFreq.Text = .StopFrequency.ToString
    '                .Errorcode = ""
    '                If chkXLGPS.Checked = True Then
    '                    Try

    '                        Me.LedXLGPS.BlinkMode = LedBlinkMode.BlinkWhenOn
    '                        Select Case cmbBXGPSSource.SelectedIndex
    '                            Case Enumerations.GpsSources.XlGps
    '                                .MeasurementDateTime = AXlGpsController.TimeUtc
    '                                .Latitude = AXlGpsController.Latitude
    '                                .Longitude = AXlGpsController.Longitude
    '                            Case Enumerations.GpsSources.GarminGpSmapSeries
    '                                .MeasurementDateTime = GarminGpsController.TimeUtc
    '                                .Latitude = GarminGpsController.Latitude
    '                                .Longitude = GarminGpsController.Longitude
    '                        End Select
    '                        txtMeasurementTime.Text = .MeasurementDateTime.ToString("dd MMM yyyy HH:mm:ss.f")
    '                        txtLatitude.Text = .Latitude.ToString
    '                        txtLongitude.Text = .Longitude.ToString
    '                    Catch ex As Exception
    '                        .MeasurementDateTime = Date.UtcNow
    '                        txtMeasurementTime.Text = .MeasurementDateTime.ToString("dd MMM yyyy HH:mm:ss.f")
    '                        .Latitude = txtLatitude.Text
    '                        .Longitude = txtLongitude.Text
    '                    End Try

    '                Else
    '                    .MeasurementDateTime = Date.UtcNow
    '                    txtMeasurementTime.Text = .MeasurementDateTime.ToString("dd MMM yyyy HH:mm:ss.f")
    '                    .Latitude = txtLatitude.Text
    '                    .Longitude = txtLongitude.Text
    '                End If


    '                ' .Name = cmbScan.Text & AZR 'CurrentScan.Name
    '                .Name = azr 'CurrentScan.Name
    '                ' .Notes = txtNotes.Text
    '                '  .Location = cmbLocation.Text
    '            End With

    '            'change some default values
    '            _searchAzrSession.SetBufferSize(IOBuffers.ReadWrite, 200000) ' value on bytes
    '            _searchAzrSession.TimeoutMilliseconds = 60000           ' time in milliseconds

    '            'trace formatting stuff
    '            Dim format As String = "" 'AzrSession.Query(":Format:Trace:Data?") 'just for debugging to see what it is
    '            'SearchAzrSession.Write(":Format:Border SWAPped") ' get the bytes LSB first
    '            'SearchAzrSession.Write(":Format:Trace:Data REAL,32") 'get the trace data y axis values as 64 bit real numbers
    '            ''  format = AzrSession.Query(":Format:Trace:Data?") 'just for debugging to ensure that it changed

    '            '' get trace 

    '            'SearchAzrSession.Write(":TRAC:DATA? TRACE" & traceNum) 'request trace values

    '            If azrType <> Enumerations.AnalyzerModels.AgilentFieldFox Then
    '                _searchAzrSession.FormattedIO.WriteLine(":Format:Border SWAPped") ' get the bytes LSB first
    '            End If
    '            _searchAzrSession.FormattedIO.WriteLine(":Format:Data REAL,32") 'get the trace data y axis values as 32 bit real numbers '2/3/14: got rid of the word TRACE to support FieldFox
    '            _searchAzrSession.FormattedIO.WriteLine(":Format:Data?")
    '            format = _searchAzrSession.FormattedIO.ReadString 'just for debugging to ensure that it changed '2/3/14: got rid of the word TRACE to support FieldFox

    '            ' get trace 
    '            If azrType = Enumerations.AnalyzerModels.AgilentFieldFox Then
    '                _searchAzrSession.FormattedIO.WriteLine(":TRACE" & traceNum & ":DATA?")
    '            Else
    '                _searchAzrSession.FormattedIO.WriteLine(":TRAC:DATA? TRACE" & traceNum) 'request trace values
    '            End If
    '            Dim traceByte() As Byte = _searchAzrSession.FormattedIO.ReadBinaryBlockOfByte ' store the values into a byte array
    '            _searchAzrSession.Clear()
    '            ' step 2. Convert the trace data to display it

    '            'get the start and stop frequencies and number of data points
    '            _searchAzrSession.FormattedIO.WriteLine(":Sense:Freq:Start?")
    '            Dim startFreq As String = _searchAzrSession.FormattedIO.ReadString()
    '            _searchAzrSession.FormattedIO.WriteLine(":Sense:Freq:Stop?")
    '            Dim stopFreq As String = _searchAzrSession.FormattedIO.ReadString()
    '            _searchAzrSession.FormattedIO.WriteLine(":Sense:Sweep:Points?")
    '            Dim numDataPoints As String = _searchAzrSession.FormattedIO.ReadString()

    '            'close the session
    '            'AzrSession.Dispose()

    '            'set-up the output arrays
    '            Dim dataPoints As Double = CDbl(numDataPoints)
    '            Dim span As Double = CDbl(startFreq) - CDbl(stopFreq)

    '            Dim fPoint(dataPoints - 1) As Double
    '            Dim ampAarray(dataPoints - 1) As Single

    '            'get some temporary loop variables
    '            Dim ii As Integer = 0
    '            Dim jj As Integer = 0
    '            Dim idx As Integer = 0
    '            Dim fPt As Double = 0

    '            'determine how at which point we need to start at in the byte arrays to leap over some header
    '            'bytes and get into the amplitude bytes

    '            If traceByte.Length < 1000000 Then
    '                jj = 8
    '            End If

    '            If traceByte.Length < 100000 Then
    '                jj = 7
    '            End If

    '            If traceByte.Length < 10000 Then  ' if the byte array length is less than 10,000 bytes
    '                jj = 6
    '            End If

    '            If traceByte.Length < 1000 Then
    '                jj = 5
    '            End If

    '            If traceByte.Length < 100 Then
    '                jj = 4
    '            End If

    '            If traceByte.Length < 10 Then
    '                jj = 3
    '            End If


    '            'loop through and build the arrays
    '            ReDim newTrace.DataSingles(dataPoints - 1)
    '            For ii = 0 To (dataPoints - 1)
    '                fPt = CDbl(startFreq) + (span * idx / (dataPoints)) 'calc freq of this point
    '                fPoint(idx) = fPt / (10 ^ 6) ' convert to MHz
    '                ampAarray(idx) = System.BitConverter.ToSingle(traceByte, jj)
    '                newTrace.DataSingles(idx) = System.Math.Round(ampAarray(idx), 3)
    '                idx += 1  ' increment the freq and amplitude arrays by 1
    '                jj += 4   ' advance the byte arrays by 8 (8 bytes to one double)
    '            Next

    '            Return newTrace

    '        Catch ex As Exception
    '            Dim logMsg As String = " -Error in getting analyzer " & azr & " trace. " & ex.Message
    '            _log.Trace(Me.LoggerComboBox.Text & logMsg)
    '            Return Nothing
    '        Finally

    '        End Try

    '    End Function



    '    Private Sub SpinPositioner()
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'SpinPositioner()'.")
    '        Dim preventingCableWrap = Me.Main.preventingCableWrap
    '        Dim lastDirectionWasClockwise As Boolean = False
    '        Dim justHalted As Boolean = False
    '        Try
    '            If preventingCableWrap Then
    '                Using flirUnit As FlirPositionerControl.FlirUnit = New FlirPositionerControl.FlirUnit("COM" & Trim(Me.Main.ToolStripTextBoxPosSerPortNum.Text), False, True)

    '                    'flirUnit.SetCommandMode(FlirPositionerControl.CommandMode.Slaved)
    '                    'log.Trace(Me.Main.LoggerComboBox.Text & " -Set positioner to Slaved. Answer: ")
    '                    flirUnit.MovePanToPosition(181)
    '                    'flirUnit.Await()

    '                    Do Until closingSpinPositionerthread
    '                        'Dim degPerPos = 1 / flirUnit.DegreeToPosition(1)
    '                        'Dim posPerMin = Me.mySigFinderForm.numUpDwnSpeedRPM.Value * 360 / (degPerPos * 60)
    '                        'flirUnit.SetPanSpeed(posPerMin)
    '                        If stateRun Then
    '                            If justHalted Then
    '                                If lastDirectionWasClockwise Then
    '                                    flirUnit.MovePanToPosition(180)
    '                                    ' flirUnit.Await()
    '                                Else
    '                                    flirUnit.MovePanToPosition(181)
    '                                    'flirUnit.Await()
    '                                End If
    '                                justHalted = False
    '                            End If
    '                            If (Convert.ToInt32(flirUnit.GetPanPosition()) < -178 And Convert.ToInt32(flirUnit.GetPanPosition()) > -181) Then
    '                                flirUnit.MovePanToPosition(180)
    '                                'flirUnit.Await()
    '                                lastDirectionWasClockwise = True
    '                            End If
    '                            If (Convert.ToInt32(flirUnit.GetPanPosition()) > 178 And Convert.ToInt32(flirUnit.GetPanPosition()) < 181) Then
    '                                flirUnit.MovePanToPosition(181)
    '                                'flirUnit.Await()
    '                                lastDirectionWasClockwise = False
    '                            End If
    '                            PositionerAzimuth = flirUnit.GetPanPosition()
    '                            Me.mySigFinderForm.lblAzPosUnits.Text = PositionerAzimuth
    '                            Me.mySigFinderForm.lblAzimuth.Text = PositionerAzimuth
    '                            Me.Main.azimuthValue = PositionerAzimuth
    '                        Else
    '                            flirUnit.Halt()
    '                            justHalted = True
    '                        End If
    '                    Loop
    '                    flirUnit.Halt()
    '                End Using
    '            Else
    '                Using flirUnit As FlirPositionerControl.FlirUnit = New FlirPositionerControl.FlirUnit("COM" & Trim(Me.Main.ToolStripTextBoxPosSerPortNum.Text), True, False)
    '                    flirUnit.EnableContinousRotationPanAxis()
    '                    Do Until closingSpinPositionerthread
    '                        If stateRun Then
    '                            flirUnit.RotatePan(PanRotationDirection.Right)
    '                        Else
    '                            flirUnit.Halt()
    '                        End If
    '                    Loop
    '                    flirUnit.Halt()
    '                End Using
    '            End If
    '        Catch ex As Exception
    '            _log.Error(Me.Main.LoggerComboBox.Text & " -Error in sub 'SpinPositioner()': " & ex.Message)
    '            MsgBox("Error in Spin Positioner thread: " & ex.Message)
    '        End Try
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'SpinPositioner()'.")
    '    End Sub


    '    'this compares a value to a limit line value
    '    ''' <summary>
    '    ''' takes a Trace and generates the Frequency column for the TraceData. This is used to Plot the data in a graph
    '    ''' </summary>
    '    ''' <param name="tracedata"></param>
    '    ''' <returns>A 2 by datapoints array of Doubles</returns>
    '    ''' <remarks></remarks>

    '    Function DataArrayConverterDoubles(ByVal tracedata As Trace) As Double(,)
    '        _log.Debug(Me.LoggerComboBox.Text & " -Starting function 'DataArrayConverterDoubles()'.")
    '        Dim mDataArray As Double(,)
    '        Dim x As Integer = tracedata.DataSingles.Length - 1
    '        ReDim mDataArray(1, x) ' resize array
    '        Dim I As Integer = 0
    '        Dim fpoint As Double
    '        Dim span As Double = CDbl(tracedata.StopFrequency) - CDbl(tracedata.StartFrequency)
    '        Dim dataPoints As Integer = tracedata.DataSingles.Length
    '        For Each ss In tracedata.DataSingles() 'convert to mDataArray 
    '            If dataPoints <> 1 Then
    '                fpoint = CDbl(tracedata.StartFrequency) + span * (I) / (dataPoints - 1) 'calc freq of point
    '            Else
    '                fpoint = CDbl(tracedata.StartFrequency)
    '            End If
    '            mDataArray(0, I) = CDbl(fpoint / 1000000) 'Freq in Mhz
    '            mDataArray(1, I) = ss
    '            If tracedata.DataSingles.Length <> dataPoints Then
    '                Dim tmpStr As String = (" -Datapoint mismatch in function 'DataArrayConverterDoubles()'. Tracedata.Name = " & tracedata.Name)
    '                _log.Error(Me.LoggerComboBox.Text & tmpStr)
    '                Exit For
    '            End If

    '            I += 1
    '        Next
    '        Return mDataArray
    '    End Function



    '    Public Sub SetAzr()
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'setAzr()'.")
    '        Try
    '            With Me.mySigFinderForm
    '                Dim azrSession = Me.AzrSession
    '                azrSession.FormattedIO.WriteLine("Bandwidth:Resolution " & .numUpDwnRBW.Value & .cmbBxRBWfreqUnits.Text)
    '                azrSession.FormattedIO.WriteLine("sweep:points " & .numUpDwnNumPoints.Value)
    '                azrSession.FormattedIO.WriteLine("FREQuency:CENTer " & .numUpDwnCenterFreq.Value & .cmbBxCtrFreqUnits.Text)
    '                azrSession.FormattedIO.WriteLine("FREQuency:SPAN " & .numUpDwnSpan.Value & .cmbBxSpanUnits.Text)
    '                Me.DataController.setMarker(Me.Main.missionObj.getSearchAnalyzerClass.getMarkerTraceAssignment, azrSession, Me.Main.missionObj.getAnalyzer(Me.Main.cmbBxSearchAzr.SelectedIndex).getAnalyzerModel, False, _findFrequency)

    '                If Me.Main.missionObj.getAnalyzer(Me.Main.cmbBxSearchAzr.SelectedIndex).getAnalyzerModel = Enumerations.AnalyzerModels.AgilentFieldFox Then
    '                    If Me.mySigFinderForm.chkBxAutoSwpTime.Checked = True Then
    '                        azrSession.FormattedIO.WriteLine(":SENSe:SWEep:ACQuisition:AUTO ON")
    '                    Else
    '                        azrSession.FormattedIO.WriteLine(":SENSe:SWEep:ACQuisition:AUTO OFF")
    '                        azrSession.FormattedIO.WriteLine(":SENSe:SWEep:ACQ " & .numUpDwnSeepTime.Value)
    '                    End If
    '                Else
    '                    If Me.mySigFinderForm.chkBxAutoSwpTime.Checked = True Then
    '                        azrSession.FormattedIO.WriteLine(":SWEep:TIME:AUTO ON")
    '                    Else
    '                        azrSession.FormattedIO.WriteLine(":SWEep:TIME:AUTO OFF")
    '                        azrSession.FormattedIO.WriteLine(":SENSe:SWEep:TIME " & .numUpDwnSeepTime.Value & "ms")
    '                    End If

    '                End If
    '                'get the value the marker is on
    '                Me.markerArry = Me.DataController.getMarkerValue(Me.markerTrace, Me.AzrSession, Me.Main.missionObj.getAnalyzer(Me.Main.cmbBxSearchAzr.SelectedIndex).getAnalyzerModel, False)
    '                Dim tmpValue As String = Me.markerArry(freqIdx) / 10 ^ 6
    '                'Dim tmpValue As String = azrSession.Query("CALCulate:MARKer:X?") / 10 ^ 6
    '                If CDbl(tmpValue) > 1 Then
    '                    .numUpDwnMarkerFreq.Value = tmpValue
    '                Else
    '                    .numUpDwnMarkerFreq.Value = .numUpDwnCenterFreq.Value
    '                End If
    '            End With
    '        Catch ex As Exception
    '            _log.Error(Me.Main.LoggerComboBox.Text & " -Error in sub 'setAZR()': " & ex.Message)
    '            MsgBox("Unable to update search azr parameters", MsgBoxStyle.MsgBoxSetForeground)
    '        End Try
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'setAZR()'.")
    '    End Sub

    '    Public Sub DrawALargeCircle()
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'DrawALargerCircle()'.")
    '        Dim xData(360) As Double
    '        Dim yData(360) As Double
    '        Dim muliplier As Double = CDbl(Me.mySigFinderForm.cmbMultiplier.Text) * 5 / 8
    '        For ii = 0 To 360
    '            xData(ii) = muliplier * Math.Sin(ii * Math.PI / 180)
    '            yData(ii) = muliplier * Math.Cos(ii * Math.PI / 180)
    '        Next
    '        Me.mySigFinderForm.BigCircle.PlotXY(xData, yData)
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'DrawALargerCircle()'.")
    '    End Sub

    '    Public Sub DrawASmallerCircle()
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'DrawASmallerCircle()'.")
    '        Dim xData(360) As Double
    '        Dim yData(360) As Double
    '        Dim muliplier As Double = CDbl(Me.mySigFinderForm.cmbMultiplier.Text) / 4
    '        For ii = 0 To 360
    '            xData(ii) = muliplier * Math.Sin(ii * Math.PI / 180)
    '            yData(ii) = muliplier * Math.Cos(ii * Math.PI / 180)
    '        Next
    '        Me.mySigFinderForm.SmallCircle.PlotXY(xData, yData)
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'DrewASmallerCircle()'.")
    '    End Sub

    '    Public Sub DrawSomeCrossHairs()
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'drawSomeCrossHairs()'.")
    '        Dim xDataX(2) As Double
    '        Dim yDataX(2) As Double
    '        Dim xDataY(2) As Double
    '        Dim yDataY(2) As Double
    '        Dim muliplier As Double = CDbl(Me.mySigFinderForm.cmbMultiplier.Text) * 5 / 8

    '        xDataX(0) = 0
    '        yDataX(0) = muliplier

    '        xDataX(1) = 0
    '        yDataX(1) = muliplier * -1

    '        xDataY(0) = muliplier
    '        yDataY(0) = 0

    '        xDataY(1) = muliplier * -1
    '        yDataY(1) = 0

    '        Me.mySigFinderForm.Xaxis.PlotXY(xDataX, yDataX)
    '        Me.mySigFinderForm.Yaxis.PlotXY(xDataY, yDataY)

    '        'now put a tick mark on the plot where the front of the van is
    '        Dim vanFront As Double = System.Math.Round(CDbl(Trim(Me.Main.Van_Heading.Text)), 0)
    '        While vanFront >= 360
    '            vanFront -= 360
    '        End While

    '        Dim polarMuliplier As Double = Double.Parse(Me.mySigFinderForm.cmbMultiplier.Text)
    '        Dim blankingLineLength As Double = PolarMuliplier * 9 / 16
    '        Dim tickLength As Double = PolarMuliplier * 12 / 16
    '        Me.mySigFinderForm.TickLine.PlotXYAppend(0, 0)
    '        Me.mySigFinderForm.TickLine.PlotXYAppend(tickLength * System.Math.Sin(vanFront * System.Math.PI / 180), tickLength * System.Math.Cos(vanFront * System.Math.PI / 180))
    '        'Me.mySigFinderForm.BlankingLine.PlotXYAppend(0, 0)
    '        'Me.mySigFinderForm.BlankingLine.PlotXYAppend(blankingLineLength * System.Math.Sin(vanFront * System.Math.PI / 180), blankingLineLength * System.Math.Cos(vanFront * System.Math.PI / 180))
    '        Me.mySigFinderForm.ScatterGraphAzimuth.Update()
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'drawSomeCrossHairs()'.")
    '    End Sub

    '    Sub SaveRadialPng() ' PNG's go thru email WMFs get stripped out
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'SaveRadialPNG()'.")
    '        Dim dir As String = "C:\" & Me.Main.comboBoxMissionName.Text & "\"
    '        Me.mySigFinderForm.SaveFileDialog1.InitialDirectory = dir
    '        Me.mySigFinderForm.SaveFileDialog1.Filter = "Portable Network Graphics File |*.png"
    '        Me.mySigFinderForm.SaveFileDialog1.FileName = _findFrequency & " Radial Plot " & Date.UtcNow.ToString("ddMMMyyyy HHmmss")
    '        Me.mySigFinderForm.SaveFileDialog1.ShowDialog()
    '        Me.mySigFinderForm.ScatterGraphAzimuth.ToImage.Save(Me.mySigFinderForm.SaveFileDialog1.FileName, System.Drawing.Imaging.ImageFormat.Png)
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'SaveRadialPNG()'.")
    '    End Sub
    '    Sub SaveDataPng() ' PNG's go thru email WMFs get stripped 
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Starting sub 'SaveDataPNG()'.")
    '        Me.mySigFinderForm.SaveFileDialog1.Filter = "Portable Network Graphics File |*.png"
    '        Me.mySigFinderForm.SaveFileDialog1.FileName = _findFrequency & " Linear Azimuth Plot " & Date.UtcNow.ToString("ddMMMyyyy HHmmss")
    '        Me.mySigFinderForm.SaveFileDialog1.ShowDialog()
    '        Me.mySigFinderForm.DataScatterGraph.ToImage.Save(Me.mySigFinderForm.SaveFileDialog1.FileName, System.Drawing.Imaging.ImageFormat.Png)
    '        _log.Debug(Me.Main.LoggerComboBox.Text & " -Ending sub 'SaveDataPNG()'.")
    '    End Sub
    '    Public Delegate Sub UpdateLevelTextBoxCallback(ByVal aLevel As String)

    '    Private Sub UpdateLevelTextBox(ByVal aLevel As String)
    '        'If Me.mySigFinderForm.txtBxPowLevel.InvokeRequired Then
    '        '    Me.mySigFinderForm.txtBxPowLevel.Invoke(New updateLevelTextBoxCallback(AddressOf Me.updateLevelTextBox), New Object() {aLevel})
    '        'Else
    '        '    'Me.txtBxPowLevel.Text = aLevel
    '        'End If
    '    End Sub

    '    Public Enum ScanMode
    '        Range
    '        Continuous
    '    End Enum



    '    'Private Sub SignalFinder_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    '    '    'TODO: This line of code loads data into the 'EMDataSet.SignalFinderHotList' table. You can move, or remove it, as needed.
    '    '    Me.SignalFinderHotListTableAdapter.Fill(Me.EMDataSet.SignalFinderHotList)

    '    'End Sub

    '    Enum MxapxaTrace
    '        Trace1 = 1
    '        Trace2 = 2
    '        Trace3 = 3
    '        Trace4 = 4
    '        Trace5 = 5
    '        Trace6 = 6
    '    End Enum

End Class

