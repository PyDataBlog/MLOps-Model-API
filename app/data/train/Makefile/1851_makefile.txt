
ifeq ($(MAKECMDGOALS),bbb)
ARCH := arm
CROSS_PREFIX := arm-anvil-eabi-
ARCH_FLAGS := -mcpu=cortex-a8 -mtune=cortex-a8 -march=armv7-a
BSP := am335x
else
#ifeq ($(MAKECMDGOALS),pc)
ARCH := x86
CROSS_PREFIX := x86_64-anvil-
#endif
endif

SHELL := /bin/bash
BUILDROOT := $(CURDIR)
DEPLOYROOT := $(BUILDROOT)/../sysroot-$(ARCH)
PKG_CONFIG_LIBDIR := $(DEPLOYROOT)/usr/lib/pkgconfig
PATH := $(BUILDROOT)/../cross-tools/bin/:$(PATH)

export SHELL
export BUILDROOT
export DEPLOYROOT
export PKG_CONFIG_LIBDIR
export PATH

CC := $(CROSS_PREFIX)gcc
CPP := $(CROSS_PREFIX)g++
AR := $(CROSS_PREFIX)ar
LD := $(CROSS_PREFIX)gcc
LDPP := $(CROSS_PREFIX)g++
AS := $(CROSS_PREFIX)gcc
STRIP := $(CROSS_PREFIX)strip
TAR := tar

.EXPORT_ALL_VARIABLES:

ALL_C_ONLY_WARNS := -Wmissing-prototypes -Wnested-externs -Wstrict-prototypes -Wc++-compat -Wno-pointer-to-int-cast

ALL_WARNS := -Wall -Wextra -pedantic -Wshadow -Wcast-align -Wwrite-strings \
	-Wmissing-declarations -Wredundant-decls \
	-Winline -Wno-attributes  \
	-Wno-deprecated-declarations -Wno-div-by-zero \
	-Wno-endif-labels -Wfloat-equal -Wformat=2 -Wno-format-extra-args \
	-Winit-self -Winvalid-pch \
	-Wmissing-format-attribute -Wmissing-include-dirs \
	-Wno-multichar \
	-Wredundant-decls \
	-Wshadow -Wno-sign-compare \
	-Wswitch -Wsystem-headers -Wundef \
	-Wno-pragmas -Wwrite-strings -Wdisabled-optimization -Werror \
	-Wno-unused-result
	

GLOBAL_CFLAGS := -std=c99 -fgnu89-inline 
GLOBAL_CXXFLAGS := -std=c++11
GLOBAL_CPPFLAGS := -g -O2
GLOBAL_LDFLAGS := -g
			      
#       -Wno-unused-but-set-parameter -Wno-unused-but-set-variable "
			
SUBDIRS = libc libm libaw libask bsp loader os/init os/kernel os/root-fs \
	servers/ace-svr \
	servers/fs-svr \
	servers/initrd-fs \
	servers/null-svr \
	servers/pipe-svr \
	servers/pty-svr \
	servers/terminal \
	apps/aterm \
	apps/calc \
	apps/desktop \
	apps/filecmd \
	apps/glxgears \
	apps/hello \
	apps/libc_test \
	apps/test \
	apps/procinfo

INITRD = initrd.tar

ARM_FILES = \
    os/kernel/build-arm/anvil-knl

X86_FILES = 			\
    os/kernel/build-x86_64/anvil-knl \
    os/root-fs/build-x86_64/root-fs \
    os/init/build-x86_64/init \
    servers/initrd-fs/build-x86_64/initrd-fs \
    servers/ace-svr/build-x86_64/ace-svr \
    servers/pipe-svr/build-x86_64/pty-svr \
    servers/pipe-svr/build-x86_64/pipe-svr \
    servers/fs-svr/build-x86_64/fs-svr \
    apps/aterm/build-x86_64/aterm \
    apps/glxgears/build-x86_64/glxgears \
    apps/hello/build-x86_64/hello \
    apps/calc/build-x86_64/calc \
    apps/cat/build-x86_64/cat \
    apps/procinfo/build-x86_64/procinfo \
    libc/build-x86_64s/libc.so \
    init.sh \
    dash \
    loader/build-x86_32/anvil-ldr \
    anvil-boot.sh \
    arial.ttf \
    comic.ttf \
    DejaVuSans.ttf \
    DejaVuSansMono.ttf \
    DejaVuSans-Bold.ttf \
    cursors/diag_left.png \
    cursors/diag_right.png \
    cursors/finger.png \
    cursors/horiz.png \
    cursors/move.png \
    cursors/vert.png \
    cursors/norm.png \
    cursor.png
    
INITRD_FILES = \
    $(DEPLOYROOT)/boot/anvil-knl \
    $(DEPLOYROOT)/bin/root-fs \
    $(DEPLOYROOT)/bin/init \
    $(DEPLOYROOT)/bin/fs-svr \
    init.sh

MAKE_CHILD_INFO := SHELL=$(SHELL) _ANVILCFLAGS=$(_ANVILCFLAGS) _ANVILCPPFLAGS=$(_ANVILCPPFLAGS) 

bbb:
	@$(MAKE) -s -C libc $(MAKE_CHILD_INFO) FULLARCH=$(ARCH) install_includes 
	@$(MAKE) -s -C libc $(MAKE_CHILD_INFO) ARCH=$(ARCH) FULLARCH=$(ARCH) all 
	@$(MAKE) -s -C bsp $(MAKE_CHILD_INFO) ARCH=$(ARCH) FULLARCH=$(ARCH) all 
	@$(MAKE) -s -C loader $(MAKE_CHILD_INFO) ARCH=$(ARCH) FULLARCH=$(ARCH) all 
	@$(MAKE) -s -C os/kernel $(MAKE_CHILD_INFO) ARCH=$(ARCH) FULLARCH=$(ARCH) all 
	@echo "                  TARRING initrd.tar"
	@tar -cf $(INITRD) -C $(DEPLOYROOT) .

pc:
	@$(MAKE) -j4 -s -C libc $(MAKE_CHILD_INFO) FULLARCH=$(ARCH)_32 install_includes 
	@$(MAKE) -j4 -s -C libc $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_32 all 
	@$(MAKE) -j4 -s -C libc $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64k all
	@$(MAKE) -j4 -s -C libc $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all
	@$(MAKE) -j4 -s -C libc $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64s all
	@$(MAKE) -j4 -s -C libm $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all
	@$(MAKE) -j4 -s -C loader $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_32 all 
	@$(MAKE) -j4 -s -C os/kernel $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all
	@$(MAKE) -j4 -s -C libaw $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 install_includes
	@$(MAKE) -j4 -s -C libaw $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all
	@$(MAKE) -j4 -s -C libask $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 install_includes
	@$(MAKE) -j4 -s -C libask $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all
	@$(MAKE) -j4 -s -C os/root-fs $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C os/init $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C servers/initrd-fs $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C servers/ace-svr $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C servers/pty-svr $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C servers/pipe-svr $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C servers/fs-svr $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C servers/null-svr $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/aterm $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/desktop $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/glxgears $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/hello $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/calc $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/libc_test $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/filecmd $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/procinfo $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 
	@$(MAKE) -j4 -s -C apps/test $(MAKE_CHILD_INFO) ARCH=x86 FULLARCH=$(ARCH)_64 all 

iso:
	@echo "                  Preparing boot image"
	@rm -rf /tmp/anvil_root
	@mkdir -p /tmp/anvil_root/boot
	@cp -R $(BUILDROOT)/../tools/boot /tmp/anvil_root
	@cp $(DEPLOYROOT)/boot/anvil-ldr /tmp/anvil_root/boot
	@echo "                  TARRING initrd.tar"
	@tar -cf /tmp/anvil_root/boot/$(INITRD) -C $(DEPLOYROOT) .
	@echo "                  MKISOFS anvil-0-0-1.iso"
	@mkisofs -quiet -R -b boot/grub/stage2_eltorito -no-emul-boot \
		-boot-load-size 4 -boot-info-table -o ../anvil-0-0-1.iso /tmp/anvil_root

iso2:
	@echo "                  Preparing Grub2 ISO boot image"
	@rm -rf /tmp/anvil_root
	@mkdir -p /tmp/anvil_root/boot
	@cp -R $(BUILDROOT)/../tools/boot /tmp/anvil_root
	@cp $(DEPLOYROOT)/boot/anvil-ldr /tmp/anvil_root/boot
	@echo "                  TARRING initrd.tar"
	@tar -cf /tmp/anvil_root/boot/$(INITRD) -C $(DEPLOYROOT) .
	@echo "                  GRUB-MKRESCUE anvil-0-0-1.iso"
	@grub-mkrescue -o ../anvil-0-0-1.iso /tmp/anvil_root
		
ext2:
	@echo "                  Preparing bootable EXT2 partition"
	@rm -rf /tmp/anvil_root
	@mkdir -p /tmp/anvil_root
	@cp $(INITRD_FILES) /tmp/anvil_root
	@echo "                  TARRING initrd.tar"
	@tar -cf $(DEPLOYROOT)/boot/$(INITRD) -C /tmp/anvil_root .
	@cp -R $(BUILDROOT)/../tools/boot $(DEPLOYROOT)
	@echo "                  GENERATING ext2 fs"
	@genext2fs -b 64512 -d $(DEPLOYROOT) -N 16128 -s /usr /tmp/root-fs.img
	@echo "                  GENERATING root hdd image"
	@dd if=uuid.img of=/tmp/root-fs.img bs=1 seek=1128 count=16 conv=notrunc
	@cat mbr.img /tmp/root-fs.img > ../root-hdd.img
	@echo "                  CONVERTING to vmdk"
	@qemu-img convert -p -O vmdk ../root-hdd.img ../root-hdd.vmdk
	
usr:
	@echo "                  Preparing usr EXT2 partition"
	@genext2fs -b 1047552 -d $(DEPLOYROOT)/usr -N 65536 /tmp/usr-fs.img
	@echo "                  GENERATING usr hdd image"
	@cat mbr-usr.img /tmp/usr-fs.img > ../usr-hdd.img
	@echo "                  CONVERTING to vmdk"
	@qemu-img convert -p -O vmdk ../usr-hdd.img ../usr-hdd.vmdk

.PHONY: $(SUBDIRS)

$(SUBDIRS):
	@$(MAKE) -C $@ $(MAKE_CHILD_INFO) ARCH=x86_64 $(MAKECMDGOALS) 

.PHONY clean: $(SUBDIRS)
