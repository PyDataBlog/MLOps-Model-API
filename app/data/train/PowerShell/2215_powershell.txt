workflow Backup-BlobStorageAccount {

    param (

        [parameter(Mandatory=$true)]
        [String]
        $AzureConnectionName,

        [parameter(Mandatory=$true)]
        [String]
        $StorageAccountNameToTakeBackupFrom,

        [parameter(Mandatory=$true)]
        [String]
        $StorageAccountNameToTakeBackupTo
    )

    Connect-Azure -AzureConnectionName $AzureConnectionName
    Select-AzureSubscription -SubscriptionName $AzureConnectionName -Default

    InlineScript {
        
        function Check-BlobContainerName 
        {
            param(

                [parameter(Mandatory=$true)]
                [String]
                $blobContainerName
            )

            return ($blobContainerName -match '^[a-z0-9](([a-z0-9\-[^\-])){1,61}[a-z0-9]$')
        }

        ## NOTE: Azure Storage Account names must be between 3 and 24 characters in length and use numbers and 
        ##       lower-case letters only. Refer to: http://msdn.microsoft.com/en-us/library/azure/hh264518.aspx
        ##
        ##       Azure container names must be: 
        ##       - 3 to 63 Characters
        ##       - Starts With Letter or Number
        ##       - Letters, Numbers, and Dash (-)
        ##       - Every Dash (-) Must Be Immediately Preceded and Followed by a Letter or Number
        ##       Refer to: http://peterkellner.net/2010/10/15/is-my-azure-blog-storage-container-name-valid/
        ##
        ##       So, having the '-' as the seperator is safe here. First part is the time stamp and the second part 
        ##       is the storage account name. This can be easily parsed as neither the first nor the second part will
        ##       have the '-' in it.
        $seperatorChar = "-"
        $containerPrefixLabel = $(([DateTime]::UtcNow).ToString("yyyyMMddHHmmss"))

        ## Get storage account to take the blobs from and its context
        $storageAccountToTakeBackupFrom = Get-AzureStorageAccount -StorageAccountName $Using:StorageAccountNameToTakeBackupFrom
        $storageAccountToTakeBackupFromCreds = $storageAccountToTakeBackupFrom | Get-AzureStorageKey
        $storageAccountToTakeBackupFromCtx = New-AzureStorageContext `
            -StorageAccountName $Using:StorageAccountNameToTakeBackupFrom `
            -StorageAccountKey $storageAccountToTakeBackupFromCreds.Primary
        
        ## Get storage account to take the blobs to
        $storageAccountToTakeBackupTo = Get-AzureStorageAccount -StorageAccountName $Using:StorageAccountNameToTakeBackupTo
        $storageAccountToTakeBackupToCreds = $storageAccountToTakeBackupTo | Get-AzureStorageKey
        $storageAccountToTakeBackupToCtx = New-AzureStorageContext `
            -StorageAccountName $Using:StorageAccountNameToTakeBackupTo `
            -StorageAccountKey $storageAccountToTakeBackupToCreds.Primary

        $containerTotal = 0
        $containerToken = $null
        do 
        {
            $containers = $storageAccountToTakeBackupFromCtx | Get-AzureStorageContainer -MaxCount 10 -ContinuationToken $token
            $containerTotal += $containers.Length
            $containerToken = ($containers | select -Last 1).ContinuationToken

            Write-Output "==== Retrieved next $($containers.Length) containers from storage account '$($Using:StorageAccountNameToTakeBackupFrom)' ===="

            $containers | foreach {

                Write-Output "=========== Container: $($_.Name) ==========="

                ## Create destination container and check the validity
                $destinationContainerName = "$($containerPrefixLabel)$($seperatorChar)$($Using:StorageAccountNameToTakeBackupFrom)$($seperatorChar)$($_.Name)"
                if((Check-BlobContainerName -blobContainerName $destinationContainerName) -eq $false) 
                {
                    ## TODO: Very rare case but still possible. Write-Output for now. Figure out later what to do better.
                    Write-Output "Container name '$($destinationContainerName)' is invalid."
                }

                Write-Output "Creating container '$($_.Name)' on $StorageAccountNameToTakeBackupTo as $destinationContainerName"
                New-AzureStorageContainer -Name $destinationContainerName -Context $storageAccountToTakeBackupToCtx -Permission Off
                Write-Output "$([Environment]::NewLine)"

                ## Start the backup
                Write-Output "Backup started for container '$($_.Name)' on storage account '$($_.StorageAccountName)'"

                ## TODO: This loop can take long time to process if the container has many blob items.
                ##       This should be run in parallel with parallel foreach option.
                $total = 0
                $token = $null
                do
                {
                    $blobs = $_ | Get-AzureStorageBlob -Context $storageAccountToTakeBackupFromCtx -MaxCount 10 -ContinuationToken $token
                    $total += $blobs.Length
                    $token = ($blobs | select -Last 1).ContinuationToken
                
                    Write-Output "==== Retrieved next $($blobs.Length) blobs from container '$($_.Name)' on storage account '$($_.StorageAccountName)' ===="

                    ## process the first set of blobs here...
                    foreach($blob in $blobs)
                    {
                        Write-Output "Found blob '$($blob.Name)' inside container '$($_.Name)' on storage account $($_.StorageAccountName). Backup started for this blob."
                        Start-AzureStorageBlobCopy -Context $storageAccountToTakeBackupFromCtx `
                            -SrcBlob $blob.Name `
                            -SrcContainer $_.Name `
                            -DestContext $storageAccountToTakeBackupToCtx `
                            -DestBlob $blob.Name `
                            -DestContainer $destinationContainerName
                    }

                    Write-Output "$([Environment]::NewLine)"
                }
                while($token -ne $null)

                Write-Output "Done processing container '$($_.Name)'"
                Write-Output "$([Environment]::NewLine)"
                Write-Output "$([Environment]::NewLine)"
            }
        }
        while($containerToken -ne $null)
    }
}
