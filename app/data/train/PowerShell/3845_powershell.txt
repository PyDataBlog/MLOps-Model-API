Function New-NgCrudServiceExplicitTsToString([string]$entity, [string]$baseUrl, [bool]$create, [bool]$read, [bool]$update, [bool]$delete, [bool]$list, [bool]$filter) {
	$entityCapital = (ConvertTo-CapitalCamelCase $entity)
	$entityLowerCamel = (ConvertTo-LowerCamelCase $entity)
	$entityLowerKebab = (ConvertTo-KebabCase $entity)
	$importFilter = ""
	# It's hard to get ${id} literally in powershell so use a token
	$idToken = '${id}'

	[string]$createCode = ""
	if($create -eq $true) {
		$createCode = @"
	create(myObject: $($entityCapital)): Promise<$($entityCapital)> {
		return this.http.post(```${this.baseUrl}``, JSON.stringify(myObject), this.options)
			.toPromise()
			.then(response => response.json() as $($entityCapital))
			.catch(this.handleError);
	}

"@
	}

	[string]$readCode = ""
	if($read -eq $true) {
		$readCode = @"
	get(id: number): Promise<$($entityCapital)> {
		return this.http.get(```${this.baseUrl}/$($idToken)``)
			.toPromise()
			.then(response => response.json() as $($entityCapital))
			.catch(this.handleError);
	}

"@
	}

	[string]$updateCode = ""
	if($update -eq $true) {
		$updateCode = @"
	update(myObject: $($entityCapital)): Promise<$($entityCapital)> {
		return this.http
			.put(```${this.baseUrl}``, JSON.stringify(myObject), this.options)
			.toPromise()
			.then(response => response.json() as $($entityCapital))
			.catch(this.handleError);
	}

"@
	}

	[string]$deleteCode = ""
	if($delete -eq $true) {
		$deleteCode = @"
	delete(id: number): Promise<void> {
		return this.http.delete(```${this.baseUrl}/$($idToken)``, this.options)
			.toPromise()
			.then(() => null)
			.catch(this.handleError);
	}

"@
	}

	[string]$listCode = ""
	if($list -eq $true) {
	$listCode = @"
	list(): Promise<$($entityCapital)[]> {
		return this.http.get(```${this.baseUrl}``)
			.toPromise()
			.then(response => response.json() as $($entityCapital)[])
			.catch(this.handleError);
	}

"@
	}

	[string]$filterCode = ""
	if($filter -eq $true) {
		$filterCode = @"
	filterSort(filterSortModel: FilterSortModel): Promise<FilterSortResponse> {
		return this.http.post(```${this.baseUrl}/FilterSort``, JSON.stringify(filterSortModel), this.options)
			.toPromise()
			.then(response => response.json() as FilterSortResponse)
			.catch(this.handleError);
	}

"@
	}

	[string]$importAgGrid = ""
	if($webCsprojInfo.useAgGrid -eq $true) {
		$importAgGrid = @"
import { FilterSortModel } from '../ag-grid/filter-sort-model';
import { FilterSortResponse } from '../ag-grid/filter-sort-response';
"@
	}

	return @"
import { Injectable }    from '@angular/core';
import { Http, Headers, RequestOptions } from '@angular/http';
import { $entityCapital } from '../model/$entityLowerKebab';
$($importAgGrid)

@Injectable()
export class $($entityCapital)Service  {

	private headers = new Headers({ 'Content-Type': 'application/json' });
	private options = new RequestOptions({headers: this.headers});
	private baseUrl = "$($baseUrl)";

	constructor(
		private http: Http
		) {}

$createCode
$readCode
$updateCode
$deleteCode
$listCode
$filterCode

    public handleError(error: any): Promise<any> {
        console.error('An error occurred', error); // for demo purposes only
        return Promise.reject(error.message || error);
    }
}

"@;
}