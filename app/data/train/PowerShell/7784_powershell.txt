#$scriptPath = $MyInvocation.MyCommand.Definition
#$module = $scriptPath.Replace(".Tests.ps1", "")

Import-Module .\PowerPack -Force

# To run from the command line, first install Pester, see instructions at
# http://www.powershellmagazine.com/2014/03/12/get-started-with-pester-powershell-unit-testing-framework/
#
# Then
#   Import-Module Pester
#   cd this folder
#
#   Invoke-Pester

$PPDIR = "C:\Users\pdaniels\repos\PowerPack"
$PPDIR = "C:\Users\Phil\repos\PowerPack"


Describe "BuildProject" {
    It "Can successfully run MSBuild, even though there will be no output on the test console" {
        $projName = "DemoAssembly2"
        $filename = LocateProject "$projName" "$PPDIR"
        $po = GetProject $filename.FullName
        BuildProject $po "normal" "Release"
    }
}

Describe "CommandExists" {
    It "Returns true for exe programs that exist" {
        CommandExists "notepad.exe" | Should Be $true
    }
    It "Returns true for PowerShell built-ins" {
        CommandExists Get-Help | Should Be $true
    }
    It "Returns false for exe programs that DO NOT exist" {
        CommandExists "notepadXXXXX.exe" | Should Be $false
    }
}

Describe "CleanProject" {
    It "Can successfully run MSBuild, even though there will be no output on the test console" {
        $projName = "DemoAssembly2"
        $filename = LocateProject "$projName" "$PPDIR"
        $po = GetProject $filename.FullName
        CleanProject $po "normal" "Release"
    }
}

Describe "DeepCleanPackages" {
    It "Can find and delete the required directories" {
        DeepCleanPackages "Newtonsoft*.*" -DoIt
    }
}

Describe "DeleteDirectory" {
    It "Does not error when passed a non-existent directory" {
        DeleteDirectory "TestDrive:\foo"
        DeleteDirectory "TestDrive:\foo"
    }
    It "Can recursively delete a directory" {
        New-Item -ItemType Directory -Path "TestDrive:dir1\dir2\dir3"
        New-Item -ItemType File -Path "TestDrive:dir1\dir2\dir3\foo.txt"
        DeleteDirectory "TestDrive:dir1"
        Test-Path "TestDrive:dir1" | Should Be $false
    }
}

<#
Describe "DownloadNuGet" {
    It "Can download NuGet" {
        $p = "TestDrive:\nuget.exe"
        DownloadNuGet $p
        $p | Should Exist
    }
    It "Can download NuGet when the file already exists" {
        $p = "TestDrive:\nuget.exe"
        DownloadNuGet $p
        $p | Should Exist
        DownloadNuGet $p
        $p | Should Exist
    }
}
#>

Describe "DownloadNuGetIfNeeded" {
    It "Only downloads if necessary" {
        # This will be a no-op on my machine.
        DownloadNuGetIfNeeded ".\NuGet.exe"
    }
}

Describe "LocateFile" {
    It "Does not error if file is not found" {
        $f = LocateFile "foo.txt" "."
        $f | Should Be $null
    }
    It "Can find a file down the directory structure" {
        New-Item -ItemType Directory -Path "TestDrive:dir1\dir2\dir3"
        New-Item -ItemType File -Path "TestDrive:dir1\dir2\dir3\foo.txt"
        $f = LocateFile "foo.txt" "TestDrive:dir1"
        $f.Name | Should Be "foo.txt"
    }
    It "Can find a file in its script folder when no start directory is specified" {
        $f = LocateFile "PackLocal.ps1"
        $f.Name | Should Be "PackLocal.ps1"
    }
    It "Can find a file in its parent folder when no start directory is specified" {
        $f = LocateFile "DemoApp.csproj"
        $f.Name | Should Be "DemoApp.csproj"
    }
}

Describe "LocateMSBuild" {
    It "Returns MSBuild.exe on my machine" {
        $filename = LocateMSBuild
        $filename | Should Match ".*MSBuild\.exe"
    }
}

Describe "LocateNuGet" {
    It "Returns NuGet.exe on my machine" {
        $filename = LocateNuGet
        $filename | Should Match ".*NuGet\.exe"
    }
}

Describe "LocateProject" {
    It "Returns null for a project that does not exist" {
        $po = LocateProject "Blahhhhh" ".."
        $po | Should Be $null
    }
    It "Finds a project by name given an explicit directory" {
        $projName = "DemoAssembly2"
        $filename = LocateProject "$projName" "$PPDIR"
        $filename | Should Match ".*$projName.csproj"
    }
    It "Finds a project by name using the default directory search" {
        $projName = "DemoAssembly2"
        $filename = LocateProject "$projName"
        $filename | Should Match ".*$projName.csproj"
    }
}

Describe "GetMSBuildArguments" {
    It "Returns what it should" {
        $projName = "DemoAssembly2"
        $filename = LocateProject "$projName" "$PPDIR"
        $po = GetProject $filename.FullName
        $args = (GetMSBuildArguments $po $true $true "chatty" "Release" "AnyThing")
        $expected = @($po.FileName, "/target:Clean;Build", "/nologo",
            "/verbosity:chatty", "/p:Configuration=Release", "/p:PlatformTarget=AnyThing",
            "/p:RunCodeAnalysis=False")
        $args | Should BeExactly $expected
    }
    It "Applies default arguments properly" {
        $projName = "DemoAssembly2"
        $filename = LocateProject "$projName" "$PPDIR"
        $po = GetProject $filename.FullName
        $args = (GetMSBuildArguments $po)
        $expected = @($po.FileName, "/target:Clean;Build", "/nologo",
            "/verbosity:minimal", "/p:Configuration=Release", "/p:PlatformTarget=AnyCPU",
            "/p:RunCodeAnalysis=False")
        $args | Should BeExactly $expected
    }

}

Describe "GetProject" {
    It "Throws an exception if the project file does not exist" {
        
    }

    It "Loads a project file correctly" {
        $projName = "DemoAssembly2"
        $projFileName = LocateProject "$projName" "$PPDIR"

        $po = GetProject $projFileName.FullName
        $po | Should Not Be $null
        $po.Name | Should Be "$projName"
        $po.FileName | Should Match ".*$projName.csproj"
        $po.ProjectDirectory | Should Be (Split-Path -Parent $po.FileName)
        $po.NuSpecFileName | Should Be (Join-Path -Path $po.ProjectDirectory -ChildPath "Package.nuspec")
        $po.AssemblyInfoFileName | Should Be (Join-Path -Path $po.ProjectDirectory -ChildPath "Properties\AssemblyInfo.cs")
        $po.PackagesFileName | Should Be (Join-Path -Path $po.ProjectDirectory -ChildPath "packages.config")
        $po.BinDirectory | Should Be (Join-Path -Path $po.ProjectDirectory -ChildPath "bin")
        $po.ObjDirectory | Should Be (Join-Path -Path $po.ProjectDirectory -ChildPath "obj")
        ##$po.ProjectXml.OuterXml | Should Be (Get-Content $po.FileName)
        $po.ProjectXml | Should Not Be $null
        $po.AssemblyName | Should Be "$projName"
        $po.OutputType | Should Be "Library"
        $po.OutputExtension | Should Be "dll"
        $po.Packages[0].Id | Should Be "NewtonSoft.Json"
        $po.Configurations.Count | Should Be 2  # Debug, Release
        $cfg = $po.Configurations["Debug"]
        $cfg | Should Not Be $null
        $cfg.ConfigurationAndPlatform | Should Be "Debug|AnyCPU"
        $cfg.OutputPath | Should Be "bin\Debug"
        $cfg.Configuration | Should Be "Debug"
        $cfg.Platform | Should Be "AnyCPU"
        $cfg = $po.Configurations["Release"]
        $cfg | Should Not Be $null
        $cfg.ConfigurationAndPlatform | Should Be "Release|AnyCPU"
        $cfg.OutputPath | Should Be "bin\Release"
        $cfg.Configuration | Should Be "Release"
        $cfg.Platform | Should Be "AnyCPU"
    }
}

Describe "NuGetPack" {
    It "Can get the version number from a built assembly" {
        $projName = "DemoAssembly2"
        $projFileName = LocateProject "$projName" "$PPDIR"
        $po = GetProject $projFileName.FullName
        BuildProject $po "normal" "Release"
        NuGetPack $po "built" -Properties @("Configuration=Release")
    }
    It "Can get the version number from the source code" {
        $projName = "DemoAssembly2"
        $projFileName = LocateProject "$projName" "$PPDIR"
        $po = GetProject $projFileName.FullName
        BuildProject $po "normal" "Release"
        NuGetPack $po "info" -Properties @("Configuration=Release", "Foo=Btr")
    }
}

Describe "NuGetPush" {
    It "Can Push to my local feed" {
        $outDir = "C:\temp"
        $projName = "DemoAssembly2"
        $projFileName = LocateProject "$projName" "$PPDIR"
        $po = GetProject $projFileName.FullName
        BuildProject $po "normal" "Release"
        NuGetPack $po "built" -Verbosity "Normal" -OutputDirectory $outDir -Properties @("Configuration=Release")
        $packages = Get-ChildItem -Path $outDir -Filter "*.nupkg"
        foreach ($package in $packages)
        {
            NuGetPush $package.FullName "LocalNuGetFeed"
        }
    }
    <#
    It "Can push to staging on the internet" {
        $outDir = "C:\temp"
        $projName = "DemoAssembly2"
        $projFileName = LocateProject "$projName" "$PPDIR"
        $po = GetProject $projFileName.FullName
        BuildProject $po "normal" "Release"
        NuGetPack $po "built" -Verbosity "Normal" -OutputDirectory $outDir -Properties @("Configuration=Release")
        $packages = Get-ChildItem -Path $outDir -Filter "*.nupkg"
        foreach ($package in $packages)
        {
            #NuGetPush $package.FullName "https://staging.nuget.org/api/v2"
            NuGetPush $package.FullName "Staging"
        }
    }#>
}

Describe "NuGetRestore" {
    It "Can restore my test solution" {
        $solutionFile = (Join-Path -Path $PPDIR -ChildPath "DemoApp.sln")
        NuGetRestore $solutionFile -Verbosity "detailed"
    }
}
