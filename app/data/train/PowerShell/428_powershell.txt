<#
.SYNOPSIS
This PowerShell script module file contains common, reusable functions that
are intended to be included in all PowerShell scripts that reside within the
automation framework.

.DESCRIPTION
Note: This script module is NOT intended to be executed independent of another
PowerShell script referencing and using it.
#>

function Format-MaskedOutput {
	<#
    .SYNOPSIS
	Formats output that is masked using a masking character. 

    .DESCRIPTION
    This function returns the specified input text string
    containing instances of the specified masking text
    string as a formatted, masked text string replaced with
    the specified masking character.

    .EXAMPLE
    All parameters are required.
 
    Format-MaskedOutput -text "Hello World!" `
                        -textToMask "World" `
                        -maskChar "*"
    #>

	# function parameters
    [CmdletBinding(SupportsShouldProcess = $true, DefaultParameterSetName = 'Format')]
	Param(
		[Parameter(
			Mandatory = $true,
			ParameterSetName = '',
			HelpMessage = "The text string containing characters to mask. Example: 'Hello World!'",
			ValueFromPipeline = $false)]
			[string]$text = $(throw "-text is required"),
        [Parameter(
			Mandatory = $true,
			ParameterSetName = '',
			HelpMessage = "The text string to mask. Example: 'World'",
			ValueFromPipeline = $false)]
			[string]$textToMask = $(throw "-textToMask is required"),
		[Parameter(
			Mandatory = $false,
			ParameterSetName = '',
			HelpMessage = "The masking character. Example: '*'",
			ValueFromPipeline = $false)]
			[string]$maskChar = $(throw "-maskChar is required")
    )

	# format mask output
	if (![string]::IsNullOrWhiteSpace($textToMask)) {
		$maskedOutput = ""
		$maskedOutput = $maskedOutput.PadLeft($textToMask.Length, $maskChar)

		$text = $text.Replace($textToMask, $maskedOutput)
	}

    return $text
}