function Invoke-LogFile {
    [CmdletBinding()]
    Param(
        [Parameter()]
        [string]$Directorypath = 'P:\',

        [Parameter()]
        [string]$LogPath = 'C:\Logs\',
        
        [Parameter()]
        [int]$OlderThan = 7,
        
        [Parameter()]
        [String]$LogFile = "ScriptLog-$(Get-Date -Format 'dd-MM-yyyy-HH-mm-ss').txt"
    )
    
    Begin {
        Write-Verbose "Starting $($MyInvocation.MyCommand)"
        [datetime]$DaysOlder = (Get-Date).AddDays(-$OlderThan)
        $StartDate = Get-Date
    }
    Process {
        try {
            Write-Verbose -Message "Querying files on $Directorypath which are older than $(($StartDate - $DaysOlder).Days) days."
            $FilesToDelete = Get-ChildItem -Path $Directorypath -Recurse -Force | Where-Object {-not $_.PSIsContainer -and $_.LastWriteTime -le $DaysOlder}
            foreach ($item in $FilesToDelete) {
                $Now = Get-Date
                $item | Remove-Item -Force
                Write-Verbose -Message "$item was last modified on $($item.LastWriteTime); this file was deleted as it's $(($StartDate - ($item.LastWriteTime)).Days) days older!"
                if ($StartDate.Date -ne $Now.Date) { $LogFile = "ScriptLog-$(Get-Date -Format 'dd-MM-yyyy-HH-mm-s').txt" }                    
                Write-Output "$(Get-Date -Format 'dd/MM/yyyy-HH:mm:ss')> $item was last modified on $($item.LastWriteTime); this file was deleted as it's $(($StartDate - ($item.LastWriteTime)).Days) days older!" | 
                    Out-File -FilePath (Join-Path -Path $LogPath -ChildPath $LogFile) -Append
            }
            $FolderToDelete = Get-ChildItem -Path $Directorypath -Recurse -Force | Where-Object {$_.PSIsContainer}
            foreach ($Folder in $FolderToDelete) {
                $FolderPath = $Folder.FullName
                if (Get-ChildItem -Path $FolderPath -Force | Measure-Object | Where-Object {$_.Count -eq 0}) {
                    Remove-Item -Path $FolderPath -Force
                }
            }
        }
        catch {
            Write-Warning -Message "Error on $($item): $_.Exception.Message"
            Write-Output "$(Get-Date -Format 'dd/MM/yyyy-HH:mm:ss')> Error on $($item): $_.Exception.Message" | Out-File -FilePath (Join-Path -Path $LogPath -ChildPath "Error-$LogFile") -Append
        }
        
    }
    End {
        Write-Host "`n>>> Script completed! <<<`n"  -ForegroundColor Cyan
    }
}
