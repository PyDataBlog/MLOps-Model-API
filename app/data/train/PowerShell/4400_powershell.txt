#
# Module 'Dynamite.PowerShell.Toolkit'
# Generated by: GSoft, Team Dynamite.
# Generated on: 10/24/2013
# > GSoft & Dynamite : http://www.gsoft.com
# > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
# > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
#

function New-DSPSiteCollectionRecusiveXml()
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[System.Xml.XmlElement]$Site,
		
		[Parameter(Mandatory=$true, Position=1)]
		[string]$WebApplicationUrl
	)	

	[string]$ContentDatabaseName = $Site.ContentDatabase
	[string]$SiteRelativePath = $Site.RelativePath
	[string]$Name = $Site.Name
	[string]$OwnerAlias = $Site.OwnerAlias
	[string]$Language = $Site.Language
	[string]$Template = $Site.Template
	$SiteRelativeUrl = "/$SiteRelativePath"
	$SiteAbsoluteUrl = "$WebApplicationUrl$SiteRelativeUrl"
 
 	# Create the Content Database if they do not exist
	New-DSPContentDatabase -ContentDatabaseName $ContentDatabaseName -WebApplicationUrl $WebApplicationUrl -Verbose:$Verbose
	
	if($SiteRelativePath -and $SiteRelativePath -ne "/")
	{
		# Create the Managed Path if they do not exist
		New-DSPManagedPath -SiteRelativePath $SiteRelativePath -WebApplicationUrl $WebApplicationUrl -Verbose:$Verbose
	}

	$spSite = Get-SPSite -Identity $SiteAbsoluteUrl -ErrorAction SilentlyContinue
	if ($spSite -eq $null)
	{
		Write-Verbose "Creating site collection $SiteAbsoluteUrl"
		$startTime = Get-Date
		$spSite = New-SPSite -URL $SiteAbsoluteUrl -OwnerAlias $OwnerAlias -SecondaryOwnerAlias $env:USERDOMAIN\$env:USERNAME -Name $Name -Language $Language -Template $Template -ContentDatabase $ContentDatabaseName
		$elapsedTime = ($(get-date) - $StartTime).TotalSeconds
		Write-Verbose "Took $elapsedTime sec."
		Write-Verbose "Site $Name Created Successfully!"
	}
	else
	{
		Write-Warning "Another site already exists at $SiteAbsoluteUrl"
	}
	
	$Group = $Site.Groups
	if ($Group -ne $null)
	{
		Add-DSPGroupByXml -Web $spSite.Url -Group $Group
	}
	
	# Create Sub Webs
	if ($Site.Webs -ne $null)
	{
		New-DSPWebXml -Webs $Site.Webs -ParentUrl $spSite.Url -UseParentTopNav
	}
}

<#
	.SYNOPSIS
		Method to Create multiple Site Collections and Sites structure

	.DESCRIPTION
		Method to Create multiple Site Collections and Sites structure

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
    
	.PARAMETER  XmlPath
		Path to the Xml file describing the structure

  .EXAMPLE
		PS C:\> New-DSPStructure "c:\structure.xml"

	.INPUTS
		System.String
        
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
  
  .NOTES
  Here is the Structure XML schema.
  
<WebApplication Url="http://myWebApp">
  <Site Name="Site Name" RelativePath="mySiteUrl" OwnerAlias="ORG\admin" Language="1033" Template="STS#1" ContentDatabase="CUSTOM_CONTENT_NAME">
    <Groups>
      <Group Name="Site_Admin" OwnerName="ORG\admin" Description="Admin Group" IsAssociatedOwnerGroup="true">
        <PermissionLevels>
          <PermissionLevel Name="Full Control"/>
          <PermissionLevel Name="Contribute"/>
          <PermissionLevel Name="Read"/>
        </PermissionLevels>
      </Group>
    </Groups>
    <Webs>
      <Web Name="SubSite Name" Path="mySubSiteUrl" Template="STS#0">
        <Groups>
          <Group Name="SubSite_Admin" OwnerName="ORG\admin" Description ="Admin Group for SubSite">
            <PermissionLevels>
              <PermissionLevel Name="Full Control"/>
              <PermissionLevel Name="Contribute"/>
              <PermissionLevel Name="Read"/>
            </PermissionLevels>
          </Group>
        </Groups>
      </Web>
    </Webs>
  </Site>
</WebApplication>
#>
function New-DSPStructure()
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string]$XmlPath
	)
	
	# Get the Xml content and start looping throught Site Collections and generate the structure
	$Config = [xml](Get-Content $XmlPath)
	$Config.WebApplication.Site | ForEach-Object {New-DSPSiteCollectionRecusiveXml -Site $_ -WebApplicationUrl $_.ParentNode.Url}
}

<#
	.SYNOPSIS
		Method to Delete multiple Site Collections and Sites structure

	.DESCRIPTION
		Method to Delete multiple Site Collections and Sites structure

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
    
	.PARAMETER  XmlPath
		Path to the Xml file describing the structure

  .EXAMPLE
		PS C:\> New-DSPStructure "c:\structure.xml"

	.INPUTS
		System.String
        
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
    
  .NOTES
  Here is the Structure XML schema.
  
<WebApplication Url="http://myWebApp">
  <Site Name="Site Name" RelativePath="mySiteUrl" OwnerAlias="ORG\admin" Language="1033" Template="STS#1" ContentDatabase="CUSTOM_CONTENT_NAME">
    <Groups>
      <Group Name="Site_Admin" OwnerName="ORG\admin" Description="Admin Group" IsAssociatedOwnerGroup="true">
        <PermissionLevels>
          <PermissionLevel Name="Full Control"/>
          <PermissionLevel Name="Contribute"/>
          <PermissionLevel Name="Read"/>
        </PermissionLevels>
      </Group>
    </Groups>
    <Webs>
      <Web Name="SubSite Name" Path="mySubSiteUrl" Template="STS#0">
        <Groups>
          <Group Name="SubSite_Admin" OwnerName="ORG\admin" Description ="Admin Group for SubSite">
            <PermissionLevels>
              <PermissionLevel Name="Full Control"/>
              <PermissionLevel Name="Contribute"/>
              <PermissionLevel Name="Read"/>
            </PermissionLevels>
          </Group>
        </Groups>
      </Web>
    </Webs>
  </Site>
</WebApplication>
#>
function Remove-DSPStructure()
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string]$XmlPath
	)
	
	$Config = [xml](Get-Content $XmlPath)
	foreach ($site in $Config.WebApplication.Site)
	{
		$SiteAbsoluteUrl = [string]::Concat($site.ParentNode.Url, "/", $site.RelativePath)
		$site = Get-SPSite -Identity $SiteAbsoluteUrl -ErrorAction SilentlyContinue
		
		if($site -ne $null)
		{	
			Write-Verbose "Remove site collection $SiteAbsoluteUrl"
			Remove-SPSite -Identity $SiteAbsoluteUrl
		}
		else
		{
			Write-Warning "No site collection $SiteAbsoluteUrl found"
		}		
	}
}

function Remove-DSPStructureDatabase()
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string]$XmlPath
	)
	
	$Config = [xml](Get-Content $XmlPath)
	foreach ($site in $Config.WebApplication.Site)
	{
		Remove-SPContentDatabase -Identity $Site.ContentDatabase
	}
}


