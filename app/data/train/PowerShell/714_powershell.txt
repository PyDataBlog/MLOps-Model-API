##################################################
#
# Functions supporting DCDN Tool
# 
# Author:		Sgt Jochmans B. - 4GpCIS
# 		  		Sgt Bouchier G. - 10GpCIS
#
# Version:		DCDN Tool 1.5
# 
##################################################

##################################################
#region      Function file header

if (Get-Module LoggingFramework) {
	if (!(IsInitialized-LF)) {
		write-host "You should first initialize the LoggingFramework module with command 'Initialize-LF'" -Foreground Red
		exit 2
	}
} else {
	write-host "You should first import LoggingFramework module with command 'Import-Module LoggingFramework.psm1'" -Foreground Red
	exit 1
}

$script:ScriptName = [System.IO.Path]::GetFileName($MyInvocation.MyCommand.Definition)
Log-Debug "Begin loading functions from '$($script:ScriptName)'"

#endregion   Function file header
##################################################

##################################################
#region      Functions

Function Give-Rights {
<#
	.SYNOPSIS
		Give Rights
	.DESCRIPTION
		This function will give all rights to the folder tree on your common
#>
	Param()
	
	Log-Debug "Started to grant rights on folders."

    $rboxActions.Text = "Give Rights button clicked."
        
    $wshell = New-Object -ComObject Wscript.Shell
    $wshell.Popup("The tool will start to assign all rights to the correct groups.`nIN CASE OF USING SYNOLOGY: Make sure that the groups are known on the NAS before proceding!`n`nThis process can take up to 5-10 minutes and the tool might show as 'NOT RESPONDING'",0,"DCDN Tool",0x0)
		
    $MainForm.Cursor = 'WaitCursor'

	#root acl
    $rboxActions.Text += "`n`nCreating the variables..."
	$resMgr = "BAF\" + "$Script:unitOU" + "-SG-CISC"#+ "-SG-ResourceMgr" #ResourceMgr is not working when we work as cisc for another CIS group
	$domAdm = "BAF\Domain Admins"
	$rootRead = "BAF\" + "$Script:unitOU" + "-RG-FILE-" + "$Script:detName" + "-ALL-READ"
		
    $rboxActions.Text += "`nGranting permissions to the common root..."
	icacls "$Script:commonPath" /inheritance:r /grant:r "$resMgr`:(OI)(CI)F"
	icacls "$Script:commonPath" /inheritance:r /grant:r "$domAdm`:(OI)(CI)F"
	icacls "$Script:commonPath" /inheritance:r /grant:r "$rootRead`:(NP)(RX)"
		
    for ($fCount = 0 ; $fCount -lt $Script:folderList.count ; $fCount ++ ) #fCount meaning folders count
    {
		#each folder acl
			
		$fol = $Script:folderList[$fCount]
		$folPath = "$Script:commonPath" + "\$fol"
			
		icacls "$folPath" /inheritance:r /grant:r "$resMgr`:(OI)(CI)F"
		icacls "$folPath" /inheritance:r /grant:r "$domAdm`:(OI)(CI)F"
		icacls "$folPath" /inheritance:r /grant:r "$rootRead`:(NP)RX"
           
        for ($sCount = 0 ; $sCount -lt $Script:subFolderList.count ; $sCount ++ ) #sCount meaning subfolders count
        {
			#each subfolder acl
				
			$flooder = $Script:folderMailList[$fCount]
			$subflooder = $Script:sfList[$sCount]
				
			$exFlooder = $Script:folderList[$fCount]
			$exSubflooder = $Script:subFolderList[$sCount]
				
            $readGroup = "BAF\" + "$Script:unitOU" + "-RG-FILE-" + "$Script:detName" + "-" + "$flooder" + "-" + "$subflooder" + "-READ" 
		    $changeGroup = "BAF\" + "$Script:unitOU" + "-RG-FILE-" + "$Script:detName" + "-" + "$flooder" + "-" + "$subflooder" + "-CHANGE"
		    $folderPath = "$Script:commonPath`\$exFlooder`\$exSubflooder"
				
			icacls "$folderPath" /inheritance:r /grant:r "$resMgr`:(OI)(CI)F"
			icacls "$folderPath" /inheritance:r /grant:r "$domAdm`:(OI)(CI)F"
			icacls "$folderPath" /inheritance:r /grant:r "$readGroup`:(OI)(CI)RX"
			icacls "$folderPath" /inheritance:r /grant:r "$changeGroup`:(OI)(CI)(GR,GW,GE,DC)"
                
        }
            
        $rboxActions.Text += "`nPermissions granted to : $folPath"
    }

    $rboxActions.Text += "`n`nThe script is done setting the rights on your folders.`nYou can now check using the `"View Results`" button in the `"Common Overview`" tab."
        
    $wshellDone = New-Object -ComObject Wscript.Shell
        
    $msgDone = "The script is done setting the rights on your folders.`n`n"
    $msgDone += "THE SCRIPT DID NOT :`n     *Put anyone into IMPEX-READ and INTERNAL-READ Groups"
    $msgDone += "`n     *Put any Registry/Comcen members/groups into IMPEX-CHANGE"

    $wshellDone.Popup("$msgDone",0,"DCDN Tool",0x0)
            
    Log-Debug "Succesfully granted all rights."

    $MainForm.Cursor = 'Default'
}

#endregion   Functions
##################################################

##################################################
#region      Function file footer

Log-Debug "End loading functions from '$($script:ScriptName)'"

#endregion   Function file footer
#################################################