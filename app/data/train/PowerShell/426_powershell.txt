<#
.SYNOPSIS
This PowerShell script module file provides a step function to be used in a
series of executable PowerShell steps that is intended to be included in all
main PowerShell scripts that reside within the automation framework.

.DESCRIPTION
Note: This script module is NOT intended to be executed independent of another
PowerShell script referencing and using it.
#>

function Uninstall-Git {
    <#
    .SYNOPSIS
    Uninstalls Git SCM utility used for managing source code.

    .DESCRIPTION
    N/A

    .EXAMPLE
    There are no parameters for this function.
 
    Uninstall-Git
    #>

    # read context file into hashtable
    $context = Read-Context

    # read properties from context
    $gitExec = $context.Get_Item("gitExec")
    $gitHome = $context.Get_Item("gitHome")
    $gitHomeSymlink = $context.Get_Item("gitHomeSymlink")
    $gitVersion = $context.Get_Item("gitVersion")

    # only uninstall Git if already installed
    if ($Global:DevTools.Git.IsInstalled -eq $true) {

        # remove Git home directory symlink
        Remove-Directory -dirPath $gitHomeSymlink -showOutMessage $true

        # remove Git execution process
        Remove-File -filePath $gitExec -showOutMessage $true

        # remove Git home directory
        Remove-Directory -dirPath $gitHome -showOutMessage $true

        # validate process completed
        if ((Test-FileExists -filePath $gitExec) -or
            (Test-DirectoryExists -dirPath $gitHome)) {

            Write-Exception -Message "Unable to uninstall Git ($(Get-VersionOrDefault -version $gitVersion)). Operation FAILED." -ErrorAction Stop
        }
        else {
            # remove version context property
            Remove-ContextProperty -name "gitVersion"

            Write-Success "Git ($(Get-VersionOrDefault -version $gitVersion)) uninstalled successfully. Operation SUCCEEDED!!!"
        }
    }
    else {
        Write-Info "Skipping un-installation. Git ($(Get-VersionOrDefault -version $gitVersion)) is not installed."
    }
}