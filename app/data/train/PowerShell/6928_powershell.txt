function Move-ADComputer
{
    <#
    .SYNOPSIS
    Moves the specified computer in Active Directory to a configured destination OU
    .DESCRIPTION
    Moves the specified computer in Active Directory to a configured destination OU
    .LINK
    None
    #>
    [CmdletBinding()]
    param (
        [Parameter(Position = 0, Mandatory = $true)]
        [string]$ComputerName,
        [Parameter(Position = 1, Mandatory = $true)]
        [ValidateSet('MOEWin7','MOEWin7-Test','MOEWin7-Dev', 'MOEvNext-Test', 'MOEvNext-Dev')]
        [System.String]$Destination,
        [System.Management.Automation.PSCredential]$Credential
    )

    process
    {
        $isDesktop = $true

        # if we match the laptop/notebook naming standard
        if ($ComputerName -match "^[n]\d\d\d\d\d\d")
        {
            $isDesktop = $false
            Write-Verbose "Computer is a laptop/notebook/tablet"
        }
        else
        {
            Write-Verbose "Computer is a desktop or non-standard named device"   
        }

        ## TODO : fix up
        <# switch ($Destination) 
        {

        } #>

        Write-Verbose "Moving $ComputerName to $ou"
        if (!$Credential)
        {
            Get-ADComputer $ComputerName | Move-ADObject -TargetPath $ou
        }
        else
        {
            Get-ADComputer $ComputerName | Move-ADObject -TargetPath $ou -Credential $Credential
        }
        
    }
}
function Get-ADComputerGroupMembership
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position = 0, Mandatory = $true)]
        [string]$ComputerName
    )

    process
    {
    }
       
}

function Switch-ADComputerGroupMember
{
    <#
    .SYNOPSIS
    Switch the group membership of a computer
    .DESCRIPTION
    Switch the membership of a computer from one security group to another by removing it from one and adding to the other. Used to assist with application upgrades
    .LINK
    None
    #>
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]$Computer,
        [Parameter(Mandatory=$true)]
        [string]$CurrentGroup,
        [Parameter(Mandatory=$true)]
        [string]$NewGroup
    )

    process
    {
        $adComputer = Get-ADComputer $Computer
        Remove-ADGroupMember $CurrentGroup -Members $adComputer -Confirm:$false
        Add-ADGroupMember $NewGroup -Members $adComputer
    }
}
