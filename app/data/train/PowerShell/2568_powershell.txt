# MIT License

# Copyright (c) 2017 Maurice CGP Peters

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Function Start-Build {
	Param (
		[Parameter(Mandatory = $true)]
		$DirectoryStructure,     
        [Parameter(Mandatory = $true)]
        $BuildTools,
        [Parameter(Mandatory = $false)]
        [string] $GitUserName,
        [Parameter(Mandatory = $false)]
        [string] $GitPassword
	)
	DynamicParam {
		# Set the dynamic parameters' name
		$ParameterName = 'Configuration'
		
		# Create the dictionary 
		$RuntimeParameterDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary

		# Create the collection of attributes
		$AttributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]
		
		# Create and set the parameters' attributes
		$ParameterAttribute = New-Object System.Management.Automation.ParameterAttribute
		$ParameterAttribute.Mandatory = $true

		# Add the attributes to the attributes collection
		$AttributeCollection.Add($ParameterAttribute)

		# Generate and set the ValidateSet 
		$arrSet = 
            Get-ChildItem -Filter *.ps1 -File -Path (Join-Path -Path $DirectoryStructure.BuildDirectoryInfo.FullName -ChildPath "configuration") | 
            Select-Object -ExpandProperty BaseName            
        
		$ValidateSetAttribute = New-Object System.Management.Automation.ValidateSetAttribute($arrSet)

		# Add the ValidateSet to the attributes collection
		$AttributeCollection.Add($ValidateSetAttribute)

		# Create and return the dynamic parameter
		$RuntimeParameter = New-Object System.Management.Automation.RuntimeDefinedParameter($ParameterName, [string], $AttributeCollection)
		$RuntimeParameterDictionary.Add($ParameterName, $RuntimeParameter)
		return $RuntimeParameterDictionary
    }
    Begin {
        Get-Module Psake | Remove-Module
		Import-Module (Join-Path -Path $DirectoryStructure.BuildToolsDirectoryInfo.FullName -ChildPath "Psake\tools\Psake.psm1")
    }
    Process {
        Invoke-Psake (Join-Path -Path $DirectoryStructure.BuildDirectoryInfo.FullName -ChildPath ("configuration\" + $PSBoundParameters.Configuration + ".ps1")) -Parameters @{"BuildTools"=$BuildTools; "DirectoryStructure"=$DirectoryStructure; "GitUserName"=$GitUserName; "GitPassword"=$GitPassword}
    }
    End {
        Remove-Module Psake   
    }
}