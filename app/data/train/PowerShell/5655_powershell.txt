# -----------------------------------------------------------------------------
#	Script: ISEAddOns.psm1
#	Author: Marlon.Rodriguez
#	Date: 02/26/2014 09:37:05
#	Keywords:
#	Comments:
#
# -----------------------------------------------------------------------------
Set-StrictMode -Version Latest

Function Add-ISEComment
{
<#
	.Synopsis
	This function adds the comment symbol to the selected text in ISE.

	.DESCRIPTION
	This command does this by taking the selected text in ISE and line by line adds a comment at the beginning.

	.Notes
	AUTHOR: Marlon.Rodriguez
	LASTEDIT: 02/18/2014 12:12:47

#>

	$text = $psISE.CurrentFile.editor.selectedText
	$psISE.CurrentFile.Editor.InsertText( [regex]::Replace($text, '^', '#', 'Multiline') )
}

Function Remove-ISEComment
{
<#
	.Synopsis
	This function removes the comment symbol to the selected text in ISE.

	.DESCRIPTION
	This command does this by taking the selected text in ISE and line by line removes a comment symbol from the beginning of each line.

	.Notes
	AUTHOR: Marlon.Rodriguez
	LASTEDIT: 02/18/2014 12:12:47

#>

	$text = $psISE.CurrentFile.editor.selectedText
	$psISE.CurrentFile.Editor.InsertText( [regex]::Replace($text, '^#', '', 'Multiline'))

}

Function Convert-SpacesToTabs{
<#
	.Synopsis
		Changes a number of continuous spaces into tabs.
	.DESCRIPTION
		Using Regex it replaces the current editor text with one containing tabs instead of spaces in the specified ammount (4 default),
		it will also replace left over spaces with one space. If the RemoveExtraLines switch is included it will remove extra empty lines,
		otherwise it removes the whitespace but leaves the extra lines in case you really want to separate your code.
	.EXAMPLE
		Convert-SpacesToTabs -NumberOfSpaces 8
		This will replace every 8 spaces with tabs and remove any continuous spaces
	.EXAMPLE
		Convert-SpacesToTabs -RemoveExtraLines
#>
	[CmdletBinding()]
	Param(
		[Parameter(Mandatory=$false,
				Position=0,
				HelpMessage="Number of continuous spaces (1-10) to convert to tabs. Default is 4.")]
		[ValidateRange(1,10)]
		[int] $NumberOfSpaces = 4,
		[Parameter(Mandatory=$false,
				Position=1,
				HelpMessage="If included it will remove any number of continuous lines containing just spaces and tabs and replaces them with one empty line.")]
		[switch] $RemoveExtraLines
	)

	$text = $psISE.CurrentFile.Editor.Text
	$psISE.CurrentFile.Editor.Clear()
	#Clean up the leftover spaces as well in case there are any odd number of spaces or just less than the selected number [4] default
	If ($RemoveExtraLines){
			$psISE.CurrentFile.Editor.InsertText( [regex]::Replace([regex]::Replace( $($text -replace " {$NumberOfSpaces}","`t" -replace " {1,}",' ' -replace '\t +',"`t"), '^\s+$','', 'MultiLine'),'^ {1,}',"`t", "MultiLine"))
	} else {
		$psISE.CurrentFile.Editor.InsertText( [regex]::Replace([regex]::Replace( $($text -replace " {$NumberOfSpaces}","`t" -replace " {1,}",' ' -replace '\t +',"`t"), '^[ \t]+$','', 'MultiLine'),'^ {1,}',"`t", "MultiLine"))
	}
}
