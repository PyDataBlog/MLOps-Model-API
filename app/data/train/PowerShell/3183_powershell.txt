 <#
.SYNOPSIS
This PowerShell script module file contains common, reusable functions that
are intended to be included in all PowerShell scripts that reside within the
automation framework.

.DESCRIPTION
Note: This script module is NOT intended to be executed independent of another
PowerShell script referencing and using it.
#>

function Format-Xml {
	<#
    .SYNOPSIS
    Formats the specified XML file with the specified encoding in 'pretty print'
    form.

    .DESCRIPTION
    This function formats a specified XML file and uses a specified encoding to
    reformat the file into 'pretty print' format with hierarchical XML indented
    appropriately based on its parent/child elements.

    .EXAMPLE
    All parameters are required exception
        -encoding
        -indentLevel
 
    Format-Xml -filePath "/developer/temp/myXml.xml" `
                -encoding "UTF-8" `
                -indentLevel 4
    #>

	# function parameters
    [CmdletBinding(SupportsShouldProcess = $true, DefaultParameterSetName = 'Format')]
	Param(
		[Parameter(
			Mandatory = $true,
			ParameterSetName = '',
			HelpMessage = "The absolute path of the XML file to format. Example: `"/developer/temp/myXml.xml`"",
			ValueFromPipeline = $false)]
			[string]$filePath = $(throw "-filePath is required"),
        [Parameter(
            Mandatory = $false,
            ParameterSetName = '',
            HelpMessage = "The type of encoding for the XML file. Example: `"UTF-8`"",
            ValueFromPipeline = $false)]
            [string]$encoding = "UTF-8",
        [Parameter(
            Mandatory = $false,
            ParameterSetName = '',
            HelpMessage = "The level of indentation for each XML element. Example: 4",
            ValueFromPipeline = $false)]
            [int]$indentLevel = 4
	)

    # format XML (OS-specific)
    switch ($Global:Os.Id) {

        # macOS and Linux
        {$_ -in $Global:Os.macOS.Id, $Global:Os.Linux.Id} {

            # xmllint process information
            $process = "xmllint"
            $args  = "`"$filePath`" "
            $args += "--format "
            $args += "--output `"$filePath`""

            # execute xmllint process
            Write-Info "Formatting XML document located at '$filePath'..."
            $exitCode = Invoke-Process -processPath $process `
                                -processArgs $args
        }

        # Windows
        $Global:Os.Windows.Id {

            # load XML file into created XmlDataDocument object
            $xDoc = New-Object System.Xml.XmlDataDocument 
            $xDoc.Load((Resolve-Path $filePath)) 

            # create StringWriter and XmlTextWriter objects to hold and format XML
            $sw = New-Object System.IO.StringWriter 
            $writer = New-Object System.Xml.XmlTextWriter($sw) 

            # setup XML file formatting options
            $writer.Formatting = [System.Xml.Formatting]::Indented
            $writer.Indentation = $indentLevel

            # write formatted XML to file
            $xDoc.WriteContentTo($writer) 
            Set-Content -Value $sw.ToString() `
                        -Path $filePath `
                        -Encoding $encoding `
                        -Force
        }
    }

    # validate process completed
    if ($exitCode -ne 0) {

        Write-Exception -Message "Unable to format XML document located at '$filePath'. Operation FAILED." -ErrorAction Stop
    }
    else {
        Write-Info "Formatted XML document located at '$filePath' successfully. Operation SUCCEEDED!!!"
    }
}