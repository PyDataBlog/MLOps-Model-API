#### #### DO NOT EDIT THIS FILE ##### ####
#### Copyright 2014-2015 Hendrik Saly
#### Licensed under the Apache License, Version 2.0
function Untgz($zipFile, $untgzfolder)
{
  $sz = $thisScript+'\tar\bsdtar.exe'  
  
  set-alias sza $sz
  sza -xzf $zipFile -C $untgzfolder
  write-host "Unzip $zipFile to $untgzfolder"
}

function Unzip($zipFile, $untgzfolder)
{
  $sz = $thisScript+'\tar\unzip.exe'  
  
  set-alias unzip $sz
  unzip -q $zipFile -d $untgzfolder
  write-host "Unzip $zipFile to $untgzfolder"
}


function DownloadFile($url)
{
   $localPath = $thisScript+$downloadFolder+"\"+(Split-Path -Path ([System.Uri]$url).LocalPath -leaf)
   $client = New-Object System.Net.WebClient
   #$client.Proxy = [System.Net.WebRequest]::DefaultWebProxy
   
   #this header is to automatically accept java license when downloading from oracle   
   #$client.Headers.Add([System.Net.HttpRequestHeader]::Cookie, "gpw_e24=http%3A%2F%2Fwww.oracle.com%2F")
   $client.Headers["User-Agent"] = "Safari"


try {

 
  #Register-ObjectEvent $client DownloadProgressChanged -action {     
#
 #       if($eventargs.ProgressPercentage % 10){
  #          Write-Progress -Activity "Downloading" -Status `
   #         ("{0} of {1}" -f $eventargs.BytesReceived, $eventargs.TotalBytesToReceive) `
    #        -PercentComplete $eventargs.ProgressPercentage   
     #   } 
    #}

   
   
   
   Register-ObjectEvent -InputObject $client -EventName DownloadFileCompleted -SourceIdentifier $url
   

    write-host "Download $url to $localPath"
    $client.DownloadFileAsync($url, $localPath)

   
    Wait-Event -SourceIdentifier $url
    Unregister-Event -SourceIdentifier $url
    write-host "$localPath download finished"

} finally { 
    $client.dispose()
}

}


#  Author:          Gregory Strike
#  Website:         www.gregorystrike.com
#  Purpose:         Outputs which version (32-bit or 64-bit) of PowerShell is currently being run
Function Powershell-Bits(){
    Switch ([System.Runtime.InterOpServices.Marshal]::SizeOf([System.IntPtr])) {
        4 {
            Return "32-bit"
        }
        
        8 { 
            Return "64-bit"
        }
        
        default {
            Return "Unknown Type"
        }
    }
}