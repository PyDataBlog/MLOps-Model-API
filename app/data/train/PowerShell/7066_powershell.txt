Add-Type -AssemblyName presentationframework
[xml]$xaml = Get-Content 

$reader=(New-Object Xml.XmlNodeReader $xaml) 
$Form=[Windows.Markup.XamlReader]::Load( $reader ) 
$x = @(
    New-Object PSObject @{Name="Chrome OS Device Operations";Scope="https://www.googleapis.com/auth/admin.directory.device.chromeos";Modifiers=@{"Full Access"="";"Read Only"=".readonly";}}
    New-Object PSObject @{Name="Mobile Device Operations";Scope="https://www.googleapis.com/auth/admin.directory.device.mobile";Modifiers=@{"Full Access"="";"Read Only"=".readonly";"Action Only"=".action"}}
    New-Object PSObject @{Name="Groups, Groups Aliases, and Group Membership";Scope="https://www.googleapis.com/auth/admin.directory.group";Modifiers=@{"Full Access"="";"Read Only"=".readonly";}}
    New-Object PSObject @{Name="Org Units";Scope="https://www.googleapis.com/auth/admin.directory.device.orgunit";Modifiers=@{"Full Access"="";"Read Only"=".readonly";}}
    New-Object PSObject @{Name="Users and User Aliases";Scope="https://www.googleapis.com/auth/admin.directory.device.user";Modifiers=@{"Full Access"="";"Read Only"=".readonly";}}
)

$Form.FindName("OkButton").add_click.Invoke({$script:Form.DialogResult = $true; $script:Form.Close()})
$Form.FindName("OkButton").add_click.Invoke({$script:Form.DialogResult = $true; $script:Form.Close()})

$listbox = $Form.FindName("Test")
$listbox.ItemsSource = $x
$Form.ShowDialog() | out-null

foreach($item in $listbox.SelectedItems)
{
    $lbi = $listbox.ItemContainerGenerator.ContainerFromItem($item)
    $contentPresenter = Get-WpfVisualChild -ChildType ([System.Windows.Controls.ContentPresenter]) -Object $lbi
    if(!$contentPresenter)
    {
        continue
    }

    $comboBoxKey = $contentPresenter.ContentTemplate.FindName("ScopeModifier",$contentPresenter).SelectedItem

    "$($item.Scope)$($item.Modifiers[$comboBoxKey])"
}