function Replace-Package {

    param(
        [Parameter(Mandatory = $true)]
        [string]
        $ToBeReplaced,

        [Parameter(Mandatory = $true)]
        [string]
        $Replacement,
		
        [Parameter(Mandatory = $false)]
        [string]
        $Version = "",

        [Parameter(ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
        [string]
        $ProjectName,

        [switch]
        $Force,
       
        [switch]
        $Pre
    )

    if (-not $ProjectName) {
        $ProjectName = (get-project).ProjectName
    }

    Write-Host "Uninstalling" $ToBeReplaced "from" $ProjectName
    Uninstall-Package -ProjectName $ProjectName -Id $ToBeReplaced -Force:$Force
    Write-Host "Installing" $Replacement "to" $ProjectName
    if ($Version)
    {
        Install-Package -ProjectName $ProjectName -Id $Replacement -Version $Version
    }
    else
    {
        Install-Package -ProjectName $ProjectName -Id $Replacement -Pre:$Pre
    }
}

function Replace-Packages {

    param(
        [Parameter(Mandatory = $true)]
        [string]
        $ToBeReplaced,

        [Parameter(Mandatory = $true)]
        [string]
        $Replacement,

        [Parameter(Mandatory = $false)]
        [string]
        $Version = "",

        [switch]
        $Force,
       
        [switch]
        $Pre
    )

    $projects = Get-Project -All
   
    foreach($project in $projects)
    {
        $packages = Get-Package -ProjectName $project.Name -pre | Where-Object {$_.Id -eq $ToBeReplaced}
        foreach($package in $packages)
        {
            Replace-Package -ToBeReplaced $ToBeReplaced -Replacement $Replacement -Version $version -ProjectName $project.Name -Force:$Force -Pre:$Pre
        }
    }
}

Export-ModuleMember Replace-Package
Export-ModuleMember Replace-Packages
