<# 
 # ============================================================================
 # Build
 #
 # WocketDb
 # Copyright (c) 2011 WocketWare LLC
 #
 # PSake Build script for compiling, testing, and packaging WocketDb.
 #
 # Since: 1.0
 # ============================================================================
 #>

# =============================================================================
# Public Build Targets
# =============================================================================
Task default -depends Developer

# Normal developer build
Task Developer -depends initialize, clean, compile, move, test

# Package the source into redistributable assemblies
#Task Package -depends _initialize, Clean, Compile, Move, Test, Pack

# =============================================================================
# Build Properties
# =============================================================================
properties {
	# Solution Configuration
	$solutionConfig		= "Release"
	$solutionName		= "WocketDb"

	# Directories
	$baseDir			= Resolve-Path .
	$sourceDir			= "$baseDir\src"
	$libDir				= "$baseDir\lib"
	$buildDir			= "$baseDir\build"
	$testDir			= "$buildDir\test"
	$resultDir			= "$buildDir\results"  
	
	# Tools
	$msbuild			= "C:\Windows\Microsoft.NET\Framework\v4.0.30319\MsBuild.exe"
	$nunit				= "$libDir\nunit\nunit-console-x86.exe"
}

# =============================================================================
# Private Build Tasks
# =============================================================================
# Initialize any tools
Task initialize { 
	
}

# Clean the build directory
Task clean -depends initialize {
	rd $buildDir -recurse -force -ErrorAction SilentlyContinue | out-null
	mkdir $testDir -ErrorAction SilentlyContinue | out-null
	mkdir $resultDir -ErrorAction SilentlyContinue | out-null
}

# Compile the Solution
Task compile -depends initialize {
	exec { & $msbuild $sourceDir\$solutionName.sln /nologo /t:clean /p:Configuration=$solutionConfig /v:q }
	exec { & $msbuild $sourceDir\$solutionName.sln /nologo /t:rebuild /p:Configuration=$solutionConfig /v:q }
}

# Move the assemblies for testing
Task move -depends clean, compile {
	ls $sourceDir\*\bin\$solutionConfig\ -include *.* -recurse | cp -dest $testDir -force
}

# Run the unit test assemblies
Task test -depends move {
	$testAssemblies = ls $testDir -filter *.UnitTests.dll
    foreach ($testAssembly in $testAssemblies) {
        Run-NUnit $testAssembly.Name
    }
}
	
# =============================================================================
# Helper Functions
# =============================================================================

# Runs the NUnit Tests from a test assembly
function Run-NUnit {
	param([string] $testAssembly)
    exec { & $nunit $testDir\$testAssembly /noshadow /nologo /nodots /xml=$resultDir\NUnitResult-$testAssembly.xml | out-file $resultDir\NUnit-$testAssembly.log }
}
