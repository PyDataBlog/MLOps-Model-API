<#
.Synopsis
   Installs or uninstalls the Clean Software Update Groups console extension for ConfigMgr.
.DESCRIPTION
   Configures settings for and installs a console extension to remove expired and superseded 
   updates from software update groups in ConfigMgr.
.PARAMETER SiteServer
   Specifies the name of the Site Server where the SMS Provider is installed.
.PARAMETER Method
   Runs the script in either 'Install' or 'Uninstall' mode.
.PARAMETER Path
    Sets the path where the Clean Software Update Groups script file will be stored. This path must 
    already exist, the script will not create the path if it is not found.
.EXAMPLE
    PS > Invoke-ToolInstallation.ps1 -SiteServer CM01.contoso.com -Method Install -Path C:\Scripts -Verbose
    VERBOSE: ConfigMgr console environment variable detected: C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\bin\i386
    VERBOSE: Creating folder: 'C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\XmlStorage\Extensions\Actions\23e7a3fe-b0f0-4b24-813a-dc425239f9a2'
    VERBOSE: Editing 'CleanSoftwareUpdateGroups.xml' to contain the correct path to script file
    VERBOSE: Copying 'CleanSoftwareUpdateGroups.xml' to Software Update Groups node action folder
    VERBOSE: Copying 'Clean-CMSoftwareUpdateGroups.ps1' to: 'C:\Scripts'
.EXAMPLE
    PS > Invoke-ToolInstallation.ps1 -SiteServer CM01.contoso.com -Method Uninstall -Path C:\Scripts -Verbose
    VERBOSE: ConfigMgr console environment variable detected: C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\bin\i386
    VERBOSE: Found folder: 'C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\XmlStorage\Extensions\Actions\23e7a3fe-b0f0-4b24-813a-dc425239f9a2'
    VERBOSE: Removing 'CleanSoftwareUpdateGroups.xml' from Software Update Groups node action folder
    VERBOSE: Removing 'Clean-CMSoftwareUpdateGroups.ps1' from 'C:\Scripts'
#>
[CmdletBinding(SupportsShouldProcess = $true)]
param (
	[parameter(Mandatory = $true, HelpMessage = "Site server where the SMS Provider is installed")]
	[ValidateNotNullOrEmpty()]
	[string]$SiteServer,
	
	[parameter(Mandatory = $true, HelpMessage = "Specify installation method")]
	[ValidateNotNullOrEmpty()]
	[ValidateSet("Install", "Uninstall")]
	[string]$Method,
	
	[parameter(Mandatory = $true, HelpMessage = "Specify a valid path to where the Clean Software Update Groups script file will be stored")]
	[ValidateNotNullOrEmpty()]
	[ValidatePattern("^[A-Za-z]{1}:\\\w+")]
	[ValidateScript({
			# Check if path contains any invalid characters
			if ((Split-Path -Path $_ -Leaf).IndexOfAny([IO.Path]::GetInvalidFileNameChars()) -ge 0)
			{
				throw "$(Split-Path -Path $_ -Leaf) contains invalid characters"
			}
			else
			{
				# Check if the whole path exists
				if (Test-Path -Path $_ -PathType Container)
				{
					return $true
				}
				else
				{
					throw "Unable to locate part of or the whole specified path, specify a valid path"
				}
			}
		})]
	[string]$Path
)
Begin
{
	# Validate that the script is being executed elevated
	try
	{
		$CurrentIdentity = [Security.Principal.WindowsIdentity]::GetCurrent()
		$WindowsPrincipal = New-Object Security.Principal.WindowsPrincipal -ArgumentList $CurrentIdentity
		if (-not ($WindowsPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)))
		{
			Write-Warning -Message "Script was not executed elevated, please re-launch."; break
		}
	}
	catch
	{
		Write-Warning -Message $_.Exception.Message; break
	}
	# Determine PSScriptRoot
	$ScriptRoot = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
	# Validate ConfigMgr console presence
	if ($env:SMS_ADMIN_UI_PATH -ne $null)
	{
		try
		{
			if (Test-Path -Path $env:SMS_ADMIN_UI_PATH -PathType Container -ErrorAction Stop)
			{
				Write-Verbose -Message "ConfigMgr console environment variable detected: $($env:SMS_ADMIN_UI_PATH)"
			}
		}
		catch [Exception] {
			Write-Warning -Message $_.Exception.Message; break
		}
	}
	else
	{
		Write-Warning -Message "ConfigMgr console environment variable was not detected"; break
	}
	# Define installation file variables
	$XMLFile = "CleanSoftwareUpdateGroups.xml"
	$ScriptFile = "Clean-CMSoftwareUpdateGroups.ps1"
	# Define node folders
	$Node = "23e7a3fe-b0f0-4b24-813a-dc425239f9a2"
	$AdminConsoleRoot = ($env:SMS_ADMIN_UI_PATH).Substring(0, $env:SMS_ADMIN_UI_PATH.Length - 9)
	# Create Action folders if not exists
	$FolderList = New-Object -TypeName System.Collections.ArrayList
	$FolderList.AddRange(@(
			(Join-Path -Path $AdminConsoleRoot -ChildPath "XmlStorage\Extensions\Actions\$($Node)")
		)) | Out-Null
	foreach ($CurrentNode in $FolderList)
	{
		if (-not (Test-Path -Path $CurrentNode -PathType Container))
		{
			Write-Verbose -Message "Creating folder: '$($CurrentNode)'"
			New-Item -Path $CurrentNode -ItemType Directory -Force | Out-Null
		}
		else
		{
			Write-Verbose -Message "Found folder: '$($CurrentNode)'"
		}
	}
}
Process
{
	switch ($Method)
	{
		"Install" {
			
			#Create XML and script
			#region ScriptFile
			$ScriptFileData = @'
<#
.SYNOPSIS
    Perform a clean up of expired and/or supersded Software Updates in all Software Update Groups
.DESCRIPTION
    Use this script if you need to perform a clean up of expired and/or superseded Software Updates from all Software Upgrade Groups in ConfigMgr
.PARAMETER SiteServer
    Site server name with SMS Provider installed
.PARAMETER Option
    Select an option to clean either ExpiredOnly, SupersededOnly or ExpiredSuperseded Software Updates from each Software Update Group
.PARAMETER RemoveContent
    Remove the content for those Software Updates that will be removed from a Software Upgrade Group
.PARAMETER ShowProgress
    Show a progressbar displaying the current operation
.EXAMPLE
    Clean Software Update Groups from expired Software Updates, while showing the current progress and removing downloaded content, on a Primary Site server called 'CM01':
    .\Clean-CMSoftwareUpdateGroups.ps1 -SiteServer CM01 -Option ExpiredOnly -RemoveContent -ShowProgress

    Clean Software Update Groups from superseded Software Updates, while showing the current progress, on a Primary Site server called 'CM01':
    .\Clean-CMSoftwareUpdateGroups.ps1 -SiteServer CM01 -Option SupersededOnly -ShowProgress

    Clean Software Update Groups from expired and supersded Software Updates with verbose output, on a Primary Site server called 'CM01':
    .\Clean-CMSoftwareUpdateGroups.ps1 -SiteServer CM01 -Option ExpiredSuperseded -Verbose
    
#>
[CmdletBinding(SupportsShouldProcess=$true)]
param(
    [parameter(Mandatory=$true, HelpMessage="Site server where the SMS Provider is installed")]
    [ValidateScript({Test-Connection -ComputerName $_ -Count 1 -Quiet})]
    [ValidateNotNullOrEmpty()]
    [string]$SiteServer,

    [parameter(Mandatory=$true, HelpMessage="Select an option to clean either ExpiredOnly, SupersededOnly or ExpiredSuperseded Software Updates from each Software Update Group")]
    [ValidateNotNullOrEmpty()]
    [ValidateSet("ExpiredOnly","SupersededOnly","ExpiredSuperseded")]
    [string]$Option,

    [parameter(Mandatory=$false, HelpMessage="Remove the content for those Software Updates that will be removed from a Software Upgrade Group")]
    [ValidateNotNullOrEmpty()]
    [switch]$RemoveContent,

    [parameter(Mandatory=$false, HelpMessage="Show a progressbar displaying the current operation")]
    [ValidateNotNullOrEmpty()]
    [switch]$ShowProgress
)
Begin {
    # Determine SiteCode from WMI
    try {
        Write-Verbose "Determining Site Code for Site server: '$($SiteServer)'"
        $SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $SiteServer -ErrorAction Stop
        foreach ($SiteCodeObject in $SiteCodeObjects) {
            if ($SiteCodeObject.ProviderForLocalSite -eq $true) {
                $SiteCode = $SiteCodeObject.SiteCode
                Write-Verbose -Message "Site Code: $($SiteCode)"
            }
        }
    }
    catch [System.UnauthorizedAccessException] {
        Write-Warning -Message "Access denied" ; break
    }
    catch [System.Exception] {
        Write-Warning -Message "Unable to determine Site Code" ; break
    }
    # Temporarily set ErrorActionPreference
    $ErrorActionPreference = "Stop"
    # Set ProgressCount
    if ($PSBoundParameters["ShowProgress"]) {
        $ProgressCount = 0
    }
}
Process {
    try {
        $StartTime = [Diagnostics.Stopwatch]::StartNew()
        $SUGResults = (Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_AuthorizationList -ComputerName $SiteServer -ErrorAction SilentlyContinue | Measure-Object).Count
        if ($SUGResults -ge 1) {
            # Get list of removable Software Updates
            switch ($Option) {
                "ExpiredOnly" {
                    $Query = "SELECT SU.CI_ID FROM SMS_SoftwareUpdate AS SU JOIN SMS_CIRelation AS CIR ON SU.CI_ID = CIR.ToCIID WHERE CIR.RelationType = 1 AND SU.IsExpired = 1 AND SU.IsSuperseded = 0"
                }
                "SupersededOnly" {
                    $Query = "SELECT SU.CI_ID FROM SMS_SoftwareUpdate AS SU JOIN SMS_CIRelation AS CIR ON SU.CI_ID = CIR.ToCIID WHERE CIR.RelationType = 1 AND SU.IsExpired = 0 AND SU.IsSuperseded = 1"
                }
                "ExpiredSuperseded" {
                    $Query = "SELECT SU.CI_ID FROM SMS_SoftwareUpdate AS SU JOIN SMS_CIRelation AS CIR ON SU.CI_ID = CIR.ToCIID WHERE CIR.RelationType = 1 AND SU.IsExpired = 1 AND SU.IsSuperseded = 1"
                }
            }
            try {
                $RemovableUpdates = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Query $Query -ComputerName $SiteServer -ErrorAction Stop
                $RemovableUpdatesList = New-Object -TypeName System.Collections.ArrayList
                foreach ($RemovableUpdate in $RemovableUpdates) {
                    $RemovableUpdatesList.Add($RemovableUpdate.CI_ID) | Out-Null
                }
            }
            catch [System.Exception] {
                Write-Warning -Message "Unable to determine removable Software Updates from selected option"
            }
            # Enumerate each Software Update Group
            $AuthorizationLists = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_AuthorizationList -ComputerName $SiteServer -ErrorAction Stop
            foreach ($AuthorizationList in $AuthorizationLists) {
                Write-Verbose -Message "Start processing '$($AuthorizationList.LocalizedDisplayName)'"
                if ($PSBoundParameters["ShowProgress"]) {
                    $ProgressCount++
                }
                Write-Progress -Activity "Processing Software Updates Groups" -Id 1 -Status "$($ProgressCount) / $($SUGResults)" -CurrentOperation "Current Software Update Group: '$($AuthorizationList.LocalizedDisplayName)'" -PercentComplete (($ProgressCount / $SUGResults) * 100)
                $AuthorizationList = [wmi]"$($AuthorizationList.__PATH)"
                $UpdatesCount = $AuthorizationList.Updates.Count
                $UpdatesList = New-Object -TypeName System.Collections.ArrayList
                $RemovedUpdatesList = New-Object -TypeName System.Collections.ArrayList
                # Enumerate each Software Update in current Software Update Group if eligible for removal
                foreach ($Update in ($AuthorizationList.Updates)) {
                    if ($Update -notin $RemovableUpdatesList) {
                        $UpdatesList.Add($Update) | Out-Null
                    }
                    else {
                        $RemovedUpdatesList.Add($Update) | Out-Null
                    }
                }
                # Update Software Update Group updates if count of objects in UpdatesList is less than before
                if ($UpdatesCount -gt $UpdatesList.Count) {
                    try {
                        if ($PSCmdlet.ShouldProcess("$($AuthorizationList.LocalizedDisplayName)","Clean '$($UpdatesCount - ($UpdatesList.Count))' updates")) {
                            $AuthorizationList.Updates = $UpdatesList
                            $AuthorizationList.Put() | Out-Null
                            Write-Verbose -Message "Successfully cleaned up $($UpdatesCount - ($UpdatesList.Count)) updates from '$($AuthorizationList.LocalizedDisplayName)'"
                        }
                        # Remove content for each CI_ID in the RemovedUpdatesList array
                        if ($PSBoundParameters["RemoveContent"]) {
                            try {
                                $DeploymentPackageList = New-Object -TypeName System.Collections.ArrayList
                                foreach ($CI_ID in $RemovedUpdatesList) {
                                    Write-Verbose -Message "Collecting content data for CI_ID: $($CI_ID)"
                                    $ContentQuery = "SELECT SMS_PackageToContent.ContentID,SMS_PackageToContent.PackageID from SMS_PackageToContent JOIN SMS_CIToContent ON SMS_CIToContent.ContentID = SMS_PackageToContent.ContentID WHERE SMS_CIToContent.CI_ID IN ($($CI_ID))"
                                    $ContentData = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Query $ContentQuery -ComputerName $SiteServer -ErrorAction Stop
                                    Write-Verbose -Message "Found '$(($ContentData | Measure-Object).Count)' objects"
                                    foreach ($Content in $ContentData) {
                                        $ContentID = $Content | Select-Object -ExpandProperty ContentID
                                        $PackageID = $Content | Select-Object -ExpandProperty PackageID
                                        $DeploymentPackage = [wmi]"\\$($SiteServer)\root\SMS\site_$($SiteCode):SMS_SoftwareUpdatesPackage.PackageID='$($PackageID)'"
                                        if ($DeploymentPackage.PackageID -notin $DeploymentPackageList) {
                                            $DeploymentPackageList.Add($DeploymentPackage.PackageID) | Out-Null
                                        }
                                        if ($PSCmdlet.ShouldProcess("$($PackageID)","Remove ContentID '$($ContentID)'")) {
                                            Write-Verbose -Message "Attempting to remove ContentID '$($ContentID)' from PackageID '$($PackageID)'"
                                            $ReturnValue = $DeploymentPackage.RemoveContent($ContentID, $false)
                                            if ($ReturnValue.ReturnValue -eq 0) {
                                                Write-Verbose -Message "Successfully removed ContentID '$($ContentID)' from PackageID '$($PackageID)'"
                                            }
                                        }
                                    }
                                }
                            }
                            catch [Exception] {
                                Write-Warning -Message "An error occured when attempting to remove ContentID '$($ContentID)' from '$($PackageID)'"
                            }
                        }
                    }
                    catch [Exception] {
                        Write-Warning -Message "Unable to save changes to '$($AuthorizationList.LocalizedDisplayName)'" ; break
                    }
                }
                else {
                    Write-Verbose -Message "No changes detected, will not update '$($AuthorizationList.LocalizedDisplayName)'"
                }
                # Refresh content source for all Deployment Packages in the DeploymentPackageList array
                if (($DeploymentPackageList.Count -ge 1) -and ($PSBoundParameters["RemoveContent"])) {
                    foreach ($DPackageID in $DeploymentPackageList) {
                        if ($PSCmdlet.ShouldProcess("$($DPackageID)","Refresh content source")) {
                            $DPackage = [wmi]"\\$($SiteServer)\root\SMS\site_$($SiteCode):SMS_SoftwareUpdatesPackage.PackageID='$($DPackageID)'"
                            Write-Verbose -Message "Attempting to refresh content source for Deployment Package '$($DPackage.Name)'"
                            $ReturnValue = $DPackage.RefreshPkgSource()
                            if ($ReturnValue.ReturnValue -eq 0) {
                                Write-Verbose -Message "Successfully refreshed content source for Deployment Package '$($DPackage.Name)'"
                            }
                        }
                    }
                }
            }
        }
        else {
            Write-Warning -Message "Unable to locate any Software Update Groups"
        }
    }
    catch [Exception] {
        Write-Error -Message $_.Exception.Message
    }
}
End {
    # Temporarily set ErrorActionPreference
    $ErrorActionPreference = "Continue"
    # Complete write progress activity    
    if ($PSBoundParameters["ShowProgress"]) {
        Write-Progress -Activity "Processing Software Update Groups" -Completed -ErrorAction SilentlyContinue
    }
    # Output script exection time
    $StartTime.Stop()
    Write-Verbose -Message "Script execution: $($StartTime.Elapsed.Minutes) min and $($StartTime.Elapsed.Seconds) seconds"
}
'@
			#endregion
			#region XMLFile
			$XMLData = @'
<ActionDescription Class="Group" DisplayName="Clean Software Update Groups" MnemonicDisplayName="Clean Software Update Groups" Description="Clean Software Update Groups" SqmDataPoint="53">
  <ShowOn>
    <string>DefaultHomeTab</string>
    <string>ContextMenu</string>
  </ShowOn>
  <ResourceAssembly>
    <Assembly>AdminUI.CollectionProperty.dll</Assembly>
    <Type>Microsoft.ConfigurationManagement.AdminConsole.CollectionProperty.Properties.Resources.resources</Type>
  </ResourceAssembly>
  <ImagesDescription>
    <ResourceAssembly>
      <Assembly>AdminUI.UIResources.dll</Assembly>
      <Type>Microsoft.ConfigurationManagement.AdminConsole.UIResources.Properties.Resources.resources</Type>
    </ResourceAssembly>
    <ImageResourceName>SUM_Update</ImageResourceName>
  </ImagesDescription>
  <ActionGroups>
    <ActionDescription Class="Executable" DisplayName="Expired and Superseded (Remove content)" MnemonicDisplayName="Expired and Superseded (Remove content)" Description="Expired and Superseded (Remove content)">
      <ShowOn>
        <string>DefaultHomeTab</string>
        <string>ContextMenu</string>
      </ShowOn>
      <ResourceAssembly>
        <Assembly>AdminUI.CollectionProperty.dll</Assembly>
        <Type>Microsoft.ConfigurationManagement.AdminConsole.CollectionProperty.Properties.Resources.resources</Type>
      </ResourceAssembly>
      <ImagesDescription>
        <ResourceAssembly>
          <Assembly>AdminUI.UIResources.dll</Assembly>
          <Type>Microsoft.ConfigurationManagement.AdminConsole.UIResources.Properties.Resources.resources</Type>
        </ResourceAssembly>
        <ImageResourceName>SUM_Update</ImageResourceName>
      </ImagesDescription>
      <Executable>
        <FilePath>"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"</FilePath>
        <Parameters>-executionpolicy bypass -file #PATH# -SiteServer #SERVER# -Option ExpiredSuperseded -RemoveContent -ShowProgress -Verbose</Parameters>
      </Executable>
    </ActionDescription>
  </ActionGroups>
  <ActionGroups>
    <ActionDescription Class="Executable" DisplayName="Expired and Superseded (Keep content)" MnemonicDisplayName="Expired and Superseded (Keep content)" Description="Expired and Superseded (Keep content)">
      <ShowOn>
        <string>DefaultHomeTab</string>
        <string>ContextMenu</string>
      </ShowOn>
      <ResourceAssembly>
        <Assembly>AdminUI.CollectionProperty.dll</Assembly>
        <Type>Microsoft.ConfigurationManagement.AdminConsole.CollectionProperty.Properties.Resources.resources</Type>
      </ResourceAssembly>
      <ImagesDescription>
        <ResourceAssembly>
          <Assembly>AdminUI.UIResources.dll</Assembly>
          <Type>Microsoft.ConfigurationManagement.AdminConsole.UIResources.Properties.Resources.resources</Type>
        </ResourceAssembly>
        <ImageResourceName>SUM_Update</ImageResourceName>
      </ImagesDescription>
      <Executable>
        <FilePath>"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"</FilePath>
        <Parameters>-executionpolicy bypass -file #PATH# -SiteServer #SERVER# -Option ExpiredSuperseded -ShowProgress -Verbose</Parameters>
      </Executable>
    </ActionDescription>
  </ActionGroups>
  <ActionGroups>
    <ActionDescription Class="Executable" DisplayName="Expired Only (Remove content)" MnemonicDisplayName="Expired Only (Remove content)" Description="Expired Only (Remove content)">
      <ShowOn>
        <string>DefaultHomeTab</string>
        <string>ContextMenu</string>
      </ShowOn>
      <ResourceAssembly>
        <Assembly>AdminUI.CollectionProperty.dll</Assembly>
        <Type>Microsoft.ConfigurationManagement.AdminConsole.CollectionProperty.Properties.Resources.resources</Type>
      </ResourceAssembly>
      <ImagesDescription>
        <ResourceAssembly>
          <Assembly>AdminUI.UIResources.dll</Assembly>
          <Type>Microsoft.ConfigurationManagement.AdminConsole.UIResources.Properties.Resources.resources</Type>
        </ResourceAssembly>
        <ImageResourceName>SUM_Update</ImageResourceName>
      </ImagesDescription>
      <Executable>
        <FilePath>"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"</FilePath>
        <Parameters>-executionpolicy bypass -file #PATH# -SiteServer #SERVER# -Option ExpiredOnly -RemoveContent -ShowProgress -Verbose</Parameters>
      </Executable>
    </ActionDescription>
  </ActionGroups>
  <ActionGroups>
    <ActionDescription Class="Executable" DisplayName="Expired Only (Keep content)" MnemonicDisplayName="Expired Only (Keep content)" Description="Expired Only (Keep content)">
      <ShowOn>
        <string>DefaultHomeTab</string>
        <string>ContextMenu</string>
      </ShowOn>
      <ResourceAssembly>
        <Assembly>AdminUI.CollectionProperty.dll</Assembly>
        <Type>Microsoft.ConfigurationManagement.AdminConsole.CollectionProperty.Properties.Resources.resources</Type>
      </ResourceAssembly>
      <ImagesDescription>
        <ResourceAssembly>
          <Assembly>AdminUI.UIResources.dll</Assembly>
          <Type>Microsoft.ConfigurationManagement.AdminConsole.UIResources.Properties.Resources.resources</Type>
        </ResourceAssembly>
        <ImageResourceName>SUM_Update</ImageResourceName>
      </ImagesDescription>
      <Executable>
        <FilePath>"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"</FilePath>
        <Parameters>-executionpolicy bypass -file #PATH# -SiteServer #SERVER# -Option ExpiredOnly -ShowProgress -Verbose</Parameters>
      </Executable>
    </ActionDescription>
  </ActionGroups>
  <ActionGroups>
    <ActionDescription Class="Executable" DisplayName="Superseded Only (Remove content)" MnemonicDisplayName="Superseded Only (Remove content)" Description="Superseded Only (Remove content)">
      <ShowOn>
        <string>DefaultHomeTab</string>
        <string>ContextMenu</string>
      </ShowOn>
      <ResourceAssembly>
        <Assembly>AdminUI.CollectionProperty.dll</Assembly>
        <Type>Microsoft.ConfigurationManagement.AdminConsole.CollectionProperty.Properties.Resources.resources</Type>
      </ResourceAssembly>
      <ImagesDescription>
        <ResourceAssembly>
          <Assembly>AdminUI.UIResources.dll</Assembly>
          <Type>Microsoft.ConfigurationManagement.AdminConsole.UIResources.Properties.Resources.resources</Type>
        </ResourceAssembly>
        <ImageResourceName>SUM_Update</ImageResourceName>
      </ImagesDescription>
      <Executable>
        <FilePath>"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"</FilePath>
        <Parameters>-executionpolicy bypass -file #PATH# -SiteServer #SERVER# -Option SupersededOnly -RemoveContent -ShowProgress -Verbose</Parameters>
      </Executable>
    </ActionDescription>
  </ActionGroups>
  <ActionGroups>
    <ActionDescription Class="Executable" DisplayName="Superseded Only (Keep content)" MnemonicDisplayName="Superseded Only (Keep content)" Description="Superseded Only (Keep content)">
      <ShowOn>
        <string>DefaultHomeTab</string>
        <string>ContextMenu</string>
      </ShowOn>
      <ResourceAssembly>
        <Assembly>AdminUI.CollectionProperty.dll</Assembly>
        <Type>Microsoft.ConfigurationManagement.AdminConsole.CollectionProperty.Properties.Resources.resources</Type>
      </ResourceAssembly>
      <ImagesDescription>
        <ResourceAssembly>
          <Assembly>AdminUI.UIResources.dll</Assembly>
          <Type>Microsoft.ConfigurationManagement.AdminConsole.UIResources.Properties.Resources.resources</Type>
        </ResourceAssembly>
        <ImageResourceName>SUM_Update</ImageResourceName>
      </ImagesDescription>
      <Executable>
        <FilePath>"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"</FilePath>
        <Parameters>-executionpolicy bypass -file #PATH# -SiteServer #SERVER# -Option SupersededOnly -ShowProgress -Verbose</Parameters>
      </Executable>
    </ActionDescription>
  </ActionGroups>
</ActionDescription>
'@ #endregion
			
			$XMLData | Out-File -FilePath (Join-Path -Path $ScriptRoot -ChildPath $XMLFile) -Force
			$ScriptFileData | Out-File -FilePath (Join-Path -Path $ScriptRoot -ChildPath $ScriptFile) -Force
			
			# Edit XML files to contain correct path to script file
			if (Test-Path -Path (Join-Path -Path $ScriptRoot -ChildPath $XMLFile) -PathType Leaf -ErrorAction SilentlyContinue)
			{
				Write-Verbose -Message "Editing '$($XMLFile)' to contain the correct path to script file"
				$XMLDataFilePath = Join-Path -Path $ScriptRoot -ChildPath $XMLFile
				[xml]$XMLDataFile = Get-Content -Path $XMLDataFilePath
				$XMLDataFile.ActionDescription.ActionGroups.ActionDescription.Executable | Where-Object { $_.FilePath -like "*powershell.exe*" } | ForEach-Object {
					$_.Parameters = $_.Parameters.Replace("#PATH#", "'$($Path)\$($ScriptFile)'").Replace("'", '"').Replace("#SERVER#", "$($SiteServer)")
				}
				$XMLDataFile.Save($XMLDataFilePath)
			}
			else
			{
				Write-Warning -Message "Unable to load '$($XMLFile)' from '$($Path)'. Make sure the file is located in the same folder as the installation script."; break
			}
			# Copy XML to Software Update Groups node
			Write-Verbose -Message "Copying '$($XMLFile)' to Software Update Groups node action folder"
			$XMLStorageSUGArgs = @{
				Path = Join-Path -Path $ScriptRoot -ChildPath $XMLFile
				Destination = Join-Path -Path $AdminConsoleRoot -ChildPath "XmlStorage\Extensions\Actions\$($Node)\$($XMLFile)"
				Force = $true
			}
			Copy-Item @XMLStorageSUGArgs
			# Copy script file to specified path
			Write-Verbose -Message "Copying '$($ScriptFile)' to: '$($Path)'"
			$ScriptFileArgs = @{
				Path = Join-Path -Path $ScriptRoot -ChildPath $ScriptFile
				Destination = Join-Path -Path $Path -ChildPath $ScriptFile
				Force = $true
			}
			Copy-Item @ScriptFileArgs
			
			#Cleanup
			Remove-Item -Path (Join-Path -Path $ScriptRoot -ChildPath $XMLFile) -Force
			Remove-Item -Path (Join-Path -Path $ScriptRoot -ChildPath $ScriptFile) -Force
		}
		"Uninstall" {
			# Remove XML file from Software Update Groups node
			Write-Verbose -Message "Removing '$($XMLFile)' from Software Update Groups node action folder"
			$XMLStorageSUGArgs = @{
				Path = Join-Path -Path $AdminConsoleRoot -ChildPath "XmlStorage\Extensions\Actions\$($Node)\$($XMLFile)"
				Force = $true
				ErrorAction = "SilentlyContinue"
			}
			if (Test-Path -Path (Join-Path -Path $AdminConsoleRoot -ChildPath "XmlStorage\Extensions\Actions\$($Node)\$($XMLFile)"))
			{
				Remove-Item @XMLStorageSUGArgs
			}
			else
			{
				Write-Warning -Message "Unable to locate '$(Join-Path -Path $AdminConsoleRoot -ChildPath "XmlStorage\Extensions\Actions\$($Node)\$($XMLFile)")'"
			}
			# Remove script file from specified path
			Write-Verbose -Message "Removing '$($ScriptFile)' from '$($Path)'"
			$ScriptFileArgs = @{
				Path = Join-Path -Path $Path -ChildPath $ScriptFile
				Force = $true
			}
			if (Test-Path -Path (Join-Path -Path $Path -ChildPath $ScriptFile))
			{
				Remove-Item @ScriptFileArgs
			}
			else
			{
				Write-Warning -Message "Unable to locate '$(Join-Path -Path $Path -ChildPath $ScriptFile)'"
			}
		}
	}
}

