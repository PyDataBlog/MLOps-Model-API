// In the 5 by 5 matrix below, the minimal path sum from the top left to the
// bottom right, by only moving to the right and down, is indicated in bold red
// and is equal to 2427.
//
// [131]  673   234   103    18
// [201] [ 96] [342]  965   150
//  630   803  [746] [422]  111
//  537   699   497  [121]  956
//  805   732   524  [ 37] [331]
//
// Find the minimal path sum, in matrix.txt (right click and "Save Link/Target
// As..."), a 31K text file containing a 80 by 80 matrix, from the top left to
// the bottom right by only moving right and down.

package s0081

import (
	"github.com/peterstace/project-euler/graph"
)

type matrix [][]int // assumed to be square

func Answer() interface{} {
	return parameterised(data)
}

func parameterised(m matrix) interface{} {
	g, start, end := matrixToGraph(m)
	return g.ShortestPath(start)[end]
}

func matrixToGraph(m matrix) (g graph.WeightedDigraph, start int, end int) {
	g = graph.NewOrderZeroWeightedDigraph()
	n := len(m)
	node := func(i, j int) int {
		return i*n + j
	}
	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			if i > 0 {
				g.AddEdge(node(i-1, j), node(i, j), float64(m[i][j]))
			}
			if j > 0 {
				g.AddEdge(node(i, j-1), node(i, j), float64(m[i][j]))
			}
		}
	}
	g.AddEdge(-1, node(0, 0), float64(m[0][0]))
	return g, -1, node(n-1, n-1)
}
