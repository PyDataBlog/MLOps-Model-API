/*

  Made with love by ..
  ______ _  __ _          _____        __ _
 |  ____(_)/ _| |        / ____|      / _| |
 | |__   _| |_| |_ _   _| (___   ___ | |_| |_
 |  __| | |  _| __| | | |\___ \ / _ \|  _| __|
 | |    | | | | |_| |_| |____) | (_) | | | |_
 |_|    |_|_|  \__|\__, |_____/ \___/|_|  \__|
                    __/ |
                   |___/

  Website  : http://www.fiftysoft.com
  Facebook : https://www.facebook.com/fiftysoft
  Github   : https://www.github.com/fiftysoft
  Twitter  : https://twitter.com/fiftysoft
  Mobile   : +9647713000846
  Mobile   : +9467516631415

*/

package validation

import (
	"unicode/utf8"
	"gopkg.in/mgo.v2/bson"
	"strconv"
)

func (v *validation) Bool() *validation  {

	_ , err := strconv.ParseBool(v.value.(string))

	if err != nil {
		v.errors = append(v.errors,massages{}.Boolean(v.name))
	}

	return v

}

func (v *validation) Mobile(code string) *validation  {

	switch code {

		case "IQ": if !mobileIQ.MatchString(v.value.(string)) {
			v.errors = append(v.errors,massages{}.Mobile(v.name))
		}

	}

	return v
}

func (v *validation) HexColor() *validation  {

	if !hexColor.MatchString(v.value.(string)) {
		v.errors = append(v.errors,massages{}.HexColor(v.name))
	}

	return v
}

func (v *validation) ObjectID() *validation  {

	if v.value.(string) == "" || !bson.IsObjectIdHex(v.value.(string)) {
		v.errors = append(v.errors,massages{}.ObjectID(v.name))
	}

	return v
}

func (v *validation) In(elements []string) *validation {

	for _, e := range elements {
		if e == v.value.(string) {
			return v
		}
	}

	v.errors = append(v.errors,massages{}.In(v.name))

	return v

}

func (v *validation) Max(max int) *validation {

	value, err := strconv.Atoi(v.value.(string))

	if err != nil {

		v.errors = append(v.errors,massages{}.Numbers(v.name))

		return v
	}


	if value > max {
		v.errors = append(v.errors,massages{}.Max(v.name,max))
	}

	return v
}

func (v *validation) Min(min int) *validation {

	value, err := strconv.Atoi(v.value.(string))

	if err != nil {

		v.errors = append(v.errors,massages{}.Numbers(v.name))

		return v
	}

	if value < min {
		v.errors = append(v.errors,massages{}.Min(v.name,min))
	}

	return v
}

func (v *validation) Length(max,min interface{}) *validation {

	length := utf8.RuneCountInString(v.value.(string))

	if max != nil {

		if length > max.(int) {
			v.errors = append(v.errors,massages{}.LengthMax(v.name,max.(int)))
		}

	}

	if min != nil {

		if length < min.(int)  {
			v.errors = append(v.errors,massages{}.LengthMin(v.name,min.(int)))
		}

	}

	return v

}


func (v *validation) Required() *validation {

	switch v.value.(type) {

		case string:

			if len(clear(v.value.(string))) <= 0 {
				v.errors = append(v.errors, massages{}.Required(v.name))
			}

		default:

			v.errors = append(v.errors, massages{}.Required(v.name))
	}

	return v

}