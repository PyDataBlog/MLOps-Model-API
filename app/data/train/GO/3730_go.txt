package main

import (
	"fmt"
	"sort"
)

// I haven't included fields I don't think are relevant in these Structs, even though
// they might be part of the data GNIP store in the Archive.
// This is mostly a Twitter tweet but includes some more information like Klout since that's
// an enrichment added to the bot's account.

type Result struct {
	Tweets []Tweet `json:"results"`
}

type Tweet struct {
	CreatedAt   string `json:"created_at"`
	TweetId     int64  `json:"id"`
	User        User   `json:"user"`
	FilterLevel string `json:"filter_level"`
	Lang        string `json:"lang"`
}

type User struct {
	UserId      int64   `json:"id"`
	Name        string  `json:"name"`
	ScreenName  string  `json:"screen_name"`
	Derived     Derived `json:"derived"`
	Protected   bool    `json:"protected"`
	FollowersCt int64   `json:"followers_count"`
	FriendsCt   int64   `json:"friends_count"`
	Following   bool    `json:"following"`
	StatusesCt  int64   `json:"statuses_count"`
	Lang        string  `json:"lang"`
}

func (u User) String() string {
	return fmt.Sprintf("%s: %s [%d] lang:%s", u.Name, u.ScreenName, u.UserId, u.Lang)
}

type Derived struct {
	Klout Klout `json:"klout"`
}

type Klout struct {
	Score           int64   `json:"score"`
	InfluenceTopics []Topic `json:"influence_topics"`
	InterestTopics  []Topic `json:"interest_topics"`
}

type Topic struct {
	Score float32 `json:"score"`
	Name  string  `json:"name"`
}

func (t Topic) String() string {
	return fmt.Sprintf("%s (%.2f)", t.Name, t.Score)
}

// sorting stuff so we can sort by users' Klout scores
// https://golang.org/pkg/sort/#example_Interface
type By func(a, b *User) bool

func (by By) Sort(users []User) {
	ts := &tweeterSorter{
		users: users,
		by:    by,
	}

	sort.Sort(ts)
}

type tweeterSorter struct {
	users []User
	by    func(a, b *User) bool
}

func (ts *tweeterSorter) Len() int {
	return len(ts.users)
}

func (ts *tweeterSorter) Swap(i, j int) {
	ts.users[i], ts.users[j] = ts.users[j], ts.users[i]
}

func (ts *tweeterSorter) Less(i, j int) bool {
	return ts.by(&ts.users[i], &ts.users[j])
}
