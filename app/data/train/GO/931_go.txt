package main

import (
	"fmt"
	"net/http"
)

func main() {
	var m map[string]string
	fmt.Printf("len(m):%2d\n", len(m)) // 0

	for k, _ := range m { // nil map iterates zero times
		fmt.Println(k)
	}

	v, ok := m["2"]
	fmt.Printf("v:%s, ok:%v\n\n", v, ok) // zero(string), false

	// m["foo"] = "bar" // panic: assignment to entry in nil map

	//----------------------------------------------------------
	//
	req, err := NewGet(
		"http://www.baidu.com",
		map[string]string{
			"USER-AGENT": "golang/gopher", // 末尾,或}
		}, // 末尾,或)
	)
	fmt.Println("_______________________")
	fmt.Println(req.Method) // GET
	fmt.Println(req.URL)    // http://www.baidu.com
	fmt.Println(req.Header) // map[User-Agent:[golang/gopher]]
	fmt.Println(err)        // nil
	fmt.Println("_______________________")

	//----------------------------------------------------------
	req2, err := NewGet("http://www.baidu.com", map[string]string{}) // ok
	fmt.Println(req2)
	//----------------------------------------------------------
	// nil maps are valid empty maps
	req3, err := NewGet("http://www.baidu.com", nil) // ok
	fmt.Println(req3)
	//----------------------------------------------------------

	// make map
	var m1 map[int]int // nil map
	fmt.Println(m1 == nil)
	fmt.Println("=============")
	m2 := make(map[int]int, 0) // not nil map, but empty map
	fmt.Println(m2 == nil)
	m2[5] = 55      // write to empty map is ok
	fmt.Println(m2) // map[5:55]

}

func NewGet(url string, headers map[string]string) (*http.Request, error) {
	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return nil, err
	}
	for k, v := range headers {
		req.Header.Set(k, v)
	}

	return req, nil
}
