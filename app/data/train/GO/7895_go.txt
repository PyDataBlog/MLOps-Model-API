//
//test.go
// Test to see if we can extract details from anonymous structs and generate javascript from them.
//

//package "go+js"
package main

import (
  "fmt"
  "reflect"
)

type TestStruct struct {
    Foo string
    Bar string
}
  
func NewTestStruct() interface{} {
  return TestStruct {
    Foo: string("foo"),
    Bar: string("bar"),
  }
}

type Converter interface {
  Parse(value reflect.Value)
  ParseStruct(value reflect.Value)
  ParseString(value reflect.Value)
  ParseInt(value reflect.Value)
}

type JavaScript struct {}

func (js JavaScript) ParseString(value reflect.Value) {
  fmt.Println("Parsing string:", value)
}

func (js JavaScript) ParseStruct(value reflect.Value) {
  numfields := value.NumField()
  vtype := value.Type()

  fmt.Println("Parsing struct.")
  for i := 0; i < numfields; i++ {
    field := value.Field(i)
    fmt.Println("Parsing struct field:", value.Type().Field(i).Name)
    js.Parse(field)
  }

  for i := 0; i < vtype.NumMethod(); i++ {
    method := vtype.Method(i)
    fmt.Println("Parsing struct method:", method.Name)
    js.Parse(method.Func)
  }
}

func (js JavaScript) ParseFunc(value reflect.Value) {
  fmt.Println("Parsing func.")
  vtype := value.Type()
  numin := vtype.NumIn()
  numout := vtype.NumOut()

  for i := 0; i < numin; i++ {
    fmt.Println("Arg", i, "In")
    fmt.Println(vtype.In(i))
  }

  for i := 0; i < numout; i++ {
    fmt.Println("Arg", i, "Out")
    fmt.Println(vtype.Out(i))
  }
}

func (js JavaScript) Parse(value reflect.Value) {
  switch v := reflect.Indirect(value); v.Kind() {
    case reflect.Struct:
      js.ParseStruct(value)
    case reflect.String:
      js.ParseString(value)
    case reflect.Func:
      js.ParseFunc(value)
    default:
      fmt.Println("Unexpected kind", v.Kind())
  }
}

type TestInterface interface {
  Golly(int64) string
  Gosh(int64) string
}

type TestInterfaceStructure struct {}

func (t TestInterfaceStructure) Golly(i int64) string {
  return "Golly"
}

func (t TestInterfaceStructure) Gosh(i int64) string {
  return "Gosh"
}

func main() {
  js := JavaScript {}
  s := NewTestStruct()
  i := TestInterfaceStructure{}

  valueof := reflect.ValueOf(s)
  js.Parse(valueof)
  js.Parse(reflect.ValueOf(func(gee int64, whizz float64) string {return "baz"}))
  js.Parse(reflect.ValueOf(i))

//  fmt.Println(valueof.Kind())
//  js.Struct(valueof)
}