// Code generated by entc, DO NOT EDIT.

package buildcommit

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the buildcommit type in the database.
	Label = "build_commit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeBuildCommitToBuild holds the string denoting the buildcommittobuild edge name in mutations.
	EdgeBuildCommitToBuild = "BuildCommitToBuild"
	// EdgeBuildCommitToPlanDiffs holds the string denoting the buildcommittoplandiffs edge name in mutations.
	EdgeBuildCommitToPlanDiffs = "BuildCommitToPlanDiffs"
	// Table holds the table name of the buildcommit in the database.
	Table = "build_commits"
	// BuildCommitToBuildTable is the table that holds the BuildCommitToBuild relation/edge.
	BuildCommitToBuildTable = "build_commits"
	// BuildCommitToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	BuildCommitToBuildInverseTable = "builds"
	// BuildCommitToBuildColumn is the table column denoting the BuildCommitToBuild relation/edge.
	BuildCommitToBuildColumn = "build_commit_build_commit_to_build"
	// BuildCommitToPlanDiffsTable is the table that holds the BuildCommitToPlanDiffs relation/edge.
	BuildCommitToPlanDiffsTable = "plan_diffs"
	// BuildCommitToPlanDiffsInverseTable is the table name for the PlanDiff entity.
	// It exists in this package in order to avoid circular dependency with the "plandiff" package.
	BuildCommitToPlanDiffsInverseTable = "plan_diffs"
	// BuildCommitToPlanDiffsColumn is the table column denoting the BuildCommitToPlanDiffs relation/edge.
	BuildCommitToPlanDiffsColumn = "plan_diff_plan_diff_to_build_commit"
)

// Columns holds all SQL columns for buildcommit fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRevision,
	FieldState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "build_commits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"build_commit_build_commit_to_build",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeROOT    Type = "ROOT"
	TypeREBUILD Type = "REBUILD"
	TypeDELETE  Type = "DELETE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeROOT, TypeREBUILD, TypeDELETE:
		return nil
	default:
		return fmt.Errorf("buildcommit: invalid enum value for type field: %q", _type)
	}
}

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StatePLANNING   State = "PLANNING"
	StateINPROGRESS State = "INPROGRESS"
	StateAPPLIED    State = "APPLIED"
	StateCANCELLED  State = "CANCELLED"
	StateAPPROVED   State = "APPROVED"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StatePLANNING, StateINPROGRESS, StateAPPLIED, StateCANCELLED, StateAPPROVED:
		return nil
	default:
		return fmt.Errorf("buildcommit: invalid enum value for state field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (s State) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *State) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = State(str)
	if err := StateValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid State", str)
	}
	return nil
}
