package hardwareDesign

/*
import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_CreateView_succeeds(t *testing.T) {
	view := CreateView()
	assert.NotNil(t, view)
}

func Test_CreateModule_simple_succeeds(t *testing.T) {
	view := CreateView()
	err := view.AddModule("testName")
	assert.Nil(t, err)
}

func Test_CreateModule_nameAliasing_fails(t *testing.T) {
	view := CreateView()
	moduleName := "testName"
	_ = view.AddModule(moduleName)
	err := view.AddModule(moduleName)
	assert.NotNil(t, err)
}

func Test_AddInstance_CheckInstantiatedInstanceHasAllTheSourcePortAsPins(t *testing.T) {
	view := CreateView()
	moduleTop := "top"
	moduleLeaf := "leaf"
	instanceName := "leaf1"
	portNames := map[string]struct{}{
		"net1": struct{}{},
		"net2": struct{}{},
		"net3": struct{}{},
	}

	_ = view.AddModule(moduleTop)
	_ = view.AddModule(moduleLeaf)

	modLeaf, _ := view.GetModuleByName(moduleLeaf)

	for name := range portNames {
		modLeaf.PortManager().AddPort(name, Output)
	}

	modTop, _ := view.GetModuleByName(moduleTop)
	modTop.InstanceManager().AddInstance(modLeaf, instanceName)

	inst, _ := modTop.InstanceManager().GetInstanceByName(instanceName)
	pinList, _ := inst.PinManager().ListPins()

	for _, pin := range pinList {
		_, exists := portNames[pin.Name()]
		assert.True(t, exists)
		delete(portNames, pin.Name())
	}

}

func Test_AddInstance_CheckInstantiatedInstanceHasAllTheSourcePortAsPinsAfterInstantiation(t *testing.T) {
	view := CreateView()
	moduleTop := "top"
	moduleLeaf := "leaf"
	instanceName := "leaf1"
	portNames := map[string]struct{}{
		"net1": struct{}{},
		"net2": struct{}{},
		"net3": struct{}{},
	}

	_ = view.AddModule(moduleTop)
	_ = view.AddModule(moduleLeaf)

	modLeaf, _ := view.GetModuleByName(moduleLeaf)

	for name := range portNames {
		modLeaf.PortManager().AddPort(name, Output)
	}

	modTop, _ := view.GetModuleByName(moduleTop)
	modTop.InstanceManager().AddInstance(modLeaf, instanceName)

	inst, _ := modTop.InstanceManager().GetInstanceByName(instanceName)

	modLeaf.PortManager().AddPort("newNet", Input)
	portNames["newNet"] = struct{}{}

	pinList, _ := inst.PinManager().ListPins()

	for _, pin := range pinList {
		_, exists := portNames[pin.Name()]
		assert.True(t, exists)
		delete(portNames, pin.Name())
	}

}
*/
