package msgp

import (
	"bytes"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestReadInt64Bytes(t *testing.T) {
	//Negative fixed int
	obtained, rest, err := ReadInt64Bytes([]byte{0xff})
	expected := int64(-1)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//Positive fixed int
	obtained, rest, err = ReadInt64Bytes([]byte{0x7f})
	expected = int64(127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int8
	obtained, rest, err = ReadInt64Bytes([]byte{0xd0, 0x81})
	expected = int64(-127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int16
	obtained, rest, err = ReadInt64Bytes([]byte{0xd1, 0x40, 0x00})
	expected = int64(16384)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int32
	obtained, rest, err = ReadInt64Bytes([]byte{0xd2, 0x00, 0x01, 0x00, 0x00})
	expected = int64(65536)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int64
	obtained, rest, err = ReadInt64Bytes([]byte{0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	expected = int64(-9223372036854775808)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

}

func TestReadInt32Bytes(t *testing.T) {
	//Negative fixed int
	obtained, rest, err := ReadInt32Bytes([]byte{0xff})
	expected := int32(-1)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//Positive fixed int
	obtained, rest, err = ReadInt32Bytes([]byte{0x7f})
	expected = int32(127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int8
	obtained, rest, err = ReadInt32Bytes([]byte{0xd0, 0x81})
	expected = int32(-127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int16
	obtained, rest, err = ReadInt32Bytes([]byte{0xd1, 0x40, 0x00})
	expected = int32(16384)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int32
	obtained, rest, err = ReadInt32Bytes([]byte{0xd2, 0x00, 0x01, 0x00, 0x00})
	expected = int32(65536)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadInt16Bytes(t *testing.T) {
	//Negative fixed int
	obtained, rest, err := ReadInt16Bytes([]byte{0xff})
	expected := int16(-1)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//Positive fixed int
	obtained, rest, err = ReadInt16Bytes([]byte{0x7f})
	expected = int16(127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int8
	obtained, rest, err = ReadInt16Bytes([]byte{0xd0, 0x81})
	expected = int16(-127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int16
	obtained, rest, err = ReadInt16Bytes([]byte{0xd1, 0x40, 0x00})
	expected = int16(16384)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadInt8Bytes(t *testing.T) {
	//Negative fixed int
	obtained, rest, err := ReadInt8Bytes([]byte{0xff})
	expected := int8(-1)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//Positive fixed int
	obtained, rest, err = ReadInt8Bytes([]byte{0x7f})
	expected = int8(127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int8
	obtained, rest, err = ReadInt8Bytes([]byte{0xd0, 0x81})
	expected = int8(-127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadIntBytes(t *testing.T) {
	//Negative fixed int
	obtained, rest, err := ReadIntBytes([]byte{0xff})
	expected := int(-1)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//Positive fixed int
	obtained, rest, err = ReadIntBytes([]byte{0x7f})
	expected = int(127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int8
	obtained, rest, err = ReadIntBytes([]byte{0xd0, 0x81})
	expected = int(-127)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int16
	obtained, rest, err = ReadIntBytes([]byte{0xd1, 0x40, 0x00})
	expected = int(16384)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int32
	obtained, rest, err = ReadIntBytes([]byte{0xd2, 0x00, 0x01, 0x00, 0x00})
	expected = int(65536)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//int64
	obtained, rest, err = ReadIntBytes([]byte{0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	expected = int(-9223372036854775808)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadUInt64Bytes(t *testing.T) {
	//Positive fixed int
	obtained, rest, err := ReadUInt64Bytes([]byte{0x00})
	expected := uint64(0)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint8
	obtained, rest, err = ReadUInt64Bytes([]byte{0xcc, 0x80})
	expected = uint64(128)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint16
	obtained, rest, err = ReadUInt64Bytes([]byte{0xcd, 0x40, 0x00})
	expected = uint64(16384)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint32
	obtained, rest, err = ReadUInt64Bytes([]byte{0xce, 0x00, 0x01, 0x00, 0x00})
	expected = uint64(65536)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint64
	obtained, rest, err = ReadUInt64Bytes([]byte{0xcf, 0x01, 0x47, 0xae, 0x14, 0x7a, 0xe1, 0x47, 0xae})
	expected = uint64(92233720368547758)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadUInt32Bytes(t *testing.T) {
	//Positive fixed int
	obtained, rest, err := ReadUInt32Bytes([]byte{0x00})
	expected := uint32(0)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint8
	obtained, rest, err = ReadUInt32Bytes([]byte{0xcc, 0x80})
	expected = uint32(128)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint16
	obtained, rest, err = ReadUInt32Bytes([]byte{0xcd, 0x40, 0x00})
	expected = uint32(16384)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint32
	obtained, rest, err = ReadUInt32Bytes([]byte{0xce, 0x00, 0x01, 0x00, 0x00})
	expected = uint32(65536)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadUiIt16Bytes(t *testing.T) {
	//Positive fixed int
	obtained, rest, err := ReadUInt16Bytes([]byte{0x00})
	expected := uint16(0)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint8
	obtained, rest, err = ReadUInt16Bytes([]byte{0xcc, 0x80})
	expected = uint16(128)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint16
	obtained, rest, err = ReadUInt16Bytes([]byte{0xcd, 0x40, 0x00})
	expected = uint16(16384)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadUInt8Bytes(t *testing.T) {
	//Positive fixed int
	obtained, rest, err := ReadUInt8Bytes([]byte{0x00})
	expected := uint8(0)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint8
	obtained, rest, err = ReadUInt8Bytes([]byte{0xcc, 0x80})
	expected = uint8(128)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadUIntBytes(t *testing.T) {
	//Positive fixed int
	obtained, rest, err := ReadUIntBytes([]byte{0x00})
	expected := uint(0)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint8
	obtained, rest, err = ReadUIntBytes([]byte{0xcc, 0x80})
	expected = uint(128)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint16
	obtained, rest, err = ReadUIntBytes([]byte{0xcd, 0x40, 0x00})
	expected = uint(16384)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint32
	obtained, rest, err = ReadUIntBytes([]byte{0xce, 0x00, 0x01, 0x00, 0x00})
	expected = uint(65536)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	//uint64
	obtained, rest, err = ReadUIntBytes([]byte{0xcf, 0x01, 0x47, 0xae, 0x14, 0x7a, 0xe1, 0x47, 0xae})
	expected = uint(92233720368547758)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadStringBytes(t *testing.T) {
	obtained, rest, err := ReadStringBytes([]byte{0xab, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64})
	expected := "Hello World"

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	obtained, rest, err = ReadStringBytes([]byte{
		0xd9, 0x21, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31})
	expected = string(bytes.Repeat([]byte{0x31}, 33))

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	obtained, rest, err = ReadStringBytes([]byte{
		0xda, 0x01, 0x04, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31})
	expected = string(bytes.Repeat([]byte{0x31}, 260))

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadBytesBytes(t *testing.T) {
	obtained, rest, err := ReadBytesBytes([]byte{0xc4, 0x02, 0x01, 0x02}, nil)
	expected := []byte{0x01, 0x02}

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	obtained, rest, err = ReadBytesBytes([]byte{
		0xc4, 0x21, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
		0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
		0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
		0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
		0x1e, 0x1f, 0x20}, nil)
	expected = []byte{}
	for idx := 0; idx < 33; idx++ {
		expected = append(expected, byte(idx))
	}
	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	obtained, rest, err = ReadBytesBytes([]byte{
		0xc5, 0x01, 0x04, 0x00, 0x01, 0x02, 0x03, 0x04,
		0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
		0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14,
		0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c,
		0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24,
		0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c,
		0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,
		0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44,
		0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
		0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54,
		0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c,
		0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64,
		0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
		0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,
		0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c,
		0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84,
		0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c,
		0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94,
		0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c,
		0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4,
		0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac,
		0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4,
		0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc,
		0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4,
		0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc,
		0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4,
		0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc,
		0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4,
		0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec,
		0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4,
		0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc,
		0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03}, nil)
	expected = []byte{}
	for idx := 0; idx < 260; idx++ {
		expected = append(expected, byte(idx))
	}

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadBoolBytes(t *testing.T) {
	obtained, rest, err := ReadBoolBytes([]byte{0xc2})
	expected := false

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	obtained, rest, err = ReadBoolBytes([]byte{0xc3})
	expected = true

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadNilBytes(t *testing.T) {
	rest, err := ReadNilBytes([]byte{0xc0})
	assert.Equal(t, nil, err)
	assert.Equal(t, []byte{}, rest)
}

func TestReadFloat32Bytes(t *testing.T) {
	obtained, rest, err := ReadFloat32Bytes([]byte{0xca, 0x41, 0x23, 0x33, 0x33})
	expected := float32(10.2)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadFloat64Byte(t *testing.T) {
	obtained, rest, err := ReadFloat64Bytes([]byte{0xcb, 0x40, 0x24, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66})
	expected := float64(10.2)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadArrayHeaderBytes(t *testing.T) {
	//Fixed array
	obtained, rest, err := ReadArrayHeaderBytes([]byte{0x92})
	expected := uint32(2)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	// int16 array
	obtained, rest, err = ReadArrayHeaderBytes([]byte{0xdc, 0x0, 0x12})
	expected = uint32(18)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	// int32 array
	obtained, rest, err = ReadArrayHeaderBytes([]byte{0xdd, 0x0, 0x1, 0x11, 0x70})
	expected = uint32(70000)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)
}

func TestReadMapHeader(t *testing.T) {
	//Fixed map
	obtained, rest, err := ReadMapHeaderBytes([]byte{0x82})
	expected := uint32(2)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	// int16 map
	obtained, rest, err = ReadMapHeaderBytes([]byte{0xde, 0x0, 0x12})
	expected = uint32(18)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

	// int32 map
	obtained, rest, err = ReadMapHeaderBytes([]byte{0xdf, 0x0, 0x1, 0x11, 0x70})
	expected = uint32(70000)

	assert.Equal(t, nil, err)
	assert.Equal(t, expected, obtained)
	assert.Equal(t, []byte{}, rest)

}