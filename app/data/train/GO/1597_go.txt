package book

import (
	"testing"

	"time"

	. "github.com/bborbe/assert"
	booking_booked_event "github.com/bborbe/booking/booked_event"
	booking_shooting "github.com/bborbe/booking/shooting"
	"github.com/bborbe/eventbus"
)

func TestImplementsService(t *testing.T) {
	r := New(nil, nil, nil)
	var i *Service
	err := AssertThat(r, Implements(i))
	if err != nil {
		t.Fatal(err)
	}
}

func TestTimeInFutureEqual(t *testing.T) {
	ti, err := time.Parse(time.RFC3339, "2012-01-02T15:04:05Z")
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	now, err := time.Parse(time.RFC3339, "2012-01-02T15:04:05Z")
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	if err := AssertThat(timeInFuture(ti, now), Is(false)); err != nil {
		t.Fatal(err)
	}
}

func TestTimeInFutureYearGt(t *testing.T) {
	ti, err := time.Parse(time.RFC3339, "2013-01-02T15:04:05Z")
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	now, err := time.Parse(time.RFC3339, "2012-01-02T15:04:05Z")
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	if err := AssertThat(timeInFuture(ti, now), Is(true)); err != nil {
		t.Fatal(err)
	}
}

func TestTimeInFutureMonthGt(t *testing.T) {
	ti, err := time.Parse(time.RFC3339, "2012-02-02T15:04:05Z")
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	now, err := time.Parse(time.RFC3339, "2012-01-02T15:04:05Z")
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	if err := AssertThat(timeInFuture(ti, now), Is(true)); err != nil {
		t.Fatal(err)
	}
}

func TestTimeInFutureDayGt(t *testing.T) {
	ti, err := time.Parse(time.RFC3339, "2012-02-03T15:04:05Z")
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	now, err := time.Parse(time.RFC3339, "2012-01-02T15:04:05Z")
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	if err := AssertThat(timeInFuture(ti, now), Is(true)); err != nil {
		t.Fatal(err)
	}
}

func TestPostEvent(t *testing.T) {
	var err error
	e := eventbus.New()
	counter := 0
	if err := e.RegisterHandler(func(booking_booked_event.BookedEvent) {
		counter++
	}); err != nil {
		t.Fatal(err)
	}
	r := New(nil, e, nil)
	if err := AssertThat(counter, Is(0)); err != nil {
		t.Fatal(err)
	}
	err = r.postEvent(&booking_shooting.Shooting{})
	if err := AssertThat(err, NilValue()); err != nil {
		t.Fatal(err)
	}
	if err := AssertThat(counter, Is(1)); err != nil {
		t.Fatal(err)
	}

}
