// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQtreeCollectionGetParams creates a new QtreeCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQtreeCollectionGetParams() *QtreeCollectionGetParams {
	return &QtreeCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQtreeCollectionGetParamsWithTimeout creates a new QtreeCollectionGetParams object
// with the ability to set a timeout on a request.
func NewQtreeCollectionGetParamsWithTimeout(timeout time.Duration) *QtreeCollectionGetParams {
	return &QtreeCollectionGetParams{
		timeout: timeout,
	}
}

// NewQtreeCollectionGetParamsWithContext creates a new QtreeCollectionGetParams object
// with the ability to set a context for a request.
func NewQtreeCollectionGetParamsWithContext(ctx context.Context) *QtreeCollectionGetParams {
	return &QtreeCollectionGetParams{
		Context: ctx,
	}
}

// NewQtreeCollectionGetParamsWithHTTPClient creates a new QtreeCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewQtreeCollectionGetParamsWithHTTPClient(client *http.Client) *QtreeCollectionGetParams {
	return &QtreeCollectionGetParams{
		HTTPClient: client,
	}
}

/* QtreeCollectionGetParams contains all the parameters to send to the API endpoint
   for the qtree collection get operation.

   Typically these are written to a http.Request.
*/
type QtreeCollectionGetParams struct {

	/* ExportPolicyID.

	   Filter by export_policy.id
	*/
	ExportPolicyIDQueryParameter *int64

	/* ExportPolicyName.

	   Filter by export_policy.name
	*/
	ExportPolicyNameQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FilesystemPath.

	   Filter by filesystem_path
	*/
	FilesystemPathQueryParameter *string

	/* GroupID.

	   Filter by group.id
	*/
	GroupIDQueryParameter *string

	/* GroupName.

	   Filter by group.name
	*/
	GroupNameQueryParameter *string

	/* ID.

	   Filter by id
	*/
	IDQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NasPath.

	   Filter by nas.path
	*/
	NasPathQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* Path.

	   Filter by path
	*/
	PathQueryParameter *string

	/* QosPolicyMaxThroughputIops.

	   Filter by qos_policy.max_throughput_iops
	*/
	QosPolicyMaxThroughputIopsQueryParameter *int64

	/* QosPolicyMaxThroughputMbps.

	   Filter by qos_policy.max_throughput_mbps
	*/
	QosPolicyMaxThroughputMbpsQueryParameter *int64

	/* QosPolicyMinThroughputIops.

	   Filter by qos_policy.min_throughput_iops
	*/
	QosPolicyMinThroughputIopsQueryParameter *int64

	/* QosPolicyMinThroughputMbps.

	   Filter by qos_policy.min_throughput_mbps
	*/
	QosPolicyMinThroughputMbpsQueryParameter *int64

	/* QosPolicyName.

	   Filter by qos_policy.name
	*/
	QosPolicyNameQueryParameter *string

	/* QosPolicyUUID.

	   Filter by qos_policy.uuid
	*/
	QosPolicyUUIDQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SecurityStyle.

	   Filter by security_style
	*/
	SecurityStyleQueryParameter *string

	/* StatisticsIopsRawOther.

	   Filter by statistics.iops_raw.other
	*/
	StatisticsIopsRawOtherQueryParameter *int64

	/* StatisticsIopsRawRead.

	   Filter by statistics.iops_raw.read
	*/
	StatisticsIopsRawReadQueryParameter *int64

	/* StatisticsIopsRawTotal.

	   Filter by statistics.iops_raw.total
	*/
	StatisticsIopsRawTotalQueryParameter *int64

	/* StatisticsIopsRawWrite.

	   Filter by statistics.iops_raw.write
	*/
	StatisticsIopsRawWriteQueryParameter *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatusQueryParameter *string

	/* StatisticsThroughputRawOther.

	   Filter by statistics.throughput_raw.other
	*/
	StatisticsThroughputRawOtherQueryParameter *int64

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawReadQueryParameter *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotalQueryParameter *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWriteQueryParameter *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestampQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UnixPermissions.

	   Filter by unix_permissions
	*/
	UnixPermissionsQueryParameter *int64

	/* UserID.

	   Filter by user.id
	*/
	UserIDQueryParameter *string

	/* UserName.

	   Filter by user.name
	*/
	UserNameQueryParameter *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the qtree collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QtreeCollectionGetParams) WithDefaults() *QtreeCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the qtree collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QtreeCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := QtreeCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the qtree collection get params
func (o *QtreeCollectionGetParams) WithTimeout(timeout time.Duration) *QtreeCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the qtree collection get params
func (o *QtreeCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the qtree collection get params
func (o *QtreeCollectionGetParams) WithContext(ctx context.Context) *QtreeCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the qtree collection get params
func (o *QtreeCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the qtree collection get params
func (o *QtreeCollectionGetParams) WithHTTPClient(client *http.Client) *QtreeCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the qtree collection get params
func (o *QtreeCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExportPolicyIDQueryParameter adds the exportPolicyID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithExportPolicyIDQueryParameter(exportPolicyID *int64) *QtreeCollectionGetParams {
	o.SetExportPolicyIDQueryParameter(exportPolicyID)
	return o
}

// SetExportPolicyIDQueryParameter adds the exportPolicyId to the qtree collection get params
func (o *QtreeCollectionGetParams) SetExportPolicyIDQueryParameter(exportPolicyID *int64) {
	o.ExportPolicyIDQueryParameter = exportPolicyID
}

// WithExportPolicyNameQueryParameter adds the exportPolicyName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithExportPolicyNameQueryParameter(exportPolicyName *string) *QtreeCollectionGetParams {
	o.SetExportPolicyNameQueryParameter(exportPolicyName)
	return o
}

// SetExportPolicyNameQueryParameter adds the exportPolicyName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetExportPolicyNameQueryParameter(exportPolicyName *string) {
	o.ExportPolicyNameQueryParameter = exportPolicyName
}

// WithFieldsQueryParameter adds the fields to the qtree collection get params
func (o *QtreeCollectionGetParams) WithFieldsQueryParameter(fields []string) *QtreeCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the qtree collection get params
func (o *QtreeCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFilesystemPathQueryParameter adds the filesystemPath to the qtree collection get params
func (o *QtreeCollectionGetParams) WithFilesystemPathQueryParameter(filesystemPath *string) *QtreeCollectionGetParams {
	o.SetFilesystemPathQueryParameter(filesystemPath)
	return o
}

// SetFilesystemPathQueryParameter adds the filesystemPath to the qtree collection get params
func (o *QtreeCollectionGetParams) SetFilesystemPathQueryParameter(filesystemPath *string) {
	o.FilesystemPathQueryParameter = filesystemPath
}

// WithGroupIDQueryParameter adds the groupID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithGroupIDQueryParameter(groupID *string) *QtreeCollectionGetParams {
	o.SetGroupIDQueryParameter(groupID)
	return o
}

// SetGroupIDQueryParameter adds the groupId to the qtree collection get params
func (o *QtreeCollectionGetParams) SetGroupIDQueryParameter(groupID *string) {
	o.GroupIDQueryParameter = groupID
}

// WithGroupNameQueryParameter adds the groupName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithGroupNameQueryParameter(groupName *string) *QtreeCollectionGetParams {
	o.SetGroupNameQueryParameter(groupName)
	return o
}

// SetGroupNameQueryParameter adds the groupName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetGroupNameQueryParameter(groupName *string) {
	o.GroupNameQueryParameter = groupName
}

// WithIDQueryParameter adds the id to the qtree collection get params
func (o *QtreeCollectionGetParams) WithIDQueryParameter(id *int64) *QtreeCollectionGetParams {
	o.SetIDQueryParameter(id)
	return o
}

// SetIDQueryParameter adds the id to the qtree collection get params
func (o *QtreeCollectionGetParams) SetIDQueryParameter(id *int64) {
	o.IDQueryParameter = id
}

// WithMaxRecordsQueryParameter adds the maxRecords to the qtree collection get params
func (o *QtreeCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *QtreeCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the qtree collection get params
func (o *QtreeCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNameQueryParameter adds the name to the qtree collection get params
func (o *QtreeCollectionGetParams) WithNameQueryParameter(name *string) *QtreeCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the qtree collection get params
func (o *QtreeCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNasPathQueryParameter adds the nasPath to the qtree collection get params
func (o *QtreeCollectionGetParams) WithNasPathQueryParameter(nasPath *string) *QtreeCollectionGetParams {
	o.SetNasPathQueryParameter(nasPath)
	return o
}

// SetNasPathQueryParameter adds the nasPath to the qtree collection get params
func (o *QtreeCollectionGetParams) SetNasPathQueryParameter(nasPath *string) {
	o.NasPathQueryParameter = nasPath
}

// WithOrderByQueryParameter adds the orderBy to the qtree collection get params
func (o *QtreeCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *QtreeCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the qtree collection get params
func (o *QtreeCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPathQueryParameter adds the path to the qtree collection get params
func (o *QtreeCollectionGetParams) WithPathQueryParameter(path *string) *QtreeCollectionGetParams {
	o.SetPathQueryParameter(path)
	return o
}

// SetPathQueryParameter adds the path to the qtree collection get params
func (o *QtreeCollectionGetParams) SetPathQueryParameter(path *string) {
	o.PathQueryParameter = path
}

// WithQosPolicyMaxThroughputIopsQueryParameter adds the qosPolicyMaxThroughputIops to the qtree collection get params
func (o *QtreeCollectionGetParams) WithQosPolicyMaxThroughputIopsQueryParameter(qosPolicyMaxThroughputIops *int64) *QtreeCollectionGetParams {
	o.SetQosPolicyMaxThroughputIopsQueryParameter(qosPolicyMaxThroughputIops)
	return o
}

// SetQosPolicyMaxThroughputIopsQueryParameter adds the qosPolicyMaxThroughputIops to the qtree collection get params
func (o *QtreeCollectionGetParams) SetQosPolicyMaxThroughputIopsQueryParameter(qosPolicyMaxThroughputIops *int64) {
	o.QosPolicyMaxThroughputIopsQueryParameter = qosPolicyMaxThroughputIops
}

// WithQosPolicyMaxThroughputMbpsQueryParameter adds the qosPolicyMaxThroughputMbps to the qtree collection get params
func (o *QtreeCollectionGetParams) WithQosPolicyMaxThroughputMbpsQueryParameter(qosPolicyMaxThroughputMbps *int64) *QtreeCollectionGetParams {
	o.SetQosPolicyMaxThroughputMbpsQueryParameter(qosPolicyMaxThroughputMbps)
	return o
}

// SetQosPolicyMaxThroughputMbpsQueryParameter adds the qosPolicyMaxThroughputMbps to the qtree collection get params
func (o *QtreeCollectionGetParams) SetQosPolicyMaxThroughputMbpsQueryParameter(qosPolicyMaxThroughputMbps *int64) {
	o.QosPolicyMaxThroughputMbpsQueryParameter = qosPolicyMaxThroughputMbps
}

// WithQosPolicyMinThroughputIopsQueryParameter adds the qosPolicyMinThroughputIops to the qtree collection get params
func (o *QtreeCollectionGetParams) WithQosPolicyMinThroughputIopsQueryParameter(qosPolicyMinThroughputIops *int64) *QtreeCollectionGetParams {
	o.SetQosPolicyMinThroughputIopsQueryParameter(qosPolicyMinThroughputIops)
	return o
}

// SetQosPolicyMinThroughputIopsQueryParameter adds the qosPolicyMinThroughputIops to the qtree collection get params
func (o *QtreeCollectionGetParams) SetQosPolicyMinThroughputIopsQueryParameter(qosPolicyMinThroughputIops *int64) {
	o.QosPolicyMinThroughputIopsQueryParameter = qosPolicyMinThroughputIops
}

// WithQosPolicyMinThroughputMbpsQueryParameter adds the qosPolicyMinThroughputMbps to the qtree collection get params
func (o *QtreeCollectionGetParams) WithQosPolicyMinThroughputMbpsQueryParameter(qosPolicyMinThroughputMbps *int64) *QtreeCollectionGetParams {
	o.SetQosPolicyMinThroughputMbpsQueryParameter(qosPolicyMinThroughputMbps)
	return o
}

// SetQosPolicyMinThroughputMbpsQueryParameter adds the qosPolicyMinThroughputMbps to the qtree collection get params
func (o *QtreeCollectionGetParams) SetQosPolicyMinThroughputMbpsQueryParameter(qosPolicyMinThroughputMbps *int64) {
	o.QosPolicyMinThroughputMbpsQueryParameter = qosPolicyMinThroughputMbps
}

// WithQosPolicyNameQueryParameter adds the qosPolicyName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithQosPolicyNameQueryParameter(qosPolicyName *string) *QtreeCollectionGetParams {
	o.SetQosPolicyNameQueryParameter(qosPolicyName)
	return o
}

// SetQosPolicyNameQueryParameter adds the qosPolicyName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetQosPolicyNameQueryParameter(qosPolicyName *string) {
	o.QosPolicyNameQueryParameter = qosPolicyName
}

// WithQosPolicyUUIDQueryParameter adds the qosPolicyUUID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithQosPolicyUUIDQueryParameter(qosPolicyUUID *string) *QtreeCollectionGetParams {
	o.SetQosPolicyUUIDQueryParameter(qosPolicyUUID)
	return o
}

// SetQosPolicyUUIDQueryParameter adds the qosPolicyUuid to the qtree collection get params
func (o *QtreeCollectionGetParams) SetQosPolicyUUIDQueryParameter(qosPolicyUUID *string) {
	o.QosPolicyUUIDQueryParameter = qosPolicyUUID
}

// WithReturnRecordsQueryParameter adds the returnRecords to the qtree collection get params
func (o *QtreeCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *QtreeCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the qtree collection get params
func (o *QtreeCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the qtree collection get params
func (o *QtreeCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *QtreeCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the qtree collection get params
func (o *QtreeCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSecurityStyleQueryParameter adds the securityStyle to the qtree collection get params
func (o *QtreeCollectionGetParams) WithSecurityStyleQueryParameter(securityStyle *string) *QtreeCollectionGetParams {
	o.SetSecurityStyleQueryParameter(securityStyle)
	return o
}

// SetSecurityStyleQueryParameter adds the securityStyle to the qtree collection get params
func (o *QtreeCollectionGetParams) SetSecurityStyleQueryParameter(securityStyle *string) {
	o.SecurityStyleQueryParameter = securityStyle
}

// WithStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) *QtreeCollectionGetParams {
	o.SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther)
	return o
}

// SetStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) {
	o.StatisticsIopsRawOtherQueryParameter = statisticsIopsRawOther
}

// WithStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) *QtreeCollectionGetParams {
	o.SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead)
	return o
}

// SetStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) {
	o.StatisticsIopsRawReadQueryParameter = statisticsIopsRawRead
}

// WithStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) *QtreeCollectionGetParams {
	o.SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal)
	return o
}

// SetStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) {
	o.StatisticsIopsRawTotalQueryParameter = statisticsIopsRawTotal
}

// WithStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) *QtreeCollectionGetParams {
	o.SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite)
	return o
}

// SetStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) {
	o.StatisticsIopsRawWriteQueryParameter = statisticsIopsRawWrite
}

// WithStatisticsStatusQueryParameter adds the statisticsStatus to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsStatusQueryParameter(statisticsStatus *string) *QtreeCollectionGetParams {
	o.SetStatisticsStatusQueryParameter(statisticsStatus)
	return o
}

// SetStatisticsStatusQueryParameter adds the statisticsStatus to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsStatusQueryParameter(statisticsStatus *string) {
	o.StatisticsStatusQueryParameter = statisticsStatus
}

// WithStatisticsThroughputRawOtherQueryParameter adds the statisticsThroughputRawOther to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsThroughputRawOtherQueryParameter(statisticsThroughputRawOther *int64) *QtreeCollectionGetParams {
	o.SetStatisticsThroughputRawOtherQueryParameter(statisticsThroughputRawOther)
	return o
}

// SetStatisticsThroughputRawOtherQueryParameter adds the statisticsThroughputRawOther to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsThroughputRawOtherQueryParameter(statisticsThroughputRawOther *int64) {
	o.StatisticsThroughputRawOtherQueryParameter = statisticsThroughputRawOther
}

// WithStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) *QtreeCollectionGetParams {
	o.SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawReadQueryParameter = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) *QtreeCollectionGetParams {
	o.SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotalQueryParameter = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) *QtreeCollectionGetParams {
	o.SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWriteQueryParameter = statisticsThroughputRawWrite
}

// WithStatisticsTimestampQueryParameter adds the statisticsTimestamp to the qtree collection get params
func (o *QtreeCollectionGetParams) WithStatisticsTimestampQueryParameter(statisticsTimestamp *string) *QtreeCollectionGetParams {
	o.SetStatisticsTimestampQueryParameter(statisticsTimestamp)
	return o
}

// SetStatisticsTimestampQueryParameter adds the statisticsTimestamp to the qtree collection get params
func (o *QtreeCollectionGetParams) SetStatisticsTimestampQueryParameter(statisticsTimestamp *string) {
	o.StatisticsTimestampQueryParameter = statisticsTimestamp
}

// WithSVMNameQueryParameter adds the svmName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *QtreeCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *QtreeCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the qtree collection get params
func (o *QtreeCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUnixPermissionsQueryParameter adds the unixPermissions to the qtree collection get params
func (o *QtreeCollectionGetParams) WithUnixPermissionsQueryParameter(unixPermissions *int64) *QtreeCollectionGetParams {
	o.SetUnixPermissionsQueryParameter(unixPermissions)
	return o
}

// SetUnixPermissionsQueryParameter adds the unixPermissions to the qtree collection get params
func (o *QtreeCollectionGetParams) SetUnixPermissionsQueryParameter(unixPermissions *int64) {
	o.UnixPermissionsQueryParameter = unixPermissions
}

// WithUserIDQueryParameter adds the userID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithUserIDQueryParameter(userID *string) *QtreeCollectionGetParams {
	o.SetUserIDQueryParameter(userID)
	return o
}

// SetUserIDQueryParameter adds the userId to the qtree collection get params
func (o *QtreeCollectionGetParams) SetUserIDQueryParameter(userID *string) {
	o.UserIDQueryParameter = userID
}

// WithUserNameQueryParameter adds the userName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithUserNameQueryParameter(userName *string) *QtreeCollectionGetParams {
	o.SetUserNameQueryParameter(userName)
	return o
}

// SetUserNameQueryParameter adds the userName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetUserNameQueryParameter(userName *string) {
	o.UserNameQueryParameter = userName
}

// WithVolumeNameQueryParameter adds the volumeName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithVolumeNameQueryParameter(volumeName *string) *QtreeCollectionGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDQueryParameter adds the volumeUUID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithVolumeUUIDQueryParameter(volumeUUID *string) *QtreeCollectionGetParams {
	o.SetVolumeUUIDQueryParameter(volumeUUID)
	return o
}

// SetVolumeUUIDQueryParameter adds the volumeUuid to the qtree collection get params
func (o *QtreeCollectionGetParams) SetVolumeUUIDQueryParameter(volumeUUID *string) {
	o.VolumeUUIDQueryParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *QtreeCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExportPolicyIDQueryParameter != nil {

		// query param export_policy.id
		var qrExportPolicyID int64

		if o.ExportPolicyIDQueryParameter != nil {
			qrExportPolicyID = *o.ExportPolicyIDQueryParameter
		}
		qExportPolicyID := swag.FormatInt64(qrExportPolicyID)
		if qExportPolicyID != "" {

			if err := r.SetQueryParam("export_policy.id", qExportPolicyID); err != nil {
				return err
			}
		}
	}

	if o.ExportPolicyNameQueryParameter != nil {

		// query param export_policy.name
		var qrExportPolicyName string

		if o.ExportPolicyNameQueryParameter != nil {
			qrExportPolicyName = *o.ExportPolicyNameQueryParameter
		}
		qExportPolicyName := qrExportPolicyName
		if qExportPolicyName != "" {

			if err := r.SetQueryParam("export_policy.name", qExportPolicyName); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FilesystemPathQueryParameter != nil {

		// query param filesystem_path
		var qrFilesystemPath string

		if o.FilesystemPathQueryParameter != nil {
			qrFilesystemPath = *o.FilesystemPathQueryParameter
		}
		qFilesystemPath := qrFilesystemPath
		if qFilesystemPath != "" {

			if err := r.SetQueryParam("filesystem_path", qFilesystemPath); err != nil {
				return err
			}
		}
	}

	if o.GroupIDQueryParameter != nil {

		// query param group.id
		var qrGroupID string

		if o.GroupIDQueryParameter != nil {
			qrGroupID = *o.GroupIDQueryParameter
		}
		qGroupID := qrGroupID
		if qGroupID != "" {

			if err := r.SetQueryParam("group.id", qGroupID); err != nil {
				return err
			}
		}
	}

	if o.GroupNameQueryParameter != nil {

		// query param group.name
		var qrGroupName string

		if o.GroupNameQueryParameter != nil {
			qrGroupName = *o.GroupNameQueryParameter
		}
		qGroupName := qrGroupName
		if qGroupName != "" {

			if err := r.SetQueryParam("group.name", qGroupName); err != nil {
				return err
			}
		}
	}

	if o.IDQueryParameter != nil {

		// query param id
		var qrID int64

		if o.IDQueryParameter != nil {
			qrID = *o.IDQueryParameter
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NasPathQueryParameter != nil {

		// query param nas.path
		var qrNasPath string

		if o.NasPathQueryParameter != nil {
			qrNasPath = *o.NasPathQueryParameter
		}
		qNasPath := qrNasPath
		if qNasPath != "" {

			if err := r.SetQueryParam("nas.path", qNasPath); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PathQueryParameter != nil {

		// query param path
		var qrPath string

		if o.PathQueryParameter != nil {
			qrPath = *o.PathQueryParameter
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyMaxThroughputIopsQueryParameter != nil {

		// query param qos_policy.max_throughput_iops
		var qrQosPolicyMaxThroughputIops int64

		if o.QosPolicyMaxThroughputIopsQueryParameter != nil {
			qrQosPolicyMaxThroughputIops = *o.QosPolicyMaxThroughputIopsQueryParameter
		}
		qQosPolicyMaxThroughputIops := swag.FormatInt64(qrQosPolicyMaxThroughputIops)
		if qQosPolicyMaxThroughputIops != "" {

			if err := r.SetQueryParam("qos_policy.max_throughput_iops", qQosPolicyMaxThroughputIops); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyMaxThroughputMbpsQueryParameter != nil {

		// query param qos_policy.max_throughput_mbps
		var qrQosPolicyMaxThroughputMbps int64

		if o.QosPolicyMaxThroughputMbpsQueryParameter != nil {
			qrQosPolicyMaxThroughputMbps = *o.QosPolicyMaxThroughputMbpsQueryParameter
		}
		qQosPolicyMaxThroughputMbps := swag.FormatInt64(qrQosPolicyMaxThroughputMbps)
		if qQosPolicyMaxThroughputMbps != "" {

			if err := r.SetQueryParam("qos_policy.max_throughput_mbps", qQosPolicyMaxThroughputMbps); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyMinThroughputIopsQueryParameter != nil {

		// query param qos_policy.min_throughput_iops
		var qrQosPolicyMinThroughputIops int64

		if o.QosPolicyMinThroughputIopsQueryParameter != nil {
			qrQosPolicyMinThroughputIops = *o.QosPolicyMinThroughputIopsQueryParameter
		}
		qQosPolicyMinThroughputIops := swag.FormatInt64(qrQosPolicyMinThroughputIops)
		if qQosPolicyMinThroughputIops != "" {

			if err := r.SetQueryParam("qos_policy.min_throughput_iops", qQosPolicyMinThroughputIops); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyMinThroughputMbpsQueryParameter != nil {

		// query param qos_policy.min_throughput_mbps
		var qrQosPolicyMinThroughputMbps int64

		if o.QosPolicyMinThroughputMbpsQueryParameter != nil {
			qrQosPolicyMinThroughputMbps = *o.QosPolicyMinThroughputMbpsQueryParameter
		}
		qQosPolicyMinThroughputMbps := swag.FormatInt64(qrQosPolicyMinThroughputMbps)
		if qQosPolicyMinThroughputMbps != "" {

			if err := r.SetQueryParam("qos_policy.min_throughput_mbps", qQosPolicyMinThroughputMbps); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyNameQueryParameter != nil {

		// query param qos_policy.name
		var qrQosPolicyName string

		if o.QosPolicyNameQueryParameter != nil {
			qrQosPolicyName = *o.QosPolicyNameQueryParameter
		}
		qQosPolicyName := qrQosPolicyName
		if qQosPolicyName != "" {

			if err := r.SetQueryParam("qos_policy.name", qQosPolicyName); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyUUIDQueryParameter != nil {

		// query param qos_policy.uuid
		var qrQosPolicyUUID string

		if o.QosPolicyUUIDQueryParameter != nil {
			qrQosPolicyUUID = *o.QosPolicyUUIDQueryParameter
		}
		qQosPolicyUUID := qrQosPolicyUUID
		if qQosPolicyUUID != "" {

			if err := r.SetQueryParam("qos_policy.uuid", qQosPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SecurityStyleQueryParameter != nil {

		// query param security_style
		var qrSecurityStyle string

		if o.SecurityStyleQueryParameter != nil {
			qrSecurityStyle = *o.SecurityStyleQueryParameter
		}
		qSecurityStyle := qrSecurityStyle
		if qSecurityStyle != "" {

			if err := r.SetQueryParam("security_style", qSecurityStyle); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawOtherQueryParameter != nil {

		// query param statistics.iops_raw.other
		var qrStatisticsIopsRawOther int64

		if o.StatisticsIopsRawOtherQueryParameter != nil {
			qrStatisticsIopsRawOther = *o.StatisticsIopsRawOtherQueryParameter
		}
		qStatisticsIopsRawOther := swag.FormatInt64(qrStatisticsIopsRawOther)
		if qStatisticsIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.iops_raw.other", qStatisticsIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawReadQueryParameter != nil {

		// query param statistics.iops_raw.read
		var qrStatisticsIopsRawRead int64

		if o.StatisticsIopsRawReadQueryParameter != nil {
			qrStatisticsIopsRawRead = *o.StatisticsIopsRawReadQueryParameter
		}
		qStatisticsIopsRawRead := swag.FormatInt64(qrStatisticsIopsRawRead)
		if qStatisticsIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.iops_raw.read", qStatisticsIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawTotalQueryParameter != nil {

		// query param statistics.iops_raw.total
		var qrStatisticsIopsRawTotal int64

		if o.StatisticsIopsRawTotalQueryParameter != nil {
			qrStatisticsIopsRawTotal = *o.StatisticsIopsRawTotalQueryParameter
		}
		qStatisticsIopsRawTotal := swag.FormatInt64(qrStatisticsIopsRawTotal)
		if qStatisticsIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.iops_raw.total", qStatisticsIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawWriteQueryParameter != nil {

		// query param statistics.iops_raw.write
		var qrStatisticsIopsRawWrite int64

		if o.StatisticsIopsRawWriteQueryParameter != nil {
			qrStatisticsIopsRawWrite = *o.StatisticsIopsRawWriteQueryParameter
		}
		qStatisticsIopsRawWrite := swag.FormatInt64(qrStatisticsIopsRawWrite)
		if qStatisticsIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.iops_raw.write", qStatisticsIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatusQueryParameter != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatusQueryParameter != nil {
			qrStatisticsStatus = *o.StatisticsStatusQueryParameter
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawOtherQueryParameter != nil {

		// query param statistics.throughput_raw.other
		var qrStatisticsThroughputRawOther int64

		if o.StatisticsThroughputRawOtherQueryParameter != nil {
			qrStatisticsThroughputRawOther = *o.StatisticsThroughputRawOtherQueryParameter
		}
		qStatisticsThroughputRawOther := swag.FormatInt64(qrStatisticsThroughputRawOther)
		if qStatisticsThroughputRawOther != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.other", qStatisticsThroughputRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawReadQueryParameter != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawReadQueryParameter != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawReadQueryParameter
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotalQueryParameter != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotalQueryParameter != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotalQueryParameter
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWriteQueryParameter != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWriteQueryParameter != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWriteQueryParameter
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestampQueryParameter != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestampQueryParameter != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestampQueryParameter
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UnixPermissionsQueryParameter != nil {

		// query param unix_permissions
		var qrUnixPermissions int64

		if o.UnixPermissionsQueryParameter != nil {
			qrUnixPermissions = *o.UnixPermissionsQueryParameter
		}
		qUnixPermissions := swag.FormatInt64(qrUnixPermissions)
		if qUnixPermissions != "" {

			if err := r.SetQueryParam("unix_permissions", qUnixPermissions); err != nil {
				return err
			}
		}
	}

	if o.UserIDQueryParameter != nil {

		// query param user.id
		var qrUserID string

		if o.UserIDQueryParameter != nil {
			qrUserID = *o.UserIDQueryParameter
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user.id", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserNameQueryParameter != nil {

		// query param user.name
		var qrUserName string

		if o.UserNameQueryParameter != nil {
			qrUserName = *o.UserNameQueryParameter
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("user.name", qUserName); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUIDQueryParameter != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUIDQueryParameter != nil {
			qrVolumeUUID = *o.VolumeUUIDQueryParameter
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamQtreeCollectionGet binds the parameter fields
func (o *QtreeCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamQtreeCollectionGet binds the parameter order_by
func (o *QtreeCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
