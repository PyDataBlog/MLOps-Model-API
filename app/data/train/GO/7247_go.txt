package grammar

import (
	"testing"

	"github.com/hialin/hialin/parse/internal/engine/lexer"
	"github.com/hialin/hialin/parse/internal/engine/syms"
)

func TestGrammarBasic(t *testing.T) {
	s := syms.NewSymbolSet()
	l := lexer.NewLexer(&s)

	NUM := s.MustGetByName("NUM")
	STAR := l.Operator("*")
	PLUS := l.Operator("+")
	E := s.MustAdd("E", false)
	B := s.MustAdd("B", false)

	grammar := []Rule{
		Rule{E, []syms.SymbolID{E, STAR, B}, DefaultUserFn},
		Rule{E, []syms.SymbolID{E, PLUS, B}, DefaultUserFn},
		Rule{E, []syms.SymbolID{B}, DefaultUserFn},
		Rule{B, []syms.SymbolID{NUM}, DefaultUserFn},
	}
	if g, err := NewGrammar(l.GetSymbolSet(), grammar); !tlog.Ok(err) {
		tlog.Println("Grammar: ", g)
		t.Fatal("Cannot create grammar: ", err)
	} else if g.Rules.Size() == 0 {
		t.Fatal("Empty grammar")
	}
}

func TestGrammarHelper(t *testing.T) {
	s := syms.NewSymbolSet()
	l := lexer.NewLexer(&s)

	functions := make(map[string]UserFn)
	functions["buildFunc"] = DefaultUserFn

	grammar := `
		Func → "func" IDENT '(' ')' '{' Stat '}'	@buildFunc
		Stat → NUM | HEXNUM							@raiseFirst
	`

	if g, err := NewGrammarBlock(l, grammar, functions); !tlog.Ok(err) {
		tlog.Println("Grammar: ", g)
		t.Fatal("Cannot create grammar: ", err)
	} else if g.Rules.Size() == 0 {
		t.Fatal("Empty grammar")
	}
}
