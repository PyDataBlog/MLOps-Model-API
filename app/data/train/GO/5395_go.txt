package controller

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/n7st/octagon/model"
)

type Setting struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (controller *Controller) ConfigValueController(w http.ResponseWriter, r *http.Request) {
	log.Println("/config_value accessed")
	var out string
	var err error

	whitelist := model.SettingsWhitelist()
	key := r.URL.Query().Get("key")
	val := r.URL.Query().Get("value")

	if len(key) == 0 {
		http.Error(w, "No key provided", http.StatusBadRequest)
		return
	}

	if !whitelist[key] {
		http.Error(w, "Key is not permitted", http.StatusBadRequest)
		return
	}

	if len(val) != 0 {
		// Set key to value
		out, err = model.SetConfigValue(key, val)
	} else {
		// Get value from DB
		out, err = model.GetConfigValue(key)
	}

	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	content := Setting{
		Key:   key,
		Value: out,
	}

	jsonContent, jsonErr := json.Marshal(content)

	if jsonErr != nil {
		http.Error(w, jsonErr.Error(), http.StatusInternalServerError)
		return
	}

	w.Write(jsonContent)
}
