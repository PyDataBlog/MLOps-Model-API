// automatically generated by the FlatBuffers compiler, do not modify

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type QueryUserByUidResp struct {
	_tab flatbuffers.Table
}

func GetRootAsQueryUserByUidResp(buf []byte, offset flatbuffers.UOffsetT) *QueryUserByUidResp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QueryUserByUidResp{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *QueryUserByUidResp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QueryUserByUidResp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QueryUserByUidResp) IsExisted() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QueryUserByUidResp) MutateIsExisted(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *QueryUserByUidResp) User(obj *User) *User {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(User)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func QueryUserByUidRespStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func QueryUserByUidRespAddIsExisted(builder *flatbuffers.Builder, isExisted byte) {
	builder.PrependByteSlot(0, isExisted, 0)
}
func QueryUserByUidRespAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(user), 0)
}
func QueryUserByUidRespEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
