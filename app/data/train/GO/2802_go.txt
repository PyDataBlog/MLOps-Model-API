/*

A number consisting entirely of ones is called a repunit. We shall define R(k)
to be a repunit of length k.

For example, R(10) = 1111111111 = 11×41×271×9091, and the sum of these prime
factors is 9414.

Find the sum of the first forty prime factors of R(10^9).

*/

package s0132

import (
	"github.com/peterstace/project-euler/number"
)

func Answer() interface{} {
	return SumPrimeFactors(40, 10e9)
}

func SumPrimeFactors(numFactors int, k int) int {
	var factorsFound int
	var sum int
	nthPrime := number.MakeSieveBackedNthPrime()
	for i := 0; factorsFound < numFactors; i++ {
		p := nthPrime(i)
		if repunit(k, p) == 0 {
			factorsFound++
			sum += p
		}
	}
	return sum
}

// repunit calculates R(k) mod m.
func repunit(k, m int) int {
	if k == 1 {
		return 1
	}
	if k%2 == 0 {
		half := repunit(k/2, m)
		return (tenPow(k/2, m)*half + half) % m
	} else {
		return (10*repunit(k-1, m) + 1) % m
	}
}

// tenPow calculates 10^k mod m.
func tenPow(k, m int) int {
	if k == 0 {
		return 1
	}
	if k%2 == 0 {
		half := tenPow(k/2, m)
		return (half * half) % m
	} else {
		return (10 * tenPow(k-1, m)) % m
	}
}
