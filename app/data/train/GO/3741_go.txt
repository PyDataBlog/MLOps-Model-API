// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type BookService interface {
	GetSheetNames() (r []*SheetInfo, err error)
	// Parameters:
	//  - SheetIndex
	//  - RowIndex
	//  - ColIndex
	GetCellFormattedValue(sheetIndex int32, rowIndex int32, colIndex int32) (r string, err error)
	// Parameters:
	//  - SheetIndex
	//  - RowIndex
	//  - ColIndex
	//  - RawValue
	SetCellRawValue(sheetIndex int32, rowIndex int32, colIndex int32, rawValue string) (r OpResult, err error)
}

type BookServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBookServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BookServiceClient {
	return &BookServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBookServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BookServiceClient {
	return &BookServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *BookServiceClient) GetSheetNames() (r []*SheetInfo, err error) {
	if err = p.sendGetSheetNames(); err != nil {
		return
	}
	return p.recvGetSheetNames()
}

func (p *BookServiceClient) sendGetSheetNames() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSheetNames", thrift.CALL, p.SeqId)
	args0 := NewGetSheetNamesArgs()
	err = args0.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *BookServiceClient) recvGetSheetNames() (value []*SheetInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1 := NewGetSheetNamesResult()
	err = result1.Read(iprot)
	iprot.ReadMessageEnd()
	value = result1.Success
	return
}

// Parameters:
//  - SheetIndex
//  - RowIndex
//  - ColIndex
func (p *BookServiceClient) GetCellFormattedValue(sheetIndex int32, rowIndex int32, colIndex int32) (r string, err error) {
	if err = p.sendGetCellFormattedValue(sheetIndex, rowIndex, colIndex); err != nil {
		return
	}
	return p.recvGetCellFormattedValue()
}

func (p *BookServiceClient) sendGetCellFormattedValue(sheetIndex int32, rowIndex int32, colIndex int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getCellFormattedValue", thrift.CALL, p.SeqId)
	args4 := NewGetCellFormattedValueArgs()
	args4.SheetIndex = sheetIndex
	args4.RowIndex = rowIndex
	args4.ColIndex = colIndex
	err = args4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *BookServiceClient) recvGetCellFormattedValue() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result5 := NewGetCellFormattedValueResult()
	err = result5.Read(iprot)
	iprot.ReadMessageEnd()
	value = result5.Success
	return
}

// Parameters:
//  - SheetIndex
//  - RowIndex
//  - ColIndex
//  - RawValue
func (p *BookServiceClient) SetCellRawValue(sheetIndex int32, rowIndex int32, colIndex int32, rawValue string) (r OpResult, err error) {
	if err = p.sendSetCellRawValue(sheetIndex, rowIndex, colIndex, rawValue); err != nil {
		return
	}
	return p.recvSetCellRawValue()
}

func (p *BookServiceClient) sendSetCellRawValue(sheetIndex int32, rowIndex int32, colIndex int32, rawValue string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("setCellRawValue", thrift.CALL, p.SeqId)
	args8 := NewSetCellRawValueArgs()
	args8.SheetIndex = sheetIndex
	args8.RowIndex = rowIndex
	args8.ColIndex = colIndex
	args8.RawValue = rawValue
	err = args8.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *BookServiceClient) recvSetCellRawValue() (value OpResult, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result9 := NewSetCellRawValueResult()
	err = result9.Read(iprot)
	iprot.ReadMessageEnd()
	value = result9.Success
	return
}

type BookServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BookService
}

func (p *BookServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BookServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BookServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBookServiceProcessor(handler BookService) *BookServiceProcessor {

	self12 := &BookServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self12.processorMap["getSheetNames"] = &bookServiceProcessorGetSheetNames{handler: handler}
	self12.processorMap["getCellFormattedValue"] = &bookServiceProcessorGetCellFormattedValue{handler: handler}
	self12.processorMap["setCellRawValue"] = &bookServiceProcessorSetCellRawValue{handler: handler}
	return self12
}

func (p *BookServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x13.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x13

}

type bookServiceProcessorGetSheetNames struct {
	handler BookService
}

func (p *bookServiceProcessorGetSheetNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSheetNamesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSheetNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSheetNamesResult()
	if result.Success, err = p.handler.GetSheetNames(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSheetNames: "+err.Error())
		oprot.WriteMessageBegin("getSheetNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSheetNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bookServiceProcessorGetCellFormattedValue struct {
	handler BookService
}

func (p *bookServiceProcessorGetCellFormattedValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetCellFormattedValueArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCellFormattedValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetCellFormattedValueResult()
	if result.Success, err = p.handler.GetCellFormattedValue(args.SheetIndex, args.RowIndex, args.ColIndex); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCellFormattedValue: "+err.Error())
		oprot.WriteMessageBegin("getCellFormattedValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getCellFormattedValue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bookServiceProcessorSetCellRawValue struct {
	handler BookService
}

func (p *bookServiceProcessorSetCellRawValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetCellRawValueArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setCellRawValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetCellRawValueResult()
	if result.Success, err = p.handler.SetCellRawValue(args.SheetIndex, args.RowIndex, args.ColIndex, args.RawValue); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setCellRawValue: "+err.Error())
		oprot.WriteMessageBegin("setCellRawValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("setCellRawValue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type GetSheetNamesArgs struct {
}

func NewGetSheetNamesArgs() *GetSheetNamesArgs {
	return &GetSheetNamesArgs{}
}

func (p *GetSheetNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSheetNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSheetNames_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSheetNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSheetNamesArgs(%+v)", *p)
}

type GetSheetNamesResult struct {
	Success []*SheetInfo `thrift:"success,0"`
}

func NewGetSheetNamesResult() *GetSheetNamesResult {
	return &GetSheetNamesResult{}
}

func (p *GetSheetNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSheetNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*SheetInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem14 := NewSheetInfo()
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14)
		}
		p.Success = append(p.Success, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetSheetNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSheetNames_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSheetNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSheetNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSheetNamesResult(%+v)", *p)
}

type GetCellFormattedValueArgs struct {
	SheetIndex int32 `thrift:"sheetIndex,1"`
	RowIndex   int32 `thrift:"rowIndex,2"`
	ColIndex   int32 `thrift:"colIndex,3"`
}

func NewGetCellFormattedValueArgs() *GetCellFormattedValueArgs {
	return &GetCellFormattedValueArgs{}
}

func (p *GetCellFormattedValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCellFormattedValueArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.SheetIndex = v
	}
	return nil
}

func (p *GetCellFormattedValueArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RowIndex = v
	}
	return nil
}

func (p *GetCellFormattedValueArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ColIndex = v
	}
	return nil
}

func (p *GetCellFormattedValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCellFormattedValue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCellFormattedValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sheetIndex", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sheetIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SheetIndex)); err != nil {
		return fmt.Errorf("%T.sheetIndex (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sheetIndex: %s", p, err)
	}
	return err
}

func (p *GetCellFormattedValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rowIndex", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:rowIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.RowIndex)); err != nil {
		return fmt.Errorf("%T.rowIndex (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:rowIndex: %s", p, err)
	}
	return err
}

func (p *GetCellFormattedValueArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colIndex", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:colIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ColIndex)); err != nil {
		return fmt.Errorf("%T.colIndex (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:colIndex: %s", p, err)
	}
	return err
}

func (p *GetCellFormattedValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCellFormattedValueArgs(%+v)", *p)
}

type GetCellFormattedValueResult struct {
	Success string `thrift:"success,0"`
}

func NewGetCellFormattedValueResult() *GetCellFormattedValueResult {
	return &GetCellFormattedValueResult{}
}

func (p *GetCellFormattedValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCellFormattedValueResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetCellFormattedValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCellFormattedValue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCellFormattedValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetCellFormattedValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCellFormattedValueResult(%+v)", *p)
}

type SetCellRawValueArgs struct {
	SheetIndex int32  `thrift:"sheetIndex,1"`
	RowIndex   int32  `thrift:"rowIndex,2"`
	ColIndex   int32  `thrift:"colIndex,3"`
	RawValue   string `thrift:"rawValue,4"`
}

func NewSetCellRawValueArgs() *SetCellRawValueArgs {
	return &SetCellRawValueArgs{}
}

func (p *SetCellRawValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetCellRawValueArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.SheetIndex = v
	}
	return nil
}

func (p *SetCellRawValueArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RowIndex = v
	}
	return nil
}

func (p *SetCellRawValueArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ColIndex = v
	}
	return nil
}

func (p *SetCellRawValueArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.RawValue = v
	}
	return nil
}

func (p *SetCellRawValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setCellRawValue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetCellRawValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sheetIndex", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sheetIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SheetIndex)); err != nil {
		return fmt.Errorf("%T.sheetIndex (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sheetIndex: %s", p, err)
	}
	return err
}

func (p *SetCellRawValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rowIndex", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:rowIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.RowIndex)); err != nil {
		return fmt.Errorf("%T.rowIndex (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:rowIndex: %s", p, err)
	}
	return err
}

func (p *SetCellRawValueArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colIndex", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:colIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ColIndex)); err != nil {
		return fmt.Errorf("%T.colIndex (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:colIndex: %s", p, err)
	}
	return err
}

func (p *SetCellRawValueArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rawValue", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:rawValue: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RawValue)); err != nil {
		return fmt.Errorf("%T.rawValue (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:rawValue: %s", p, err)
	}
	return err
}

func (p *SetCellRawValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetCellRawValueArgs(%+v)", *p)
}

type SetCellRawValueResult struct {
	Success OpResult `thrift:"success,0"`
}

func NewSetCellRawValueResult() *SetCellRawValueResult {
	return &SetCellRawValueResult{
		Success: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *SetCellRawValueResult) IsSetSuccess() bool {
	return int64(p.Success) != math.MinInt32-1
}

func (p *SetCellRawValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetCellRawValueResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = OpResult(v)
	}
	return nil
}

func (p *SetCellRawValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setCellRawValue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetCellRawValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SetCellRawValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetCellRawValueResult(%+v)", *p)
}
