
We have presented \toolname, 
a refinement type checker to Haskell 
adjusted (using a termination checker)
to ensure soundness under Haskell's lazy evaluation. 
%
\begin{comment}
Refinement types offer an automatic means 
of verifying semantic properties of programs, 
by decorating types with predicates from logics 
efficiently decidable by modern SMT solvers.
For example, the refinement type 
@{v: Int | v > 0}@
denotes the basic type \ttcode{Int} refined with a logical
predicate over the ``value variable" \ttcode{v}.
This type corresponds to the set of \ttcode{Int} values 
\ttcode{v} which additionally satisfy the logical predicate, 
\ie the set of positive integers.  
The (dependent) function type 
@x:{v:Int| v > 0} -> {v:Int| v < x}@
describes functions that take a positive argument 
\ttcode{x} and return an integer less than \ttcode{x}.
%
\end{comment}
Following standard refinement typing, \toolname reduces
refinement type checking to \emph{subtyping} queries 
of the form ${\cstr{\Gamma}{\valu}{\tau}{p}{\tau}{q}}$,
where $p$ and $q$ are refinement predicates. 
These subtyping queries reduce to logical \emph{validity} 
queries of the form
${\dbrkts{\Gamma} \wedge p \Rightarrow q}$, which can be 
automatically discharged using SMT solvers~\cite{z3}. 

Unfortunately, the automatic verification 
%% (\ie automatic type \emph{checking} not inference)
offered by refinements has come at a price. 
To ensure decidable checking with SMT solvers, the 
refinements are quantifier-free predicates drawn from a
decidable logic.  This significantly limits expressiveness by 
precluding specifications that enable abstraction over the 
refinements (\ie invariants). For example, consider the 
following higher-order for-loop where @set i x v@ returns 
the vector @v@ updated at index @i@ with the value @x@. 

\begin{code}
  for :: Int -> Int -> a -> (Int -> a -> a) -> a
  for lo hi x body      = loop lo x 
    where loop i x 
            | i < hi    = loop (i+1) (body i x)
            | otherwise = x
  
  initUpto :: Vec a -> a -> Int -> Vec a 
  initUpto a x n = for 0 n a (\i -> set i x) 
\end{code}

We would like to 
verify that @initUpto@ returns a vector whose \emph{first}
@n@ elements are equal to @x@. 
In a first-order setting, we could achieve the above with 
a loop invariant that asserted that at the $\ttcode{i}^{th}$
iteration, the first @i@ elements of the vector were 
already initalized to @x@. 
%
However, in our higher-order setting we require a means 
of \emph{abstracting} over possible invariants, each of which can
\emph{depend on} the iteration index @i@. 
%
Higher-order logics like Coq and Agda permit such quantification 
over invariants. Alas, validity in such logics is well outside the 
realm of decidability, precluding automatic verification. 

In this chapter, we present \emph{abstract refinement types} 
which enable abstraction (quantification) over the refinements 
of data- and function-types. Our key insight is that we can 
preserve SMT-based decidable type checking by encoding 
abstract refinements as \emph{uninterpreted} propositions 
in the refinement logic. 
%This insight yields the following contributions.
This yields several contributions:
%
\begin{itemize}
\item First, we illustrate how abstract refinements yield a variety 
of sophisticated means for reasoning about high-level program 
constructs (\S \ref{sec:abstractrefinements:overview}), including:
\emph{parametric} refinements for type classes,
\emph{index-dependent} refinements for key-value maps,
\emph{recursive} refinements for data structures, and
\emph{inductive} refinements for higher-order traversal routines.

\item Second, we demonstrate that type checking remains 
decidable (\S \ref{sec:abstractrefinements:check}) by showing a fully automatic
procedure that uses SMT solvers, or to be precise, 
decision procedures based on congruence closure~\cite{Nelson81}
to discharge logical subsumption queries over abstract refinements.
%
\item Third, we show that the crucial problem of \emph{inferring}
appropriate instantiations for the (abstract) refinement 
parameters boils down to inferring (non-abstract) refinement
types (\S \ref{sec:abstractrefinements:check}), which we have previously automated 
via the abstract interpretation framework of Liquid Types~\cite{LiquidPLDI08}. 
%
\item Finally, we have implemented abstract refinements in \toolname.
We present experiments using \toolname to concisely specify and 
verify a variety of correctness properties of several 
programs ranging from microbenchmarks to some widely 
used libraries (\S \ref{sec:experiments}).
\end{itemize}
