\documentclass[12pt,a4paper,twoside]{article}
\include{packages}
\include{settings}

\begin{document}
	\maketitle{}
	%\renewcommand{\contentsname}{Contents} %redefinition of the tableofcontent title
	\tableofcontents{}
	\newpage{}
	\section{Introduction} %I
		\subparagraph*{}
			What if we programmed server and its client from scratch, instead of using already existing one? That's the question we asked ourselves when we decided to work on this project, because, well, if they are a lot of programs	that already does that — such as Apache, for instance, we wanted to understand. How does this kind of program work? How does the client and the server communicates together? Even though we could simply read the source codes of Apache, we decided it was much funnier to program our own, and see what we could do. To do so, we needed to decide:
			\begin{itemize}
				\item{} How to organise the files in the server.
				\item{} What will do what (ie: will that be the server that will sort the files when the client wants to list them?).
				\item{} How will they communicate together.
				\item{} What should the client be able / not be able to do.
			\end{itemize}
		\subparagraph*{}
			To answer these questions, we spend quite a few time, as these were important questions. For instance, the file's organisation sets a lot about the server's working way.
	\section{Description of objectives and problem statements} %II
		\subparagraph*{}
			The objective TSiD Project is to write a functional command-line server and its client, using SFML network library to communicate over the internet.
			They will be capable of the following:
			\begin{itemize}
				\item{} Server access is restricted to recorded members
				\item{} A members has access to a public folder and a private folder. He is the only one that can access his private folder
				\item{} When listing files in a folder, the member can see when each one was created and by whom
				\item{} A member can delete a file in the public folder within 24h, given he is the one who uploaded it
				\item{} The server records connection logs
				\item{} A member can change his password
				\item{} He can add a description of a file he uploaded
				\item{} He can also create an account for someone (this is the only way to create an account; mail address required)
				\item{} The server is configurable (ie: allow or not users to access to their private folder)
				Also it may be later on, the server shouldn't store member's password, but their hash
				Both program (client and server) should be available under both Linux and Windows operating systems
				To meet these requirements, we had to answer to the following problems:
				\begin{itemize}
					\item{} How will client and server communicate together? How to handle each command sent by the client?
					\item{} How may we handle folders access and their restrictions?
					\item{} How may we retrieve the list of existing files and folder within a folder?
					\item{} How to store basic informations about uploaded files and folders?
					\item{} How may we display informations in a readable/beautiful way (ie: with colors)?
					\item{} How may we send mails via a program?
					\item{} How may we make/use the configuration of the server?
					\item{} How may the client upload / download a whole folder?
				\end{itemize}
			\end{itemize}
			We must answer to each problem for both platforms (Linux \& Windows)
	\section{Chosen solutions} %III
		\subsection{Client - server communication} %1
			\subparagraph*{}
				In order to allow the server and the client to communicate together, we had to implement a \textit{'standardised grammar'}. For instance, it works as the following:
				\begin{itemize}
					\item{} The client sends \textit{'I want to do this, right here'}
					\item{} The server will then try to fulfill the client's wish. If it can do it, it will reply either \textit{'Alrigth, do so'}, or directly give to the client the expected answer. Otherwise it will send to the client the appropriate answer (action prohibited, an error occured, \ldots{})
					\item{} If the client still has something to do (ie : upload a file), it will do it
				\end{itemize}
			\subparagraph*{}
				For the communication at its low level, which is sending and receiving a variable, we will use \textbf{SFML/Network} library that provides the functions required to send a variable across the internet, these are: \lstinline$sf::TcpSocket::send( sf::Packet& packet )$ and \lstinline$sf::TcpSocket::receive( sf::Packet& packet )$, where a packet is an iostream.
				Here is a pseudo-code example: client wants to upload a file
			\paragraph*{Pseudo-code, client:}
				\input{III.1-algo1}
			\paragraph*{Pseudo-code, server:}
				\input{III.1-algo2}
				\input{III.1-algo3}
		\subsection{Server: Acces restriction} %2
			note: \textit{'./'} is the current folder, \textit{'../'} is the parent's folder.
			\subparagraph*{}
				What we basically want to do here is to avoid people to access files that are not in the server itself, but that might be, for example, at the root of the filesystem. We also want to avoid the access by a member of another member's private folder.\\
				This is easily done by analysing the path sent by the client.
			\subparagraph*{}
				For the first side of the part, we will assume that the client used by the member is the client we programmed and not a custom one, or that the member's client will have a behaviour similar to our own in term of path sending. In particular, our client is never supposed to input a \textit{'../'} or a \textit{'/..'}. As such, we just look for these sub-strings in the path, and, if we find them, we consider the client's tentative to be prohibited.
			\subparagraph*{}
				For the second part, we will use the server's folders architecture, wich is the following, the downloadable files (given foo and bar to be members):
				\begin{samepage}
					\input{III.2-server_architecture}
				\end{samepage}
			\subparagraph*{}
				File listing and client's pathing behaviour:
				\begin{itemize}
					\item{} The client starts at \textit{'/'}, but this is interpreted by the server by \textit{'/Public'}
					\item{} If the client wants to list files \& folders in \textit{'/Public'}, he sees all stuff in \textit{'./Public'} plus an extra folder, wich is \textit{'Private/'}.
					\item{} If the client wants to access \textit{'./Public/Private'}, the server should reroot him to \textit{'./Private/client\_id'} silently (the client's display will simply shows it is in \textit{'/Private'}; remember \textit{'/Public'} is \textit{'/'})
				 \end{itemize}
			\subparagraph*{}
				Given this, we will watch for the server's code, as there is not and should not be any restrictions checking from the client's side. We will also need to modify the main procedure given previously.
			\paragraph*{Pseudo-code, sever's restrictions (note that client\_id is known):}
				\input{III.2-algo1}
				\input{III.2-algo2}
		\subsection{Client: Display} %3
			\subparagraph*{}
				A readable display is required for the client so that the member may understand its output. For instance, if we make a really simple display like this:
				\input{III.3-ls_result1}
				This is, indeed, easy to implement. However, that's quite hard to read. Instead, we decided to:
				\begin{itemize}
					\item{} Display Files / Folders line by line
					\item{} Display firstly folders in blue, and then files in green, separated with a blank line
					\item{} Sort folders and files in alphabetical order
					\item{} Add a column with creation date and another with creator's id
				\end{itemize}
				the ouput displays looks like this:
				\input{III.3-ls_result2}
			\subparagraph*{}
				We also decided to make a \textit{'pacman style'} percentage display for downloads/uploads. For this display, we have to adapt pacman's line length to the window's length. Rules are the following:
				\begin{itemize}
					 \item{} if there is less than 3 characters available, \textit{'—'} are displayed.
					 \item{} if there is between 11 and 34 characters available, the name and the already transfered byte's number is displayed.
					 \item{} if there is between 35 and 45 characters available, the name and the number of transfered bytes over the number of bytes transfered is displayed.
					 \item{} if there is more than 45 characters available, the above is display followed by pacman style's percentage display, which takes at most 1/3 of the total available characters.
				 \end{itemize}
				Color being system dependent, the function is programmed within guards
		\subsection{Server: Store file informations} %4
			\subparagraph*{}
				The objective is to store basic informations about uploaded files, such as the upload date and the creator.
				To do so, we will use the following architecture:
				\begin{samepage}
					\input{III.4-server_architecture}
				\end{samepage}
				Where \textit{.SomeFolders}, \textit{.SomeFiles.ext}, \ldots{} contains informations about \textit{SomeFolders/}, \textit{SomeFiles.ext}, \ldots{}
				The reason why a dot is added is so that we can write description about a folder and the folder itself in the same directory. Note that the creation of directories starting by a dot should not be allowed.
			\subparagraph*{}
				So all we need to do when foo uploads \textit{'file'} in \textit{'directory/'} (where directory is already formated as seen above) is:
				\begin{itemize}
					\item{} Write \textit{'file'} in \textit{'directory/'}
					\item{} Write the date and foo in \textit{./FilesData/directory/.file}
				\end{itemize}
				Here is a pseudo-code example, modifying the retrieveAFile procedure: (No changes to the client)
			\paragraph*{Pseudo-code, server:}
				\input{III.4-algo1}
				\input{III.4-algo2}
		\subsection{Client: Recursive upload / download} %5
			\subparagraph*{}
				In order to allow the client to dowload and upload a whole folder, we decided to use a recursive approach, working as the following:
				\begin{itemize}
					\item[\textbf{1 }]{} Open the folder and see the first element it contains
					\item[\textbf{2a}]{} If it is a folder, step back to 1 with this new folder, then step forward to 3
					\item[\textbf{2b}]{} If it is a file, download/upload it, then step forward to 3
					\item[\textbf{3 }]{} Step back to 2 with the next element of the foder
				\end{itemize}
				There is the recursive download pseudo-code (no changes to the server)
			\paragraph*{Pseudo-code, client:}
				\input{III.5-algo1}
		\subsection{Server: Configuration} %6
			\subparagraph*{}
				We want to have a configuration for the server. There is a list of the configurable elements for now:
				\begin{itemize}
					\item{} Generate or not the server folders at next startup
					\item{} Create a new user or not at next startup
					\item{} Allow members to invite another member (basically: create a new account) or not
					\item{} Allow members to write in their private folders or not
					\item{} Allow members to download from their private folders or not
				\end{itemize}
			\subparagraph*{}
				To do so, we decided to create an object Config, having the following private variables:
				\begin{itemize}
					\item{} user\_creation\_allowed
					\item{} private\_folder\_writing\_allowed
					\item{} private\_folder\_reading\_allowed
				\end{itemize}
				all booleans\\
				This object will be in read-only.\\
				The first two setting do not appear in the object, as they are used only at startup.\\
				A pointer to this object will be passed to each client's thread.
		\subsection{Server, client: Welcome message} %7
			\subparagraph*{}
				The objective is to allow the the server owner to write a user-adjustable welcome message for all users.
				In this way we wanted to implement some variables in the welcome message, so we used the syntax \textit{'\$[variable\_name]'}, the available variables are:
				\begin{itemize}
					\item{} \textbf{user} the user name
					\item{} \textbf{date} the date formated \textit{'dd/mm/yy'}
					\item{} \textbf{day} the day formated \textit{'Mon,Tue,Wed,Thu\ldots'}
					\item{} \textbf{hour} the hour formated \textit{'hh:mm'}
					\item{} \textbf{color} to set the text color from the variable to the next color variable
				\end{itemize}
				where \textbf{color} can be blue, green, cyan, red, magenta, yellow, white.
				To put the \textit{'\$'} symbol simply put \textit{'\$\$'}
			\paragraph*{Pseudo-code, server:}
				\input{III.7-algo1}
				\input{III.7-algo2}
			\paragraph*{Pseudo-code, client:}
				\input{III.7-algo3}
				\input{III.7-algo4}
	\section{Conclusion} %IV
		\subparagraph*{}
			This project was very instructive and pleasant to work on. The last version of the program for TZ20 is V1 Ranitomeya reticulata, it doesn’t contain everything we wanted to implement but the most important functionalities were programmed. We want to continue to work on this program on the future, as a personal interest. The actual version can be used with people you trust (friends for exemple), but security was not tested at all so we don't recommand it for a wide scale use.
		\subsection{Possible improvements} %1
			\subparagraph*{}
				Some functionnality deserve to be developped, but were not because we hadn't enough time, such as:
				\begin{itemize}
					\item{} \textbf{Deleting files}\\
						Members can upload files and folders, but they can't delete them. We thought of a voting system where people could vote for or against the deletion of a file.
					\item{} \textbf{Passwords}\\
						Passwords are saved in plain text in the server, which is quite unsecure. We'd better save a hash of the passwords.
					\item{} \textbf{Mails}\\
						We wanted to have a mail system that would be used to:
						\begin{itemize}
							\item{} Invite guys
							\item{} Let a member know an unknown ip tried to access their account
							\item{} Inform a member if a vote has started to delete a file they uploaded
						\end{itemize}
					\item{} \textbf{IP filter}\\
						In order to help people in securing their account, we could add an ip checking. Any unauthorized ip would not be allowed to connect to the account. A mail could be send to allow the member to add the ip to the whitelist. A member should have the possibility to desactivate this service if he likes to.
					\item{} \textbf{Admin thread}\\
						There is no way to delete a user, a file, or to change the server configuration easily, which is not nice. The problem could be solved by adding an admin console, were you could enter some commands
					\item{} \textbf{Limit private folder space usage}\\
						The goal of this server is mainly to use the public folder, so it could be nice to set a limit to the private folder, let's say 10Gio, configurable via the server's configuration
				\end{itemize}
		\subsection{Acquired knowledge} %2
			\subparagraph*{}
				What did we learn while doing this project?
				\begin{itemize}
					\item{} \textbf{Teamwork}\\
						We learned to work as a team, in a different way we did in others UV with a team presentation, such as LE03
					\item{} \textbf{Work organization}\\
						As we were working in autonomy, we had to organize us in order to meet the deadlines. We had to organize both the working order (what to do), and timing (when to do it). That may be very useful in our professional life.
					\item{} \textbf{GitHub}\\
						GitHub is a powerful tool of version gesture that helps developpers to work together on a project. This could help us as well in our active life, as we may work as developpers, and our company will probably use a similar tool
					\item{} \textbf{Strings manipulation}\\
						We learned a lot about strings [in C++], and that knowledge can easily be transfered most of others programming languages
					\item{} \textbf{Cmake}\\
						Finally, we learned about CMake, which is a powerful tool to generate MakeFiles.
				\end{itemize}
\end{document}