\section{Indexation}
\paragraph{}Après la lecture des documents depuis le XML, nous avons dû les indexer. Ceci consistait à stocker
la racine de chaque mot des documents (obtenue à l'aide d'un \textit{Porter stemmer}) comme clé de la table
de hashage de l'objet \textit{Index}. La liste de valeurs correspondant à chacune de ces clés était elle
même une table de hashage associant nom de document et position du mot dans ce document. Nous avons choisi de
conserver ces informations pour être capables de faire des recherches plus précises (par exemple, d'un
groupe de mots dans un ordre donné) et pour pouvoir ordonner les résultats de ces recherches (en fonction
de la fréquence d'apparition des mots recherchés, du respect de l'ordre des mots par rapport à la requête
initiale.

~\\

\includegraphics[width=300pt]{table_index}

\paragraph{}L'usage de \textit{tables de hashages} (dictionnaires, dans Python) nous a permis d'avoir un
accès en temps constant à la valeur associée à un certain mot, ce qui permet ensuite aux requêtes de
s'exécuter très rapidement.
\paragraph{}Cette opération demandant le parcours de tous les mots de chaque document du corpus, et, pour
chacun de ceux-ci, sa racinisation par le stemmer, le temps qu'elle demande est conséquent. C'est pour cela
que nous avons opté pour une sérialisation de l'Index, une fois généré, cette méthode nous évitant de
devoir regénérer celui-ci  à chaque démarrage du programme.
\paragraph{}De pus, afin de pouvoir assez facilement voir l'ensemble des mots du corpus qui se réduisent en une même racine, nous stockons les ceux-ci dans la table de hashage \textit{Index.\_stemm\_table}, avec comme clé la racine obtenue.