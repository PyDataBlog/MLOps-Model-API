\hypertarget{main_8cpp}{}\section{main.\+cpp File Reference}
\label{main_8cpp}\index{main.\+cpp@{main.\+cpp}}
{\ttfamily \#include $<$iostream$>$}\\*
{\ttfamily \#include $<$string$>$}\\*
{\ttfamily \#include $<$vector$>$}\\*
{\ttfamily \#include $<$boost/filesystem.\+hpp$>$}\\*
{\ttfamily \#include $<$boost/format.\+hpp$>$}\\*
{\ttfamily \#include \char`\"{}bmca/consoleui.\+h\char`\"{}}\\*
{\ttfamily \#include \char`\"{}A\+V\+L\+Tree.\+h\char`\"{}}\\*
Include dependency graph for main.\+cpp\+:
\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=350pt]{main_8cpp__incl}
\end{center}
\end{figure}
\subsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \hyperlink{struct_file}{File}
\item 
struct \hyperlink{struct_file_bucket}{File\+Bucket}
\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{main_8cpp_a1c024cff868e015ff5faa282364a6302}{filter\+Duplicates} (std\+::vector$<$ boost\+::filesystem\+::path $>$ \&paths, A\+V\+L\+Node$<$ \hyperlink{struct_file_bucket}{File\+Bucket} $>$ $\ast$file)
\begin{DoxyCompactList}\small\item\em Filters out duplicate paths, if remove\+Duplicates is true it will remove those files, if false it will only keep them (gives a list of files to delete for example) \end{DoxyCompactList}\item 
void \hyperlink{main_8cpp_a1bc69b1b6f62d721f14ed9c03555a9c8}{scan\+Files} (A\+V\+L\+Tree$<$ \hyperlink{struct_file_bucket}{File\+Bucket} $>$ \&files, std\+::string root\+Path, bool recursive)
\begin{DoxyCompactList}\small\item\em Builds file objects for all files contained within the given directory. \end{DoxyCompactList}\item 
int \hyperlink{main_8cpp_a3c04138a5bfe5d72780bb7e82a18e627}{main} (int argc, char $\ast$$\ast$argv)
\end{DoxyCompactItemize}


\subsection{Function Documentation}
\hypertarget{main_8cpp_a1c024cff868e015ff5faa282364a6302}{}\index{main.\+cpp@{main.\+cpp}!filter\+Duplicates@{filter\+Duplicates}}
\index{filter\+Duplicates@{filter\+Duplicates}!main.\+cpp@{main.\+cpp}}
\subsubsection[{filter\+Duplicates}]{\setlength{\rightskip}{0pt plus 5cm}void filter\+Duplicates (
\begin{DoxyParamCaption}
\item[{std\+::vector$<$ boost\+::filesystem\+::path $>$ \&}]{paths, }
\item[{A\+V\+L\+Node$<$ {\bf File\+Bucket} $>$ $\ast$}]{file}
\end{DoxyParamCaption}
)}\label{main_8cpp_a1c024cff868e015ff5faa282364a6302}


Filters out duplicate paths, if remove\+Duplicates is true it will remove those files, if false it will only keep them (gives a list of files to delete for example) 



Definition at line 66 of file main.\+cpp.

\hypertarget{main_8cpp_a3c04138a5bfe5d72780bb7e82a18e627}{}\index{main.\+cpp@{main.\+cpp}!main@{main}}
\index{main@{main}!main.\+cpp@{main.\+cpp}}
\subsubsection[{main}]{\setlength{\rightskip}{0pt plus 5cm}int main (
\begin{DoxyParamCaption}
\item[{int}]{argc, }
\item[{char $\ast$$\ast$}]{argv}
\end{DoxyParamCaption}
)}\label{main_8cpp_a3c04138a5bfe5d72780bb7e82a18e627}


Definition at line 127 of file main.\+cpp.

\hypertarget{main_8cpp_a1bc69b1b6f62d721f14ed9c03555a9c8}{}\index{main.\+cpp@{main.\+cpp}!scan\+Files@{scan\+Files}}
\index{scan\+Files@{scan\+Files}!main.\+cpp@{main.\+cpp}}
\subsubsection[{scan\+Files}]{\setlength{\rightskip}{0pt plus 5cm}void scan\+Files (
\begin{DoxyParamCaption}
\item[{A\+V\+L\+Tree$<$ {\bf File\+Bucket} $>$ \&}]{files, }
\item[{std\+::string}]{root\+Path, }
\item[{bool}]{recursive}
\end{DoxyParamCaption}
)}\label{main_8cpp_a1bc69b1b6f62d721f14ed9c03555a9c8}


Builds file objects for all files contained within the given directory. 



Definition at line 84 of file main.\+cpp.

