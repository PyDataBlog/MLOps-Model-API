%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Journal Article
% LaTeX Template
% Version 1.3 (9/9/13)
%
% This template has been downloaded from:
% http://www.LaTeXTemplates.com
%
% Original author:
% Frits Wenneker (http://www.howtotex.com)
%
% License:
% CC BY-NC-SA 3.0 (http://creativecommons.org/licenses/by-nc-sa/3.0/)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------------------------------------------------------------------------
%       PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------
\documentclass[paper=letter, fontsize=11pt]{article}
\usepackage[english]{babel} % English language/hyphenation
\usepackage{amsmath,amsfonts,amsthm} % Math packages
\usepackage[utf8]{inputenc}
\usepackage{float}
%\usepackage{blindtext}
\usepackage{graphicx} 
%\usepackage{caption}
\usepackage[labelfont=bf]{caption}
\usepackage{subcaption}
\usepackage[sc]{mathpazo} % Use the Palatino font
\usepackage[T1]{fontenc} % Use 8-bit encoding that has 256 glyphs
\linespread{1.05} % Line spacing - Palatino needs more space between lines
\usepackage{microtype} % Slightly tweak font spacing for aesthetics
\usepackage[hmarginratio=1:1,top=32mm,columnsep=20pt]{geometry} % Document margins
\usepackage{multicol} % Used for the two-column layout of the document
%\usepackage[hang, small,labelfont=bf,up,textfont=it,up]{caption} % Custom captions under/above floats in tables or figures
\usepackage{booktabs} % Horizontal rules in tables
\usepackage{float} % Required for tables and figures in the multi-column environment - they need to be placed in specific locations with the [H] (e.g. \begin{table}[H])
\usepackage{hyperref} % For hyperlinks in the PDF
%\usepackage{lettrine} % The lettrine is the first enlarged letter at the beginning of the text
\usepackage{paralist} % Used for the compactitem environment which makes bullet points with less space between them
%\usepackage{abstract} % Allows abstract customization
%\renewcommand{\abstractnamefont}{\normalfont\bfseries} % Set the "Abstract" text to bold
%\renewcommand{\abstracttextfont}{\normalfont\small\itshape} % Set the abstract itself to small italic text
%\usepackage{titlesec} % Allows customization of titles
\allowdisplaybreaks
\renewcommand\thesection{\Roman{section}} % Roman numerals for the sections
\renewcommand\thesubsection{\Roman{subsection}} % Roman numerals for subsections

%\titleformat{\section}[block]{\large\scshape\centering}{\thesection.}{1em}{} % Change the look of the section titles
%\titleformat{\subsection}[block]{\large}{\thesubsection.}{1em}{} % Change the look of the section titles
\newcommand{\horrule}[1]{\rule{\linewidth}{#1}} % Create horizontal rule command with 1 argument of height
\usepackage{fancyhdr} % Headers and footers
\pagestyle{fancy} % All pages have headers and footers
\fancyhead{} % Blank out the default header
\fancyfoot{} % Blank out the default footer
\usepackage{setspace}
\fancyhead[C]{Nuclear $\cdot$ \texttt{genMILCOMs} User's Guide $\cdot$ January 2017 } % Custom header text

\fancyfoot[RO,LE]{\thepage} % Custom footer text
%----------------------------------------------------------------------------------------
%       TITLE SECTION
%----------------------------------------------------------------------------------------
\title{\vspace{-15mm}\fontsize{20pt}{10pt}\selectfont\textbf{\texttt{genMILCOMs} User's Guide}} % Article title
\author{
\large
{\textsc{Stephanie Lauber}}}
\date{}

%----------------------------------------------------------------------------------------
\begin{document}
\maketitle % Insert title
\thispagestyle{fancy} % All pages have headers and footers

\onehalfspace

\vfill
\begin{center}
Created by Stephanie Lauber \\
San Diego State University \\
Department of Physics \\
Computational Science Research Center \\ \vspace{3mm}
\textbf{Email}: stephaniemlauber@gmail.com \\
\textbf{GitHub}: https://github.com/maycontainsoy/sdShellParameter \\ \vspace{3mm}
Created in Fall 2015 (code) and December 2016 (User's Guide) \\
Lasted updated in January 2017 (code) and January 2017 (User's Guide)
\end{center}


\newpage
\tableofcontents

\newpage
\listoffigures

%----------------------------------------------------------------------------------------
%	INTRODUCTION
%----------------------------------------------------------------------------------------
\newpage
\section{Introduction}
Many-body calculations allow us to determine behavior of nuclei, including those well beyond experimental limits, through the use of interaction parameters fit to data or derived from theory. These interaction parameters describe hundreds of nuclear levels but a direct comparison between parameter sets offers very little insight into the underlying physics. The number of parameters for a given model space ranges from dozens to hundreds, but not all parameters contribute equally to the resulting energy spectra. We aim to characterize these interactions based on the \textbf{M}ost \textbf{I}mportant \textbf{L}inear \textbf{Com}binations (MILCOMs) of parameters.

This set of scripts were created in Fall 2015 as an introductory project for my PhD work with Dr Calvin Johnson at San Diego State University (SDSU) and the Computational Science Research Center (CSRC). We set out to characterize the MILCOMs for \emph{sd}-shell nuclei using the Brown-Richter USDB interaction as the standard. The goal was to characterize different parameter sets (from ab initio to phenomenological) in terms of the MILCOM space defined by the USDB interaction as well as decompose the MILCOMs into known physical interactions within the \emph{sd}-shell such as monopole, contact, pairing, etc.

\subsection{Background}
Current calculations for energy spectra of \emph{sd}-shell nuclei in configuration interaction codes require an input interaction containing 66 parameters, 3 single particle energies (SPEs) and 63 two-body matrix elements. The methods of calculating these parameters range from phenomenological derivations, such as the Brown-Richter USDB interaction, to more recent ab initio calculations but the individual parameters between sets do not vary significantly. No single parameter makes a significant contribution to the output spectra but a small number of linear combinations of the parameters seems to dominate the space, as shown by Johnson and Krastev (2010). 

In order to determine the MILCOM for a given shell and chosen interaction, these scripts make use of the configuration interaction code Bigstick and perform a perturbative analysis of the 66 parameters in the \emph{sd}-shell, using the USDB interaction as the ``gold standard". To test the effect of changes in the parameter set, the spectra of a given state ($\alpha$) for a given parameter ($\lambda_{i}$) can be expanded as follows
\[
E_{\alpha}(\lambda_{i}+\delta \lambda_{i}) \simeq E_{\alpha}(\lambda_{i}) + \frac{\partial E_{\alpha}}{\partial \lambda_{i}} \delta \lambda_{i}
\]
where the particle derivatives are defined by the Feynman-Hellmann Theorem as
\[
\frac{\partial E_{\alpha}}{\partial \lambda_{i}} = \langle \psi_{\alpha} | \hat{H}_{i} | \psi_{\alpha} \rangle
\]
The expectation values of the energy at a given state for a given parameter are outputs from Bigstick and can be used to generate an intermediate matrix, here in denoted as $B_{i\alpha}$ (``Bia" in figures). This intermediate matrix will not necessarily be square, and will have dimensions equal to the number of parameters in the shell (66 in the \emph{sd}-shell) by the number of states output from Bigstick (ground state + excited) times the total number of isotopes (see Figure \ref{interBia} for visualization of intermediate matrix for a range of isotopes). 

The intermediate matrix contains the expectation values defined by the Feynman-Hellmann Theorem for all isotopes over all parameters for a given run. Using $B_{i\alpha}$, the matrix $A_{ij}$ is constructed as follows:
\[
A_{ij} = \sum\limits_{\alpha} B_{i\alpha} B_{\alpha j}
\]
Computationally, this is represented by $B_{i\alpha}$ dotted with it's transpose. The resulting matrix will be square and the eigenvectors and values are found using the built in Numpy symmetric eigensolver, \texttt{numpy.linalg.eigh()}. Sorting the eigenpairs in order of descending eigenvalue gives the most important linear combinations of parameters for the given set of nuclei in the \emph{sd}-shell. 

The eigenvalues of the linear combinations fall off rapidly, with 5-10 dominating in a given space. Using this subset of eigenvectors, the MILCOMs of the subspace are defined. Given this subspace, the decomposition into known physical interactions can be performed by looking at the overlap of the two subspaces. Following Johnson and Krastev 2010 (**need correct citation**) the overlap between two subspaces, $S_{1}$ and $S_{2}$, can be found as follows:
\begin{itemize}
\item [-] Let the orthonormal vectors associated with the MILCOM subspace be defined as $V_{1}$ and the orthonormal vectors associated with a given interaction be defined as $V_{2}$.
\item [-] The overlap between $S_{1}$ and $S_{2}$ is: $\Omega = V_{1}^{\dagger}V_{2}$. If $S_{1}$ and $S_{2}$ do not have the same dimensions, the overlap matrix will not be square.
\item [-] Calculate the eigenvectors and associated eigenvalues of the resulting $\Omega^{\dagger}\Omega$ matrix (square). The eigenvalues represent the overlap of the two subspaces. 
\end{itemize}

\begin{figure}[h!]
	\centering
	\includegraphics[width=0.8\textwidth]{calcOverlap}
	\caption{Calculation of overlap between MILCOMs and known physical interaction in \emph{sd}-shell.}
	\label{calcOverlap}
\end{figure}

Currently, the script generates the MILCOM and known interaction overlap for the USDB interaction but given any input interaction the decomposition into known physical interactions can be calculated in the same way and compared to the USDB results. 

In addition to decomposition, the MILCOM subspace can be used to directly compare different parameter sets. The overlap of an interaction parameter set (treated as a vetor) with each MILCOM can be calculated. For a number of parameter sets, the overlaps can be compared to determine which of the MILCOMs differ most significantly (these MILCOMs with significant differences will be referred to as ``channels"). The resulting channels can be used in addition to the USDB (or any given interaction) in Bigstick to calculate the energy spectra to see if the modifications produce changes in energy.

\subsection{Intended Use}
Currently, this set of scripts can generate MILCOMs for the USDB interaction, a 66-parameter set for the \emph{sd}-shell. Future options will include a similar analysis in the \emph{p}- and \emph{pf}-shell as time permits. 

The MILCOM subspace generated by these routines has two primary functions (1) decompose the MILCOMs into known physical interactions to determine dominant interactions in the \emph{sd}-shell and (2) create a meaningful comparison between parameter sets by comparing the overlap of a given set with the MILCOM subspace.

This code is currently intended for primary use by myself, Stephanie Lauber, and other students in Calvin Johnson's SDSU nuclear physics group for education purposes only. As a result, the User Guide explanations will be slightly more explicit than they otherwise would be, with graphics intended to better illustrate the code in a way that made sense to me as I was constructing it.  

%----------------------------------------------------------------------------------------
%	SCRIPTS AND FUNCTIONS
%----------------------------------------------------------------------------------------
\section{Scripts and Functions}
This section describes each \texttt{.py} file in the collection of scripts as well as any functions contained within the files. A few more basic functions are omitted (such as the function to normalize a vector, as the reader is likely familiar with how this is performed). 

Sample inputs and outputs for important routines are listed in the Basic Examples section. Diagrams of function flow for each for the 4 modes are also provided in this guide.
\subsection{\texttt{genMILCOMs}}
The script \texttt{genMILCOMs.py} is the main routine in this package and calls all over functions. Depending on user input, the script can run in 4 ``modes" (explained in more detail in a later section):
\begin{itemize}
\item [(1)] Full Run
\item [(2)] Subspace Run
\item [(3)] Reconstruction Run
\item [(4)] Parameter Comparison 
\end{itemize}
The routine requires Python 2.7 or higher (some issues may arise with Python 3 that have not been tested). To start the script, check that all required files (listed at the end of this document) are located in the current working directory along with the module files containing subroutines and functions and type \\
\indent \texttt{> python genMILCOMs.py} \\
to run. You should see the header prompt: \\
\indent \texttt{> \# ---------------------------------------------------------------- } \\
\indent \texttt{> \# SD Shell MILCOM Generator                   } \\
\indent \texttt{> \# Version 1.0 (12/23/16)                    } \\
\indent \texttt{> \# by: Stephanie Lauber                     } \\
\indent \texttt{> \# Last updated: 01/10/17                    } \\
\indent \texttt{> \# ---------------------------------------------------------------- } \\
\indent \texttt{> \indent MENU OPTIONS} \\
\indent \texttt{> \indent [1] Full run } \\
\indent \texttt{> \indent [2] Subspace run } \\
\indent \texttt{> \indent [3] Reconstruction run } \\
\indent \texttt{> \indent [4] Parameter Comparison } \\
\indent \texttt{> Please enter menu option number: } \\
The user chooses the appropriate menu option and the program begins.

\subsection{\texttt{getParamMod}}
The script \texttt{getParamMod} currently contains a single function that gathers information for Bigstick runs in \texttt{[n]} and \texttt{[x]} mode as well as information for script output and additional specifics about the parameter space. Information gathered is listed below:

\begin{itemize}
\item [] \texttt{getAuto}\\
The function \texttt{getAuto} gathers run information for full and sub-space runs to generate the MILCOM subspace or intermediate $B_{i\alpha}$ matrix, respectively. The following parameters are currently required as input from a file contained within the same directory (a sample file is provided at the end of this text), they are listed in the order output by the function:
\begin{itemize}
\item [-] \texttt{intName}: name of the chosen interaction. It is also assumed to be the primary named of the interaction input file (i.e. when using the USDB interaction, the interaction name would be \texttt{usdb} and the associated interaction file is \texttt{usdb.int}). There is no extension added because Bigstick requires only the name of the file and searches for interaction name with the \texttt{.int} extension at run time. \\ \textbf{Required for Bigstick.}

\item [-] \texttt{nuclideNum}: total number of nuclides to run in \texttt{[d]} mode in Bigstick. Input for the expectational value run requires a single wavefunction input file from a \texttt{[n]} or \texttt{[d]} Bigstick run but does not depend on the chosen isotope. The user should pick the most ``well behaved" isotope associated with a given nucleus to decrease the total run time. 

\item [-] \texttt{numStates}: total number, $N$, states to run in Bigstick (ground state plus $N-1$ excited states). The number of states should be taken to be greater than 1 but the upper limit can be chosen based on convergence, run time, etc... \\ \textbf{Required for Bigstick.}

\item [-] \texttt{numIter}: maximum number of iterations to run in Bigstick. This value should be greater than or equal to the maximum number of iterations required for convergence for the given set of nuclides. \\\ textbf{Required for Bigstick.}

\item [-] \texttt{numParams}: total number of parameters for a given interaction, sum of single particle energies and two-body matrix elements. Ex: for the $sd$-shell there are 3 single particle energies and 63 two-body matrix elements for a total of 66 parameters. (\emph{In future versions, this number will be determine by the chosen spsName for a chosen set of shells.})

\item [-] \texttt{spsName}: name of file containing single particle space information for Bigstick. There is no extension added because Bigstick requires only the name of the file and searches for the file with the appropriate \texttt{.sps} extension. \\ \textbf{Required for Bigstick.}

\item [-] \texttt{isotopeNum}: total number of isotopes to run in \texttt{[x]} mode. This value should include the number of nuclides in \texttt{nuclideNum} plus the number of isotopes associated with each nuclide.

\item [-] \texttt{outputName}: general name for any data files output by the scripts. Currently, this is associated with the name of files containing the eigenvalues and eigenvalues for Full Run and Reconstruction Run, and the sub-matrix file for sub-space run.

\item [-] \texttt{nuclideName}: list of periodic table abbreviations for names of nuclides for \texttt{[n]} run.

\item [-] \texttt{nuclideA}: list of atomic masses associated with nuclide names in \texttt{nuclideName}.

\item [-] \texttt{valProNuc}: number of valence protons associated with nuclide names in \texttt{nuclideName}. \\ \textbf{Required for Bigstick.}

\item [-] \texttt{valNeutNuc}: number of valence neutrons associated with nuclide names in \texttt{nuclideName}. \\ \textbf{Required for Bigstick.}

\item [-] \texttt{jzSysNuc}: $2\times J_{z}$ of system associated with nuclide names in \texttt{nuclideName}. \\ \textbf{Required for Bigstick.}

\item [-] \texttt{isotopes}: names of isotopes for \texttt{[x]} runs. Formate is two letter periodic table name followed by atomic masses. Ex: Magnesium-24 would be entered as \texttt{Mg24}.

\item [-] \texttt{valProIso}: number of valence protons associated with isotope name in \texttt{isotopes}. \\ \textbf{Required for Bigstick.}

\item [-] \texttt{valNeutIso}: number of valence neutrons associated with isotope name in \texttt{isotopes}. \\ \textbf{Required for Bigstick.}

\item [-] \texttt{jzSysIso}: $2\times J_{z}$ of system associated with isotope name in \texttt{isotopes}. \\ \textbf{Required for Bigstick.}

\item [-] \texttt{numMILCOMs}: number of eigenvectors of the MILCOM subspace to keep for overlap with known physical interactions and other parameter sets.
\end{itemize}
\end{itemize}

\subsection{\texttt{genAndRunMods}}
The functions in \texttt{genAndRunMods} are associated with the creation of scaled interaction files, input information files and a clean up routine for Bigstick runs. All input parameters for the functions contained within the scripts are gathered by \texttt{getInfo} contained within \texttt{getParamMod}.

\begin{itemize}
\item [] \texttt{scaledUSDB} \\
Creates scaled \texttt{USDB\_nuclide.int} file for run in \texttt{[n]} mode. Bigstick \texttt{[n]} and \texttt{[d]} modes require an interaction file containing the SPEs and TBMEs for the given shell and should be scaled by the total number of nuclides in the nucleus (this includes inert core and valence nuclides). Only 1 scaled USDB interaction file is created per nuclide. 

\item [] \texttt{createNorm} \\
Creates the input parameters for a Bigstick run in \texttt{[n]} mode with the interaction file created in \texttt{scaledUSDB}. Currently, the input parameters are:
\begin{itemize}
\item [-] Menu choice
\item [-] Name of reference file to save data
\item [-] Name of .sps file without extension (must be contained in same directory)
\item [-] Number of valence protons, number of valence neutrons
\item [-] $2\times J_{z}$ of the system
\item [-] Name of the scaled interaction file (created in \texttt{scaledUSDB})
\item [-] Scaling information
\item [-] Chosen Lanczos menu option (default is \texttt{ld})
\item [-] Number of states to keep, maximum number of iterations
\end{itemize}

\item [] \texttt{runNorm} \\
Runs Bigstick in \texttt{[n]} mode for a given nuclide using the scaled interaction file created in \texttt{scaledUSDB} and input information created in \texttt{createNorm}. It saves the output wavefunction in the same directory for later use. 

\item [] \texttt{createExpt} \\
Creates the input parameters for a Bigstick run in \texttt{[x]} mode with the wavefunction file output from \texttt{[n]} mode. An input file for each isotope is created with the following parameters:
\begin{itemize}
\item [-] Menu option
\item [-] Reference name for wavefunction file
\item [-] Name of interaction file
\item [-] Scaling information (all set to 1)
\end{itemize}

\item [] \texttt{runExpt} \\
Runs Bigstick in \texttt{[x]} mode for a given isotope and a given interaction (currently 66 in the \emph{sd}-shell) using the wavefunction from the \texttt{[n]} mode run and input file from \texttt{createExpt}. All Bigstick output is saved to file to extract the expectation values later in the code.

\item [] \texttt{runTime} \\
Prints header for type of run to screen and executes \texttt{scaledUSDB}, \texttt{createNorm}, \texttt{runNorm}, \texttt{createExpt} and \texttt{runExpt}.

\item [] \texttt{cleanUp} \\
Removes unnecessary Bigstick output after running in \texttt{[n]} and \texttt{[x]} modes. Does not remove output files from \texttt{[x]} run (this is removed at a later step). 
\end{itemize}

\subsection{\texttt{genAijMods}}
\begin{itemize}
\item [] \texttt{getElements} \\
Creates temporary matrix of expectation values of a given isotope extracted from the \texttt{[x]} run output from Bigstick. For each isotope, the function generates a separate temporary matrix for (a) all states, (b) only the ground state and (c) only the excited states. 

\item [] \texttt{finalAij} \\
Used in the sub-space run, this functions extracts the intermediate $B_{i\alpha}$ matrices from files provided by the user. Each $B_{i\alpha}$ matrix is concatenated to the previous set and the full $A_{ij}$ matrix is generated. The eigenpairs are sorted in descending eigenvalue and the full set of eigenvalues is saved to file. The chosen number of MILCOMs from the input file defines the number of eigenvectors to save to file and defines the subspace. 

\item [] \texttt{constructTempMat} \\
Constructs intermediate $B_{i\alpha}$ matrices for (a) all states, (b) only the ground state and (c) only the excited states. Using the function \texttt{getElements}, expectation values for each isotope and each parameter is added as columns to a temporary $B_{i\alpha}$ matrix. 

\item [] \texttt{constructAij} \\
Using the temporary matrices constructed in \texttt{constructTempMat}, this function constructs the $A_{ij}$ matrix. The eigenpairs are sorted in descending eigenvalue and the full set of eigenvalues is saved to file. The chosen number of MILCOMs from the input file defines the number of eigenvectors to save to file and defines the subspace. 
\end{itemize}

\subsection{\texttt{printMods}}
\begin{itemize}
\item [] \texttt{printStart} \\
Prints program header and menu options, obtains run type from user.

\item [] \texttt{printRunType} \\
Prints basic information for chosen run to the user including required inputs and outputs. 

\item [] \texttt{printEnd} \\
Prints program end bar for different run types at completion. 

\item [] \texttt{printRun} \\
Prints runtime information for full and subspace runs to file containing:
	\begin{itemize}
	\item [-] Time and date of run
	\item [-] Type of run (full or sub)
	\item [-] Number of parameters
	\item [-] Number of states to keep
	\item [-] Maximum number of iterations
	\item [-] Chosen interaction 
	\item [-] Chosen shell
	\item [-] Names of output files (vary depending on full vs. sub run)
	\item [-] List of nuclide information for Bigstick \text{[n]} runs
	\item [-] List of isotope information for Bigstick \text{[x]} runs
	\end{itemize}

\item [] \texttt{printOverlaps} \\
Prints the value of MILCOM subspace decomposed into 5 known physical interactions.
\end{itemize}

\subsection{\texttt{genOverlap}}
\begin{itemize}
\item [] \texttt{importInter} \\
Imports known \text{sd}-shell interactions:
	\begin{itemize}
	\item [-] Monopole
	\item [-] Contact (plus traceless)
	\item [-] Pairing (plus traceless)
	\item [-] Quadrapole (plus traceless)
	\item [-] SU(3) (plus traceless)
	\end{itemize}
Files containing interactions should be located in same directory as scripts, where the columns in each file represent a vector in the interaction space. The order of elements in the interaction must match the order of the input interaction used in Bigstick (currently, USDB). Each vector is normalized by the function \texttt{getNorm}, which simply makes the columns unit normal vectors. 

\item [] \texttt{getOverlap} \\
Calculates the overlap between the MILCOM subspace defined by the user and the 5 known physical interactions listed above. The explanation for determining the overlap of two vector spaces is explained in the Full Run section (below). The overlap values are printed to file using the \texttt{printOverlap} functions located in \texttt{printMods}.
\end{itemize}

%----------------------------------------------------------------------------------------
%	AVAILABLE RUNS
%----------------------------------------------------------------------------------------
\section{Available Modes}
\begin{figure}
	\centering
	\includegraphics[width=\textwidth]{workFlow}
	\caption{Workflow for [1] Full, [2] Subspace and [3] Reconstruction runs.}
	\label{workFlow}
\end{figure}

The main script, \texttt{genMILCOMs} currently has 4 run modes:
\begin{itemize}
\item [(1)] Full: ideal for small numbers of nuclides and/or excited states. This mode runs Bigstick in \texttt{[n]} and \texttt{[x]} modes to generate the completed $A_{ij}$ matrix. The eigenvectors and eigenvalues of this matrix are calculated using SVD and sorted in descending order based on the eigenvalue. From the input file, the user defines the number of eigenvectors to retain which define the size of the MILCOM subspace. The MILCOM subspace is decomposed into known physical interactions in the \emph{sd}-shell. 
\item [(2)] Subspace: ideal for large numbers of nuclides and/or excited states. When the full run time is too prohibitive, the user can break the space into subspaces containing a subset of the total number of nuclides (it is not recommended to break the space along excitation states). This mode runs Bigstick in \texttt{[n]} and \texttt{[x]} mode to generate the intermediate $B_{i\alpha}$ matrix associated with the subspace. To create the full $A_{ij}$ matrix, a set of sub-matrices can be run through Reconstruction to obtain the MILCOM subspace.
\item [(3)] Reconstruction: ideal for large numbers of nuclides and/or excited states. After generating multiple intermediate matrices, $B_{i\alpha}$, in subspace mode the user can reconstruct the full MILCOM subspace. The MILCOM subspace is decomposed into known physical interactions in the \emph{sd}-shell (same result as running Full).
\item [(4)] Parameter Comparison: used for comparing parameter sets with previously generated MILCOM subspace. The user can calculate the overlap of a single or multiple parameter sets with a MILCOM subspace.
\end{itemize}

%----------------------------------------------------------------------------------------
%	FULL RUN
%----------------------------------------------------------------------------------------
\begin{figure}[h!]
	\centering
	\includegraphics[width=\textwidth]{interBia}
	\caption{Construction of intermediate $B_{i\alpha}$ matrix for subspace containing Ne20 through Mg28. In sub-space run, these intermediate matrices are saved to file for use in a later reconstruction run. In full runs, the intermediate matrices are created but not saved to file.}
	\label{interBia}
\end{figure}

\begin{figure}
	\centering
	\includegraphics[width=0.7\textwidth]{AijMat}
	\caption{Construction of full $A_{ij}$ matrix from intermediate $B_{i\alpha}$ matrices created in full run or read from file during reconstruction run. Intermediate $B_{i\alpha}$ matrices will not necessarily be square, but the resulting $A_{ij}$ will be square with the dimensions equal to the number of parameters in a given nuclear shell (ex: 66 for the \emph{sd}-shell.)}
	\label{AijMat}
\end{figure}


\subsection{Full Run}
The Full Run takes user defined input from file (outlined in explanation of \texttt{getAuto} function) to run Bigstick first in \texttt{[n]} mode for each nuclide to generate an associated wavefunction file. Input for the Bigstick run is generated by the script to include a scaled USDB interaction file for each nuclide. 

The wavefunction file is used as input to Bigstick in \texttt{[x]} mode to run each isotope for each parameter in the \emph{sd}-shell. The 66 \emph{sd}-shell parameter files represent a perpurbative analysis of the parameters by setting a single parameter to 1 and the remaining to 0. Output from the \texttt{[x]} run are saved to intermediate files (1 file per isotope per parameter). These files contain Bigstick output information including the expectation values for each energy state in the run. 

After constructing the full $A_{ij}$ matrix for the chosen space, the eigenvalues and eigenvectors are calculated using the Numpy Hermitian eigensolver. The eigenvectors are sorted based on descending eigenvalue to determine the dominant linear combinations. These eigenvectors are saved to file and define the MILCOM subspace for the given interaction (currently, only available for USDB). 

The MILCOM subspace is decomposed into 5 known physical interactions in the \emph{sd}-shell: monopole, contact (plus traceless), pairing (plus traceless), quadruple (plus traceless), and SU(3) (plus traceless). \emph{For explanation of subspace overlap calculation, see the Background subsection in Introduction.} The final outputs for a full run are:
\begin{itemize}
\item [-] File containing run time information. 
\item [-] File containing all eigenvalues, sorted in descending order.
\item [-] File containing chosen number of eigenvectors to define MILCOM subspace.
\item [-] File containing overlap values of MILCOM subspace with 5 known interactions.
\end{itemize}
The generated MILCOM subspace can then be used to calculate the overlap with other parameter sets using the Parameter Comparison mode.

%----------------------------------------------------------------------------------------
%	SUB RUN
%----------------------------------------------------------------------------------------
\subsection{Sub-Space Run}
For larger spaces (number of nuclides and/or number of excited states) the space can be broken apart across nuclides and run in pieces with sub-space run to save time. The sub-space run is similar to the full run but saves the intermediate matrices, $B_{i\alpha}$, for the chosen region to file. These files can then be combined in Reconstruction Run to create the full $A_{ij}$, generate the MILCOM subspace and calculate the decompositions into known physical interactions. 

The sub-space run takes a user defined input file identical to the full run input file (outlined above). The final outputs for a sub-space run are:
\begin{itemize}
\item [-] File containing run time information.
\item [-] File containing intermediate matrix, $B_{i\alpha}$.
\end{itemize}
Once all desired subspaces have been generated, the intermediate matrices can be combined with an addition Reconstruction Run. The files must be contained within the same working directory as the scripts and should have the same number of test parameters and excited states, the number of nuclides in each space can differ. 

%----------------------------------------------------------------------------------------
%	RECONSTRUCTION RUN
%----------------------------------------------------------------------------------------
\subsection{Reconstruction Run}
After generating a set of intermediate matrices in multiple sub-space runs, the Reconstruction Run will generate the full $A_{ij}$ matrix. The MILCOM subspace, defined by the user at run time, and decomposition into known physical interactions will be created in the same way as the full run. The final outputs for a sub-space run are:
\begin{itemize}
\item [-] File containing run time information.
\item [-] File containing all eigenvectors, sorted in descending order.
\item [-] File containing chosen number of eigenvectors to define MILCOM subspace.
\item [-] File containing overlap values of MILCOM subspace with 5 known interactions. 
\end{itemize}
The generated MILCOM subspace can then be used to calculate the overlap with other parameter sets using the Parameter Comparison mode.

%----------------------------------------------------------------------------------------
%	PARAMETER COMPARISON
%----------------------------------------------------------------------------------------
\subsection{Parameter Comparison}
Once a MILCOM subspace has been generated (currently only possible with the USDB interaction) the user can determine the overlap with over parameter sets. Given a parameter set with SPEs and TBMEs in USDB order, the overlap with each MILCOM subspace eigenvector is calculated and saved. The user can run a single or multiple parameter sets, comparing the overlap of multiple parameter sets will give more insight into the dominant channels in the subspace.

The user must provide a MILCOM subspace file from a full or reconstruction run and a file for each parameter set to compare as a vector in column form. The final output for a parameter comparison run are:
\begin{itemize}
\item [-] File containing run time information.
\item [-] File for each parameter set containing overlap information.

\end{itemize}
Results of the parameter comparison can be used to determine important MILCOMs for consideration in future calculations or investigate differences between parameter sets derived in different ways (i.e. ab initio vs. phenomenological). 

%----------------------------------------------------------------------------------------
% 	BASIC EXAMPLES
%----------------------------------------------------------------------------------------
\newpage
\section{Basic Examples}
\subsection{Sample Input File for Full and Subspace}
\singlespace
\texttt{[01] \# Name of interaction file} \\
\texttt{[02] usdb} \\
\texttt{[03] \# Number of nuclides to run in [n] } \\
\texttt{[04] 1} \\
\texttt{[05] Ne} \\
\texttt{[06] 20} \\
\texttt{[07] 2} \\
\texttt{[08] 2} \\
\texttt{[09] 0} \\
\texttt{[10] \# Number of states to keep} \\
\texttt{[11] 100} \\
\texttt{[12] \# Max number of iterations} \\
\texttt{[13] 4000} \\
\texttt{[14] \# Number of parameters} \\
\texttt{[15] 66} \\
\texttt{[16] \# Name of .sps file (w/out extension)} \\
\texttt{[17] sd} \\
\texttt{[18] \# Number of isotopes} \\
\texttt{[19] 3} \\
\texttt{[20] Ne20} \\
\texttt{[21] 2} \\
\texttt{[22] 2} \\
\texttt{[23] 0} \\
\texttt{[24] Ne21} \\
\texttt{[25] 2} \\
\texttt{[26] 3} \\
\texttt{[27] 1} \\
\texttt{[28] Ne22} \\
\texttt{[29] 2} \\
\texttt{[30] 4} \\
\texttt{[31] 2} \\
\texttt{[32] \# General output name} \\
\texttt{[33] NeNa100states} \\
\texttt{[34] \# Number MILCOMS} \\
\texttt{[35] 6} \\

\onehalfspace
\textbf{General Explanation}
\begin{itemize}
\item [-] Line 2: name of interaction for Bigstick, generally formatted as \texttt{name.int}. This code does not need the extension and the interaction file should be located in the same directory as the script.
\item [-] Line 4: total number of nuclides to run Bigstick in \texttt{n]} mode used to generate wavefunction files. Only 1 is required per nuclide, multiple isotopes use the same wavefunction file output in later functions. 
\item [-] Lines 5-9: period table abbreviation for nuclide, total number of nucleons ($A$), number of valence protons, number of valence neutrons and $2\times J_{z}$ of the system.
\item [-] Line 11: number of states (including ground state) to calculate in Bigstick. 
\item [-] Line 13: maximum number of iterations in Bigstick.
\item [-] Line 15: number of parameters in shell (66 for \emph{sd}-shell)
\item [-] Line 19: total number of isotopes including nuclides previously used to generate wavefunction file.
\item [-] Lines 20-31: list of isotope information including name and $A$, number of valence protons, number of valence neutrons and $2\times J_{z}$ of system.
\item [-] Line 32: output name, used for files generated by all runs.
\item [-] Line 35: number of MILCOMs, defines number of eigenvectors of $A_{ij}$ matrix to keep to define MILCOM subspace. Generally, the first few sorted MILCOMs dominant, a value between 5 and 10 is sufficient. 
\end{itemize}
\emph{The order of the input parameters are not a specific requirement of the script as the function reads in lines following comments for a given parameter but it is not recommended that the input deviate from the explain without testing that the output generated by the code is correct after the modification has been made. }

%----------------------------------------------------------------------------------------
% 	REFERENCES AND RESOURCES
%----------------------------------------------------------------------------------------
\newpage
\section{References}
\begin{itemize}
\item [(1)] B. A. Brown and W. A. Richter, Physical Review C \textbf{74}, 034315 (2006).
\item [(2)] C. W. Johnson and P. G. Krastev, Physical Review C \textbf{81}, 054303 (2010).
\item [(3)] C. W. Johnson, W. E. Ormand, and P. G. Krastev, Computer Physics Communications \textbf{184}, 2761 (2013).
\item [] **something** for basic nuclear theory
\item [] **something** for ``known" physical interactions
\end{itemize}

%\newpage
%\section{Resources}
%\subsection{Glossary}
%\begin{itemize}
%\item [-] Channel: MILCOM with significant differences between interaction parameter sets
%\item [-] MILCOM: most important linear combination of parameters for a given shell and interaction
%\item [-] SPE: single particle energy
%\item [-] TBME: two-body matrix element
%\end{itemize}

\end{document}