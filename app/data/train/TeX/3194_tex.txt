\chapter{Motivation}
\label{s:motivation}

To motivate the need for Nail, this chapter presents a case study of
vulnerabilities due to ad-hoc input parsing and output generation.
Broadly speaking, parsing vulnerabilities can lead to two kinds of
problems---memory corruption and logic errors---and as we show, both
are prevalent in software and lead to significant security problems.

\paragraph{Widely exploited parsing errors.}

Three recent high-profile security vulnerabilities are due to logic
errors in input processing.  In all cases, when the vulnerabilities were
fixed, a similar flaw was exposed immediately afterwards, showing the
need for a different approach to input handling that eliminates those
vulnerabilities by design.

The Evasi0n jailbreak for iOS 6~\cite{evaders6} relies on the XNU kernel and
user-mode code-signing verifier interpreting executable metadata differently, so the code signature
checker sees different bytes at a virtual address than what the kernel maps into the process. The next version of iOS
added an explicit check for this particular metadata inconsistency. However, because parsing and
processing of the input data is still mixed, the jailbreakers could set a flag that re-introduced
the inconsistency after the check, but before signatures are verified~\cite{geohot-evasion}, which
allowed iOS 7 to be jailbroken.

Similarly, vulnerabilities in X.509 parsers for SSL certificates allowed attackers to get
certificates for domains they do not control. First, Moxie Marlinspike discovered that the X.509
parsers in popular browsers handle NUL-bytes in certificates incorrectly~\cite{Marlinspike:SSL}. After this
vulnerability was fixed, Dan Kaminsky discovered~\cite{DBLP:conf/fc/KaminskyPS10} that other
structures, such as length fields and duplicated data, were also handled incorrectly.

Similarly, the infamous Android master key bug~\cite{saurik-masterkey} completely bypassed Android
security by exploiting parser inconsistencies
between the ZIP handler that checks signatures for privileged applications and the ZIP
implementation that ultimately extracts those files. Thus, privileged application bundles could be
modified to include malicious code without breaking their signatures. Google quickly fixed this
particular parser inconsistency, but another vulnerability, based on a different inconsistency
between the parsers, was quickly disclosed~\cite{saurik-masterkey2}.

\paragraph{Case study: ZIP file handling.}

To understand the impact of parsing mistakes in real-world software,
we conducted a systematic study of
vulnerabilities related to ZIP file parsing.  
The ZIP format has been associated with many vulnerabilities, and the
PROTOS Genome project~\cite{protos-c10-archive} found numerous security vulnerabilities
related to input handling
in most implementations of ZIP and other archive formats.
We extend this study by looking at the CVE database.

\input{fig-motivation}

We found 83 vulnerabilities in the CVE database~\cite{cve-database}
that mention the search string ``ZIP\@.''  Just 16 of these vulnerabilities
were related to processing ZIP archives; the rest were unrelated to ZIP
archives or involved applications insecurely using the contents of untrusted
ZIP files.  Figure~\ref{fig:motivation} summarizes the 16 ZIP-related
vulnerabilities.

These input-processing vulnerabilities fall into two broad classes.  The first
class, which occurred 11 times,\footnote{We classified the following vulnerabilities as memory corruption
    attacks based on their description: CVE-2013-5660, -0742, -0138, CVE-2012-4987, -1163, -1162, CVE-2011-2265,
    CVE-2010-4535, -1657, -1336, and -1218.} is memory safety bugs, such as buffer overflows, which allow an
adversary to corrupt the application's memory using specially crafted
inputs.  These mistakes arise in lower-level languages that do not
provide memory safety guarantees, such as C, and can be partially
mitigated by a wide range of techniques, for example static analysis,
dynamic instrumentation, and address space layout randomization, that
make it more difficult for an adversary to exploit these bugs.
Nail helps developers using lower-level languages to avoid these bugs
in the first place.

The second class, which occurred four times in our study,
is logic errors, where application code
misinterprets input data. Safe languages and exploit mitigation technologies do not help against
such vulnerabilities. This can lead to serious security consequences when two systems disagree on
the meaning of a network packet or a signed message, as shown by the vulnerabilities we described
before. CVE-2013-0211 shows that logic errors can be the underlying cause of memory corruption, when
one part of a parser interprets a size field as a signed integer and another interprets it as an
unsigned integer. CVE-2013-7338 is a logic error that allows an attacker to craft ZIP files that are
incorrectly extracted or result in application hangs with applications using a Python ZIP library,
because this library does not check that two fields that contain the size of a file contain the same value.
The Android ZIP file signature verification bug that we described
earlier was also among these 4 vulnerabilities.

These mistakes are highly application-specific, and
are difficult to mitigate using existing techniques, and these mistakes
can occur even in high-level languages that guarantee memory safety. By
allowing developers to specify their data format just once, Nail avoids
logic errors and inconsistencies in parsing and output generation.



% A subclass of logic errors are so-called \textit{weird machines}, where
% implementation side effects or under-specified parser behavior leads to a
% protocol or data format inadvertently becoming a Turing-complete execution
% environment, even though the original grammar did not require it.
% Frequently, this execution environment can either
% then directly manipulate data in unwanted ways or be used to make
% exploiting another bug feasible.\footnote{For example, by compiling a
% return-oriented-programming exploit from code fragments discoverepd on
% the fly.} Examples include x86 page tables~\cite{bangert2013page}, and
% ELF symbols and relocations~\cite{shapiro2013weird}. In the offensive
% research community, this has been generalized into treating a program
% as a \textit{weird machine}~\cite{bratus2011exploit} that operates on
% an input, analogous to a virtual machine operating on bytecode.
% Nail avoids these problems by having the parser precisely match the
% specified grammar, eliminating under-specified behavior.

% With currently prevalent software design methods, it is hard to isolate
% input-handling code from the rest of the program, as user input is
% typically passed through the program and processed in bits and pieces as a
% ``shotgun parser''~\cite{shotgun-parser}. Thus, partially invalid input might be partly 
% processed by the program until the invalid sections are encountered.


% Proper input recognition has been shown to be an excellent way of
% eliminating ambiguous inputs.  In one case, a PDF parser (implemented
% in Coq) was used to reject over $95\%$ of known malicious PDFs by checking
% whether they conform to the PDF format~\cite{Bogk-PDF}. The same project
% also produced a ``counter-example'' PDF that triggered numerous bugs
% in other PDF parsers. However, manually writing parser code and proving
% unambiguity does not scale to the number of file formats and protocols
% in existence and might result in parser code tied to one specific
% application. By supporting a wide range of real-world file formats,
% Nail helps programmers produce precise parsers for complex grammars.

%%This is supposed to go into design
% While it is possible to express short transformations on the input
% entirely as semantic actions\footnote{This is in fact the design
% rationale, to perform computation on the fly as the parser walks the
% parse tree.}, more complicated programs usually construct an internal
% representation, which contains all relevant information from the input
% in a format native to the programming language used. For example, a C
% programmer ideally wants to deal with structs and NULL-terminated arrays,
% whereas a C++ programmer might expect STL containers, a Java programmer
% interfaces, a Haskell programmer records and a LISP programmer property
% lists.  The structure of this internal representation usually resembles
% the structure of the grammar.

