% BASIC SETTINGS
\documentclass[a4paper,12pt]{article} % Set paper size and document type
\usepackage{lmodern} % Use a slightly nicer looking font

% Change margins - default margins are too broad
\usepackage[margin=20mm]{geometry}

% SOURCE CODE LISTING SETTINGS 
% https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings
\usepackage{listings}
\usepackage{color}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
  basicstyle=\footnotesize,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=true,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  deletekeywords={...},            % if you want to delete keywords from the given language
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=single,	                   % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  otherkeywords={*,...},           % if you want to add more keywords to the set
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{mymauve},     % string literal style
  tabsize=2,	                   % sets default tabsize to 2 spaces
  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}

% PREPARE TITLE
\title{\textbf{Homework \#7}}
\author{Name: }
\date{} % Hide the date

% START DOCUMENT
\begin{document}

\maketitle % Insert the title

\section{Drawing Text and Adding Options}

When our bubble game quits, we have no way to start the game over again, and no way to write "GAME OVER" on the screen, so we just make our game close itself. That's not how most real games work: they give the player a choice of playing again or quitting. To do this, we need to be able to draw text on the screen. Drawing text in PyGame is a 4-step process:

\vspace{5mm}
\lstinputlisting[language=Python, firstline=18, lastline=21]{fonttext.py}

\noindent
The first line will create a "font object" which tells us what our letters will look like (what \textbf{font} they use) and how big they will be (this can be any number bigger than zero, for instance size 72 would make letters about 2.5 cm tall). The second line lets us choose what we want to write, what color the letters will be, and what color the space behind the letters will be. The third line turns the text into a special kind of box, and the fourth line decides where the box will be drawn on the screen.\\

\noindent
Of course, in order to actually draw these words on the screen, you'll have to have this inside your game's "while True" loop:

\vspace{5mm}
\begin{lstlisting}[language=Python]
DISPLAYSURF.blit(textSurfaceObj, textRectObj)
pygame.display.update()
\end{lstlisting}

\clearpage

\section{Homework}

\subsection{Adding Text}

Change your game so that it prints "YOU LOSE" across the screen after your circle reaches $r < 5$. You'll need to change your "while True" game loop a little bit so \textbf{nothing but this code} runs after the game has been lost:

\vspace{5mm}
\lstinputlisting[language=Python, firstline=23, lastline=30]{fonttext.py}

\noindent
Think about how you could make it so your "while True" loop has two different sets of jobs it can \textbf{choose} between, based on a \textbf{condition} (did the player lose? yes/no?). HINT: An if/else will help you here.

\subsection{Adding Text - Controlling The Game}

Change your game so that underneath "YOU LOSE", the game tells the user how to quit or replay by pressing certain keys. For instance, if the user presses "q" the game will close, but if they press "r" the game will start over. Remember, you will have to add \textbf{event handling code} to make this work. For example:

\vspace{5mm}
\begin{lstlisting}[language=Python]
if event.type == KEYUP:
	if event.key == K_q:
		pygame.quit()
		sys.exit()
	elif event.key == K_r:
		playerCircle, blueCircles, redCircles = initGame()
		winning = True # Set winning state to true again
\end{lstlisting}

\noindent
This is my key handling code. It can either quit the game, or reset all the circle sizes and positions (to restart the game). You'll need something like this in your code as well.

\end{document}

