\chapter{Umsetzung in Programmiersprachen}
\section{JAVA-Codierung}
\lstset{language=JAVA, tabsize=3, caption={JAVA implementierung der Zahlenbasis}}
\label{listing:JAVA}
\begin{lstlisting}
public class Zahlenbase
{
}	
\end{lstlisting}
% \subsection{Umwandlung ins Dezimalsystem}
% \subsection{Umwandlung vom Dezimalsystem}
\section{PHP-Codierung}
Angesehen werden kann die Umsetzung in PHP\index{PHP}~5.x\index{PHP!PHP 5.x} unter 
"`\href{http://demo.hermann-bsd.de/zahlensysteme/}{http://demo.hermann-bsd.de/zahlensysteme}"'\footnote{Einiges funktioniert da noch nicht...}
\subsection{Interface}\index{Zahlen!-basen}
Zuerst als abstraktes Interface fuer die Definition von Zahlenbasen
\lstset{language=PHP, tabsize=3, caption={PHP Interface der Zahlenbasis}}
\label{listing:PHP:Interface}
\begin{lstlisting}
namespace ahbsd\Zahlensysteme
{
	/**
	 * Interface fuer grundlegende Funktionen, der Basis eines 
	 * Zahlensystems.
	 * 
	 * @author A. Hermann
	 * @copy Copyright &copy; 2016 
	 * Alexander Hermann - Beratung, Software, Design
	 * Zahlensysteme
	 *
	 * @version 1.0
	 */
	interface IBase
	{
		/**
		 * Gibt die Bezeichnung zurueck.
		 * @return string
		 */
		function GetName();
		
		/**
		 * Gibt das Zahlensystem als Integer zurueck.
		 * @return int Zahlensystem-Basis
		 */
		function GetSystem();
		
		/**
		 * Gibt das hoechstmoegliche Zeichen zurueck.
		 * @return char hoechstmoegliches Zeichen
		 */
		function GetMaxSign();
		
		/**
		 * Gibt das Zeichen der Basis fuer den Wert $x zurueck.
		 * @param int $x Wert x
		 * @return char Zeichen der Basis fuer den Wert x
		 */
		function GetSign($x);
	}
}
\end{lstlisting}
\subsection{Implementierung des Interfaces:}
\lstset{caption={PHP Implementierung der Zahlenbasis}}
\label{listing:PHP:Implementation}
\begin{lstlisting}
namespace ahbsd\Zahlensysteme
{
  /**
   * Basis eines Zahlensystems.
   * 
   * @author A. Hermann
   * @copy Copyright &copy; 2016 Alexander Hermann - Beratung, Software, Design
   * Zahlensysteme
   *
   * @version 1.0
   *
   */
  class Base implements IBase
  {
  	/**
  	 * Konstante, die die ASCII (und UTF-8) Position von 'A' speichert. 
  	 * @var int
  	 */
  	const A_POS_UTF8 = 65;
  	
  	/**
  	 * System-Name
  	 * @var string
  	 */
    private $systemName;
    
    /**
     * System als Integer-Zahl. Maximale Anzahl an Zeichen.
     * 
     * @var int
     */
    private $systemInt;
    
    /**
     * Hoechstm	gliches Zeichen.
     * 
     * @var char
     */
    private $maxSign;
    
    /**
     * Konstruktor
     * 
     * @param int $system Zahlensystem-Basis (Maximale Anzahl an Zeichen)
     * @param string $name (Optional) Bezeichnung des Zahlensystems
     */
    public function __construct($system, $name="")
    {
      $this->systemInt=intval($system);
      $this->systemName=$name;
      
      if ($name=="")
      {
        $this->systemName = sprintf("Basis %1\$s", intval($system));
      }
      $tmp = A_POS_UTF8 - 11 + intval($system);
      
      if ($system <= 10)
      {
        $this->maxSign = $system - 1;
      }
      else
      {
        $this->maxSign = mb_convert_encoding('&#' . $tmp . ';', 'UTF-8', 'HTML-ENTITIES');
      }
    }
    
    /**
     * (non-PHPdoc)
     * @see \ahbsd\Zahlensysteme\IBase::GetSign()
     */
    public function GetSign($x)
    {
      $tmp = 65-11+intval($x+1);
      $result = $x;
      
      if(intval($x) >= 10 || intval($x) < 0)
      {
        $result = mb_convert_encoding('&#' . $tmp . ';', 'UTF-8', 'HTML-ENTITIES');
      }
      
      return $result;
    }

    /**
     * (non-PHPdoc)
     * @see \ahbsd\Zahlensysteme\IBase::GetName()
     */
    public function GetName()
    {
      return $this->systemName;
    }
    
    /**
     * (non-PHPdoc)
     * @see \ahbsd\Zahlensysteme\IBase::GetSystem()
     */
    public function GetSystem()
    {
      return $this->systemInt;
    }
    
    /**
     * (non-PHPdoc)
     * @see \ahbsd\Zahlensysteme\IBase::GetMaxSign()
     */
    public function GetMaxSign()
    {
      return $this->maxSign;
    }
    
    /**
     * Statische Funktion zur Umwandlung einer Zahl aus dem Dezimalsystem in eine
     * Zahl des Zahlensystems bX.
     * 
     * @param int $b10 Umzuwandelnde Zahl aus dem Dezimalsystem.
     * @param int $bX Zahlensystem in das b10 umgewandelt werden soll.
     * @param bool $rechenweg (Optional) Gibt an, ob der Rechenweg angezeigt werden soll oder nicht; ohne Angabe standardmaessig FALSE. 
     * @return string Ergebnis in Basis bX
     */
    public static function Base10toBaseX($b10, $bX, $rechenweg=false)
    {
      $targetBase = new Base(intval($bX));
      $result = array();
      $restArray = array();
      $rOut = "";
      
      $quotient = intval($b10);
      $rest = 0;
      $cnt = 0;
      
      if ($rechenweg) 
      {
        echo "\n<!-- start Rechenweg --><pre>\n";
        echo "Rechenweg:\n";
      }
      
      while (intval($quotient) != 0)
      {
        $rest = $quotient % $bX;
        if ($rechenweg) echo "$quotient : $bX = " . intval($quotient / $bX) . " Rest $rest [" . $targetBase->GetSign($rest) . "]\n";
        $restArray[] = $rest;
        $quotient = intval($quotient / $bX);
      }
      if ($rechenweg) echo "--------------------\n";
      $cnt = count($restArray);
      
      for($i=0;$i < $cnt; $i++)
      {
        $result[$cnt - ($i + 1)] = $targetBase->GetSign($restArray[$i]);
      }  
      
      for($i=0; $i < $cnt; $i++)
      {
        $rOut .= $result[$i];
      }
      
      if ($rechenweg)
      {
        printf("Das Ergebnis der Umwandlung von %1\$s der Basis 10 in die %2\$s ist '%3\$s'\n", $b10, $targetBase->GetName(), $rOut);
        echo "</pre><!-- ende Rechenweg -->\n\n";
      }
      return $rOut;
    }
    
    /**
     * 
     * @param string $bxVal Der Wert der Basis $bX
     * @param int $bX Die Quell Basis.
     * @param bool $rechenweg Gibt an, ob der Rechenweg ausgegeben werden soll, 
     * 	oder nicht.
     * @return int Der Wert $bxVal umgerechnet in Basis 10.
     */
    public static function BaseXtoBase10($bxVal, $bX, $rechenweg=false)
    {
    	$sourceBase = new Base(intval($bX));
    	$step = strlen($bxVal) - 1;
    	$result = 0;
    	$z = 0;
    	$curCarCorrect = false;
    	$intW = 0;
    	
    	if ($rechenweg)
    	{
    		echo "\n<!-- start Rechenweg --><pre>\n";
    		echo "Rechenweg:\n";
    	}
    	
    	while ($step >= 0) {
    		$charW = $bxVal[$step];
    		$tmpIntVal = intval($charW, 10);
    		
    		$curCarCorrect = ('' . $tmpIntVal . ''==$charW); 
    		    		
    		if ($rechenweg) printf("%3\$s) Zeichen '%1\$s' an Stelle %2\$s ", $charW, $step, $z+1); 
    		
    		if ($curCarCorrect) {
    			$intW = $tmpIntVal;
    		}
    		else {
    			// CharWert Umrechnung
    			$tmp2 = ord($charW);
    			    			
    			$intW = intval($tmp2) - 65 + 10; // A_POS_UTF8;
    			
    			if ($rechenweg) printf("= (int) %1\$s", $intW);
    		}
    		
    		if ($rechenweg) echo "\n";
    		
    		$tmpR = 1;
    		
    		for ($i = 0; $i < $z; $i++) {
    			$tmpR = $tmpR * $bX;
    		}
    		
    		if ($rechenweg) printf("%1\$s^%2\$s=%3\$s\n%3\$s * %4\$s = ", $bX, $z, $tmpR, $intW);
    		
    		$tmpR = $tmpR * $intW;
    		
    		if ($rechenweg) echo $tmpR . "\n\n";
    		
    		$step--;
    		$result += $tmpR;
    		$z++;
    	}
    	
    	if ($rechenweg)
    	{
    		printf("Das Ergebnis der Umwandlung von '%1\$s' der %2\$s in die Basis 10 ist %3\$s\n", $bxVal, $sourceBase->GetName(), $result);
    		echo "</pre><!-- ende Rechenweg -->\n\n";
    	}
    	
    	return $result;
    }
  }
}
\end{lstlisting}

\section{C\#-Codierung}
\subsection{Interface}\index{Interface}
Zuerst ein generalisiertes Interface, um die grundlegenden Eigenschaften und Methoden zu definieren.
\lstloadlanguages{[Sharp]C}
\lstset{language=[Sharp]C, tabsize=3, caption={C-Sharp Interface der Zahlenbasis}}
\label{listing:C_sharp:interface}
\begin{lstlisting}
using System;

namespace Zahlensysteme
{
	/// <summary>
	/// Interface einer Zahlenbasis: Grundlagen.
	/// </summary>
	public interface IBase
	{
		/// <summary>
		/// Der Name der Zahlenbasis.
		/// </summary>
		/// <value>Der Name der Zahlenbasis.</value>
		string Name { get; }
		/// <summary>
		/// Die Anzahl der moeglichen Zeichen.
		/// </summary>
		/// <value>Das Zahlensystem.</value>
		uint System { get; }
		/// <summary>
		/// Das hoechstmoegliche Zeichen.
		/// </summary>
		/// <value>Die maximale Anzahl an Zeichen.</value>
		Char MaxSign { get; }
		/// <summary>
		/// Gibt das entsprechende Zeichen fuer die uebergebene Zahl zurueck.
		/// </summary>
		/// <returns>Das Zeichen fuer die uebergebene Zahl.</returns>
		/// <param name="number">Die zu uebersetzende Zahl.</param>
		Char GetSign(uint number);
		/// <summary>
		/// Gibt die Zahl des uebergebenen Zeichens zurueck.
		/// </summary>
		/// <returns>Die Zahl fuer das uebergebene Zeichen.</returns>
		/// <param name="sign">Das zu uebersetzende Zeichen.</param>
		uint GetNumber(char sign);
	}
}


\end{lstlisting}
\subsection{Exception}\index{Exception}
Dann eine spezialisierte Exception, falls hier irgendetwas grandios daneben geht\footnote{z.B.: wenn jemand versucht eine Zahlenbasis unter 2 anzulegen\dots}
\lstset{caption={C-Sharp ZahlensystemException}}
\label{listing:C_sharp:Exception}
\begin{lstlisting}
using System;

namespace Zahlensysteme
{
	/// <summary>
	/// Exception fuer Zahlensysteme.
	/// </summary>
	public class ZahlensystemException : Exception
	{
		/// <summary>
		/// Das Zahlensystem als uint. Gleichzusetzen mit tryBase.System.
		/// </summary>
		private uint system;
		/// <summary>
		/// Die auszuprobierende Basis.
		/// </summary>
		private IBase tryBase;

		/// <summary>
		/// Konstruktor mit Angabe einer Zahlenbasis. Siehe <see cref="Zahlensysteme.ZahlensystemException"/>.
		/// </summary>
		/// <param name="tb">Test-Basis.</param>
		public ZahlensystemException(IBase tb)
			: base(String.Format("Das kleinstmoegliche Zahlensystem ist 2; {0} ist zu klein!!", tb.System))
		{
			this.tryBase = tb;
			this.system = tb.System;
		}

		/// <summary>
		/// Konstruktor mit Angabe einer Zahlenbasis. Siehe <see cref="Zahlensysteme.ZahlensystemException"/>.
		/// </summary>
		/// <param name="s">Zahlenbasis als Zahl.</param>
		public ZahlensystemException(uint s)
			: base(String.Format("Das kleinstmoegliche Zahlensystem ist 2; {0} ist zu klein!!", s))
		{
			this.tryBase = null;
			this.system = s;
		}

		/// <summary>
		/// Konstruktor mit Uebergabe der verwendeten Zahlenbasis, so wie einer falschen Zahl ausserhalb der Zahlenbasis. 
		/// Siehe <see cref="Zahlensysteme.ZahlensystemException"/>.
		/// </summary>
		/// <param name="tb">verwendeten Zahlenbasis.</param>
		/// <param name="s">falschen Zahl.</param>
		public ZahlensystemException(IBase tb, uint s)
			: base(String.Format("{0} {1} ist ausserhalb der Basis {2}.", tb, s, UeUetb.System))
		{
			this.tryBase = tb;
			this.system = tb.System;
		}

	}
}
\end{lstlisting}

\subsection{Implementierung des Interfaces}\index{Interface!implementierung}
\lstset{caption={C-Sharp Implementierung des Interfaces}}
\label{listing:C_sharp:Implementierung}
\begin{lstlisting}
using System;
using System.Text;
using System.Collections.Generic;


namespace Zahlensysteme
{
	/// <summary>
	/// Zahlenbasis; implementiert <see cref="Zahlensysteme.IBase"/>.
	/// </summary>
	public class Base : IBase
	{
		/// <summary>
		/// Der Name der Zahlenbasis.
		/// </summary>
		private string name;
		/// <summary>
		/// Die Zahlenbasis; die Anzahl der moeglichen Zeichen.
		/// </summary>
		private uint system;
		/// <summary>
		/// Das hoechstmoegliche Zeichen.
		/// </summary>
		private Char maxSign;
		/// <summary>
		/// Die Position von 'A'.
		/// </summary>
		protected const uint A_POS=65;
		/// <summary>
		/// Die Position von '0'.
		/// </summary>
		protected const uint ZERO_POS=48;

		/// <summary>
		/// Konstruktor ohne Parameter.
		/// </summary>
		public Base()
		{
			this.system = 10;
			this.SetName();
			this.maxSign = this.GetSign(9);
		}

		/// <summary>
		/// Konstruktor mit Uebergabe einer Basis-Zahl.
		/// </summary>
		/// <param name="System">Basis-Zahl.</param>
		public Base(uint System)
		{
			this.system = System;
			this.SetName();
			this.maxSign = this.GetSign(System-1);

			if (System < 2)
			{
				throw new ZahlensystemException(this);
			}
		}

		/// <summary>
		/// Konstruktor mit Uebergabe einer Basis-Zahl und einem Namen der Zahlenbasis.
		/// </summary>
		/// <param name="System">Basis-Zahl.</param>
		/// <param name="Name">Name der Zahlenbasis.</param>
		public Base(uint System, string Name)
		{
			this.system = System;
			this.name = "Basis " + Name;
			this.maxSign = this.GetSign(System-1);

			if (System < 2)
			{
				throw new ZahlensystemException(this);
			}
		}

		/// <summary>
		/// Setzt den Namen diese Zahlenbasis.
		/// </summary>
		protected void SetName()
		{
			this.name = "Basis " + this.system.ToString();
		}

		#region IBase Members
		/// <summary>
		/// Der Name der Zahlenbasis.
		/// </summary>
		/// <value>Der Name der Zahlenbasis.</value>
		public string Name { get{ return this.name; } }

		/// <summary>
		/// Die Anzahl der moeglichen Zeichen.
		/// </summary>
		/// <value>Das Zahlensystem.</value>
		public uint System { get { return this.system; } }

		/// <summary>
		/// Das hoechstmoegliche Zeichen.
		/// </summary>
		/// <value>Die maximale Anzahl an Zeichen.</value>
		public char MaxSign { get { return this.maxSign; } }

		/// <summary>
		/// Gibt das entsprechende Zeichen fuer die uebergebene Zahl zurueck.
		/// </summary>
		/// <returns>Das Zeichen fuer die uebergebene Zahl.</returns>
		/// <param name="number">Die zu uebersetzende Zahl.</param>
		public char GetSign(uint number)
		{
			char result;

			if (number < this.system)
			{
				result = GetSignByNumber(number);
			}
			else
			{
				throw new ZahlensystemException(this, number);
			}

			return result;
		}

		/// <summary>
		/// Gibt die Zahl des uebergebenen Zeichens zurueck.
		/// </summary>
		/// <returns>Die Zahl fuer das uebergebene Zeichen.</returns>
		/// <param name="sign">Das zu uebersetzende Zeichen.</param>
		public uint GetNumber(char sign)
		{
			uint result = GetNumberBySign(sign);

			if (result >= this.system)
			{
				throw new ZahlensystemException(this, result);
			}

			return result;
		}
		#endregion

		/// <summary>
		/// Gibt das entsprechende Zeichen fuer die uebergebene Zahl zurueck.
		/// </summary>
		/// <returns>Das Zeichen fuer die uebergebene Zahl.</returns>
		/// <param name="number">Die zu uebersetzende Zahl.</param>
		public static char GetSignByNumber(uint number)
		{
			char result = ' ';
			uint tmpI;

			if (number < 10)
			{
				tmpI = number + ZERO_POS;
			}
			else
			{
				tmpI = number - 10 + A_POS;
			}
			result = (char)tmpI;

			return result;
		}

		/// <summary>
		/// Gibt die Zahl des uebergebenen Zeichens zurueck.
		/// </summary>
		/// <returns>Die Zahl fuer das uebergebene Zeichen.</returns>
		/// <param name="sign">Das zu uebersetzende Zeichen.</param>
		public static uint GetNumberBySign(char sign)
		{
			uint result = 0;
			uint tmp;

			if (Char.IsDigit(sign))
			{
				result = uint.Parse(sign.ToString());
			}
			else
			{
				tmp = (uint)sign;
				result = tmp - A_POS + 10;
			}

			return result;
		}

		/// <summary>
		/// Gibt grundlegende Informationen ueber diese Zahlenbasis zurueck.
		/// </summary>
		/// <returns>A <see cref="System.String"/> that represents the current <see cref="Zahlensysteme.Base"/>.</returns>
		public override string ToString()
		{
			StringBuilder result = new StringBuilder(this.name);
			result.Append("; MaxSign: ");
			result.Append(this.maxSign);

			return result.ToString();
		}

		/// <summary>
		/// Statische Methode zur Umwandlung einer Zahl der Basis 10 zu der Basis X.
		/// </summary>
		/// <returns>Eine <see cref="System.Collections.Generic.List<String>"/>, die an erster Stelle das Ergebnis enthaelt.</returns>
		/// <param name="valB10">Wert der Basis 10.</param>
		/// <param name="X">Ziel-Basis.</param>
		/// <param name="Rechenweg">Rechenweg mit <c>true</c> in die Ergebnis-Liste packen, oder nicht.</param>
		public static List<string> Base10toBaseX(ulong valB10, uint X, bool Rechenweg)
		{
			List<string> result;
			string resultVal = String.Empty;
			IBase targetBase = new Base(X);
			ulong quotient = valB10;
			ulong tmpQuotient;
			uint rest = 0;
			List<uint> restList = new List<uint>();
			string[] fmt = new string[2];
			string tmpFmt;

			fmt[0] = "{0} : {1} = {2} Rest {3}";
			fmt[1] = "{0} : {1} = {2} Rest {3} [{4}]";

			if (!Rechenweg)
			{
				result = new List<string>(1);
				result.Add(String.Empty);
			}
			else
			{
				result = new List<string>();
				result.Add(String.Empty);
				result.Add("Rechenweg:");
			}

			while (quotient > 0)
			{
				tmpQuotient = quotient;
				rest = (uint)(quotient % X);
				quotient = quotient / X;
				restList.Add(rest);
				if (Rechenweg)
				{
					if (rest > 9)
					{
						tmpFmt = fmt[1];
					}
					else
					{
						tmpFmt = fmt[0];
					}
					result.Add(String.Format(tmpFmt, tmpQuotient, X, quotient, rest, targetBase.GetSign((uint)rest)));
				}

				resultVal = targetBase.GetSign((uint)rest).ToString() + resultVal;
			}

			if (Rechenweg) result.Add(String.Format("Das Ergebnis der Umwandlung von {0} der Basis 10 in die Basis {1} ist '{2}'", valB10, X, resultVal));
			result[0] = resultVal;

			return result;
		}

		/// <summary>
		/// Statische Methode zur Umwandlung einer Zahl der Basis X zu der Basis 10.
		/// </summary>
		/// <returns>Eine <see cref="System.Collections.Generic.List<String>"/>, die an erster Stelle das Ergebnis enthaelt.</returns>
		/// <param name="valBX">Wert der Basis X.</param>
		/// <param name="X">Quell-Basis.</param>
		/// <param name="Rechenweg">Rechenweg mit <c>true</c> in die Ergebnis-Liste packen, oder nicht.</param>
		public static List<string> BaseXtoBase10(string valBX, uint X, bool Rechenweg)
		{
			List<string> result;
			IBase sourceSystem = new Base(X);

			int step = valBX.Length -1;
			char[] valBXC = valBX.ToCharArray();
			char charW;
			uint intW = 0;
			uint tmp;
			int zaehler = 0;
			string[] fmt = new string[2];
			string tmpFmt;

			fmt[0] = "Wert an Position {0}: '{1}' = {2} int; {3}^{0} * {2} = {4} * {2} = {5}";
			fmt[1] = "Wert an Position {0}: {1}; {3}^{0} * {2} = {4} * {2} = {5}";

			if (!Rechenweg)
			{
				result = new List<string>(1);
				result.Add(String.Empty);
			}
			else
			{
				result = new List<string>();
				result.Add(String.Empty);
				result.Add("Rechenweg:");
			}

			while (step >= 0)
			{
				charW = valBXC[step];

				tmp = sourceSystem.GetNumber(charW);

				if (Char.IsDigit(charW))
				{
					tmpFmt = fmt[1];
				}
				else
				{
					tmpFmt = fmt[0];
				}

				if (Rechenweg) result.Add(String.Format(tmpFmt, zaehler, charW, tmp, X, (uint)Math.Pow(X, zaehler), tmp * (uint)Math.Pow(X, zaehler)));
				intW += tmp * (uint)Math.Pow(X, zaehler);

				zaehler++;
				step--;
			}
			result[0] = intW.ToString();

			if (Rechenweg) result.Add(String.Format("Das Ergebnis der Umwandlung von '{0}' der Basis {1} in die Basis 10 ist {2}", valBX, X, result[0]));
			return result;
		}

		/// <summary>
		/// Statische Methode zur Umwandlung einer Zahl der Basis X zu der Basis Y.
		/// </summary>
		/// <returns>Eine <see cref="System.Collections.Generic.List<String>"/>, die an erster Stelle das Ergebnis enthaelt.</returns>
		/// <param name="valX">Wert der Basis X.</param>
		/// <param name="X">Quell-Basis.</param>
		/// <param name="Y">Ziel-Basis</param>
		/// <param name="Rechenweg">Rechenweg mit <c>true</c> in die Ergebnis-Liste packen, oder nicht.</param>
		public static List<string> BaseXtoBaseY(string valX, uint X, uint Y, bool Rechenweg)
		{
			List<string> result;
			uint tmp;
			int l;
			string tmpS;

			if (X!=10)
			{
				result = Base.BaseXtoBase10(valX, X, Rechenweg);
				tmp = uint.Parse(result[0]);
				l = result.Count;
			}
			else
			{
				tmp = uint.Parse(valX);
				l = 0;
				result = new List<string>();
			}

			if (l > 0)
			{
				if (Y!=10)
				{
					result.AddRange(Base.Base10toBaseX(tmp, Y, Rechenweg));
				}
				else
				{
					result.Add(tmp.ToString());
				}
			}
			else
			{
				if (Y!=10)
				{
					result = Base.Base10toBaseX(tmp, Y, Rechenweg);
				}
				else
				{
					result = new List<string>();
					result.Add(tmp.ToString());
				}
			}
			tmpS = String.Format("Das Ergebnis der Umwandlung von '{0}' der Basis {1} in die Basis {3} ist '{2}'", valX, X, result[l], Y);
			if (Rechenweg) result.Add(tmpS);
			result.Add(result[l]);
			return result;
		}
	}
}
\end{lstlisting}