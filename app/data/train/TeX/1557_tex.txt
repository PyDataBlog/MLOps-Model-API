\documentclass[a4paper]{article}
\usepackage{fontspec}
\usepackage{polyglossia}
\usepackage[cache=false]{minted}
\usepackage{color}

\frenchspacing
\setlength{\hoffset}{0cm}
\setlength{\voffset}{0cm}
\setlength{\textwidth}{16cm}
\setlength{\textheight}{25cm}
\setlength{\oddsidemargin}{0cm}
\setlength{\topmargin}{0cm}
\setlength{\headheight}{0cm}
\setlength{\headsep}{0cm}
\setlength{\abovecaptionskip}{3pt}
\setlength{\belowcaptionskip}{0pt}

\title{Primer projektnog zadatka: studentska služba}
\date{2018.}
\author{Branko Milosavljević}

\begin{document}

\maketitle

\section{Definicija projektnog zadatka}

Implementirati aplikaciju za vođenje evidencije u studentskoj službi. Aplikacija
treba da obezbedi rad sa sledećim entitetima:

\begin{itemize}
  \item \textit{student} opisan \textit{brojem indeksa}, \textit{imenom},
  \textit{prezimenom}, \textit{imenom roditelja},
  \textit{datumom rođenja}, \textit{JMBG brojem}, \textit{adresom},
  \textit{telefonom}, \textit{e-mailom} i \textit{tekućom godinom studija}. Pri
  tome ne mogu postojati dva studenta sa identičnim brojem indeksa niti JMBG
  brojem. Fajl sa spiskom studenata se ažurira iz aplikacije, nakon izvršavanja
  odgovarajućih komandi.

  \item \textit{Referent} studentske službe opisan \textit{imenom},
  \textit{prezimenom}, \textit{korisničkim imenom} i \textit{lozinkom}.
\end{itemize}

Izbor formata u kome se podaci o studentima i referentima zapisuju u fajlove je
deo projektnog zadatka. Nakon pokretanja aplikacije referent ima mogućnost
jedino da se prijavi na sistem, pri čemu unosi korisničko ime i lozinku. Nakon
uspešnog prijavljivanja na sistem aplikacija referentu treba da omogući sledeće:

\begin{itemize}
  \item Pronalaženje studenta po broju indeksa. Nakon izvršavanja ove komande
  prikazuju se podaci o studentu sa datim brojem indeksa.

  \item Pretraživanje studenata po prezimenu. Nakon izvršavanja svake od ovih
  komandi prikazuju se podaci o studentima koji zadovoljavaju kriterijum
  pretraživanja.

  \item Pregledanje svih studenata sortiranih po prezimenu.

  \item Izmenu adrese, telefona i e-maila studenta. Pri izvršavanju ove komande,
  referent unosi broj indeksa studenta čiji podaci se menjaju i potom nove 
  podatke.
  
  \item Upis studenata na prvu godinu studija, tj. upis novog studenta koji 
  prethodno nije bio evidentiran u sistemu.
  
  \item Grupni upis studenata na narednu godinu studija. Pri tome, unose se
  brojevi indeksa onih studenata koji upisuju narednu godinu, i podatak o
tekućoj
  godini studija se inkrementira za svakog od njih.
  
\end{itemize}

\section{Rešenje zadatka}

\subsection{Rukovanje referentima}

Jednog referenta studentske službe ćemo u programu reprezentovati rečnikom, čiji
elementi odgovaraju podacima koje evidentiramo za svakog referenta. Sledeći
primer predstavlja opis jednog referenta studentske službe.

\begin{minted}{python}
referent1 = {
  'ime': 'Mitar',
  'prezime': 'Miric',
  'username': 'mitar',
  'password': '123'}
\end{minted}

Kolekciju referenata ćemo predstaviti pomoću liste čiji elementi prestavljaju
pojedinačne referente. Prema tome, svaki element liste biće rečnik sa
elementima kao iz prethodnog primera. U sledećem primeru definišemo ovakvu listu
sa 3 hipotetička elementa.

\begin{minted}{python}
referenti = [referent1, referent2, referent3]
\end{minted}

Pošto ćemo referente čuvati u tekstualnoj datoteci (po jedan referent u svakom
redu), trebalo bi napraviti funkcije za konverziju rečnika koji predstavlja
referenta u string i obrnuto. Podaci koji opisuju referenta u jednom redu
datoteke biće razdvojeni vertikalnom crtom (\texttt{'|'}).

\begin{minted}{python}
def ref2str(ref):
    return '|'.join([ref['ime'], ref['prezime'], ref['username'], \
        ref['password']])

def str2ref(line):
    if line[-1] == '\n':
        line = line[:-1]
    ime, prezime, username, password = line.split('|')
    ref = {
      'ime': ime,
      'prezime': prezime,
      'username': username,
      'password': password
    }
    return ref
\end{minted}

Učitavanje referenata iz fajla u globalnu promenljivu \texttt{referenti}
obavićemo u funkciji \texttt{loadRefs} kao u sledećem primeru. U ovoj funkciji
if naredbom proveravamo da li smo slučajno iz fajla učitali prazan red (takve
redove preskačemo).

\begin{minted}{python}
def loadRefs():
    for line in open('referenti.txt', 'r').readlines():
        if len(line) > 1:
            ref = str2ref(line)
            referenti.append(ref)
\end{minted}

Operacija prijavljivanja referenta na sistem podrazumena unošenje korisničkog
imena i lozinke. Data kombinacija imena i lozinke se traži među svim referentima
koje smo prethodno učitali u listu čiji elementi su rečnici. Traženje se obavlja
sekvencijalno, sve dok se ne nađe traženi referent ili dok se ne iscrpe svi
elementi liste. U sledećem primeru data je funkcija \texttt{login} koja obavlja
ovu operaciju.

\begin{minted}{python}
def login(username, password):
    for ref in referenti:
        if ref['username'] == username and ref['password'] == password:
            return True
    return False
\end{minted}

Prethodno prikazane funkcije čine jedan modul koji smo smestili u datoteku
\texttt{referenti.py}. Inicijalizacija ovog modula sastoji se iz inicijalizacije
liste referenata (na praznu listu) i poziva funkcije \texttt{loadRefs} radi učitavanja
podataka iz datoteke.

\begin{minted}{python}
referenti = []
loadRefs()
\end{minted}

\subsection{Rukovanje studentima}

Slično kao u slučaju referenata studentske službe, studente ćemo reprezentovati
rečnikom čiji elementi odgovaraju podacima koje evidentiramo za svakog studenta.
Sledeći primer predstavlja opis jednog studenta.

\begin{minted}{python}
student1 = {
  'indeks': 'E1',
  'ime': 'Milojko',
  'prezime': 'Pantic',
  'roditelj': 'Mitar',
  'datum': '10.10.1950.',
  'jmbg': '1234567890123',
  'adresa': 'Marsala Tita 11, Beograd',
  'telefon': '011/1234-567',
  'email': 'milojko@pantic.com',
  'godina': '3'}
\end{minted}

Lista ovakvih rečnika predstavljaće podatke o svim studentima upisanim na
fakultet. U narednom primeru prikazana je takva lista sa tri hipotetička
elementa.

\begin{minted}{python}
studenti = [student1, student2, student3]
\end{minted}

Konverzija rečnika u string i obrnuto -- korišćena prilikom učitavanja i
snimanja u datoteku -- prikazana je sledećim funkcijama.

\begin{minted}{python}
def str2student(line):
    if line[-1] == '\n':
        line = line[:-1]
    indeks, ime, prezime, roditelj, datum, jmbg, adresa, telefon, email, godina = line.split('|')
    stud = {
      'indeks': indeks,
      'ime': ime,
      'prezime': prezime,
      'roditelj': roditelj,
      'datum': datum,
      'jmbg': jmbg,
      'adresa': adresa,
      'telefon': telefon,
      'email': email,
      'godina': godina
    }
    return stud

def student2str(stud):
    return '|'.join([stud['indeks'], stud['ime'], stud['prezime'], 
      stud['roditelj'], stud['datum'], stud['jmbg'], stud['adresa'], 
      stud['telefon'], stud['email'], stud['godina']])
\end{minted}

Ispis podataka o studentima na ekranu biće organizovan tabelarno, sa fiksnim
širinama pojedinih kolona tabele. U tu svrhu definisane su i funkcije koje
vraćaju zaglavlje tabele (\texttt{formatHeader}), string reprezentaciju jednog
studenta (\texttt{formatStudent}), string reprezentaciju date liste studenata
(\texttt{formatStudents}) i string reprezentaciju liste svih studenata
(\texttt{formatAllStudents}).

\begin{minted}[fontsize=\small]{python}
def formatHeader():
    return \
      "Indeks  |Ime       |Prezime     |Ime rod.  |Datum rodj.|JMBG        |Email               |Godina\n" \
      "--------+----------+------------+----------+-----------+------------+--------------------+------"

def formatStudent(stud):
    return "{0:8}|{1:10}|{2:12}|{3:10}|{4:10}|{5:13}|{6:20}|{7:>6}".format(
      stud['indeks'],
      stud['ime'],
      stud['prezime'],
      stud['roditelj'],
      stud['datum'],
      stud['jmbg'],
      stud['email'],
      stud['godina'])

def formatStudents(studList):
    result = ""
    for stud in studList:
        result += formatStudent(stud) + '\n'
    return result

def formatAllStudents():
    return formatStudents(studenti)
\end{minted}

Učitavanje i snimanje liste studenata realizovano je na sličan način kao u
prethodnom slučaju, sa referentima studentske službe. U odnosu na taj primer
dodata je provera da li datoteka sa spiskom studenata postoji (funkcija
checkFile). Ako bi se program pokrenuo bez te datoteke, ona će automatski biti
kreirana i njen sadržaj biće inicijalno prazan.

\begin{minted}{python}
from os.path import exists

def loadStudents():
    checkFile()
    for line in open('studenti.txt', 'r').readlines():
        if len(line) > 1:
            stud = str2student(line)
            studenti.append(stud)

def saveStudents():
    file = open('studenti.txt', 'w')
    for stud in studenti:
        file.write(student2str(stud))
        file.write('\n')
    file.close()
    
def checkFile():
    if not exists('studenti.txt'):
        open('studenti.txt', 'w').close()
\end{minted}

Pronalaženje studenta sa datim brojem indeksa obavlja funkcija
\texttt{findStudent} iteracijom kroz listu svih studenata koji su prethodno
učitani iz datoteke. Rezultat funkcije je rečnik koji predstavlja traženog
studenta (ako je student sa datim brojem indeksa pronađen) ili \texttt{None}
(ako takav student nije pronađen).

\begin{minted}{python}
def findStudent(indeks):
    for stud in studenti:
        if stud['indeks'] == indeks:
            return stud
    return None
\end{minted}

Prethodna funkcija pronalazi studenta u listi po broju indeksa. Pretraživanje
liste studenata može se obaviti i po nekom drugom obeležju studenta. Naredna
funkcija, \texttt{searchStudents}, pronalazi sve studente koji imaju obeležje sa
imenom jednakim parametru \texttt{field}, i vrednošću jednakom parametru
\texttt{value}. Rezultat funkcije je lista studenata koji zadovoljavaju
kriterijum pretrage. Ova lista može biti i prazna ako takvih studenata nema.

Pored toga, funkcija pretpostavlja da je vrednost svih elemenata u rečniku tipa
string. Poređenje vrednosti obavlja se uz prethodnu konverziju u velika slova
kako bi se razlike između malih i velikih slova ignorisale.

\begin{minted}{python}
def searchStudents(field, value):
    result = []
    for stud in studenti:
        if stud[field].upper() == value.upper():
            result.append(stud)
    return result
\end{minted}

Dodavanje novog studenta u listu studenata obavlja funkcija \texttt{addStudent}.
Ažuriranje podataka o studentu, tj. zamenu elementa u listi studenata obavlja
funkcija \texttt{updateStudent}. Funkcija \texttt{advanceStudent} obavlja upis
studenta u narednu godinu studija. Tom prilikom se inkrementira obeležje godina.
Pošto ovo obeležje sadrži podatak string tipa, radi inkrementiranja je potrebno
prvo ga konvertovati u celobrojni podatak. Nakon inkrementiranja, nova vrednost
se konvertuje nazad u string, i kao takva upisuje u rečnik.

\begin{minted}{python}
def addStudent(stud):
    studenti.append(stud)

def updateStudent(index, stud):
    studenti[index] = stud

def advanceStudent(stud):
    stud['godina'] = str(int(stud['godina']) + 1)
\end{minted}

Sortiranje liste studenata zasniva se na ideji da se prvo pronađe najmanji
element u listi, i potom taj element i prvi element liste zamene mesta. Na taj
način će prvi element liste biti ujedno i najmanji. Ako sada ovaj postupak
ponovimo za listu skraćenu za prvi element, dobićemo drugi najmanji element na
drugom mestu u listi. Ukoliko ove operacije ponovimo sve dok ne dobijemo listu
dužine 1 (u kojoj je najmanji element ujedno i jedini) dobićemo sortiranu listu.

Kao primer ove operacije, posmatrajmo listu brojeva prikazanu na narednoj slici.
Najmanji element te liste možemo pronaći sekvencijalnim prolaskom kroz listu od
početka do kraja. U ovom primeru to je broj 6, na poziciji 3 (pozicije brojimo
počevši od nule).

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|} \hline
23 & 11 & 15 & \color{red}6 & 17 & 28 & 13 \\ \hline
\end{tabular}
\end{center}

Nakon zamene nultog i trećeg elementa liste, lista će izgledati ovako:

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|} \hline
6 & 11 & 15 & 23 & 17 & 28 & 13 \\ \hline
\end{tabular}
\end{center}

Sada možemo ponovo da tražimo najmanji element liste, ali počevši od elementa sa
indeksom 1. U ovom primeru to je broj 11 na poziciji 1 -- samim tim, zamena
mesta elementima nije neophodna jer u bi u ovom slučaju element menjao mesto sa
samim sobom.

U narednom koraku tražimo najmanji element liste počevši od pozicije 2. Tada je
najmanji element broj 13 koji se nalazi na poziciji 6. Nakon zamene mesta
elementima sa pozicijama 2 i 6, redosled elemenata liste biće sledeći (crvenom
bojom su označeni elementi koji su zamenili mesta):

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|} \hline
6 & 11 & \color{red}13 & 23 & 17 & 28 & \color{red}15 \\ \hline
\end{tabular}
\end{center}

Naredni ciklus pronalaženja najmanjeg elementa i zamene mesta počinje od indeksa
3. Mesta će zameniti elementi sa indeksima 3 i 6. Stanje nakon zamene izgleda
ovako:

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|} \hline
6 & 11 & 13 & \color{red}15 & 17 & 28 & \color{red}23 \\ \hline
\end{tabular}
\end{center}

Naredni ciklus pronalaženja najmanjeg elementa i zamene mesta počinje od indeksa
4. Element sa indeksom 4 je ujedno i najmanji, pa se ne mora premeštati.

Novi ciklus počinje od indeksa 5, i tom prilikom elementi sa indeksima 5 i 6
menjaju mesta. Stanje liste je sada sledeće:

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|} \hline
6 & 11 & 13 & 15 & 17 & \color{red}23 & \color{red}23 \\ \hline
\end{tabular}
\end{center}

U narednom koraku preostaje da se analizira lista dužine 1, kojoj je prvi
(jedini) element ujedno i najmanji, pa se postupak ovde završava.

Prethodno prikazani postupak se može primeniti i na sortiranje liste studenata,
sa tom razlikom što elementi liste nisu celi brojevi nego rečnici koji opisuju
pojedine studente. Za međusobno poređenje studenata koristi se neko od obeležja
rečnika.

Funkcija \texttt{findMin} obavlja pronalaženje najmanjeg elementa u listi
\texttt{studList}, poredeći obeležja sa nazivom \texttt{key}, počevši od
pozicije \texttt{start}. Rezultat funkcije je indeks najmanjeg elementa u listi.
Ako se funkciji prosledi prazna lista (dužine nula) rezultat funkcije će biti -1
(što označava grešku). Isti rezultat, kao signal greške, biće vraćen ako je
vrednost indeksa \texttt{start} veća ili jednaka od dužine cele liste. Za slučaj
da je indeks \texttt{start} pozicioniran na poslednji element liste (slučaj
\texttt{n-start==1}), rezultat funkcije je upravo taj indeks. U ostalim
slučajevima potrebno je pronaći najmanji element počevši od indeksa
\texttt{start} do kraja liste (indeksa \texttt{n-1}). U promenljivoj
\texttt{min} čuva se tekući najmanji pronađeni element, a u promenljivoj
\texttt{minPos} njegov indeks u listi. Rezultat funkcije biće vrednost
promenljive \texttt{minPos} kada se ispitaju svi preostali elementi liste.

\begin{minted}{python}
def findMin(studList, key, start):
    n = len(studList)
    if n == 0:
        return -1
    if start >= n:
        return -1
    if n-start == 1:
        return start
    min = studList[start]
    minPos = start
    for i in range(start+1, n):
        if studList[i][key] < min[key]:
            min = studList[i]
            minPos = i
    return minPos
\end{minted}

Funkcija \texttt{sort} obavlja sortiranje liste \texttt{studList}, poredeći
obeležja sa nazivom \texttt{key}, počevši od indeksa \texttt{start}. Prvo se
pronalazi najmanji element liste počevši od pozicije \texttt{start}. Potom
element na poziciji start i najmanji element menjaju mesta. Zatim se, ukoliko
indeks \texttt{start} nije došao do kraja liste (uslov \texttt{start <
len(studList)-1}) ponovo poziva funkcija \texttt{sort} ali sa inkrementiranim
indeksom. Funkcija \texttt{sort} će na ovaj način biti pozvana onoliko puta
koliko je elemenata preostalo za testiranje do kraja liste.

\begin{minted}{python}
def sort(studList, key, start):
    minPos = findMin(studList, key, start)
    if minPos == -1:
        return
    studList[start], studList[minPos] = studList[minPos], studList[start]
    if start < len(studList)-1:
        sort(studList, key, start+1)
\end{minted}

Funkcija \texttt{sortStudents} služi da pojednostavi korišćenje prethodne
funkcije. Jedini parametar ove funkcije je vrednost obeležja po kome će se lista
sortirati. Ova funkcija će pozvati funkciju \texttt{sort} prosleđujući joj listu
\texttt{studenti}, ključ po kome će lista biti sortirana (\texttt{key}), i
indeks 0 (što znači da treba sortirati listu počevši od pozicije 0, tj. treba
sortirati celu listu).

\begin{minted}{python}
def sortStudents(key):
    sort(studenti, key, 0)
\end{minted}

Prethodno prikazane funkcije čine jedan modul koji smo smestili u datoteku
\texttt{studenti.py}. Inicijalizacija ovog modula sastoji se iz inicijalizacije
liste studenata (na praznu listu) i poziva funkcije \texttt{loadStudents} radi
učitavanja podataka iz datoteke.

\begin{minted}{python}
studenti = []
loadStudents()
\end{minted}

\subsection{Komunikacija sa korisnikom}

Pored funkcija za rukovanje referentima i studentima, potrebno je implementirati
i komunikaciju našeg programa sa korisnikom. Pošto je u pitanju konzolni
program, sva komunikacija odvija se putem ispisivanja stringova na konzolu i
učitavanja stringova sa tastature. Novi delovi programa biće smešteni u treći
modul, u datoteci \texttt{glavni.py}.

Kako će se u okviru ovog modula pozivati funkcije iz prethodna dva modula, prvo
ih možemo importovati:

\begin{minted}{python}
import referenti
import studenti
\end{minted}

Funkcija \texttt{main} predstavlja početak izvršavanja našeg programa. Posle
ispisivanja naslova programa, obavlja se prijavljivanje korisnika (tj. referenta
studentske službe) na sistem (funkcija \texttt{login}). Ukoliko je
prijavljivanje neuspešno (ne postoji data kombinacija korisničko ime/lozinka)
izvršavanje programa se prekida. U nastavku se započinje sentinel petlja koja će
se ponavljati sve dok korisnik ne zada komandu za izlazak iz programa. Unutar
tela petlje vrši se ispis menija (funkcija \texttt{menu}) na osnovu koga
korisnik može da izabere komandu, izabrana komanda se dobija kao rezultat
funkcije \texttt{menu} i na osnovu te vrednosti izvršava se odgovarajuća komanda
(funkcije \texttt{findStudent}, \texttt{searchStudents}, \texttt{listStudents},
\texttt{updateStudent}, \texttt{addStudent} i \texttt{advanceStudents}). Sve ove
funkcije nalaze se u modulu \texttt{glavni} i ne treba ih mešati sa istoimenim
funkcijama iz drugih modula.

\begin{minted}{python}
def main():
    print()
    print("Evidencija studenata")
    print("====================")
    print()
    if not login():
        print("\nNiste uneli postojece ime i lozinku!")
        return
    komanda = '0'
    while komanda != 'X':
        komanda = menu()
        if komanda == '1':
            findStudent()
        elif komanda == '2':
            searchStudents()
        elif komanda == '3':
            listStudents()
        elif komanda == '4':
            updateStudent()
        elif komanda == '5':
            addStudent()
        elif komanda == '6':
            advanceStudents()
    print("Dovidjenja.")
\end{minted}

Funkcija \texttt{menu} će ispisati meni na ekran (poziv funkcije
\texttt{printMenu}), i zahtevati unos komande od korisnika. Unos će se
ponavljati u slučaju da je uneta vrednost koja nije unapred predviđena.

\begin{minted}{python}
def menu():
    printMenu()
    command = input(">> ")
    while command.upper() not in ('1', '2', '3', '4', '5', '6', 'X'):
        print("\nUneli ste pogresnu komandu.\n")
        printMenu()
        command = input(">> ")
    return command.upper()
\end{minted}

Funkcija \texttt{printMenu} će ispisati sadržaj menija na ekranu.

\begin{minted}{python}
def printMenu():
    print("\nIzaberite opciju:")
    print("  1 - pronalazenje studenta")
    print("  2 - pretrazivanje studenata")
    print("  3 - pregled svih studenata")
    print("  4 - izmena podataka o studentu")
    print("  5 - upis novog studenta")
    print("  6 - upis nove godine studija")
    print("  x - izlaz iz programa")
\end{minted}

Funkcija \texttt{login} će zatražiti od korisnika da unese korisničko ime i
lozinku i potom, pozivom funkcije \texttt{login} iz modula \texttt{referenti},
proveriti da li takav korisnik postoji. Rezultat ove funkcije biće direktno
preuzet od funkcije \texttt{login} iz modula \texttt{referenti}.

\begin{minted}{python}
def login():
    username = input("Korisnicko ime >> ")
    password = input("Lozinka >> ")
    return referenti.login(username, password)
\end{minted}

Funkcija \texttt{findStudent} će od korisnika zatražiti da unese broj indeksa
studenta čiji se podaci traže, pokušati da ga pronađe u listi svih studenata
(pozivom funkcije \texttt{findStudent} iz modula \texttt{studenti}) i ispisati
odgovarajući sadržaj. Ukoliko je pronađen traženi student, njegovi podaci se
ispisuju u tabelarnoj formi onako kako je to definisano funkcijama
\texttt{formatHeader} i \texttt{formatStudent} iz modula \texttt{studenti}.

\begin{minted}{python}
def findStudent():
    print("[1] Pronalazenje studenta\n")
    indeks = input("Unesite broj indeksa >> ")
    stud = studenti.findStudent(indeks)
    if stud != None:
        print(studenti.formatHeader())
        print(studenti.formatStudent(stud))
    else:
        print("Nije pronadjen student sa brojem indeksa", indeks)
\end{minted}

Funkcija \texttt{searchStudents} će od korisnika zatražiti da unese prezime
studenata koje želi da pronađe, pokušati da ih pronađe (pozivom funkcije
searchStudents iz modula studenti) i ispisati odgovarajući sadržaj. Pošto
potencijalno može biti više studenata sa istim prezimenom, rezultat ove pretrage
je lista pronađenih studenata. Ispis rezultata se vrši u tabelarnom obliku ako
je bilo studenata sa traženim prezimenom.

\begin{minted}{python}
def searchStudents():
    print("[2] Pretrazivanje studenata\n")
    prezime = input("Unesite prezime >> ")
    studList = studenti.searchStudents('prezime', prezime)
    if len(studList) == 0:
        print("\nNema trazenih studenata.")
    else:
        print('\n')
        print(studenti.formatHeader())
        print(studenti.formatStudents(studList))
\end{minted}

Funkcija \texttt{listStudents} će obaviti sortiranje svih studenata po prezimenu
(pozivom funkcije \texttt{sortStudents} iz modula \texttt{studenti}) i ispisati
celu listu studenata u tabelarnom formatu.

\begin{minted}{python}
def listStudents():
    print("[3] Pregled svih studenata sortiranih po prezimenu\n")
    studenti.sortStudents('prezime')
    print(studenti.formatHeader())
    print(studenti.formatAllStudents())
\end{minted}

Funkcija \texttt{updateStudent} će obaviti ažuriranje adrese, telefona i emaila
za studenta sa datim brojem indeksa. Prvo se broj indeksa unosi sa tastature.
Potom se pokušava pronalaženje studenta sa datim brojem indeksa (pozivom
funkcije \texttt{findStudent} iz modula \texttt{studenti}). Ako student nije
pronađen, ispisuje se poruka o grešci, a ukoliko jeste, ispisuje se trenutna
vrednost njegovih podataka, sa tastature unose nove vrednosti, i na kraju se
lista studenata (ovaj put sa promenjenim podacima za jednog od studenata) snima
u datoteku.

\begin{minted}{python}
def updateStudent():
    print("[4] Izmena podataka o studentu\n")
    indeks = nput("Unesite broj indeksa >> ")
    stud = studenti.findStudent(indeks)
    if stud == None:
        print("Ne postoji student sa datim brojem indeksa.")
    else:
        print(studenti.formatHeader())
        print(studenti.formatStudent(stud))
        stud['adresa'] = input("Unesite adresu studenta >> ")
        stud['telefon'] = input("Unesite telefon studenta >> ")
        stud['email'] = input("Unesite e-mail studenta >> ")
        studenti.saveStudents()
\end{minted}

Funkcija addStudent inicijalizuje novi rečnik koji predstavlja novog studenta,
obavlja unos njegovih podataka sa tastature, dodaje novog studenta u listu
postojećih studenata (poziv funkcije \texttt{addStudent} iz modula
\texttt{studenti}), i na kraju snima sadržaj cele liste studenata u datoteku
(zajedno sa novim studentom).

\begin{minted}{python}
def addStudent():
    print("[5] Upis novog studenta\n")
    stud = {}
    stud['indeks'] = input("Unesite indeks >> ")
    stud['ime'] = input("Unesite ime >> ")
    stud['prezime'] = input("Unesite prezime >> ")
    stud['roditelj'] = input("Unesite ime roditelja >> ")
    stud['datum'] = input("Unesite datum rodjenja >> ")
    stud['jmbg'] = input("Unesite JMBG >> ")
    stud['adresa'] = input("Unesite adresu >> ")
    stud['telefon'] = input("Unesite telefon >> ")
    stud['email'] = input("Unesite e-mail >> ")
    stud['godina'] = '1'
    studenti.addStudent(stud)
    studenti.saveStudents()
\end{minted}

Funkcija \texttt{advanceStudents} obavlja upis izabranih studenata u narednu
godinu studija. Studenti koji upisuju narednu godinu se identifikuju brojem
indeksa. Njihovi indeksi se unose u sentinel petlji. Ažuriranje tekuće godine
studija za svakog izabranog studenta obavlja se pozivom funkcije
\texttt{advanceStudent} iz modula \texttt{studenti}. Na kraju se cela lista
studenata snima u datoteku.

\begin{minted}[fontsize=\small]{python}
def advanceStudents():
    print("[6] Upis studenata u narednu godinu studija\n")
    indeks = input("Unesite indeks studenta koji upisuje narednu godinu (<Enter> za kraj) >> ")
    while indeks != '':
        stud = studenti.findStudent(indeks)
        if stud == None:
            print("Ne postoji student sa datim brojem indeksa.")
        else:
            studenti.advanceStudent(stud)
            print("Student", indeks, "je upisan u narednu godinu.")
        indeks = input("Unesite indeks studenta koji upisuje narednu godinu (<Enter> za kraj) >> ")
    studenti.saveStudents()
\end{minted}

Modul \texttt{glavni} nije od koristi drugim modulima, pa ne očekujemo da bude
importovan iz nekog drugog modula. Ukoliko bi se to ipak desilo, želimo da poziv
funkcije main kojom se zapravo pokreće program bude rezervisan samo za situacije
kada je ovaj modul pozvan direktno pomoću komande

\begin{minted}{sh}
$ python3 glavni.py
\end{minted}

Poziv funkcije \texttt{main} zato možemo staviti u okviru uobičajene \texttt{if}
naredbe za ovakve situacije:

\begin{minted}{python}
if __name__ == '__main__':
    main()
\end{minted}


\end{document}









