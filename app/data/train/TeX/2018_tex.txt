% Kelompok Class dan Fungsi pada Phyton
% Rahmi Nurdin (1154109)
% Mustari Muammar (1154108)
% Fadillah Firdaus (1154103)

\section{Phyton} 
\subsection{Pengertian Phyton}
Python merupakan bahasa pemrograman yang
berorientasi obyek dinamis, dapat digunakan
untuk bermacam-macam pengembangan perangkat
lunak http://www.python.org/about/apps. Python
menyediakan dukungan yang kuat untuk integrasi
dengan bahasa pemrograman lain dan alat-alat
bantu lainnya. Python hadir dengan pustakapustaka
standar yang dapat diperluas serta dapat
dipelajari hanya dalam beberapa hari. Sudah
banyak programmer Python yang menyatakan
bahwa mereka mendapatkan produktivitas yang
lebih tinggi. Mereka juga merasakan bahwa Python
meningkatkan kualitas pengembangan karena kode
sumber yang mereka tulis dapat terus dipelihara.
Python dapat berjalan di banyak platform / sistem
operasi seperti Windows, Linux/Unix, Mac OS X,
OS/2, Amiga, Palm Handhelds dan telepon genggam
Nokia. Saat ini Python juga telah diporting ke dalam
mesin virtual Java dan .NET.
Python didistribusikan dibawah lisensi
OpenSource yang disetujui OSI (OpenSource
Initiatives), sehingga Python bebas digunakan,
gratis digunakan, bahkan untuk produk-produk
komersil.

\subsection{Contoh Script Phyton}
Seringkali pengguna harus menuliskan ekspresi yang cukup kompleks dan akan digunakan secara berulang di kemudian hari. 
Untuk keperluan penulisan ekspresi kompleks, kita dapat membuatnya dalam sebuah script yang dibantu dengan adanya teks editor. 
Penulis menggunakan vi teks editor default yang terdapat pada distro GNU/Linux. Pada contoh berikut ini, 
kita dapat melihat contoh script Python yang sederhana : 
\$ vi contoh-script-01.py \#! /usr/bin/python a = 1 print 
‘Nilai a adalah : ‘ , a simpan script Anda dengan : :wq! Secara default, script Python yang Anda buat akan disimpan dengan ekstensi .py . 
Anda dapat melakukan eksekusi script yang telah Anda buat tersebut dengan cara : 
\$ python contoh-script-01.py 
Atau : Memberikan permission x (executable) sehingga script tersebut dapat dijalankan, 
dengan perintah : \$ chmod +x contoh-script-01.py \$ ./contoh-script-01.py


\subsection{INTERPRETER PYTHON}
Bahasa pemrograman Python dilengkapi dengan suatu fasilitas seperti shell di Linux, sehingga memungkinkan kita untuk mencoba 
penggunaan Python secara interaktif. Lokasi instalasi Python secara default pada distribusi Linux terletak di /usr/ bin/python.

Untuk menjalankannya, dapat kita tuliskan python pada konsole Linux pengguna. \$ python Apabila Python telah terinstalasi, 
maka pengguna akan mendapatkan tampilan : Python 2.4.3 (\#1, May 24 2008, 13:47:28) [GCC 4.1.2 20070626 (Red Hat 4.1.2-14)] on 
Type “help”, “copyright”, “credits” or “license” for more information.

Tanda >>> tersebut menandakan bahwa interpreter Python telah siap menerima perintah pengguna. Kita dapat langsung mengetikkan 
ekspresi Python pada prompt >>> yang telah tersedia. Ekspresi Python dapat berupa ekspresi sederhana berupa assignment hingga 
perintah yang lebih kompleks seperti deklarasi fungsi maupun class. Contoh-contoh dasar ekspresi yang dapat kita tuliskan pada 
prompt Python adalah sebagai berikut : 

\begin{verbatim}
>>> a = 1 
>>> a 
1 
>>> b = 2 
>>> b 
2 
>>> c = a + b 
>>> c 
3 
>>> d = a - b 
>>> d -1
>>> print ‘Nilai d adalah : ‘, d
Nilai d adalah : -1
>>> print ‘Nilai c 
adalah : ‘, c Nilai c adalah : 3 
>>> e
Traceback  (most recent call last):
File “<stdin>”, line 1, in ? 
NameError: name 'e' is not defined
>>>
Sedangkan untuk ekspresi Python yang lebih kompleks adalah sebagai berikut : 
>>> a = 1 
>>> if a == 1:
... print “Nilai a adalah 1” ...
Nilai a adalah 1 
>>> def fac(n):
... if n < 2: 
... return 1 
... else: 
... return n * fac(n-1) 
... >>> fac(8) 
40320 >>> 
fac(10) 
3628800 
>>>
\end{verbatim}

Pada contoh diatas, tanda . . . merupakan secondary prompt, biasanya digunakan untuk kondisi atau kelanjutan dari ekspresi 
sebelumnya. Apabila pengguna telah selesai menggunakan interpreter Python, dapat keluar dengan menekan Ctrl – D.
	

\section{Class}
\subsection{Pengertian Class}
Class adalah sebuah spesifikasi yang jika diinstansiasi akan menghasilkan sebuah
objek dan merupakan inti dari pengembangan dan desain berorientasi objek. Class
menggambarkan keadaan (atribut/properti) suatu sistem, sekaligus menawarkan layanan
untuk memanipulasi keadaan tersebut (metoda/fungsi).

\subsection{Area Pokok Class}
Class memiliki tiga area pokok :
\begin{enumerate}
\item
Nama (dan stereotype)
\item
Atribut
\item
Method (operasi)
\end{enumerate}
Atribut dan metoda dapat memiliki salah satu sifat berikut :
\begin{itemize}
\item
Private(-), tidak dapat dipanggil dari luar class yang bersangkutan
\item
Protected(\#), hanya dapat dipanggil oleh class yang bersangkutan dan anak-anak yang
mewarisinya
\item
Public(+), dapat dipanggil oleh siapa saja
\end{itemize}

\subsection{Hubungan Antar Class}
\begin{enumerate}
\item
Asosiasi, yaitu hubungan statis antar class. Umumnya menggambarkan class yang
memiliki atribut berupa class lain, atau class yang harus mengetahui eksistensi
class lain. Panah navigability menunjukkan arah query antar class.
Lambang :
\item
Agregasi, yaitu hubungan yang menyatakan bagian (“terdiri atas..”) atau biasa
disebut relasi mempunyai sebuah.
Lambang :
\item
Composition, yaitu sebuah kelas tidak bisa berdiri sendiri dan harus merupakan
bagian dari class yang lain, maka class tersebut memiliki relasi composition.
Lambang :
\item
Dependency, yaitu hubungan yang menunjukan operasi pada suatu kelas yang
menggunakan class yang lain.
Lambang :
\item
Generalisasi / Pewarisan, yaitu hubungan hirarkis antar class. Class dapat
diturunkan dari class lain dan mewarisi semua atribut dan metoda class asalnya
dan menambahkan fungsionalitas baru, sehingga ia disebut anak dari class yang
diwarisinya.
Lambang
\end{enumerate}




\section{Fungsi}
Dalam menulis program, tentunya kita akan \& code yang pernah kita tulis sebelumnya, pastilah akan kita gunakan kembali, dengan beberapa
nilai yang berbeda. Tentu saja kita tidak mungkin menuliskan kembali kode yang ingin dipanggil ulang tersebut. 
Solusinya, kita dapat mengelompokkan kode-kode yang sering dipanggil ulang dalam suatu kelompok kode yang disebut fungsi. 
Selain itu juga Anda dapat memecah masalah besar menjadi masalah-masalah yang lebih kecil. Dalam C atau bahasa pemrograman lain, 
biasanya digunakan istilah function. 
Beberapa hal yang perlu diperhatikan terkait dengan penggunaan fungsi : 
\begin{enumerate}
\item
deklarasi fungsi, dikatakan kata kunci def, berguna untuk membuat obyek fungsi dan selanjutnya melakukan assignment obyek fungsi
tersebut dengan sebuah nama.
\item
Pada istilah parameter y preferences dan passing parameter by value, maka bahasa pemrograman Python melakukan passing parameter
by assignment.
\item
Seperti pada variabel kita tidak perlu mendeklarasikan tipenya terlebih dahulu sehingga parameter pada fungsi bisa digunakan untuk 
berbagai tipe obyek yang sesuai.
Bentuk umum :
def fungsi(argumen1, argumen2, ..., argumen n):
 Statement1
 ...
 Statement n
 return returnvariable
Keterangan :
Fungsi diawali dengan kata kunci def, diikuti
nama fungsi, boleh diikuti parameter formal yang
ditulis dalam tanda kurung, dan deklarasi fungsi ditutup dengan tanda titik dua (:).
\end{enumerate}
 

\subsection{FUNGSI-FUNGSI UMUM}
\subsubsection{FUNGSI STRING}
Fungsi string digunakan memanipulasi string untuk berbagai macam kebutuhan. Disini
akan dibahas beberapa fungsi string yang sering digunakan dalam membuat program
aplikasi web.
\subsubsection{FUNGSI DATE}
Digunakan untuk mengambil tanggal dan jam. Hasil dari fungsi ini adalah sebuah string
yang berisi tanggal/jam sesuai dengan format yang diinginkan. Format yang dikenal
dalam fungsi date ini adalah sebagai berikut:
a - "am" or "pm"
A - "AM" or "PM"
B - Swatch Internet time
d - day of the month, 2 digits with leading zeros; i.e. "01" to "31"
D - day of the week, textual, 3 letters; i.e. "Fri"
F - month, textual, long; i.e. "January"
g - hour, 12-hour format without leading zeros; i.e. "1" to "12"
G - hour, 24-hour format without leading zeros; i.e. "0" to "23"
h - hour, 12-hour format; i.e. "01" to "12"
H - hour, 24-hour format; i.e. "00" to "23"
i - minutes; i.e. "00" to "59"
I (capital i) - "1" if Daylight Savings Time, "0" otherwise.
j - day of the month without leading zeros; i.e. "1" to "31"
l (lowercase 'L') - day of the week, textual, long; i.e. "Friday"
L - boolean for whether it is a leap year; i.e. "0" or "1"
m - month; i.e. "01" to "12"
M - month, textual, 3 letters; i.e. "Jan"
n - month without leading zeros; i.e. "1" to "12"
s - seconds; i.e. "00" to "59"
S - English ordinal suffix, textual, 2 characters; i.e. "th", "nd"
t - number of days in the given month; i.e. "28" to "31"
T - Timezone setting of this machine; i.e. "MDT"
U - seconds since the epoch
w - day of the week, numeric, i.e. "0" (Sunday) to "6" (Saturday)
Y - year, 4 digits; i.e. "1999"
y - year, 2 digits; i.e. "99"
z - day of the year; i.e. "0" to "365"
Z - timezone offset in seconds (i.e. "-43200" to "43200")
Sintaks:
date(string format)
Contoh:
date(“Y-m-d”); // menghasilkan “2001-07-28”
date(“l, j F Y”); // menghasilkan “Saturday, 28 July 2001”
date(“H:i:s”); // menghasilkan “20:15:07”
\subsubsection{FUNGSI MAIL}
Digunakan untuk mengirimkan e-mail ke alamat e-mail tertentu.
Sintaks:
mail(string tujuan , string subject , string isi [, string

\section{Contoh Class dan Fungsi pada Phyton}
\subsection{Contoh Class}
Untuk membuat sebuah class ini, harus kita awali dengan sebuah kata kunci. Yaitu “class” yang kemudian di ikuti dengan 
“nama class nya”.. Dan yang terakhir adalah tanda kurung buka dan tutup serta tanda titik dua “()” dan ‘:’.  untuk lebih
mudahnya kita bisa lihat atau simak contohnya di bawah ini..

\begin{verbatim}
class namaClass () :
    def metode 1 (self) :
        Isi metode
    def metode 2 (self) :
        Isi metode
\end{verbatim}

Jadi, untuk memanggil sebuah class, sama saja seperti layak nya memanggil metode.. Kita cukup menyebutkan nama classnya 
dengan di akhiri dengan tanda kurung buka dan tutup seperti di bawah ini..

\begin{verbatim}
namaClass()
\end{verbatim}

untuk memanggil metodenya, kita cukup menggunakan memanggil class yang kemudian di ikuti dengan pemanggilan nama metode yang 
tersedia di dalam class tersebut dengan di pisahkan oleh tanda titik. Seperti di bawah ini..

\begin{verbatim}
namaClass().namaMetode()
\end{verbatim}

\subsection{Contoh Fungsi}
Fungsi adalah bagian dari program yang dapat digunakan ulang. Hal ini bisa dicapai dengan memberi nama pada blok statemen,
kemudian nama ini dapat dipanggil di manapun dalam program. Kita telah menggunakan beberapa fungsi builtin seperti range.
Fungsi dalam Python didefinisikan menggunakan kata kunci def. Setelah def ada nama pengenal fungsi diikut dengan parameter
yang diapit oleh tanda kurung dan diakhir dingan tanda titik dua :. Baris berikutnya berupa blok fungsi yang akan dijalankan 
jika fungsi dipanggil.

\begin{verbatim}
\# lat15.py

def halo_dunia():
    print 'Halo Dunia!'
halo_dunia()  \# memanggil fungsi halo_dunia
halo_dunia()  \# fungsi halo_dunia dipanggil lagi
\end{verbatim}



