\subsection{深度优先搜索}
	深度优先搜索是自顶向下地处理问题的方法，能够很快到达解答树的底端。
	
	假设每次搜索产生的结点数为~$b$，搜索的最大深度为~$d$，那么时间复杂度为~$O(b ^d)$。深度优先搜索比较费时，如果不剪枝，时间复杂度将是\emph{指数级的}。如果状态空间不是有限的~(可以无限扩展)，那么深度优先搜索将无法得到解。但是深度优先搜索的空间开销比较小，仅为~$O(bd)$。
	
	此外，如果结点数太多，要注意可能会有爆栈的危险。\footnote{栈默认大小为~1~MB。}
	
	下面是深度优先搜索的一个框架。首先是很容易理解的递归版本：
	
	\lstinputlisting{ch2/codes/dfs框架(递归).cpp}
	
	下面是非递归版本。把广度优先搜索中的队列改成栈\footnote{需要注意入栈的顺序，它和递归版本是正好相反的。}，就可以把广度优先搜索变成深度优先搜索。
	
	\lstinputlisting{ch2/codes/dfs框架(非递归).cpp}