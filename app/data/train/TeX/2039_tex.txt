\hypertarget{move_8h}{
\section{/home/doki/AGCS/src/mmanager/alloc/move.h File Reference}
\label{move_8h}\index{/home/doki/AGCS/src/mmanager/alloc/move.h@{/home/doki/AGCS/src/mmanager/alloc/move.h}}
}


\subsection{Detailed Description}
Header for \hyperlink{move_8c}{mmanager/alloc/move.c}. 

\begin{Desc}
\item[Author:]Dorian Ivancic \href{mailto:dorian@linux.hr}{\tt dorian@linux.hr} \end{Desc}
\begin{Desc}
\item[Date:]2005-09-19\end{Desc}
\begin{Desc}
\item[Warning:]None so far.\end{Desc}
\begin{Desc}
\item[\hyperlink{bug__bug000037}{Bug}]There are no known bugs. \end{Desc}


Definition in file \hyperlink{move_8h-source}{move.h}.

{\tt \#include \char`\"{}context.h\char`\"{}}\par
\subsection*{Functions}
\begin{CompactItemize}
\item 
void $\ast$ \hyperlink{move_8h_a896263a78e93dff03d35139cab2e2e7}{i\_\-block\_\-move} (void $\ast$dst, void $\ast$src, \hyperlink{structstr____ctx}{str\_\-\_\-ctx} $\ast$ctx)
\begin{CompactList}\small\item\em This function moves memory block. \item\end{CompactList}\end{CompactItemize}


\subsection{Function Documentation}
\hypertarget{move_8h_a896263a78e93dff03d35139cab2e2e7}{
\index{move.h@{move.h}!i\_\-block\_\-move@{i\_\-block\_\-move}}
\index{i\_\-block\_\-move@{i\_\-block\_\-move}!move.h@{move.h}}
\subsubsection{\setlength{\rightskip}{0pt plus 5cm}void$\ast$ i\_\-block\_\-move (void $\ast$ {\em dst}, \/  void $\ast$ {\em src}, \/  {\bf str\_\-\_\-ctx} $\ast$ {\em ctx})}}
\label{move_8h_a896263a78e93dff03d35139cab2e2e7}


This function moves memory block. 

\begin{Desc}
\item[Parameters:]
\begin{description}
\item[\mbox{$\leftarrow$} {\em ctx}]Simulator context with command line params. \item[\mbox{$\leftarrow$} {\em src}]Pointer to the source block; \item[\mbox{$\leftarrow$} {\em dst}]Pointer to the destination block;\end{description}
\end{Desc}
\begin{Desc}
\item[Returns:]Pointer to the destination or NULL.\end{Desc}
\begin{Desc}
\item[See also:]\hyperlink{structstr____ctx}{str\_\-\_\-ctx}\end{Desc}
\begin{Desc}
\item[Author:]Dorian Ivancic \href{mailto:dorian@linux.hr}{\tt dorian@linux.hr} \end{Desc}
\begin{Desc}
\item[Date:]2005-05-29 \end{Desc}


Definition at line 63 of file move.c.

References str\_\-\_\-ctx::alloc\_\-algo, ALLOC\_\-ALGO\_\-\_\-ATVD\_\-FITS, ALLOC\_\-ALGO\_\-\_\-DI\_\-FF, ALLOC\_\-ALGO\_\-\_\-DK\_\-BB, ALLOC\_\-ALGO\_\-\_\-IP\_\-SFF, ALLOC\_\-ALGO\_\-\_\-MG\_\-BSD, ALLOC\_\-ALGO\_\-\_\-MG\_\-DL, atvd\_\-fits\_\-block\_\-move(), di\_\-ff\_\-block\_\-move(), dk\_\-bb\_\-block\_\-move(), fatal(), ip\_\-sff\_\-block\_\-move(), mg\_\-bsd\_\-block\_\-move(), and mg\_\-dl\_\-block\_\-move().

\begin{Code}\begin{verbatim}67 {
68     /* call algorithm specific function */
69     switch (ctx->alloc_algo)
70     {
71         /* Danijel Keleminec, binary buddy */
72         case ALLOC_ALGO__DK_BB:
73             return (dk_bb_block_move (dst, src, ctx));
74 
75         /* Aleksandar Topuzovic, Veljko Dragsic, Fits */
76         case ALLOC_ALGO__ATVD_FITS:
77             return (atvd_fits_block_move (dst, src, ctx));
78 
79         case ALLOC_ALGO__DI_FF:
80             return (di_ff_block_move (dst, src, ctx));
81 
82         case ALLOC_ALGO__MG_BSD:
83             return (mg_bsd_block_move (dst, src, ctx));
84 
85         case ALLOC_ALGO__MG_DL:
86             return (mg_dl_block_move (dst, src, ctx));
87 
88         case ALLOC_ALGO__IP_SFF:
89             return (ip_sff_block_move (dst, src, ctx));
90 
91         /* we should never get here! */
92         default:
93             fatal (MSG__MOVE__I_BLOCK_MOVE__INTERNAL_ERROR
94                 , EXIT_CODE__MOVE__I_BLOCK_MOVE__INTERNAL_ERROR
95                 , ctx);
96             break;
97     }
98 
99     return (NULL);
100 }
\end{verbatim}
\end{Code}


