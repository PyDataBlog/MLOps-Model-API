\documentclass[pdf]{beamer}
%%preamble
\mode<presentation>{}
\definecolor{white}{RGB}{255,255,255}
\definecolor{code}{RGB}{238,238,238}
\definecolor{ct}{RGB}{255,164,107}
\definecolor{canvas back}{RGB}{62,45,1}
\definecolor{title}{RGB}{171,215,70}
\definecolor{subtitle}{RGB}{253,253,253}
\setbeamercolor{background canvas}{bg=canvas back}
\setbeamercolor{titlelike}{fg=title}
\setbeamercolor{subtitle}{fg=subtitle}
\setbeamercolor{block body}{bg=code,fg=black}
\setbeamercolor{block title}{bg=ct,fg=white}

\usepackage{wallpaper}
%% for the title page
\defbeamertemplate*{title page}{customized}[1][]{
	\begin{minipage}[c]{\linewidth}
	\begin{columns}
		\begin{column}{0.4\linewidth}
		\includegraphics[scale=0.3]{images/logo1.png}
		\end{column}
		\begin{column}{0.7\linewidth}
			\begingroup
			\Huge\usebeamercolor[white]{title}\inserttitle \par
			\usebeamerfont{subtitle}\usebeamercolor[white]{subtitle}\insertsubtitle\par
			\usebeamerfont{author}\usebeamercolor[white]{subtitle}\insertauthor\par
			\endgroup
		\end{column}
	\end{columns}
	\end{minipage}
}
%%for the frametitle
\setbeamertemplate{frametitle}{
	\vbox{}
	\color{black}\hrule height 2pt \hfill\par
	\usebeamerfont{title}\insertframetitle\par
	\usebeamerfont{subtitle}\usebeamercolor[canvas back]{title}\insertframesubtitle
}

%%for the block template


\title{Git Advanced}
\subtitle{--fast-version-control}
\author{Saswat Raj}
\begin{document}
{
{
%\usebackgroundtemplate{\includegraphics[scale=0.5]{background1.png}}
\begin{frame}
	\titlepage
\end{frame}
}
\setbeamercolor{background canvas}{bg=white}
\begin{frame}
	\frametitle{Git Basics}
	\framesubtitle{Installing Git}
	\begin{block}{Remember}
	Git doesn’t store data as a series of changesets or differences, but instead as a series of snapshots.
	\end{block}
	\begin{itemize}
	\item When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged
	\item This object also contains the author’s name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{Git Commit Object}
	\framesubtitle{Visualization}
	Lets assume that you have a directory containing three files, and you stage them all and commit.Staging the files checksums each one,stores that version of the file in the Git repository as blobs,and adds that checksum to the staging area.
	\begin{center}
	\includegraphics[width=0.8\linewidth]{images/commit-and-tree.png}
	\end{center}
\end{frame}

\begin{frame}
	\frametitle{Change and Commit}
	\framesubtitle{Visualization}
	If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.\\
	\begin{center}
	\includegraphics[width=\linewidth]{images/commits-and-parents.png}
	\end{center}
\end{frame}

\begin{frame}
	\frametitle{Branches}
	\framesubtitle{Visualization}
	\begin{itemize}
	\item A branch in Git is simply a lightweight movable pointer to one of these commits
	\item A separate pointer called HEAD keeps track of the branch you are currently on
	\end{itemize}
	\begin{center}
	\includegraphics[width=0.7\linewidth]{images/branch-and-history.png}
	\end{center}
\end{frame}

\begin{frame}
	\frametitle{Creating a new branch}
	\framesubtitle{Visualization}
	What happens after you create a new branch ?
	\begin{center}
	\includegraphics[width=\linewidth]{images/head-to-master.png}
	\end{center}
\end{frame}

\begin{frame}
	\frametitle{Switching to the new branch}
	\framesubtitle{Visualization}
	git checkout testing
	\begin{center}
	\includegraphics[width=0.7\linewidth]{images/head-to-testing.png}
	\end{center}
\end{frame}

\begin{frame}
	\frametitle{Make commit to new branch}
	\framesubtitle{Visualization}
	After we make a new commit in the new branch
	\begin{center}
	\includegraphics[width=0.7\linewidth]{images/advance-testing.png}
	\end{center}
	\begin{block}{See history}
	git log --oneline --decorate --graph --all
	\end{block}
\end{frame}

\begin{frame}
	\frametitle{Basic Branch and Merge}
	\framesubtitle{}
	\begin{itemize}
	\item Switch to your production branch.
	\item Create a branch to add the hotfix.
	\item After it’s tested, merge the hotfix branch, and push to production.
	\item Switch back to your original story and continue working.
	\end{itemize}
	\begin{block}{demo}
	Lets say we are going to work on issue \#53 in some issue tracking system we are using.
	We need to finish the issue but we need to fix a more prominent bug immediately namely a hotfix.
	\end{block}
\end{frame}

\begin{frame}
	\frametitle{Basic Branch and Merge}
	\framesubtitle{Visualization after creation}
	\begin{center}
	\includegraphics[width=0.7\linewidth]{images/basic-branching-4.png}
	\end{center}
	Now we need to merge it back to master branch for production.The git merge does this.\\
	\textbf{git checkout master\\git merge hotfix}
\end{frame}

\begin{frame}
	\frametitle{..}
	\begin{block}{merge}
	\$ git checkout master\\
\$ git merge hotfix\\
Updating f42c576..3a0874c\\
Fast-forward\\
 index.html | 2 ++\\
 1 file changed, 2 insertions(+)\\
	\end{block}
	Because the commit pointed to by the branch you merged in was directly upstream of the commit you’re on, Git simply moves the pointer forward.We'll delete the hotfix branch, because we no longer need it.\\ \textbf{git branch -d hotfix}
\end{frame}

\begin{frame}
	\frametitle{3 way merge}
	Suppose you’ve decided that your issue \#53 work is complete and ready to be merged into your master branch
	\begin{center}
	\includegraphics[width=\linewidth]{images/basic-merging-1.png}
	\end{center}
\end{frame}

\begin{frame}
	\frametitle{3 way merge}
	After merge the system may look like this.
	\begin{center}
	\includegraphics[width=\linewidth]{images/basic-merging-2.png}
	\end{center}
\end{frame}

\begin{frame}
	\frametitle{Merge Conflicts}
	\framesubtitle{To err is human}
	Occasionally you’ll get a merge conflict that looks something like this:
	\begin{block}{Merge Conflicts}
	\$ git merge iss53\\
Auto-merging index.html\\
CONFLICT (content): Merge conflict in index.html\\
Automatic merge failed; fix conflicts and then commit the result.	
	\end{block}
\end{frame}

\begin{frame}
	\frametitle{Understanding Conflicts}
	Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts
	\begin{block}{Conflict File}
	$<<<<<<<$ HEAD:index.html\\
$<$div id="footer"$>$contact : email.support@github.com$<$/div$>$\\
=======\\
$<$div id="footer"$>$\\
 please contact us at support@github.com\\
$<$/div$>$\\
$>>>>>>>$ iss53:index.html
	\end{block}
	HEAD is the top part of that block\\
	iss53 branch looks like everything in the bottom part
\end{frame}

\begin{frame}
	\frametitle{Finishing the merge}
	\begin{itemize}
	\item Finish the conflicts by removing the $<<<<<<<$ ,$========$ and $>>>>>>>$ tags
	\item Run \textbf{git add .}
	\item Run \textbf{git mergetool} for appropriate editor to open to merge
	\end{itemize}
\end{frame}

\end{document}