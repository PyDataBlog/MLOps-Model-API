% BASIC SETTINGS
\documentclass[a4paper,12pt]{article} % Set paper size and document type
\usepackage{lmodern} % Use a slightly nicer looking font

% Change margins - default margins are too broad
\usepackage[margin=20mm]{geometry}

% SOURCE CODE LISTING SETTINGS 
% https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings
\usepackage{listings}
\usepackage{color}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
  basicstyle=\footnotesize,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=true,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  deletekeywords={...},            % if you want to delete keywords from the given language
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=single,	                   % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  otherkeywords={*,...},           % if you want to add more keywords to the set
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{mymauve},     % string literal style
  tabsize=2,	                   % sets default tabsize to 2 spaces
  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}

% PREPARE TITLE
\title{\textbf{Homework \#5 - Preprocessor Directives}}
\author{Name: }
\date{} % Hide the date

% START DOCUMENT
\begin{document}

\maketitle % Insert the title

\section{Intro}

C++ programs are \textbf{compiled}. This means they are converted from C++ (easy for humans to understand) into a pattern of ones and zeros (easy for the computer's CPU to understand). The program that does this is called a \textbf{compiler}, and in order to translate from C++ to ones and zeros (called \textbf{binary}), the C++ compiler has to read your C++ file, sometimes more than once. The first step in this process is handled by a part of the compiler called the \textbf{preprocessor}. The preprocessor's job is to make sure that any extra code your program needs to run gets copied into your C++ file before the compiler does its next step. All of the programs we've written so far have this line at the top:

\vspace{5mm}
\begin{lstlisting}[language=C++]
#include <iostream>
\end{lstlisting}

\noindent
In C++, lines that start with "\#" are special instructions for the preprocessor, called \textbf{preprocessor directives}. The "\#include $<$iostream$>$" tells the preprocessor to go find a C++ file called "iostream" and copy it into our C++ file. We do this so that we can use "cin" and "cout". In fact, any time we want to include functions or tools from another C++ file we will use "\#include". The "\#include" is not the only preprocessor directive: it is also possible to tell the preprocessor to replace certain words in our code with numbers, like this:

\vspace{5mm}
\begin{lstlisting}[language=C++]
#include <iostream>
#define INF 1000

using namespace std;

int main() {
	int i = INF;
	cout << i << endl;
	return 0;
}
\end{lstlisting}

\noindent
When we build and run this program, the INF will be replaced by the number 1000. We can also use this behavior to create something called a "macro". This lets us replace parts of our code with something that looks a bit like a function. For instance, like this (see next page): 

\clearpage

\vspace{5mm}
\begin{lstlisting}[language=C++]
#include <iostream>
#define min(a, b) a = a < b ? a : b

using namespace std;

int main() {
	int a, b;
	cin >> a;
	cin >> b;
	min(a,b);
	cout << a;
	return 0;
}
\end{lstlisting}

\noindent
Here, the min(a,b) code will be \textbf{replaced} by the code from the \#define, and will change "a" to be equal to the smaller number (either a or b).\\

\noindent
\textbf{A word of warning:} the preprocessor is a powerful tool but it is very easy to use it wrong. Remember, the preprocessor is \textbf{not} smart. It simply looks for text that matches the \#define and then replaces it with whatever was in the \#define. This can result in very unclear and strange behavior in your programs, and it can make them hard to debug, because the compiler will warn you about errors in your code which happened \textbf{after} the preprocessor runs...so the line numbers in the compiler's error messages may not match the line numbers in your text editor. Similarly it is easy to create a \#define like this one which is \textbf{very} confusing for other programmers:

\vspace{5mm}
\begin{lstlisting}[language=C++]
#include <iostream>
#define return return;}

using namespace std;

int main() {
	cout << "Hello world!" << endl;
	return
		
\end{lstlisting}

\noindent
To a person casually reading your code, it looks as though there is a missing ";" and "\}" at the end of the code, but this program \textbf{will} compile and run! Because "return" gets replaced with "return;\}" which fills in the missing semicolon ";" and brace "\}" for us. \textbf{If you must use \#define, don't use it often, and only use it for very simple things}.\\

\clearpage

\section{Now you try...}

\subsection{Making range(0,10) work in C++}

Add one or more \#define statements to this code so that it will run correctly. Do not change any of the code itself, just add \#define statements.

\vspace{5mm}
\begin{lstlisting}[language=C++]
#include <iostream>

using namespace std;

int main() {

	for range(0,10) {
		cout << i << endl;
	}

	return 0;
}	
\end{lstlisting}

\subsection{Find The Smallest Number}

This C++ code finds the largest of two numbers:

\vspace{5mm}
\begin{lstlisting}[language=C++]
#include <iostream>

using namespace std;

int main() {

	int a, b;
	cout << "Enter two numbers: ";
	cin >> a >> b;
	max(a,b);
	cout << "Smallest is: " << a;
}
\end{lstlisting}

\noindent
But there is no max() function! Write a \#define statement to make the max() function work.

\end{document}