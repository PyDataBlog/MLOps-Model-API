\title{Computing Assignment 1: EE 679, Speech Processing}
\author{Alankar Kotwal: 12D070010}

\documentclass[11pt]{article}

\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{hyperref}
\usepackage{ulem}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{bera}
\usepackage{graphicx}
\usepackage{array}
\usepackage[margin=0.35in]{geometry}
\usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{%
  \parbox{\textwidth}{\colorbox{gray}{\parbox{\textwidth}{#1#2#3}}\vskip-4pt}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white}
\lstset{frame=lrb,xleftmargin=\fboxsep,xrightmargin=-\fboxsep}

\lstset{
language=Python,
basicstyle=\ttfamily,
otherkeywords={self},             
keywordstyle=\ttfamily\color{blue!90!black},
keywords=[2]{True,False},
keywords=[3]{ttk},
keywordstyle={[2]\ttfamily\color{yellow!80!orange}},
keywordstyle={[3]\ttfamily\color{red!80!orange}},
emph={MyClass,__init__},          
emphstyle=\ttfamily\color{red!80!black},    
stringstyle=\color{green!80!black},
showstringspaces=false            
}

\begin{document}
\maketitle

\section*{Part (1)}
From the filter details we can figure out the location of the z--plane pole of the filter. We have $$r = e^{-\pi B/f_s},\text{ }\theta = \frac{2\pi f}{f_s}$$ where $B$ is the bandwidth of the formant, $f$ is the formant frequency and $f_s$ is the sampling frequency. So, the location of the pole in the z--plane turns out to be $$z_0 = 0.96 e^{j\pi/8},\text{ }z_0^* = 0.96 e^{-j\pi/8}$$

\noindent Therefore the transfer function $H(z)$ is $$H(z) = \frac{A}{\left(1-0.96 e^{j\pi/8}z^{-1}\right)\left(1-0.96 e^{-j\pi/8}z^{-1}\right)}$$ for some constant $A$. Take $A=1$ without loss of generality. Plots of the frequency and impulse responses are shown: \\

\centerline{\includegraphics[scale=0.50]{parta-freq-resp}} 
\centerline{\includegraphics[scale=0.50]{parta-imp-resp}}

\section*{Part (2)}
Since the sampling frequency is not an exact multiple of the pulse train frequency, we choose rectangular pulses with low duty cycle (about 0.01), as shown below: \\
\centerline{\includegraphics[scale=0.40]{partb-pulse-train}}

Now the system above can be written in a difference-equation form as (remembering that $z^{-1}$ corresponds to a delay of one sample) $$y[n] = x[n] + 2rcos\theta y[n-1] + r^2 y[n-2]$$ We will filter the signal using this recursion and with the initial conditions $y[-1] = 0$ and $y[-2]=0$. The filter implementation in the code takes care of arbitrary number of poles (with all corresponding initial conditions set to zero).

\noindent Here is the response: (the varying response amplitudes are an artifact of varying square pulse widths) \\
\centerline{\includegraphics[scale=0.5]{partb-pulse-response}}

\noindent The output sound is rather low in pitch (150 Hz) and bad (rough) in quality.

\section*{Part (3)}
The waveforms obtained as the output, in order, are as follows: \\
\centerline{\includegraphics[scale=0.45]{partc-pulse-response-1}}
\centerline{\includegraphics[scale=0.45]{partc-pulse-response-2}}
\centerline{\includegraphics[scale=0.45]{partc-pulse-response-3}} \\

\noindent Looking at the first two waveforms, we realise that as bandwidth increases, decay rate of the impulse response increases. So, in the second response there's hardly any interference between responses due to adjacent impulses while the first has nearly no decay between impulses, so considerable interference. From the figure in part 2 and the second figure, we note that the pitch of the waveform corresponds to the pitch of the input pulse train, and hence the number of periods fitting in the 0.5-second window are directly proportional to the input pitch. For example, the figure in part 2 has 5 periods in the window and the second figure has 4 periods. This corresponds to the fact that the pitch in the part 2 (150 Hz) is ${5/4}^{th}$ the pitch in the second figure (120 Hz).

\noindent We also notice that sounds that have more abrupt changes (like 2) show more `roughness' as compared to sounds that are `smoother' like 1 and 3. Perceptually, the first two sound lower than the third, which is expected looking at their pitch. Also, sound intensities seem to be higher when a formant lies close to a multiple of the pitch, as in the second figure.

\section*{Part (4)}
The synthesized waveforms do sound like rough versions of the real vowels. Plots follow: \\
\centerline{\includegraphics[scale=0.45]{partd-a-120}}
\centerline{\includegraphics[scale=0.45]{partd-a-220}}
\centerline{\includegraphics[scale=0.45]{partd-i-120}}
\centerline{\includegraphics[scale=0.45]{partd-i-220}}
\centerline{\includegraphics[scale=0.45]{partd-u-120}}
\centerline{\includegraphics[scale=0.45]{partd-u-220}}

\newpage
\section*{Part (4)}
\subsection*{/a/ at 120 Hz}
Rectangular window, 10ms: \\
\centerline{\includegraphics[scale=0.45]{parte-a-120-rect-10}}
Rectangular window, 20ms: \\
\centerline{\includegraphics[scale=0.45]{parte-a-120-rect-20}}
Rectangular window, 40ms: \\
\centerline{\includegraphics[scale=0.45]{parte-a-120-rect-40}}
Hamming window, 10ms: \\
\centerline{\includegraphics[scale=0.45]{parte-a-120-hamm-10}}
\newpage
Hamming window, 20ms: \\
\centerline{\includegraphics[scale=0.45]{parte-a-120-hamm-20}}
Hamming window, 40ms: \\
\centerline{\includegraphics[scale=0.45]{parte-a-120-hamm-40}}

\subsection*{/u/ at 220 Hz}
Rectangular window, 10ms: \\
\centerline{\includegraphics[scale=0.45]{parte-u-220-rect-10}}
Rectangular window, 20ms: \\
\centerline{\includegraphics[scale=0.45]{parte-u-220-rect-20}}
\newpage
Rectangular window, 40ms: \\
\centerline{\includegraphics[scale=0.45]{parte-u-220-rect-40}}
Hamming window, 10ms: \\
\centerline{\includegraphics[scale=0.45]{parte-u-220-hamm-10}}
\newpage
Hamming window, 20ms: \\
\centerline{\includegraphics[scale=0.45]{parte-u-220-hamm-20}}
Hamming window, 40ms: \\
\centerline{\includegraphics[scale=0.45]{parte-u-220-hamm-40}}

\newpage
\noindent We can see very clearly that the spectra with low window length are very smooth. This is expected because a low window length causes the spectrum of the window to be spread away from zero, and a convolution of the signal spectrum with such a window removes variations on small scales. This destroys pitch information, but conserves formant information. Pitch information is preserved in spectra with high window length.

\noindent We observe peaks obtained in Hamming window spectra are broader than Rectangular window spectra, all other factors remaining constant. This is expected since the mainlobe width is more in the Hamming window spectrum. However, we observe a lot more sidelobes in the Rectangular window spectra because the Rectangular window has higher sidelobe magnitudes. Thus the Hamming window is good for detecting the presence of a formant, while the Rectangular window is better for measuring the formant frequencies accurately. This is illustrated in the spectra of the vowel /u/ where the Rectangular window cannot detect the third formant in some cases, while the Hamming window can.

\noindent Estimates of formant frequencies and signal pitch are given below:

\subsection*{/a/ at 120 Hz: [730Hz, 1090Hz, 2440Hz], 50Hz bandwidth each}

\begin{center}
\begin{tabular}{| c || c | c | c |}
	\hline
	Spectrum Type & Formant 1 (Hz) & Formant 2 (Hz) & Formant 3 (Hz) \\ \hline \hline
	Rect, 10ms  & 711 & 1070 & 2430 \\ \hline
	Rect, 20ms  & 710 & 1077 & 2402 \\ \hline
	Rect, 40ms  & 718 & 1078 & 2406 \\ \hline
	Hamm, 10ms  & 718 & 1080 & 2429 \\ \hline
	Hamm, 20ms  & 711 & 1077 & 2402 \\ \hline
	Hamm, 40ms  & 718 & 1078 & 2406 \\ \hline
\end{tabular}
\end{center}

\noindent We use the 20ms or 40ms Hamming window plot to calculate pitch. There are 16 visible harmonics in 0--2000Hz. Thus the estimated pitch is 125Hz. In comparison the 10ms Rectangular window has 17 visible harmonics. Estimated pitch here is 117Hz. This again validates that the Hamming window 'spreads' the spectrum more than the Rectangular window.

\subsection*{/u/ at 220 Hz: [300Hz, 870Hz, 2240Hz], 50Hz bandwidth each}
\begin{center}
\begin{tabular}{| c || c | c | c |}
	\hline
	Spectrum Type & Formant 1 (Hz) & Formant 2 (Hz) & Formant 3 (Hz) \\ \hline \hline
	Rect, 10ms  & 281 & 845 & - \\ \hline
	Rect, 20ms  & 297 & 859 & - \\ \hline
	Rect, 40ms  & 297 & 875 & 2187 \\ \hline
	Hamm, 10ms  & 304 & 850 & 2128 \\ \hline
	Hamm, 20ms  & 304 & 865 & 2234 \\ \hline
	Hamm, 40ms  & 306 & 875 & 2200 \\ \hline
\end{tabular}
\end{center}

\noindent We use the 10ms Hamming window. Between 1000 and 2000 Hz, we have five harmonics. The estimated pitch is thus 200Hz.

Note: -- $\implies$ formant couldn't be spotted on the spectrum. Pitches have been calculated from plots where the harmonic structure is best seen.

\newpage
\begin{lstlisting}[label=parta,caption=Entire Code]
from scipy import signal
import numpy as np
#import cmath as cm
from math import pi
import matplotlib.pyplot as plt
from scipy.io.wavfile import write

# Set formant frequencies and bandwidths (all in Hertz)
formants = np.asarray([300, 870, 2240])
bandwidths = np.asarray([50, 50, 50])

# Set sampling frequency
fSamp = 16000.0

#---------------------------------------------------------------------
# Part 1: Frequency Response Plot

# Calculate pole angles and radii
R = np.exp(-pi*bandwidths/fSamp)
theta = 2*pi*formants/fSamp

# Get poles and an equal number of zeros
poles = np.concatenate([R * np.exp(1j*theta), R * np.exp(-1j*theta)])
zeros = np.zeros(poles.shape, poles.dtype)

# Get transfer function
b, a = signal.zpk2tf(zeros, poles, 1)

# Get frequency response
w, h = signal.freqz(b, a)

# Plot
fig1 = plt.figure()
plt.title('Single Formant Resonator - Frequency Response')
ax1 = fig1.add_subplot(111)
plt.plot(fSamp*w/(2*pi), 20 * np.log10(abs(h)), 'b')
plt.ylabel('Amplitude [dB]', color='b')
plt.xlabel('Frequency [rad/sample]')

ax2 = ax1.twinx()
angles = np.unwrap(np.angle(h))
plt.plot(fSamp*w/(2*pi), angles, 'g')
plt.ylabel('Angle (radians)', color='g')
plt.grid()
plt.axis('tight')

#---------------------------------------------------------------------
# Part 1: Impulse Response Plot

# Get impulse response from transfer function
pulse = np.zeros([200], 'float64')
pulse[0] = 1
impRes = np.zeros(pulse.shape, pulse.dtype)
time = np.linspace(0, 1/80.0, 200, endpoint=False)

# Perform the filter recursively
for i in range(pulse.shape[0]):
    impRes[i] = impRes[i] + a[0]*pulse[i]
    for j in range(1, a.shape[0]):
        if i-j >= 0:
            impRes[i] = impRes[i] - a[j]*impRes[i-j]

# Plot
fig2 = plt.figure()
plt.title('Single Formant Resonator - Impulse Response')
ax3 = fig2.add_subplot(111)
plt.plot(time, impRes, 'b')
plt.ylabel('Impulse Response', color='b')
plt.xlabel('Time [seconds]')

#---------------------------------------------------------------------
# Part 2: Filter Input

# Impulse train frequency
f0 = 220
len = 0.5

# Form the pulse train
timePoints = np.linspace(0, len, len*fSamp, endpoint=False)
pulseTrain = signal.square(2 * np.pi * f0 * timePoints, duty=0.01)
output = np.zeros(pulseTrain.shape, pulseTrain.dtype)

# Perform the filter recursively
for i in range(pulseTrain.shape[0]):
    output[i] = output[i] + a[0]*pulseTrain[i]
    for j in range(1, a.shape[0]):
        if i-j >= 0:
            output[i] = output[i] - a[j]*output[i-j]

fig3 = plt.figure()
plt.title('/u/ at 120 Hz')
ax4 = fig3.add_subplot(111)
plt.plot(timePoints[0:500], output[0:500])
plt.ylabel('Amplitude', color='b')
plt.xlabel('Time [seconds]')

# Write to file for sound
#write('u-female.wav', fSamp, np.int16(output/np.max(np.abs(output)) * 32767))

#---------------------------------------------------------------------
# Part 5: DFT Calculation

winSize = 40.0/1000.0;
nSamp = winSize*fSamp
winType = 'hamm' # or 'rect'

if winType == 'hamm':
    window = output[:nSamp]*np.hamming(nSamp);
    pass
else:
    window = output[:nSamp];

dft = np.fft.fft(window)
freq = np.fft.fftfreq(dft.shape[-1], 1/fSamp)

fig4 = plt.figure()
plt.title('DFT for /u/ at 220Hz')
ax5 = fig4.add_subplot(111)
plt.plot(freq, np.abs(dft))
plt.ylabel('DFT Amplitude', color='b')
plt.xlabel('Frequency')

plt.grid()
plt.axis('tight')

plt.show()
\end{lstlisting}

\end{document}