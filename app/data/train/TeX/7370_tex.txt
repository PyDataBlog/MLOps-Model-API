\chapter{Extracció de referències}
\label{chapter:refextraction}

\section{\textit{Wrappers}}
Un cop hem aconseguit trobar pàgines que contenen informació de l'article pel qual volem generar la referència bibliogràfica, és moment d'extreure aquesta informació i formatar-la. En el nostre context, anomenarem \textit{wrapper} a una classe que implementa una sèrie de mètodes establerts i que, a partir d'un text o document d'entrada, permet extreure'n certa informació. Podem imaginar-ho com un filtre que només ens deixa veure una part del document que ens interessa.
\begin{figure}[H]
\begin{center}
\includegraphics[scale=0.8]{figures/wrapper_sample.pdf}
%\caption{Exemple de la funció d'un \textit{wrapper}}
\label{fig:wrapper-desc}
\end{center}
\end{figure}

Internament, consisteixen en un seguit de regles especialitzades en extreure les dades de documents estructurats d'una forma concreta. A la nostra aplicació tindrem els dos tipus de \textit{wrappers} que es descriuen a continuació i que es diferencien entre ells per la funció que realitzen.


%%%% REFERENCE WRAPPERS %%%%
\subsection{\textit{Reference Wrappers}}
\label{refextraction:reference-wrappers}
Aquest tipus de \textit{wrappers} extreuen el text corresponent a una referència sencera dins de les pàgines HTML dels resultats. El gran avantatge que tenen és que habitualment permeten obtenir molta informació i amb una confiança molt més alta. Ara per ara, el sistema només suporta referències \BibTeX{}, però es podria ampliar amb qualsevol altre format.

\begin{figure}[H]
\begin{center}
\includegraphics[width=0.8\textwidth]{figures/refextraction:reference-wrappers.pdf}
\caption{Esquema de funcionament dels \textit{reference wrappers}}
\label{fig:refextraction:reference-wrappers}
\end{center}
\end{figure}

El principal problema és que s'han d'implementar manualment ja que moltes vegades el text de les referències no es troba a la mateixa pàgina retornada pels cercadors, sinó que cal seguir algun enllaç o realitzar altres accions abans d'arribar-hi, cosa que complica força la generació automàtica. A més, el fet que d'aquests \textit{wrappers} només en necessitem un per cada biblioteca, fa que no s'hagi considerat oportú automatitzar-ne la generació ja que (de moment) no suposa un estalvi de recursos prou gran.

\paragraph{}
Un altre inconvenient d'aquest tipus de \textit{wrappers} és que hi ha moltes biblioteques digitals que no ofereixen les referències en \BibTeX{} sinó en altres formats com ara \textit{RIS}, \textit{MODS}, etc. La llista de formats que s'ofereixen depèn força del camp de coneixement en què s'especialitza la biblioteca. 

\paragraph{}
Respecte a la manera d'implementar-los, el primer que cal fer és estudiar el funcionament de cada biblioteca i aplicar una mica d'enginyeria inversa. Per exemple, en algunes ocasions podem aconseguir alguna drecera per arribar a les referències a partir de les adreces retornades pels cercadors. Un dels casos més senzills és el de la biblioteca digital \textit{ScientificCommons} on per obtenir el codi \BibTeX{} només hem de canviar l'adreça retornada pel cercador inserint-hi una cadena de caràcters fixa:
\begin{center}
\begin{lstlisting}[nolol=true]
http://en.scientificcommons.org/32119993
\end{lstlisting}
\begin{lstlisting}[nolol=True]
http://en.scientificcommons.org/export/bibtex/32119993
\end{lstlisting}
\end{center}
Altres vegades, obtenir la referència és més complicat, i és necessari construir la URL a partir de paràmetres d'una crida a una funció \textit{JavaScript}, com passa per la biblioteca \textit{ACM}; o bé de camps d'un formulari, cas de \textit{ScienceDirect}; etc.



%%%%% FIELD WRAPPERS %%%%
\subsection{\textit{Field Wrappers}}
\label{chapter:refextraction:section:fieldwrappers}
A diferència dels que acabem de veure, aquest tipus de \textit{wrappers} s'especialitzen a extreure únicament un dels camps de la referència cada vegada. Per tant, se'n necessita un per cadascun dels camps que volem obtenir per cada biblioteca d'articles que vulguem suportar. El diagrama següent mostra la diferència respecte els de la figura \ref{fig:refextraction:reference-wrappers}:

\begin{figure}[H]
\begin{center}
\includegraphics[width=\textwidth]{figures/refextraction:field-wrappers.pdf}
\caption{Esquema de funcionament dels \textit{field wrappers}}
\label{fig:refextraction:field-wrappers}
\end{center}
\end{figure}

Internament, aquests tipus de \textit{wrappers} consisteixen en un llistat de regles que cal aplicar en un ordre determinat i que, si tot va bé, donen com a resultat el valor que volem aconseguir. Aquestes regles estan connectades en cascada, de manera que el tipus de sortida d'una regla ha de ser vàlida per l'entrada de la següent.


\paragraph{}
Per assegurar-nos que l'aplicació pot acomplir els objectius proposats, en un principi vam començar a definir algunes d'aquestes regles manualment, mirant de fer-les prou generals com per poder-les reutilitzar per múltiples biblioteques. És fàcil veure que aquesta és una tasca que consumeix molt temps. A més, s'ha de tenir en compte que els resultats obtinguts es veuen afectats per qualsevol canvi en l'estructura de les pàgines font. Cada vegada que hi ha un redisseny, s'han d'actualitzar les regles o bé crear-les de nou. Per tant, vam decidir dedicar la resta de projecte a trobar la manera de generar aquest tipus de \textit{wrappers} de forma automàtica. La forma de fer-ho es descriu al capítol \ref{chapter:wrapperinduction}.

\paragraph{}
De totes maneres, cenyint-nos al procés d'extracció, els passos que se segueixen són:
\begin{itemize}
\item{Donat el resultat web d'un article mirem si disposem de \textit{wrappers} per algun dels camps a la base de dades de l'aplicació.}
\item{De ser així, per cada camp obtenim els millors segons una puntuació.}
\item{Apliquem el \textit{wrapper}}
\item{Si el resultat es considera vàlid, passem al següent camp. Altrament, provem amb un altre \textit{wrapper}.}
\end{itemize}

Com es pot deduir, no serà necessari tenir \textit{wrappers} que funcionin en tots els casos sinó que només caldrà tenir-ne uns quants que ho facin en un percentatge prou elevat. Això facilita l'extracció per aquelles biblioteques digitals que varien l'estructura de la informació en algunes ocasions.

\section{Validació de referències}
Després d'obtenir les dades dels documents HTML amb els mètodes indicats, ens interessa validar-les per diversos motius: 

\begin{itemize}
\item{Continuar provant més resultats i regles disponibles abans de donar l'extracció per finalitzada.}
\item{Indicar a l'usuari que sospitem que algun dels camps no és correcte.}
\item{Modificar la puntuació dels \textit{wrappers} per tal d'elegir els millors en properes extraccions.}
\item{Evitar utilitzar referències incorrectes a l'hora de generar nous \textit{wrappers}}
\end{itemize}

El procés de validació de les dades depèn de cada camp i és totalment ajustable. En el fitxer de configuració de l'aplicació, es pot establir, per cada camp, com s'ha de validar i un pes sobre la validesa total de la referència. Pel que fa al primer paràmetre, tindrem diferents tipus de validadors:
\begin{itemize}
\item{\textit{WithinTextValidator}:} Basa la validació a comprovar si la cadena extreta es troba en el text extret de l'article PDF. 
\item{\textit{PersonValidator}:} Semblant a l'anterior, però ho comprova pels diferents noms de les persones.
\item{\textit{RegexValidator}:} Mira que el text extret coincideixi amb una expressió regular que també s'inclou al fitxer de configuració. Útil per aquells casos on el camp no es troba en el document de l'article (e.g. pàgines, issn).
\end{itemize}

El pes correspon a un nombre en coma flotant que ens permet donar més importància a certs camps com ara el títol o nom dels autors a l'hora d'establir com de vàlida és una referència. La suma total dels pesos ha de ser igual a 1. 

\paragraph{}
Per configurar la validació s'utilitza el valor \texttt{field\_validation} dins del fitxer de configuració. La sintaxi per definir com validar cadascun dels camps és \texttt{<field>; <weight>; <validator>[; <validator params>]}. A continuació es mostra un exemple:

\begin{center}
\begin{lstlisting}[caption={Configuració de la validació de referències}, nolol=true]
field_validation=
    title;   0.3; WithinTextValidator
    journal; 0.2; WithinTextValidator             
    author;  0.2; PersonValidator
    pages;   0.1; RegexValidator;    \d+(?:\ ?[-,]?\ ?\d+)?
    issn;    0.0; RegexValidator;    (\d{4}-\d{3}(\d|X))
    ...
\end{lstlisting}
\end{center}

Per anar bé, cal especificar un validador per cadascun dels camps, fins i tot per aquells als que es dóna pes $0.0$. Això garanteix que la puntuació dels \textit{wrappers} per aquests camps es continuï actualitzant tot i no tenir-los en compte a l'hora de considerar la referència com a vàlida.

\subsubsection{\textit{Parsing} de referències}
Per poder validar les referències extretes amb els \textit{reference wrappers}, és necessari analitzar-les sintàcticament i obtenir-ne els diferents camps per separat. Per aquest motiu, l'aplicació disposa d'un \textit{parser} de referències en format \BibTeX{}.


\section{Format de referències}
Tal com s'ha indicat al diagrama de la figura \ref{fig:definition:extraction-diagram}, un cop tenim les dades extretes cal donar-los-hi format per poder-les exportar en \BibTeX{}. Com a detalls de la implementació, només comentar que se segueix el patró \textit{Builder} \cite{GoF}. Bàsicament, tenim una jerarquia de classes anomenades generadors o \textit{builders} que, guiades per una classe directora (en el nostre cas, \texttt{Formatter}) permetran generar les referències en el format desitjat. Cada classe generadora ofereix mètodes per formatar les diferents parts d'una referència.

\paragraph{}
Amb aquesta arquitectura, si es volen suportar nous formats de sortida només cal crear la subclasse generadora experta en el format en qüestió.

\section{Emmagatzematge}
\label{chapter:refextraction:storage}
Totes les referències extretes s'emmagatzemen a la base de dades de l'aplicació per poder-les utilitzar en un futur tan per exportar-les com per regenerar els \textit{wrappers} amb què s'han obtingut en primer lloc. A part de la referència en si, també es desa la consulta extreta del PDF per cercar a Internet i el resultat de la pàgina de la qual s'ha extret la referència.

\paragraph{}
En referència al disseny de la base de dades, a l'apèndix \ref{fig:diagrams:database-diagram} hi ha un diagrama detallant les diferents taules, camps i relacions. Com es tracta de bases de dades locals de mida reduïda, hem optat per utilitzar \textit{SQLite} que no necessita un procés separat pel servidor i desa tota la informació en un sol fitxer.

\paragraph{}
Tot i així, hem volgut que la nostra aplicació fos completament transparent al sistema gestor de base de dades. Per aquest motiu, es fa servir la biblioteca \textit{SQLAlchemy}, que a part de fer d'ORM, també ens ofereix una capa d'abstracció que permet treballar de forma independent a la tecnologia subjacent.
