\documentclass{beamer}
\usepackage[latin1]{inputenc}
\usepackage[brazil]{babel}
\usepackage{graphicx}
\usepackage{wrapfig}
\usepackage{floatflt}
\usepackage{fancybox}
\usepackage{multirow}
\usepackage{ragged2e}
%\usepackage[pdftex]{graphicx}
\usetheme{CambridgeUS}
\usecolortheme{dolphin}

\xdefinecolor{azulclaro}{rgb}{0.81,0.85,1}
\xdefinecolor{azulescuro}{rgb}{0,0.2,0.6}

\setbeamercolor{lowercol}{fg=black,bg=azulclaro}
\setbeamercolor{uppercol}{fg=white,bg=azulescuro}

\graphicspath{{images/}}

\title[Desenvolvimento de Novos Produtos]{Análise de desempenho de algoritmo de segmentação de imagem em Plataformas Embarcadas Linux}
\author[Joaci, Nilson, Antonio]
       {Joaci Otaviano de Morais\\Nilson Monteiro de Oliveira\\Antonio Soares de Pádua}


\institute[UEA]{Universidade do Estado do Amazonas}
\date{21 de Dezembro de 2015}


\begin{document}
%% ===================SLIDE 1==================== %%
\frame{\titlepage}

%% ===================SLIDE 2==================== %%

\begin{frame}
  \frametitle{Sumário}
  \tableofcontents
\end{frame}

% INCLUE - INTRODUCAO
\section{Introdução}
\begin{frame}
  \frametitle{Introdução}
  
\begin{beamerboxesrounded}[lower=lowercol,upper=uppercol,shadow=true]{Contextualização:}
Em muitas aplicações de visão computacional a primeira etapa de análise é a subtração de fundo, por exemplo:
  
	\begin{itemize}
		\item Segurança;
		\item Controle de Tráfego de Veículos; 
		\item Teleconferências;
		\item Automação e Entretenimento.
	\end{itemize}	
	
Devido à grande aplicabilidade, muitos estudos e algoritmos já desenvolvidos mas poucas análises práticas usando plataformas de baixo custo, que se popularizaram bastante recentemente.

\end{beamerboxesrounded} 

%\vspace{12pt}  
  
\end{frame}


\begin{frame}

\begin{beamerboxesrounded}[lower=lowercol,upper=uppercol,shadow=true]{Proposta:}

Pretende-se, portanto, avaliar o desempenho de um algoritmo de subtração de fundo em duas plataformas bastante conhecidas:

	\begin{itemize}
		\item Raspberry Pi 2;
		\begin{itemize}
			\item Processador Quad-Core 900MHz;
			\item GPU VideoCore IV 250MHz;
			\item 1GB de Memória RAM.
		\end{itemize}
		\vspace{6pt}
		\item CubieBoard 2;
		\begin{itemize}
			\item Processador Dual-Core 1GHz;
			\item GPU Mali-400 Dual-Core 500MHz;
		\end{itemize}
	\end{itemize}	

Implementação do algoritmo em Python para validação de recursos da plataforma e análise de desempenho usando a CPU. Testes também utilizando a GPU para o processamento pesado e comparação dos resultados.	

\end{beamerboxesrounded}

\end{frame}

% INCLUE - Capitulo 1
\section{Segmentação de Imagem}

\begin{frame}
\frametitle{Segmentação de Imagem}
%\frametitle{Referencial Teórico}
 \justify

\begin{columns}[t]
 \begin{column}{7cm}
 Conforme proposto por Horpraset \textit{et al.}, pode-se modelar a cor de uma imagem em duas componentes: brilho e cromaticidade. Conforme figura ao lado onde:
 \begin{itemize}
 \item $E_i$ - Cor esperada de um pixel;
 \item $I_i$ - Valor da cor do pixel;
 \item $\alpha_i$ - Diferença de Brilho;
 \item $CD_i$ - Diferença de Cromaticidade;
 \end{itemize}

 \end{column}
 
 \begin{column}{4cm}
 
 
 \begin{figure}
\begin{center}
			\includegraphics[width=.85\textwidth]{decomposicao_rgb}
			\label{fig:distorcao}
\end{center}
\end{figure}
 \end{column}  
 \end{columns}

\vspace{12pt}

Sendo \(\alpha\) e CD parâmetros estatísticos, calculados a partir da média e desvio padrão de cada um dos \textit{pixels} da imagem. Que são, por fim, normalizados com relação aos mesmos parâmetros obtidos em uma etapa inicial de aprendizagem do fundo.

\end{frame}

\begin{frame}
\justify

Uma vez normalizadas as distribuições dos histogramas de brilho e cromaticidade é possível fazer a classificação da imagem.

\vspace{8pt}

\begin{beamerboxesrounded}[lower=lowercol,shadow=true]{}
 Implementação Python
\end{beamerboxesrounded}
\justify
\begin{columns}[t]
 \begin{column}{7cm}
 O Algoritmo descrito foi implementado em linguagem Python, que tem sido largamente utilizada em computação científica por suas características e recursos, dentre os quais se destacam:
\begin{itemize}
	\item OpenCV:
		\begin{itemize}
			\item Recuros de Manipulação de Imagens;
			\item Acesso a recursos de video do SO.
		\end{itemize}
	\item Numpy:
		\begin{itemize}
			\item Recursos de Algebra Linear;
			\item Manipulação de Matrizes.
		\end{itemize}
\end{itemize}


 \end{column}
 
 \begin{column}{4cm}
 
 
 \begin{figure}
\begin{center}
			\includegraphics[width=1\textwidth]{Algoritmo}
			\label{fig:distorcao}
\end{center}
\end{figure}
 \end{column}  
 \end{columns}

\end{frame}

% INCLUE - Resultados
\section{Resultados}

\begin{frame}
\frametitle{Resultados}

\begin{columns}[t]
 \begin{column}{7cm}
 \justify
 A figura ao lado mostra o resuldado da execução do algoritmo implementado.

 Abaixo é mostrada uma tabela com os resultados obtidos quando da execução do algoritmo em um computador e no Raspberry Pi 2:


 \end{column}
 
 \begin{column}{4cm}
 
 
 \begin{figure}
\begin{center}
			\includegraphics[width=1\textwidth]{Screen_PC_01}
			\label{fig:fig_pc}
			\includegraphics[width=1\textwidth]{Screen_RPI_01}
			\label{fig:fig_rpi}
\end{center}
\end{figure}
 \end{column}  
 \end{columns}
 
\begin{tiny}

\begin{table}[h]\centering
\renewcommand{\arraystretch}{1.3}
\label{tab:table_pc_rpi}
\begin{tabular}{|c|c|c|}

\hline
\textbf{Plataforma} & \textbf{Resolução} & \textbf{FPS} \\\hline \hline
\multirow{2}{*}{Notebook I5}		& 320x240 & 25 - 35	\\ \cline{2-3}
								& 640x480 & 13 - 18	\\ \hline
\multirow{2}{*}{Raspberry Pi 2}	& 320x240 & 4.5 - 7.2	\\ \cline{2-3}
								& 640x480 & 0.8 - 1.3	\\ \hline

\end{tabular}
\end{table}

\end{tiny}

\end{frame}

% INCLUE - Capitulo 3
\section{Conclusão}

\begin{frame}
\frametitle{Conclusão}

Dentre os pontos que podem ser destacados até o presente estado de desenvolvimento deste trabalho estão:

\begin{itemize}
	\item A comprovação do funcionamento do Algoritmo implementado em Python;
	\item A grande flexibilidade da linguagem Python com destaque para sua portabilidade;
	\item As limitações do Raspberry Pi com relação à capacidade de processamento de quadros por segundo;
	\item A necessidade de testar outras abordagens:
		\begin{itemize}
			\item Processamento paralelo - aproveitando melhor as plataformas multi-core;
			\item Utilização da GPU - quando permitido pela plataforma;
		\end{itemize}
	\item Avaliar as implementações na CubieBoard 2;
\end{itemize}

\end{frame}

% INCLUE - Capitulo 4
%\input{./Textuais/Apresentacao_Cap4.tex}

% INCLUE - Conclusao
%\input{./Textuais/Apresentacao_Conclusao.tex}

% INCLUE - Bibliografia
\section{Referências Bibliográficas}

\begin{frame}
\frametitle{Referências Bibliográficas}

A.~Sobral, \textbf{\emph{BGSLibrary: An OpenCV C++ Background Subraction Library}}, \hskip 1em plus
  0.5em minus 0.4em\relax Salvador, Brasil: UFBA, 2013.

\vspace{8pt}
A.~Parolin, \textbf{\emph{Segmentação de Imagens de Pessoas em Tempo Real para Videoconferências}}, \hskip 1em plus
  0.5em minus 0.4em\relax São Leopoldo, Brasil: UNISINOS, 2011.

\vspace{8pt}
J.P.~Oliveira, \textbf{\emph{FPGA Architecture for Object Segmentation in Realtime}}, \hskip 1em plus
  0.5em minus 0.4em\relax Florence, Italy: EUSIPCO, 2006.

\vspace{8pt}
T.~Horprasert et al., \textbf{\emph{A Statistical Approach for Real-time Robust Background Subtraction and Shadow Detection}}, \hskip 1em plus
  0.5em minus 0.4em\relax College Park, USA: University of MarylFand, 1999.

\vspace{8pt}
H.~Fangohr, \textbf{\emph{Introduction to Python for Computational Science and Engineering}}, \hskip 1em plus
  0.5em minus 0.4em\relax Southampton, England: University of Southampton, 2015.

\end{frame}

\end{document}
