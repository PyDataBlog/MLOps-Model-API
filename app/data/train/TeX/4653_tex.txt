%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{OpenPKG}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage

\section{HOBBITLAUNCH}
 hobbitlaunch - Master program to launch other Xymon programs 

 
\subsection{SYNOPSIS}
\textbf{hobbitlaunch [options]}

\subsection{DESCRIPTION}
\emph{hobbitlaunch(8)} is the main program that controls the execution
and scheduling of all of the components in the Xymon system. 


  hobbitlaunch allows the administrator to add, remove or change the
  set of Xymon applications and extensions without restarting Xymon
  - hobbitlaunch will automatically notice any changes in the set of
  tasks, and change the scheduling of activities accordingly. 



  hobbitlaunch also allows the administrator to setup specific
  logfiles for each component of the Xymon system, instead of getting
  output from all components logged to a single file. 


 
\subsection{OPTIONS}
\begin{description}

\item[--env=FILENAME] Loads the environment from FILENAME before
  starting other tools. The environment defined by FILENAME is the
  default, it can be overridden by the ENVFILE option in
  \emph{hobbitlaunch.cfg(5)}



\item[--config=FILENAME] This option defines the file that
  hobbitlaunch scans for tasks it must launch. A description of this
  file is in \emph{hobbitlaunch.cfg(5)}

 The default tasklist is /etc/hobbitlaunch.cfg 

 

\item[--log=FILENAME] Defines the logfile where hobbitlaunch logs
  information about failures to launch tasks and other data about the
  operation of hobbitlaunch. Logs from individual tasks are defined in
  the hobbitlaunch.cfg file. By default this is logged to stdout. 



\item[--pidfile=FILENAME] Filename which hobbitlaunch saves its own process-ID to. Commonly used by automated start/stop scripts. 

 

\item[--verbose] Logs the launch of all tasks to the logfile. Note that the logfile may become quite large if you enable this. 

 

\item[--dump] Just dump the contents of the hobbitlaunch.cfg file after parsing it. Used for debugging. 

 

\item[--debug] Enable debugging output while running. 

 

\item[--no-daemon] hobbitlaunch normally detaches from the controlling
  tty and runs as a background task. This option keeps it running in
  the foreground. 


\end{description}

\subsection{STARTING TASKS}  hobbitlaunch will read the configuration
 file and start all of the tasks listed there. 


  If a task completes abnormally (i.e. terminated by a signal or with
  a non-zero exit status), then hobbitlaunch will attempt to restart
  it 5 times. If it still will not run, then the task is disabled for
  10 minutes. This will be logged to the hobbitlaunch logfile. 


  If the configuration file changes, hobbitlaunch will re-read it and
  notice any changes. If a running task was removed from the
  configuration, then the task is stopped. If a new task was added, it
  will be started. If the command used for a task changed, or it was
  given a new environment definition file, or the logfile was changed,
  then the task is stopped and restarted with the new definition. 

 
\subsection{SEE ALSO}
hobbitlaunch.cfg(5), hobbit(7) 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{bb}

\subsection{SYNOPSIS}
\textbf{\motohbcmd{bb} [options] RECIPIENT message}

\subsection{DESCRIPTION}
\emph{bb(1)} is the Xymonclient program used to communicate with a Xymon
server. It is frequently used by Xymon client systems to send in
status messages and pager alerts on local tests. 


In Xymon, the bb program is also used for administrative purposes,
e.g. to rename or delete hosts, or to disable hosts that are down for
longer periods of time. 

 
\subsection{OPTIONS AND PARAMETERS}
\begin{description}

\item[--debug] Enable debugging. This prints out details about how the
  connection to the BBDISPLAY server is being established. 

\item[--proxy=\url{http://PROXYSERVER:PROXYPORT/}] When sending the
  status messages via HTTP, use this server as an HTTP proxy instead
  of connecting directly to the BBDISPLAY server. 

\item[--timeout=N] Specifies the timeout for connecting to the Xymon
  server, in seconds. The default is 5 seconds. 

\item[RECIPIENT] The \textbf{RECIPIENT}
 parameter defines which server receives the message. If RECIPIENT is
 given as ``0.0.0.0'', then the message is sent to all of the servers
 listed in the BBDISPLAYS or BBPAGERS environment variable (for
 ``status'' and ``page'' messages, respectively). 

Usually, a client will use ``\$BBDISP'' for the \textbf{RECIPIENT}
parameter, as this is defined for the client scripts to automatically
contain the correct value. 


The \textbf{RECIPIENT} parameter may be a URL for a webserver that
has the bbmessage.cgi or similar script installed. This tunnels the
Xymon messages to the BBDISPLAY server using standard HTTP
protocol. The \emph{bbmessage.cgi(8)} CGI tool (included in Xymon)
must be installed on the webserver for the HTTP transport to work.  


\item[MESSAGE] The \textbf{message} parameter is the message to be
  sent across to the Xymon server. Messages must be enclosed in
  quotes, but by doing so they can span multiple lines. The maximum
  size of a message is defined by the maximum allowed length of your
  shell's commandline, and is typically  8-32 KB. 

If you need to send longer status messages, you can specify ``@'' as
the message: bb will then read the status message from its stdin. 


\end{description}

\subsection{HOBBIT MESSAGE SYNTAX}


This section lists the most commonly used messages in the Xymon protocol. 


\begin{description}

\item[status [+LIFETIME] [/group:GROUP] HOSTNAME.TESTNAME COLOR \$<\$additional text\$>\$] 
  This sends in a status message for a single
  test (column) on a single host. TESTNAME is the name of the column
  where this test will show up; any name is valid except that using
  dots in the testname will not work. COLOR must be one of the valid
  colors: ``green'', ``yellow'', ``red'' or ``clear''. The colors
  ``blue'' and ``purple'' - although valid colors - should not be sent
  in a status-message, as these are handled specially by the Xymon
  server.  

The ``additional text'' normally includes a local timestamp and a
summary of the test result on the first line. Any lines following the
first one are free-form, and can include any information that may be
useful to diagnose the problem being reported.  

The LIFETIME defines how long this status is valid after being
received by the Xymon server. The default is 30 minutes, but you can
set any period you like. E.g. for a custom test that runs once an
hour, you will want to set this to at least 60 minutes - otherwise the
status will go purple after 30 minutes. It is a good idea to set the
LIFETIME to sligtly more than the interval between your tests, to
allow for variations in the time it takes your test to complete. The
LIFETIME is in minutes, unless you add an ``h'' (hours), ``d'' (days)
or ``w'' (weeks) immediately after the number, e.g. ``status+5h'' for
a status that is valid for 5 hours.  


The GROUP option is used to direct alerts from the status to a
specific group. It is currently used for status generated from the
Xymon clients' data, e.g. to direct alerts for a ``procs'' status to
different people, depending on exactly which process is down. 


 

\item[notify HOSTNAME.TESTNAME $<$message text$>$] This triggers an
 informational message to be sent to those who receive alerts for this
 HOSTNAME+TESTNAME combination, according to the rules defined in
 \emph{hobbit-alerts.cfg(5)}  This is used by the
 \emph{hobbit-enadis.cgi(1)} tool to notify people about hosts being
 disabled or enabled, but can also serve as a general way of notifying
 server administrators. 


 

\item[data HOSTNAME.DATANAME $<$newline $>$$<$additional text$>$] The
 ``data'' message allows tools to send data about a host, without it
 appearing as a column on the Xymon webpages. This is used e.g. to
 report statistics about a host, e.g. vmstat data which does not in
 itself represent something that has a red, yellow or green
 identity. It is used by RRD bottom-feeder modules, among others. In
 Xymon, data messages are by default processed only by the
 \emph{hobbitd\_rrd(8)} module. If you want to handle data-messages by
 an external application, you may want to enable the
 \emph{hobbitd\_filestore(8)}  module for data-messages, to store
 data-messages in a format compatible with how the Big Brother daemon
 does. 


\item[disable HOSTNAME.TESTNAME DURATION ``additional text'']
 Disables a specific test for DURATION minutes. This will cause the
 status of this test to be listed as ``blue'' on the BBDISPLAY server,
 and no alerts for this host/test will be generated. If DURATION is
 given as a number followed by s/m/h/d, it is interpreted as being in
 seconds/minutes/hours/days respectively. to all for host, use an asterisk  for TESTNAME


\item[enable HOSTNAME.TESTNAME] Re-enables a test that had been disabled. 

\item[query HOSTNAME.TESTNAME] Query the BBDISPLAY server for the
  latest status reported for this particular test. If the host/test
  status is known, the response is the first line of the status report
  - the current color will be the first word on the line. Additional
  lines of text that might be present on the status-message cannot be
  retrieved.  

 This allows any Xymon client to determine the status of a particular
 test, whether it is one pertaining to the host where the client is
 running, some other host, or perhaps the result of a combined test
 from multiple hosts managed by \emph{bbcombotest(1)} This will
 typically be useful to Xymon client extension scripts, that need to
 determine the status of other hosts e.g. to decide if an automatic
 recovery action should be initiated. 


\item[config FILENAME] Retrieve one of the Xymon configuration files
  from the server. This command allows a client to pull files from the
  \$BBHOME/etc/ directory on the server, allowing for semi-automatic
  updates of the client configuration. Since the configuration files
  are designed to have a common file for the configuration of all
  hosts in the system - and this is in fact the recommended way of
  configuring your clients - this makes it easier to keep the
  configuration files synchronized. 

\begin{codesample2} 
  bash-3.00\$ bin/bbcmd bin/bb  192.168.1.2 ``config t.txt''
  2009-11-16 19:41:15 Using default environment file 
  /etc/opt/moto/hobbitclient42/hobbitclient.cfg
  -------begin------------------------
  This is a test file in etc directory to test ``config'' command.
  -------end------------------------
  bash-3.00\$
\end{codesample2} 
 

\item[drop HOSTNAME] Removes all data stored about the host
  HOSTNAME. It is assumed that you have already deleted the host from
  the bb-hosts configuration file. 

\item[drop HOSTNAME TESTNAME] Remove data about a single test (column). 

\item[rename OLDHOSTNAME NEWHOSTNAME] Rename all data for a host that
  changes its name. You should do this before changing the hostname in
  the bb-hosts configuration file. 


\item[rename HOSTNAME OLDTESTNAME NEWTESTNAME] Rename data about a single test (column). 

 
\item[hobbitdlog HOSTNAME.TESTNAME] Retrieve the Xymon status-log for
  a single test. The first line of the response contain a series of
  fields separated by a pipe-sign: 


 \textbf{hostname} The name of the host 

 \textbf{testname}
 The name of the test 

 \textbf{color}
 Status color (green, yellow, red, blue, clear, purple) 

 \textbf{testflags}
 For network tests, the flags indicating details about the test (used by bbgen). 

 \textbf{lastchange}
 Unix timestamp when the status color last changed. 

 \textbf{logtime}
 Unix timestamp when the log message was received. 

 \textbf{validtime}
 Unix timestamp when the log message is no longer valid (it goes purple at this time). 

 \textbf{acktime}
 -1, or Unix timestamp when an active acknowledgement expires. 

 \textbf{disabletime}
 -1, or Unix timestamp when the status is no longer disabled. 

 \textbf{sender}
 IP-address where the status was received from. 

 \textbf{cookie}
 -1, or the cookie value used to acknowledge an alert. 

 \textbf{ackmsg}
 Empty, or the acknowledgment message sent when the status was
 acknowledged. Newline, pipe-signs and backslashes are escaped by with
 a backslash in C-style. 


 \textbf{dismsg}
 Empty, or the message sent when the status was disabled. Newline,
 pipe-signs and backslashes are escaped by with a backslash in
 C-style. 

  After the first line comes the full status log in plain text format. 

\begin{codesample2} 
  bash-3.00\$ bin/bbcmd bin/bb  192.168.1.2 ``hobbitdlog ibm,test,net.conn''
  2009-11-16 19:37:26 Using default environment file 
  /etc/opt/moto/hobbitclient42/hobbitclient.cfg
  ibm.test.net|conn|green|OrdAstLe|1236729228|1258421790|1258423590|0|0|192.168.1.2|-1|||Y|
  green <!-- [flags:OrdAstLe] --> Mon Nov 16 19:36:12 2009 conn ok
  
  Service conn on ibm.test.net is OK (up)
  
  
  &green 192.168.1.2 is alive (0.10 ms)
  
  
  bash-3.00\$
\end{codesample2} 
 

\item[hobbitdxlog HOSTNAME.TESTNAME] Retrieves an \index{XML-string} with the
  status log as for the ``hobbitdlog'' command. 

\begin{codesample2} 
  bash-3.00\$ bin/bbcmd bin/bb  192.168.1.2 ``hobbitdxlog ibm,test,net.conn''
  2009-11-16 19:35:15 Using default environment file 
      /etc/opt/moto/hobbitclient42/hobbitclient.cfg
  <?xml version='1.0' encoding='ISO-8859-1'?>
  <ServerStatus>
    <ServerName>ibm.test.net</ServerName>
    <Type>conn</Type>
    <Status>green</Status>
    <TestFlags>OrdAstLe</TestFlags>
    <LastChange>Tue Mar 10 18:53:48 2009</LastChange>
    <LogTime>Mon Nov 16 19:36:30 2009</LogTime>
    <ValidTime>Mon Nov 16 20:06:30 2009</ValidTime>
    <AckTime>N/A</AckTime>
    <DisableTime>N/A</DisableTime>
    <Sender>192.168.1.2</Sender>
    <Cookie>N/A</Cookie>
    <AckMsg>N/A</AckMsg>
    <DisMsg>N/A</DisMsg>
    <Message><![CDATA[green 
    <!-- [flags:OrdAstLe] --> Mon Nov 16 19:36:12 2009 conn ok
  
  Service conn on ibm.test.net is OK (up)
  
  
  &green 192.168.1.2 is alive (0.10 ms)
  
  
  
]]></Message>
</ServerStatus>
bash-3.00\$
\end{codesample2} 

\item[hobbitdboard [CRITERIA] [fields=FIELDLIST]] Retrieves a summary
  of the status of all known tests available to the Xymon daemon. 


  By default - if no CRITERIA is provided - it returns one line for
  all status messages that are found in Xymon. You can filter the
  response by selecting a page, a host, a test or a color - wildcards
  are not supported, so you can pick only one page, host, test or
  color. 

 \textbf{page=PAGEPATH}
 Include only tests from hosts found on the PAGEPATH page in the bb-hosts file. 


 \textbf{host=HOSTNAME}
 Include only tests from the host HOSTNAME 


 \textbf{test=TESTNAME}
 Include only tests with the testname TESTNAME 


 \textbf{color=COLORNAME}
 Include only tests where the status color is COLORNAME 


  You can filter on e.g. both a hostname and a testname. 


  The response is one line for each status that matches the CRITERIA,
  or all statuses if no criteria is specified. The line is composed of
  a number of fields, separated by a pipe-sign. You can select what
  fields to retrieve by listing them in the FIELDLIST. The following
  fields are available: 


 \textbf{hostname}
 The name of the host 


 \textbf{testname}
 The name of the test 


 \textbf{color}
 Status color (green, yellow, red, blue, clear, purple) 


 \textbf{flags}
 For network tests, the flags indicating details about the test (used by bbgen). 


 \textbf{lastchange}
 Unix timestamp when the status color last changed. 


 \textbf{logtime}
 Unix timestamp when the log message was received. 


 \textbf{validtime}
 Unix timestamp when the log message is no longer valid (it goes purple at this time). 


 \textbf{acktime}
 -1, or Unix timestamp when an active acknowledgement expires. 


 \textbf{disabletime}
 -1, or Unix timestamp when the status is no longer disabled. 


 \textbf{sender}
 IP-address where the status was received from. 


 \textbf{cookie}
 -1, or the cookie value used to acknowledge an alert. 


 \textbf{line1}
 First line of status log. 


 \textbf{ackmsg}
 Empty (if no acknowledge is active), or the text of the acknowledge message. 


 \textbf{dismsg}
 Empty (if the status is currently enabled), or the text of the disable message. 


 \textbf{msg}
 The full text of the current status message. 

  The ackmsg, dismsg and msg fields have certain characters encoded:
  Newline is ``$backslash$n'', TAB is ``$backslash$t'', carriage
  return is ``$\backslash$r'', a pipe-sign is ``$\backslash$p'', and a
  backslash is ``$\backslash$$\backslash$''. 


  If the ``fields'' parameter is omitted, a default set of
  hostname,testname,color,flags,lastchange,logtime,validtime,acktime,
  disabletime,sender,cookie,line1  is used. 

\item[hobbitdxboard] Retrieves an XML-string with the summary of all
  status logs as for the ``hobbitdboard'' command. 

\begin{codesample2} 
  bash-3.00\$ bin/bbcmd bin/bb  192.168.1.2 ``hobbitdxboard''
  <snip>
    </ServerStatus>
    <ServerStatus>
      <ServerName>xe-9-0-0.edge1.Chicago2.Level3.net</ServerName>
      <Type>conn</Type>
      <Status>green</Status>
      <TestFlags>OrdAstLe</TestFlags>
      <LastChange>Wed Oct  7 03:08:57 2009</LastChange>
      <LogTime>Mon Nov 16 19:26:24 2009</LogTime>
      <ValidTime>Mon Nov 16 19:56:24 2009</ValidTime>
      <AckTime>N/A</AckTime>
      <DisableTime>N/A</DisableTime>
      <Sender>192.168.1.2</Sender>
      <Cookie>N/A</Cookie>
      <MessageSummary><![CDATA[status+30 xe-9-0-0,edge1,Chicago2,Level3,net.conn green <!-- [flags:OrdAstLe] --> Mon Nov 16 19:26:06 2009 conn ok ]]></MessageSummary>
    </ServerStatus>
  </StatusBoard>
  
\end{codesample2} 

\item[download FILENAME] Download a file from the Xymon server's download directory. 

\begin{codesample2} 
  bash-3.00\$ bin/bbcmd bin/bb  --debug 192.168.1.2 ``download test2.tar''
\end{codesample2} 
\item[client HOSTNAME.OSTYPE [HOSTCLASS]] Used to send a ``client''
  message to the Xymon server. Client messages are generated by the
  Xymon client; when sent to the Xymon server they are matched
  against the rules in the \emph{hobbit-clients.cfg(5)} configuration
  file, and status messages are generated for the client-side tests. 


\item[clientlog HOSTNAME [section=SECTIONNAME[,SECTIONNAME...]]]
  Retrieves the current raw client message last sent by HOSTNAME. The
  optional ``section'' filter is used to select specific sections of
  the client data. 


\item[ping] Attempts to contact the Xymon server. If successful, the
  Xymon server version ID is reported. 
\begin{codesample2} 
  bash-3.00\$ bin/bbcmd bin/bb  192.168.1.2 ``ping''
  hobbitd 4.4.0-1
  bash-3.00\$
\end{codesample2} 
 

\item[pullclient] This message is used when fetching client data via
  the ``pull'' mechanism implemented by \emph{hobbitfetch(8)} and
  \emph{msgcache(8)} for clients that cannot connect directly to the
  Xymon server. 



\item[ghostlist] Report a list of \textbf{ghost} clients seen by the
  Xymon server. Ghosts are systems that report data to the Xymon
  server, but are not listed in the bb-hosts file. 


\begin{codesample2}
  bash-3.00\$  bin/bbcmd bin/bb  192.168.1.2 ``ghostlist''
  2009-11-16 19:08:47 Using default environment file 
  /etc/opt/moto/hobbitclient42/hobbitclient.cfg
  |192.168.1.198|1250163032
  b-rh53.test.net|192.168.1.46|1257412584
  binarydepot.com|192.168.1.2|1255458869
  DEV10G|192.168.1.198|1257129749
  DEV10G03|192.168.1.190|1256782226
  ECC60|192.168.1.177|1254773958
  rh5.test.net|192.168.1.46|1257251759
  support.thewrittenword.com|192.168.1.2|1251759601
  t-rh5.test.net|192.168.1.47|1257250136
  t-rh53.test.net|192.168.1.2|1257250181
  www.thewrittenword.com|192.168.1.2|1251759601
  bash-3.00\$
\end{codesample2} 

\item[schedule [TIMESTAMP COMMAND]] Schedules an command sent to the
  Xymon server for execution at a later time. E.g. used to schedule
  disabling of a host or service at sometime in the future. COMMAND is
  a complete Xymon command such as the ones listed above. TIMESTAMP
  is the Unix epoch time when the command will be executed.  

 If no parameters are given, the currently scheduled tasks are listed
 in the response. The response is one line per scheduled command, with
 the job-id, the time when the command will be executed, the IP
 address from which this was sent, and the full command string.   To
 cancel an previously scheduled command, \textbf{``schedule cancel
 JOBID''} can be used. JOBID is a number provided as the first item in
 the output from the schedule list. 


\end{description}

\subsection{EXAMPLE}

\begin{enumerate}
\item  Send a normal status message to the BBDISPLAY server, using the
 standard Xymon protocol on TCP port 1984:


\begin{verbatim}
  \$BB \$BBDISP ``statuswww.foo.com.httpgreen`date`WebOK'' 
\end{verbatim}


\item  Send the same status message, but using HTTP protocol via the webservers' bbmessage.cgi script:


\begin{verbatim}
  \$BB http://bb.foo.com/cgi-bin/bbmessage.cgi status www.foo.com.http green`date`Web OK
\end{verbatim}


\item Use ``query'' message to determine the color of the ``www'' test, and restart Apache if it is red:  


%\begin{program}
%\%WWW=`\$BB \$BBDISP ``querywww.foo.com.www``|awk' {print1\}'`  \$if[''\$WWW''=''red''];then/etc/init.d/apacherestart;fi 
%
%\end{program}

\item  Use ``config'' message to update the local bb-dftab file (but only if we get a response):  


\begin{verbatim}
  \$BB \$BBDISP''configbb-dftab'' > /tmp/bb-dftab.new  
  \$if [-s /tmp/bb-dftab.new ];then  
  mv/tmp/bb-dftab.new\$BBHOME/etc/bb-dftab  
  fi 
\end{verbatim}


\item  Send a very large status message that has been built in the file
  ``statusmsg.txt''. Instead of providing it on the command line, pass
  it via stdin to the bb command: 


\begin{verbatim}
  \$cat statusmsg.txt|\$BB \$BBDISP''@'' 
\end{verbatim}


\end{enumerate} 

\subsection{NOTES}
 This man-page describes the bb client program provided as part of
 Xymon . This implementation provides features not present in the
 standard Big Brother bb client - specifically, the support for
 sending messages over HTTP, and many commands such as ``query'' and
 ``config'' are not part of the bb client shipped with Big Brother. 


\subsection{SEE ALSO}

bbcombotest(1), bb-hosts(5), hobbitserver.cfg(5), hobbit(7) 
  

\newpage
\section{BBDIGEST}
 bbdigest - calculate message digests

\subsection{SYNOPSIS}
\textbf{bbdigest md5|sha1|rmd160 [filename]}


\subsection{DESCRIPTION}
\emph{bbdigest(1)}
 is a utility to calculate message digests for a file or document. It
 is used when defining HTTP- or FTP-based content checks, where
 \emph{bbtest-net(1)} checks that a URL returns a specific document;
 instead of having to compare the entire document, the comparison is
 done against a pre-computed message digest value using the MD5,
 RIPEMD160, SHA1 or any of the SHA2 (SHA-512, SHA-256, SHA-384,
 SHA-224) message digest algorithms. 


  The optional \textbf{filename} parameter is the input file whose
  message digest should be calculated; if no filename is given, the
  data is read from standard input. 


  bbdigest outputs a string containing the digest algorithm and the
  computed message digest. This is in a format suitable for use in the
  \emph{bb-hosts(5)}

 definition of a content check. 


 
\subsection{EXAMPLE}
\begin{description}
\item[example usage]
\begin{codesample2}
  bash-3.00\$ bin/bbdigest  bin/bb
  2009-11-17 06:41:26 digest_init failure: Cannot handle digest bin/bb
  Unknown message digest method bin/bb
  bash-3.00\$ bin/bbdigest md5  bin/bb
  md5:501b15c47823aa0e1f07a8fdf7832ba3
  bash-3.00\$ bin/bbdigest sha1  bin/bb
  sha1:b3609d49887e96e902d795e2126baca2ed62985a
  bash-3.00\$ bin/bbdigest rmd160  bin/bb
  rmd160:4dfac9b3a24ac58532f2ec9deb3501d0679984d1
  bash-3.00\$
\end{codesample2}  
\item[curl + bbdigest]
\begin{codesample2}  
  \$curl -s \url{http://www.foo.com/}| bbdigest sha1  
  sha1:e5c69784cb971680e2c7380138e04021a20a45a2 
\end{codesample2}  
\end{description}
\subsection{SEE ALSO}
bbtest-net(1), bb-hosts(5) 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{BBHOSTGREP}

 bbhostgrep - pick out lines in bb-hosts

\subsection{SYNOPSIS}
\textbf{bbhostgrep --help}
\textbf{bbhostgrep --version}
\textbf{bbhostgrep [--noextras] [--test-untagged] [--bbdisp] [--bbnet] TAG [TAG...]}

 
\subsection{DESCRIPTION}
\emph{bbhostgrep(1)}
 is for use by extension scripts that need to pick out the entries in
 a bb-hosts file that are relevant to the script. 


  The utility accepts test names as parameters, and will then parse
  the bb-hosts file and print out the host entries that have at least
  one of the wanted tests specified. Tags may be given with a trailing
  asterisk '*', e.g. ``bbhostgrep http*'' is needed to find all http
  and https tags. 



  The bbhostgrep utility supports the use of ``include'' directives
  inside the bb-hosts file, and will find matching tags in all
  included files. 


  If the DOWNTIME or SLA tags are used in the \emph{bb-hosts(5)} file,
  these are interpreted relative to the current time. bbhostgrep then
  outputs a ``INSIDESLA'' or ``OUTSIDESLA'' tag for easier use by
  scripts that want to check if the current time is inside or outside
  the expected uptime window. 


\subsection{OPTIONS}
\begin{description}
\item[--noextras] Remove the ``testip'', ``dialup'', ``INSIDESLA'' and ``OUTSIDESLA'' tags from the output. 

 
\item[--test-untagged] 
  When using the BBLOCATION environment variable
  to test only hosts on a particular network segment, bbtest-net will
  ignore hosts that do not have any ``NET:x'' tag. So only hosts that
  have a NET:\$BBLOCATION tag will be tested.   With this option,
  hosts with no NET: tag are included in the test, so that all hosts
  that either have a matching NET: tag, or no NET: tag at all are
  tested. 


\item[--no-down[=TESTNAME]] bbhostgrep will query the Xymon server
  for the current status of the ``conn'' test, and if TESTNAME is
  specified also for the current state of the specified test. If the
  status of the ``conn'' test for a host is non-green, or the status
  of the TESTNAME test is disabled, then this host is ignored and will
  not be included in the output. This can be used to ignore hosts that
  are down, or hosts where the custom test is disabled. 


 

\item[--bbdisp] Search the bb-hosts file following include statements
  as a BBDISPLAY server would. 


 

\item[--bbnet] Search the bb-hosts file following include statements
  as a BBNET server would. 


 


\end{description}
\subsection{EXAMPLE}
 If your bb-hosts file looks like this 
\begin{codesample2}  
192.168.1.1 www.test.com  \# ftp telnet !oracle  
192.168.1.2 db1.test.com  \# oracle  
192.168.1.3 mail.test.com \#smtp 
\end{codesample2}  

  and you have a custom Xymon extension script that performs the
  ``oracle'' test, then running ``bbhostgrep oracle'' would yield 



\begin{codesample2}  
192.168.1.1 www.test.com \# !oracle  
192.168.1.2 db1.test.com \# oracle 
\end{codesample2}  

  so the script can quickly find the hosts that are of interest. 


  Note that the reverse-test modifier - ``!oracle'' - is included in
  the output; this also applies to the other test modifiers defined by
  Xymon (the dialup and always-true modifiers). 



  If your extension scripts use more than one tag, just list all of
  the interesting tags on the command line. 



  bbhostgrep also supports the ``NET:location'' tag used by
  bbtest-net, so if your script performs network checks then it will
  see only the hosts that are relevant for the test location that the
  script currently executes on. 



 
\subsection{USE IN EXTENSION SCRIPTS}
 To integrate bbhostgrep into an existing script, look for the line in the script that grep's in the \$BBHOSTS file. Typically it will look somewhat like this: 

\begin{codesample2}   
  \$GREP-i''\^{}[0-9].*\#.*TESTNAME''\$BBHOSTS|...codetohandletest 
\end{codesample2} 

  Instead of the grep, we will use bbhostgrep. It then becomes 


\begin{codesample2}     
  \$BBHOME/bin/bbhostgrepTESTNAME|...codetohandletest 
\end{codesample2}   

  which is simpler, less error-prone and more efficient. 


 
\subsection{ENVIRONMENT VARIABLES}
\begin{description}
\item[BBLOCATION] If set, bbhostgrep outputs only lines from bb-hosts that have a matching NET:\$BBLOCATION setting. 

\item[BBHOSTS] Filename for the Xymon \emph{bb-hosts(5)}
 file. 

\end{description}
\subsection{FILES}
\begin{description}
\item[\$BBHOSTS] The Xymon bb-hosts file 


\end{description}
\subsection{SEE ALSO}
bb-hosts(5), hobbitserver.cfg(5) 

  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{BBHOSTSHOW}

 bbhostshow - output the full bb-hosts file 
\subsection{SYNOPSIS}
\textbf{bbhostshow [--bbdisp] [--bbnet] [filename]}


 
\subsection{DESCRIPTION}
\emph{bbhostshow(1)} dumps the full bb-hosts file to stdout. It
follows ``include'' tags in the bb-hosts files, and prints the full
contents as seen by the \emph{bbgen(1)} and \emph{bbtest-net(1)} utilities. 

  If no filename is given, bbhostshow displays the file pointed to by
  the BBHOSTS environment variable. 



 
\subsection{OPTIONS}
\begin{description}
\item[--bbdisp] Show the bb-hosts file following include statements as
  a BBDISPLAY server would. 


 

\item[--bbnet] Show the bb-hosts file following include statements as
  a BBNET server would. 

\end{description}
\subsection{ENVIRONMENT VARIABLES}
\begin{description}
\item[BBHOSTS] Filename for the \emph{bb-hosts(5)}
 file. 

 


\end{description}
\subsection{SEE ALSO}
bb-hosts(5), hobbitserver.cfg(5) 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{bbcmd}
\motohbcmd{bbcmd} - Run a Xymon command with environment set 
\subsection{SYNOPSIS}
\textbf{bbcmd --env=ENVFILE COMMAND}

 
\subsection{DESCRIPTION}
\emph{bbcmd(1)} is a utility that can setup the Xymon environment
variables as defined in a \emph{hobbitlaunch(8)} compatible
environment definition file, and then execute a command with this
environment in place. It is mostly used for testing extension scripts
or in other situations where you need to run a single command with the
environment in place. 


The ``--env=ENVFILE'' option points bbcmd to the file where the
environment definitions are loaded from. 

COMMAND is the command to execute after setting up the environment. 

If you want to run multiple commands, it is often easiest to just use
``sh'' as the COMMAND - this gives you a sub-shell with the
environment defined globally. 

\subsection{EXAMPLE}

\subsection{SEE ALSO} hobbitlaunch(8), hobbit(7) 




