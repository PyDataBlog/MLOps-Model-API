% !TeX spellcheck = en_US

\chapter{Introduction}
\if 0
индустриальная революция?
\fi
Cloud Applications market is increasing with great speed. 
Global annual growth is about 15\%~\cite*{statista_global}.
Furthermore one can observe the growth in the number of firms which are using Cloud Applications. 
And it concerns not only some big corporations but also many small companies~\cite*{destatis_2014, destatis_2016}. \\ 
One of the most important reasons for the development of Cloud Applications is the economy of resources.
It is much easier and often cheaper to rent a part of another's big platform than to maintain one's own server.
%It is also easier and cheaper to send a small package by mail than to keep your own car (server) and driver (administrator) for rare traffic as well.\\ 
The growing popularity of Cloud Applications makes the automation and the ease of management increasingly important.
Management is understood as deployment, administration, maintenance and the final roll-off of Cloud Applications~\cite*{autocloud}. \\   
The common problem of Cloud Applications is a \emph{vendor lock-in}~\cite*{lockin}. 
This means the problem when an application configured to work with one provider can't be easily migrated to another provider and therefore the owner of the application is locked to the first provider.
Each provider defines it own \gls{api} according to his preferences and the sphere of activity.
The migration of a Cloud Application configured to interact with the \gls{api} of one provider to another provider with another \gls{api} is a difficult but important task. 
The ability to move a Cloud Application to the more suitable provider quickly and simply is a key to the development of competition and reducing the cost of maintenance. 
When each consumer can easily choose a provider with the best price quality ratio, it will stimulate providers to reduce costs and improve the service.\\
\gls{tosca}~\cite*{TOSCA-v1.0} is a standard to solve this problem. 
\gls{tosca} defines a meta-model to describe Cloud Application's structure and management portable and interoperable. 
The use of TOSCA allows to simplify and automate the administration and migration of Cloud Applications. 
According to the \gls{tosca} standard, a structure and internal data of a Cloud Application are stored in a \textbf{C}loud \textbf{S}ervice \textbf{AR}chive (CSAR).
These archives describe Cloud Applications, their interfaces, internal dependencies, and behavior and contain the data for the deployment and operation, for example an image of a file system or executable files.\\
OpenTOSCA~\cite*{OpenTOSCA} is an open source ecosystem for the TOSCA standard developed by the University of Stuttgart.
It provides an runtime environment which can process CSARs and perform the management operations. %\\
However, installation operations often contain references to external packages, programs and files which will be subsequently downloaded via the Internet during the deployment of a Cloud Application.
These references can add expenses to the time required to download packages, money spent on rent of an idle platform and the Internet traffic for pre-known data.
%For many Cloud Applications, this may mean a few seconds of delay. 
%But for a large distributed application which contains a lot of identical nodes requiring the installation of the same programs and the download of the same files, the costs can increase significantly.\\
But the main problems of external dependencies are security and stability.
To ensure the security of internal data some firms restrict the access to the Internet.
In such systems, a user is not allowed to download or upload data without additional authorization.
In other networks access to the Internet can be extremely limited.
For example, if a platform hasn't broadband access or if communication is carried out only by satellite at certain hours.
An attempt to deploy a Cloud Application with external dependencies in such networks may not succeed or lead to a breach of security. \\
During this work, a concept of a software solution for this problem will be developed.
This concept will describe the resolution of external references in CSARs with the help of encapsulation.
Since it is impossible to predict and describe all possible types of external dependencies, the software must be developed in the form of a framework which means an easily expandable modular system. 
To encapsulate a CSAR it is necessary to analyze it, identify dependencies to external files and packages, resolve them by downloading the files and the necessary installation data for the packages as well as installation data for all depended packages. 
Then all downloaded data must be added into the CSAR.
%The output of the framework is a CSAR which contains additions to the original structure, like all the packages and files necessary for the deployment and operation of the Cloud Application.
Thus, these changes minimize or even eliminate the required access to the Internet during an application life-cycle.
%The simplest example is to find in given CSAR all the commands like "apt-get install package", delete these commands, download the package and all depended packages and add them to the CSAR.\\
A prototype resolving external dependencies in CSARs will be implemented and validated.
\clearpage 
\section*{Structure}
The work structure is as follows:
\begin{description}
\item[Chapter~\ref{chap:basis} -- \nameref{chap:basis}.] This chapter explains the basic terms and technologies used in this work, which include definitions and descriptions of Cloud Applications (section~\ref{sec:cloud}), TOSCA standard (section~\ref{sec:tosca}), OpenTOSCA environment  (section~\ref{sec:opentosca}), packet management (section~\ref{sec:pm}) and configuration management (section~\ref{sec:confman}).
\item[Chapter~\ref{chap:req} -- \nameref{chap:req}.] It clarifies requirements for the developed solution.
\item[Chapter~\ref{chap:conarch} -- \nameref{chap:conarch}.] The main concepts as well as architecture of the framework are explained and illustrated in chapter~\ref{chap:conarch}.
\item[Chapter~\ref{chap:imp} -- \nameref{chap:imp}.] This chapter describes the implementation of the prototype.
 It explains the design and development of individual components of the software. 
\item[Chapter~\ref{chap:add} -- \nameref{chap:add}.] A new package manager will be added into the framework to proof the ease of extensibility. 
\item[Chapter~\ref{chap:check} -- \nameref{chap:check}.] In this chapter the output of the developed program will be presented and validated.
\item[Chapter~\ref{chap:zusfas} -- \nameref{chap:zusfas}.] The results of the work will be summarized in the last chapter. 
	Possible directions for further work will be presented.
\end{description}
