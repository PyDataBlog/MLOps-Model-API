% BASIC SETTINGS
\documentclass[a4paper,12pt]{article} % Set paper size and document type
\usepackage{lmodern} % Use a slightly nicer looking font

% Change margins - default margins are too broad
\usepackage[margin=20mm]{geometry}

% SOURCE CODE LISTING SETTINGS 
% https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings
\usepackage{listings}
\usepackage{color}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
  basicstyle=\footnotesize,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=true,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  deletekeywords={...},            % if you want to delete keywords from the given language
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=single,	                   % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  otherkeywords={*,...},           % if you want to add more keywords to the set
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{mymauve},     % string literal style
  tabsize=2,	                   % sets default tabsize to 2 spaces
  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}

% PREPARE TITLE
\title{\textbf{Homework \#1 - It Begins...}}
\author{Name: }
\date{} % Hide the date

% START DOCUMENT
\begin{document}

\maketitle % Insert the title

\section{Intro to Algorithms}

Welcome! In this class, we'll be learning some simple algorithms. We'll also be learning the ins-and-outs of the C++ programming language. Why algorithms? Why C++? Read on. \\

\noindent
We'll be using C++ because of its popularity. C++ is commonly used in algorithms classes and in competitions because it produces very fast computer programs, and because you have a lot of control over how data is stored and processed. This makes it a great language for learning algorithms because you can try writing all the algorithm code by yourself, instead of using code already written by other people. This helps you to prove you understand each algorithm properly. A C++ program to square numbers (as in $2^2 = 2 \cdot 2 = 4$) would look like this:

\vspace{5mm}
\lstinputlisting[language=C++,firstline=7]{squares.cpp}

\noindent
You could say this program \textbf{implements an algorithm} for squaring numbers. What is an algorithm? An algorithm is: \\

\vspace{4mm}
\noindent\fbox{\parbox{\textwidth}{
Any well defined computational procedure that takes some value, or set of values, as input and produces a value or set of values as output. 
}}
\vspace{5mm}

\noindent
That's it! An even simpler way to say it would be that an algorithm is \textbf{a set of clear rules for completing some task}. Why are algorithms so important? Because a good algorithm can make it possible to solve a problem that would be impossible to solve with a bad algorithm, either because the problem would take too long to solve, or use too much memory, or the solution would not be close enough to the "right" answer. The \textbf{way} you complete a task has a huge effect on how fast and how well you do it. In this way, a computer algorithm is a kind of \textbf{technology} just like faster CPUs or bigger memory. Better algorithms make it possible for computers to do new things. 


\section{Apply What You've Learned}

\subsection{C++ Basics}

What does this simple C++ program do?

\vspace{5mm}
\begin{lstlisting}[language=C++]
#include <iostream>

using namespace std;

int main(){
	cout << "Hello!" << endl;
	return 0;
}
\end{lstlisting}

\begin{enumerate}
\item Prints out the word "Hello!"
\item It has an \textbf{error} and will not run
\item Prints out "Hello!0"
\item Prints out "0"
\end{enumerate}

\subsection{Algorithms}

Write an algorithm for doing the dishes. You don't have to use all the spaces below...if you can write it in fewer steps that's better!

\begin{enumerate}
\item
\item
\item
\item
\item
\item
\item
\item
\item
\item
\end{enumerate}

\end{document}