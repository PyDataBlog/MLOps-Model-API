\section{Conclusion}
\label{sec:conclusion}
In this report, we examined the approach on compositional shape analysis suggested by Calcalgno et al.\cite{csa}, which is based on separation logic.
We explained in detail the abduction question which is at the heart of their technique.
Besides explaining the abduction algorithm with several examples, we showed how to solve the more general problem of bi-abduction by using both the abduction procedure and a frame inference procedure.
Afterwards, we briefly sketched how bi-abduction can be used to infer pre/post specs in a compositional analysis.
There are more challenges to precondition generation, many of which are discussed in \cite{csa}.

To ease understanding, we presented the algorithm for simple singly linked lists.
But the approach can be easily extended to support more complicated data structures, which makes the analysis of real-world code bases feasible.
The authors also implemented their approach in the tool ABDUCTOR, and applied it to different real-world programs.
The most notable positive result is that ABDUCTOR finds useful results for very large code bases.
In particular, analysis of a complete linux kernel is possible in a few hours, where specs can be found for about 60\% of procedures. 
Compositional analysis of independent procedures helps scalability for several reasons:
First, it naturally allows one to exploit parallelism with multi-core computers.
Second, it is possible to use time-outs on each analyzed procedure.
Third, each file can be analyzed independently of others.
Thus, it is not necessary to load the entire source program, which saves a lot of memory.

The important contribution of the approach under examination is not the tool ABDUCTOR itself, but the demonstration that a successful compositional analysis is indeed possible.
One possible direction for future research is to take other existing techniques (i.e. different abstract shape domains or even alternatives to separation logic) and build up a compositional analysis with those approaches.

