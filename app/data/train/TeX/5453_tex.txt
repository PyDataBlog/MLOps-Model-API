%% This is an example first chapter.  You should put chapter/appendix that you
%% write into a separate file, and add a line \include{yourfilename} to
%% main.tex, where `yourfilename.tex' is the name of the chapter/appendix file.
%% You can process specific files by typing their names in at the
%% \files=
%% prompt when you run the file main.tex through LaTeX.
\chapter{Introduction}

When implementing an algorithm in code, software engineers often evaluate
multiple possible solutions to the same problem and their corresponding
trade-offs. While one solution might have better performance with a faster
execution time, another solution might instead be incredibly space efficient
with limited storage resources. Since it is not always immediately clear which
solution makes the most sense to implement given a set of real-world
constraints, discussion about ideas and potential solutions can prove
helpful in choosing a solution. Given the nature of collaborative problem
solving, it is often the case that software development teams evaluate and
critique ideas brought forth by team members to solve a technical problem.

\section{Diversity of Thought}
In the modern workforce, diversity of thought refers to the belief that since
an individual's unique background and perspective shapes how that person thinks,
there is deep potential in creating cultural environments where people
collaborate, share ideas, and learn from one another\cite{diversity-thought}.
Diversity of thought implies that there is no singular best way for
organizations to accomplish tasks. If a high level of thought diversity existed
in the world of software development, then one would expect to find software
engineers comfortably presenting and discussing their ideas concerning technical
solutions. A singular thought space in software engineering would indicate that
few software developers contribute to technical discussions or even
implementations. From a technical perspective, diversity of thought in software
development is beneficial because it helps prevent groupthink and overconfidence
from experts \cite{diversity-thought}. In order to explore the current status
of thought diversity within software development, access to data about recent
software projects was necessary.

\section{Open Source Software}
As intellectual property, source code written for software projects is often
licensed to end users, establishing an agreement between the software owner
and the end user about what constitutes legal terms of use
\cite{software-license}. Some organizations employ a proprietary license,
allowing end users to use copies of the software, but also preventing those
outside of the organization from accessing the software's source code
\cite{proprietary-license}. However, open source software licenses stipulate
that the source code be available for anyone to view or modify
\cite{open-source}. Due to the ever increasing popularity of open source
software \cite{open-source-growth} and the accessible nature of open source
projects, computational analysis on open source software projects was used to
assess diversity of thought in modern software development.

\section{Software Engineer Experts}
Although open source software licensing lifts traditional organizational
barriers to software development, this project aimed to demonstrate how a few
software developer experts hold significant influence over the open source
software community and introduce a singularity of thought in implementations to
technical problems.
