Curiosities:
\afterassignment\aftergroup
\AddToShipoutPicture{
\everypar
tikzpagenodes package
linegoal package
\tikzmark
%*****************************************************************************************************************************************%
%*************************************************************** General Package Info *********************************************************************%
%*****************************************************************************************************************************************%
\NeedsTeXFormat{...}
-   specifies which version of TeX or LaTeX is required at least to run your package. The optional date may be used to specify the version more precisely.
\ProvidesPackage{<name>}[<version>]
-   A package introduces itself using this command. <name> should be identical to the basename of the file itself. The <version> should begin with a date in the format YYYY/MM/DD. Version information should be kept updated while developing a package.
Next you may write some TeX or LaTeX code like loading package, but write only the bare minimum needed for the package options set below.
\RequirePackage
-   is equivalent to \usepackage.
\DeclareOptions
-   are end-user parameters. Each option is declared by one such command.
\ExecuteOptions{...}
-   tells which are the default.
\ProcessOptions\relax
-   terminates the option processing.
Write whatever you want in it using all the LaTeX commands you know. Normally you should define new commands or import other packages.
\endinput:
-   this must be the last command.
\CheckCommand{\InputIfFileExists}[2]{%
  \IfFileExists{#1}}%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
\AtEndOfPackage
\AtEndOfClass
%-----------------------------------------------------------------------------------------------------------------------------------------%
*scrlfile*
\BeforeFile
\AfterFile
\BeforeClass
\AfterClass
\AfterAtEndOfClass
\BeforePackage
\AfterPackage
\AfterAtEndOfPackage
\PreventPackageFromLoading
\ResetPreventPackageFromLoading
\StorePreventPackageFromLoading
\BeforeClosingMainAux
\AfterReadingMainAux
%-----------------------------------------------------------------------------------------------------------------------------------------%
\AfterPreamble{hcodei}
\AtEndPreamble{hcodei}
\AfterEndPreamble{hcodei}%
%-----------------------------------------------------------------------------------------------------------------------------------------%
\AtBeginDocument
-   will let you specify a set of commands that will be executed when \begin{document} is met.
\AtEndDocument
-   does the same for \end{document}.
\AfterEndDocument{hcodei}
\AfterEndDocument{\foreach \ext in {aux}{\immediate\write18{cmd /c del \jobname.\ext}}}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\BeforeBeginEnvironment{henvironmenti}{hcodei}
\AtBeginEnvironment{henvironmenti}{hcodei}
\AtEndEnvironment{henvironmenti}{hcodei}
\AfterEndEnvironment{henvironmenti}{hcodei}
%-----------------------------------------------------------------------------------------------------------------------------------------%
*filehook*
\AtBeginOfEveryFile{〈TEX code〉}
\AtEndOfEveryFile{〈TEX code〉}
%-----------------------------------------------------------------------------------------------------------------------------------------%
*atveryend*
\BeforeClearDocument{code}
-   The code is called before the final \clearpage in \enddocument. However it is
unknown, whether the last page is already shipped out or if this will be triggered
by the final \clearpage.
\AfterLastShipout{code}
-   The code is called after the final \clearpage of \enddocument before the main
.aux file is closed. This is the right place to remember the last page in the .aux
file, for instance.
\AtVeryEndDocument{code}
-   The code is called after the .aux file is closed and read in again. It is the place for
final checks, rerun hints, final messages.
\AtEndAfterFileList{code}
-   After the .aux file closing and reading LATEX prints the file list if requested by
\listfiles. Then this hook is executed.
\AtVeryVeryEnd{code}
-   This code is called right before the final \@@end.
%-----------------------------------------------------------------------------------------------------------------------------------------%
everypage
\AddEverypageHook{}{}
\AddThispageHook{}{}
%-----------------------------------------------------------------------------------------------------------------------------------------%
*letltxmacro*
\LetLtxMacro {new macro} {old macro}
-   Macro \LetLtxMacro behaves similar to TEX’s \let assignment, but it takes care of macros that are defined by \DeclareRobustCommand and/or have optional arguments. Example:
    \DeclareRobustCommand{\Macro}[1][default]{...}
    \LetLtxMacro{\SavedMacro}{\Macro}
-   Then macro \SavedMacro only uses internal macro names that are derived from \SavedMacro’s macro name. Macro \Macro can now be redefined without affecting
\SavedMacro.
\GlobalLetLtxMacro {new macro} {old macro}
-   Like \LetLtxMacro, but the new macro is defined globally. Since version 2016/05/16 v1.4
SUPPORTS:\newcommand, \renewcommand, \newenvironment, \renewenvironment, \DeclareRobustCommand, \newrobustcmd (etoolbox), \renewrobustcmd (etoolbox), \robustify (etoolbox)
%-----------------------------------------------------------------------------------------------------------------------------------------%
\ShowDocumentCommandArgSpec
\ShowDocumentEnvironmentArgSpec
%-----------------------------------------------------------------------------------------------------------------------------------------%
*ltclass.dtx*
\@ifpackageloaded{<package name>}{true code}{false code}
\@ifpackagelater{<package name>}{<version>}{true code}{false code}
\@ifpackagewith{<package name>}{<options>}{true code}{false code}
-   Example: \AtBeginDocument{\@ifpackageloaded{titlesec}{\@cfttitlesectrue}{}}
\@ifclassloaded{<package name>}{true code}{false code}
\@ifclasslater{<package name>}{<version>}{true code}{false code}
\@ifclasswith{<package name>}{<options>}{true code}{false code}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\ProvidesPackage{name}[version]
-   A package can identify itself with the \ProvidesPackage command. The version should begin with a date in the format YYYY/MM/DD.
%-----------------------------------------------------------------------------------------------------------------------------------------%
\RequirePackage[options]{name}[version]
-   Packages or classes can load other packages using \RequirePackage. If the package has already been loaded, then nothing happens unless the requested options are not a subset of the options with which it was loaded, in which case an error is called.
%-----------------------------------------------------------------------------------------------------------------------------------------%
\LoadClass
-   Similar to \RequirePackage, but for classes, may not be used in package files.
%-----------------------------------------------------------------------------------------------------------------------------------------%
\PassOptionsToPackage{options}{package}
-   Packages can pass options to other packages using:\PassOptionsToPackage{options}{package}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\PassOptionsToClass
-   This adds the <options> to the options list of any future \RequirePackage or \usepackage command. For example:
        \PassOptionsToPackage{foo,bar}{fred} \RequirePackage[baz]{fred}
    is the same as:
        \RequirePackage[foo,bar,baz]{fred}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\LoadClassWithOptions
-   \LoadClassWithOptions{name}[version]: This is similar to \LoadClass, but it always calls class <name> with exactly the same option list that is being used by the current class, rather than an option explicitly supplied or passed on by \PassOptionsToClass. %-----------------------------------------------------------------------------------------------------------------------------------------%
\RequirePackageWithOptions
-   \RequirePackageWithOptions is the analogous command for packages. This is mainly intended to allow one class to simply build on another, for example:

    \LoadClassWithOptions{article}

This should be contrasted with the slightly different construction

    \DeclareOption*{\PassOptionsToClass{\CurrentOption}{article}}
    \ProcessOptions
    \LoadClass{article}

As used here, the effects are more or less the same, but the version using \LoadClassWithOptions is slightly quicker (and less to type). If, however, the class declares options of its own then the two constructions are different; compare, for example:

    \DeclareOption{landscape}{...}
    \ProcessOptions
    \LoadClassWithOptions{article}

with:

    \DeclareOption{landscape}{...}
    \DeclareOption*{\PassOptionsToClass{\CurrentOption}{article}}
    \ProcessOptions
    \LoadClass{article}

In the first case, the article class will be called with option landscape precisely when the current class is called with this option; but in the second example it will not as in that case article is only passed options by the default option handler, which is not used for landscape as that option is explicitly declared.
%-----------------------------------------------------------------------------------------------------------------------------------------%
\@onlypreamble\<command name>
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
\overfullrule=2cm
-   add black bar where overfull box occurs
%-----------------------------------------------------------------------------------------------------------------------------------------%
% Delimeter Options: {} [] () <> '' || // ?? -- ** :: !! ;; ,, NOT: `` ^^ @@ ## == __ ..
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%

%-----------------------------------------------------------------------------------------------------------------------------------------%
%----------------------------------------------------------------- xargs -----------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
\newcommandx*\coord[3][1=1, 3=n]{(#2_{#1},\ldots,#2_{#3})}
$\coord{x}$ (x1, . . . , xn)
$\coord[0]{y}$ (y0, . . . , yn)
$\coord{z}[m]$ (z1, . . . , zm)
$\coord[0]{t}[m]$ (t0, . . . , tm)

%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
\DeclareRobustCommand{\MyCommand}...
\newcommand
    defines a new command, and makes an error if it is already defined.
\renewcommand
    redefines a predefined command, and makes an error if it is not yet defined.
\providecommand
    defines a new command if it isn't already defined.
%-----------------------------------------------------------------------------------------------------------------------------------------%
\def\examplea#1{% #1 cannot contain \par}
\long\def\exampleb#1{% #1 can contain \par}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\newcommand{\examplea}[1]{% #1 can contain \par}
\newcommand*{\exampleb}[1]{% #1 cannot contain \par}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\newenvironment{examplea}[1]{% #1 can contain \par}{}
\newenvironment*{exampleb}[1]{% #1 cannot contain \par}{}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\NewDocumentCommand\examplea{m}{% #1 cannot contain \par}
\NewDocumentCommand\examplab{+m}{% #1 can contain \par}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\newcommand*{\<error command name>}
{%
    \PackageError{<package>}{...\string\<cs/def name used>\space...}{help text}
}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\ifdefstrequal{\currentseries}{\seriesm}{true}{false}
\ifcsstrequal{\currentseries}{\seriesm}{true}{false}%
\ifcsequal{\currentseries}{\seriesm}{true}{false}%
\ifdefequal{\currentseries}{\seriesm}{true}{false}
\ifstrequal{\currentseries}{\seriesm}{true}{false}
\ifcsstring{\currentseries}{\seriesm}{true}{false}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\ifcsstrequal{#1}{Chapter}{\unskip\ignorespaces\hyperlink{\@Chapter@link@name#2}{#3}}{}%
\ifstrequal{#1}{figure}{\autoref{\reffig{#2}}}{}%
\IfEq{stringA}{stringB}{true}{false}
\IfStrEq[*]{stringA}{stringB}{true}{false}
\ifdefequal{hcontrol sequencei}{hcontrol sequencei}{htruei}{hfalsei}
\ifdefstring{hcommandi}{hstringi}{htruei}{hfalsei}
\ifcsequal{hcsnamei}{hcsnamei}{htruei}{hfalsei}
\ifcsstring{hcsnamei}{hstringi}{htruei}{hfalsei}
\ifdefstrequal{hcommandi}{hcommandi}{htruei}{hfalsei}
\ifcsstrequal{hcsnamei}{hcsnamei}{htruei}{hfalsei}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\PackageError{ethel}{%
Your hovercraft is full of eels,\MessageBreak
and \protect\foo\space is \foo
}{%
Oh dear! Something's gone wrong.\MessageBreak
\space \space Try typing \space <return>
\space to proceed, ignoring \protect\foo.
}
%-----------------------------------------------------------------------------------------------------------------------------------------%
\foreach \pathname/\shift in {line/0cm, curve/2cm}{
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%*****************************************************************************************************************************************%
%******************************************************************* `my-macros.sty' **********************************************************************%
%*****************************************************************************************************************************************%
    %\captionof{table}[\tablename\thetable\relax]{hehe}%
%       \caption{<Caption Text>}
%   \endfirsthead
%   \caption[]{<Caption Text>}
%   \endhead% Uncomment following line to trace macro usage and view expansion details
%\tracingmacros=2 \tracingcommands=2
\ignorespacesafterend
%-----------------------------------------------------------------------------------------------------------------------------------------%
\define@key{family}{key}{The input is: #1}
%\define@boolkey[<pre>]{<fam>}[<mp>]{<key>}[<default>]{<func>}
%\if<mp><key>
%\ifmy@frame and defines the key macro
%\KV@fam@frame
%\iftcb@indent
%\KV@par@indent
%\define@boolkey[tcb]{paragraph}[tcb@]{indent}{sdsd}
%\define@boolkey+{fam}{shadow}{%
%\ifKV@fam@shadow
%\PakageInfo{mypack}{turning shadows on}%
%\else
%\PakageInfo{mypack}{turning shadows off}%
%\fi
%}{%
%\PakageWarning{mypack}{erroneous input ignored}%
%}
%-----------------------------------------------------------------------------------------------------------------------------------------%
%\setkeys[<prefix>]{<families>}[<na>]{<keys>}
%\setkeys[my]{familya,familyb}{keya=test}
%\setkeys[my]{familya,familyb}{keyb=test}
%\setkeys[my]{familyb,familya}{keyb=test}
%-----------------------------------------------------------------------------------------------------------------------------------------%
Delimeter Options: {} [] () <> '' || // ?? -- ** :: !! ;; ,, NOT: `` ^^ @@ ## == __ ..
Units Options: pt, pc, in, mm, cm, bp, dd or cc
%*****************************************************************************************************************************************%
%**************************************************************** `frontbackmatter.sty' *******************************************************************%
%*****************************************************************************************************************************************%
Delete all files
Run Latex->glsdefs, acn, glo
makeglossaries->alg, glg, (acr, gls)
%-----------------------------------------------------------------------------------------------------------------------------------------%
%% Z=part, chap, sec, subsec, subsubsec, para, subpara, fig, tab
%\cftbeforeZskip
%\cftZnumwidth
%\cftZfont
%\cftZpresnum
%\cftZaftersnum
%\cftZaftersnumb
%\cftZleader
%\cftZdotsep
%\cftZpagefont
%\cftZafterpnum
%\cftZindent
%\cftZfillnum
%-----------------------------------------------------------------------------------------------------------------------------------------%
%   %                                                                                                                                         \ifdefstrequal{#1}{\acronymtype}
%   %{%
%       \edef\@gls@dothiswrite{\noexpand\write18{makeindex
%           -s my-acronyms.ist\space
%           -t \jobname.alg\space%\csuse{@glotype@#1@log}
%           -o \jobname.acr\space%\csuse{@glotype@#1@in}
%           \jobname.acn%\csuse{@glotype@#1@out}
%           }%
%        }%
%        \@gls@dothiswrite
%   %}
%   %{%
%       \edef\@gls@dothiswrite{\noexpand\write18{makeglossaries
%           -s my-acronyms.ist\space
%           -t \jobname.glg\space%\csuse{@glotype@#1@log}
%           -o \jobname.gls\space%\csuse{@glotype@#1@in}
%           \jobname.glo %\csuse{@glotype@#1@out}
%           }%
%         }%
%         \@gls@dothiswrite
%   %}%
%*****************************************************************************************************************************************%
%***************************************************************** `my-colorsets.sty' *********************************************************************%
%*****************************************************************************************************************************************%
%\definecolorset{rgb}{x}{10}{red,1,0,0;green,0,1,0;blue,0,0,1}
%- would define the colors xred10, xgreen10, and xblue10
%*****************************************************************************************************************************************%
%***************************************************************** `my-colors.sty' ************************************************************************%
%*****************************************************************************************************************************************%

%*****************************************************************************************************************************************%
%***************************************************************** `my-styles.sty' ************************************************************************%
%*****************************************************************************************************************************************%
% RULES: titlerule style={black!50,line width=0.5mm}, titlerule, boxrule, toprule,
        %bottomrule, leftrule, rightrule
    % SHADOWS: smart shadow arc, drop fuzzy shadow(=), lifted
        %shadow={1mm}{-2mm}{3mm}{0.1mm}{default-colbacktitle}
    % SKINS: skin = enhanced
    % GRAPHICS: every float=\centering, tabular, tabularx(*), tikz upper|lower, tikznode
        %upper|lower,
    % OPTIONS: hyphenationfix=true, text fill,
    % COLORS: coltitle, coltext, colbacktitle, colupper, collower, colframe, colback, title
        %filled=true|false
    % FONTS: fontupper, fontlower, fonttitle,
    % ALIGNMENT: halign = justify | (flush) left | (flush) right | (flush) center,
        % halign upper, halign lower, halign title,
    % CORNERS: arc = 6pt,
    % BOX: boxsep = 2pt,
    % SPACING: top(|title), middle, bottom(|title), left(|upper|lower|title),
        %right(|upper|lower|title)
    % CODE: before (<code>|skip|title|upper(*)|lower), after
        %(<code>|skip|title|upper(*)|lower(*))
    % Haven't tried:
    % ----> borderline horizontal={0.5mm}{0pt}{red!50!white},
    % ----> arrows = {Hooks[arc=270]-Hooks[arc=270]}}
    % TIKZ NODES: frame code={...;}, interior titled code={...;}, segmentation code={...;},
        %title code={...;}
    %ifpgfkeyssuccess
    % key/.store in=macro: <key>=<value> -->> \def{\macro}{value}
    % key/.estore in=macro: <key>=<value> -->> \edef{\macro}{value}
    % key/.link=hanother keyi
    %/b/.forward to=/a,
    %key/.expand once=value.
    %key/.expand twice=value ~ key/.expand once/.expand once=value
    % key/.expanded=value
    %hkeyi/.try=hvaluei
    %/utils/exec=hcodei
    %\pgfkeys{/foo/.code=(#1)}
    %\pgfkeys{/foo/.list={a,b,0,1,...,5}}
    %\pgfkeysdef{/my key}{#1, #1.}
    %\pgfkeys{/my key=hello} -->> hello, hello.
    %hkeyi/.belongs to family={hfamily namei}
%*****************************************************************************************************************************************%
%***************************************************************** `my-glossaries.sty' ************************************************************************%
(6004) \@glshypernumber
\def\@glshypernumber#1\nohyperpage#2#3\@nil{abcdefg%
-adds 'acdefg' before/after number hyperlinks in glossary
%-----------------------------------------------------------------------------------------------------------------------------------------%
(351) \glshyperlink
 \@glslink{\glolinkprefix\glsdetoklabel{#2}}{abcdefg#1}}
-adds 'abcdefg' between 'see' and 'One-Way Delay' in acronym list (for dual entry)
%-----------------------------------------------------------------------------------------------------------------------------------------%
(594) \glossentry
\renewcommand{\glossentry}[1]{abcdefg%
-adds 'abcdefg' on line preceding an entry , by itself for first entry in group and end of line for previous entry if 2+ entries in a group
%-----------------------------------------------------------------------------------------------------------------------------------------%
(3753) \@gls@
    \@gls@link[#1]{#2}{aabbcc\@glo@text}%
-adds 'aabbcc' before hyperlink text
%-----------------------------------------------------------------------------------------------------------------------------------------%
(594) \glossentry
\renewcommand{\glossentry}[1]{abcdefg%
-adds 'abcdefg' between 'see' and 'One-Way Delay' in acronym list (for dual entry)
%-----------------------------------------------------------------------------------------------------------------------------------------%
(594) \glossentry
\renewcommand{\glossentry}[1]{abcdefg%
-adds 'abcdefg' between 'see' and 'One-Way Delay' in acronym list (for dual entry)
%-----------------------------------------------------------------------------------------------------------------------------------------%
(594) \glossentry
\renewcommand{\glossentry}[1]{abcdefg%
-adds 'abcdefg' between 'see' and 'One-Way Delay' in acronym list (for dual entry)
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
(2905) \@@gls@default@entryfmt
 \ifglsused\glslabel
        {%
          abc#2{def\glsentryplural{\glslabel}}%
            {ghi\glsentrydescplural{\glslabel}}%
            {jkl\glsentrysymbolplural{\glslabel}}{mno\glsinsert}%
        }%
        {%
          ABC#1{DEF\glsentryfirstplural{\glslabel}}%
            {GHI\glsentrydescplural{\glslabel}}%
            {JKL\glsentrysymbolplural{\glslabel}}{MNO\glsinsert}%
        }%
-ABCDEF appears before hyperlink and MNO appears after hyperlink; ghi and jkl aren't printed anywhere
%-----------------------------------------------------------------------------------------------------------------------------------------%
(5897) \glossaryentryfield
\newcommand{\glossaryentryfield}[5]{%
  \GlossariesWarning
  {Deprecated use of \string\glossaryentryfield.^^J
   I recommend you change to \string\glossentry.^^J
   If you've just upgraded, try removing your gls auxiliary
   files^^J and recompile}%
  \noindent\textbf{\glstarget{#1}{#2}} #4 #3. #5\par}
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%
%-----------------------------------------------------------------------------------------------------------------------------------------%

%\ifdefstrequal{#1}{main}
    %\ifstrequal{\currenttype}{main}
    %   {T-#1\fancyhead[L]{\Large\scshape\@glossary@toctitle}}%
    %   {F-#1\fancyhead[L]{\Large\scshape\@listof@acronyms@toctitle}}%
%*****************************************************************************************************************************************%
%************************************************************ `my-math.sty' **************************************************************%
%*****************************************************************************************************************************************%
\WithSuffix\newcommand{\exp}*[1]{\exp\left(#1\right)}
