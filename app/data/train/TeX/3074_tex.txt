%%%%%%%%%%%%%%%%%%%%%definitions%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\input{../common/header.tex}
\input{../common/newcommands.tex}
\usepackage{minted}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%DOCUMENT%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\title{Testing Advection Schemes}
\author{ M.~Wiesenberger}
\maketitle

\begin{abstract}
  This is a program to test various advection schemes on the 2d incompressible Euler
  equation used in Reference~\cite{Einkemmer2014}.
\end{abstract}

\section{Equations}
We implement the 2d incompressible Euler equation
\begin{subequations}
\begin{align}
 \frac{\partial \omega}{\partial t} + \{ \phi, \omega\} = 0 \\
 -\Delta \phi = \omega \label{eq:euler_poisson_elliptic}
\end{align}
\label{eq:euler_poisson}
\end{subequations}
with vorticity $\omega$ and stream-function $\phi$.
The Poisson bracket is given by $\{ \phi, \omega\} := \phi_x \omega_y - \phi_y \omega_x$.
Eq.~\eqref{eq:euler_poisson} is a reformulation of the standard conservative form
\begin{subequations}
\begin{align}
    \frac{\partial \omega}{\partial t} + \nabla\cdot({\vec v \omega}) = 0 \\
\nabla\cdot\vec v = 0 \quad \omega = -(\nabla\times \vec v)\cdot \zhat
\end{align}
\label{eq:euler_conservative}
\end{subequations}
with $v_x = - \phi_y$ and $v_y = \phi_x$
or since the divergence of $\vec v$ is $0$, $\nc \vec v = 0$ we have the advection form
\begin{subequations}
\begin{align}
    \frac{\partial \omega}{\partial t} + \vec v\cn \omega = 0 \\
    -\Delta\phi = \omega \quad v_x = -\phi_y \quad v_y = \phi_x
\end{align}
\label{eq:euler_advection}
\end{subequations}

Eqs.~\eqref{eq:euler_poisson} have an infinite amount of conserved quantities
among them the total vorticity $V$, the kinetic energy $E$ and the enstrophy $\Omega$
 \begin{align}
     V := \int_D \omega \dA\quad
     E :=\frac{1}{2} \int_D \left( \nabla \phi\right)^2 \dA \quad
     \Omega:= \frac{1}{2} \int_D \omega^2 \dA
 \end{align}


\section{Initialization}
Input file format: \href{https://en.wikipedia.org/wiki/JSON}{json} \\
We will consider several different initial conditions in order to test
our numerical methods
\subsection{Lamb Dipole}
The Lamb dipole is a stationary solution to the Euler equations~\cite{Nielsen1997} with infinite
boundary conditions
\begin{align}
    \omega(x,y,0) = \begin{cases}
        \frac{2\lambda U}{J_0(\lambda R)} J_1(\lambda R) \cos \theta,\ r < R,\\
        0, \text{ else}
    \end{cases}
\end{align}
Unfortunately, for a finite box this is not an exact solution any more.
on the domain $[0,1]\times [0,1]$.
The Lamb dipole is chosen with the following parameters in the input file
\begin{minted}[texcomments]{js}
"grid" :
{
    "x" : [0.0,1.0], // Choose x box boundaries appropriately
    "y" : [0.0,1.0], // Choose y box boundaries appropriately
    "bc" : ["DIR", "PER"] // Choose boundary conditions [x,y] appropriately
}
"init" :
{
    "type"      : "lamb", // This choice necessitates the following parameters
    "velocity"  : 1.0,  //  blob speed $U$
    "sigma"     : 0.1,  // dipole radius in units of $l_x$
    "posX"      : 0.5,  // in units of $l_x$
    "posY"      : 0.8  // in units of $l_y$
}
\end{minted}
\subsection{Manufactured Solution}
We manufacture a solution via
\begin{align}
    \phi(x,y,t) &=
    x \exp\left( - \frac{ x^2 + (y+vt)^2}{\sigma^2}\right) \\
    \omega(x,y,t) &= -\Delta \phi = -\sigma^{-4} \left[ 4\phi(x,y,t) ( x^2-2\sigma^2  + (y+tv)^2)\right]
\end{align}
which is solution to the modified equations
\begin{subequations}
\begin{align}
    \frac{\partial \omega}{\partial t} + \{ \phi, \omega\} = S(x,y,t) \\
    -\Delta \phi = \omega
\end{align}
\label{eq:euler_poisson_modified}
\end{subequations}
with the source
\begin{align}
    S(x,y,t) =& 8 x \sigma^{-6}(y+vt)\exp\left( - 2\frac{ x^2 + (y+vt)^2}{\sigma^2} \right) \nonumber\\
    &\left(-\sigma^2  + \exp\left( \frac{ x^2 + (y+vt)^2}{\sigma^2} \right) v( -3\sigma^2 + x^2 + (y+vt)^2) \right)
\end{align}
on the domain $[-1,1]\times [-1,1]$.

The manufactured solution is chosen with the following parameters in the input file
\begin{minted}[texcomments]{js}
"grid" :
{
    "x" : [-1.0,1.0], // Choose x box boundaries appropriately
    "y" : [-1.0,1.0], // Choose y box boundaries appropriately
    "bc" : ["DIR", "PER"] // Choose boundary conditions [x,y] appropriately
}
"init" :
{
    "type"      : "mms", // This choice necessitates the following parameters
    "velocity"  : 1.0, //  blob speed $v$
    "sigma"     : 0.2  // the width $\sigma$
}
\end{minted}
\subsection{Simple sine function}
A simple sine function is given by
\begin{align}
    \omega(x,y,0) = 2 \sin(x)\sin(y)
\end{align}
which has an analytical solution
\begin{align}
\omega(x,y,t) = 2 \sin(x)\sin(y)\exp( -(2\nu)^s t)
\end{align}
if there is artificial viscosity and is invariant else.
on the domain $[0,2\pi]\times [0,2\pi]$.
This solution is chosen with the following parameters in the input file
\begin{minted}[texcomments]{js}
"grid" :
{
    "x" : [0.0, 6.283185307179586], // Choose x box boundaries appropriately
    "y" : [0.0, 6.283185307179586], // Choose y box boundaries appropriately
    "bc" : ["DIR", "PER"] // Choose boundary conditions [x,y] appropriately
}
"init" :
{
    "type"      : "sine" // No other parameters are necessary
}
\end{minted}

\subsection{ Double Shear layer}
Here, we follow~\cite{Liu2000} and test the scheme on a double shear layer problem.
\begin{align}
    \omega(x,y,0) = \begin{cases}
        \delta \cos(x) - \frac{1}{\rho} \text{sech}^2 \left(\frac{y-\pi/2}{\rho}\right),\ y \leq \pi \\
        \delta \cos(x) + \frac{1}{\rho} \text{sech}^2 \left(\frac{3\pi/2-y}{\rho}\right),\ y > \pi \\
    \end{cases}
\end{align}
where $\rho = \pi/15$ and $\delta =0.05$ on the domain $[0,2\pi]\times [0,2\pi]$.
This solution will quickly roll-up and generate smaller and smaller scales.
A thin shear layer corresponds to $\rho = \pi/50$ or smaller.
The double shear layer initialization is chosen with the following parameters in the input file
\begin{minted}[texcomments]{js}
"grid" :
{
    "x"  : [0.0, 6.283185307179586], // Choose x box boundaries appropriately
    "y"  : [0.0, 6.283185307179586], // Choose y box boundaries appropriately
    "bc" : ["PER", "DIR"] // Choose boundary conditions [x,y] appropriately
}
"init" :
{
    "type"  : "shear", // This choice necessitates the following parameters
    "rho"   : 0.20943951023931953, // The width $\rho = \pi/15$ \\
    "delta" : 0.05 // The velocity $v$ \\
}
\end{minted}

\section{Numerical methods}
Our goal is to try out various time integration and advection discretization techniques.
We know from Godunov's theorem
that any linear advection scheme of order 2 or higher is prone to oscillations.
\subsection{Spatial grid}
The spatial grid is a two-dimensional Cartesian product-grid adaptable with the following parameters
\begin{minted}[texcomments]{js}
"grid" :
{
    "n"  :  3, // The number of polynomial coefficients
    "Nx"  : 48, // Number of cells in x
    "Ny"  : 48, // Number of cells in y
    "x"  : [0.0,1.0], // Boundaries in x
    "y"  : [0.0,1.0], // Boundaries in y
    "bc" : ["DIR", "PER"] // Boundary conditions in [x,y]
}
\end{minted}
\subsection{Time steppers}
Possible time-steppers are the explicit and semi-implicit multistep schemes
as well as the Shu-Osher scheme that originally incorporated limiters in the dG scheme.
\begin{minted}[texcomments]{js}
"timestepper" :
{
    // The semi-implicit multistep scheme (only in combination with
    // viscosity regularization)
    "type"     : "ImExMultistep",
    "tableau"  : "ImEx-BDF-3-3", //  Any ImEx tableau *
    "dt"       : 2e-3, // Fixed timestep
    "eps_time" : 1e-9 // Accuracy requirement for implicit solver
},
"timestepper":
{
    // An explicit Runge Kutta method with filter (viscosity is treated
    // explicitly)
    "type"      : "Shu-Osher",
    "tableau"   : "SSPRK-3-3", // Any Shu-Osher tableau *
    "dt"        : 1e-3 // Fixed Time-step
},
"timestepper",
{
    // an explicit multistep class with the option to use a filter (viscosity
    // is treated explicitly)
    "type"      : "FilteredExplicitMultistep"
    "tableau"   : "eBDF-3-3" // Any explicit multistep tableau *
    "dt"        : 2e-3 // Fixed timestep
},
\end{minted}
*See the dg documentation for what tableaus are available.
\subsection{Regularization technique}
Choose either no regularization or artificial viscosity or modal filtering by the following
parameters in the input file.

For no regularization choose
\begin{minted}[texcomments]{js}
"regularization",
{
    "type" : "none" //No regularization
}
\end{minted}

For artificial viscosity Eqs.~\eqref{eq:euler_poisson} are modified to
\begin{subequations}
\begin{align}
    \frac{\partial \omega}{\partial t} + \{ \phi, \omega\} = -(-\nu \Delta)^s \omega\\
 -\Delta \phi = \omega
\end{align}
\label{eq:euler_poisson_viscous}
\end{subequations}
where $\nu$ is the viscosity coefficient and $s=1,2,3,\cdots$ is the order
\begin{minted}[texcomments]{js}
"regularization",
{
    "type"      : "viscosity", // Artificial viscosity
    "order"     : 2 , // Order: 1 is normal diffusion, 2 is hyperdiffusion, can be
    // arbitrarily high, but higher orders might take longer to solve or restrict
    // the CFL condition
    "nu"        : 1e-3, // Viscosity coefficient
    "direction" : "centered" //Direction of Laplacian: forward or centered
}
\end{minted}
The other regularization method is the modal filter that applies an exponential filter
\begin{align}
    \begin{cases}
    1 \text{ if } \eta < \eta_c \\
    \exp\left( -\alpha  \left(\frac{\eta-\eta_c}{1-\eta_c} \right)^{2s}\right) \text { if } \eta \geq \eta_c \\
    0 \text{ else} \\
    \eta := \frac{i}{n-1}
    \end{cases}
\end{align}
and is choosable with the following parameters
\begin{minted}[texcomments]{js}
"regularization",
{
    "type"  : "modal", // Not choosable for \textbf{ImExMultistep} timestepper
    "order" : 8,  // Order: normally 8 or 16
    "eta_c" : 0.5, // cutoff wavelength below which no damping is applied
    "alpha" : 36.0 // damping coefficient determining damping for highest
    //wavenumber
}
\end{minted}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Elliptic solver}
Currently, the multigrid solver is the only one choosable
to solve Eq.~\eqref{eq:euler_poisson_elliptic}
\begin{minted}[texcomments]{js}
"elliptic",
{
    "type"      : "multigrid", // Actually a nested iterations method
    "stages"    : 3,  // Number of stages (3 is best in virtually all cases)
    "eps_pol"   : [1e-6,10,10],
    // Accuracy requirement on each stage of the
    // multigrid scheme. $\eps_0 = \eps_{pol,0}$, $\eps_i = \eps_{pol,i} \eps_{pol,0}$  for $i>1$. \\
    "direction" : "centered" // Direction of the Laplacian: forward or centered
}
\end{minted}
\subsection{Advection schemes}
The following parameters control the advection scheme in the code
\begin{minted}[texcomments]{js}
"advection",
{
    "type" : "arakawa", // Discretize Eqs.\eqref{eq:euler_poisson} using Arakawa's scheme \cite{Einkemmer2014}
    "type" : "centered" // Discretize Eqs.\eqref{eq:euler_conservative} using the centered flux
    "type" : "upwind" // Discretize Eqs.\eqref{eq:euler_conservative} using the upwind flux
    "type" : "centered-advection" // Discretize Eqs.\eqref{eq:euler_advection} using the centered flux
    "type" : "upwind-advection" // Discretize Eqs.\eqref{eq:euler_advection} using the upwind flux
    "multiplication" : "pointwise"
    // The multiplications in the scheme are done pointwise in nodal space
    "multiplication" : "projection"
    // The multiplications in the scheme are done by first interpolating to a
    // higher polynomial grid with $n_{fine} = 2n$, and projecting the result back
    // to the coarse grid
}
\end{minted}

\section{Compilation and useage}
The program shu\_b.cu compiles with
\begin{verbatim}
make <shu_b> device = <omp gpu>
make <shu_hpc> device = <omp gpu>
\end{verbatim}
and depends on both GLFW3 and NETCDF. If GLFW3 is not available then compile shu\_hpc which avoids this dependency.
Run with
\begin{verbatim}
path/to/feltor/src/shu/shu_b input.json
\end{verbatim}

\subsection{Output structure}

We can either display the results in real-time to screen using the glfw3 library or
write the results to a file in netcdf-4 format.
This is regulated by the output paramters in the input file
\begin{minted}[texcomments]{js}
"output":
{
    // Use glfw to display results in a window while computing (requires to
    // compile with the glfw3 library)
    "type"  : "glfw"
    "itstp"  : 4, // The number of steps between outputs of 2d fields \\
    // Use netcdf to write results into a file
    // (see next section for information about what is written in there)
    "type"  : "netcdf"
    "itstp"  : 4, // The number of steps between outputs of 2d fields \\
    "maxout"  : 500 // The total number of field outputs. The endtime is
    //T=itstp*maxout*dt
}
\end{minted}
\subsection{Structure of output file}
Output file format: netcdf-4/hdf5
%
%Name | Type | Dimensionality | Description
%---|---|---|---|
\begin{longtable}{lll>{\RaggedRight}p{7cm}}
\toprule
\rowcolor{gray!50}\textbf{Name} &  \textbf{Type} & \textbf{Dimension} & \textbf{Description}  \\ \midrule
inputfile  &             text attribute & 1 & verbose input file as a string \\
time                     & Coord. Var. & 1 (time) & time at which fields are written \\
x                        & Coord. Var. & 1 (x) & x-coordinate  \\
y                        & Coord. Var. & 1 (y) & y-coordinate \\
xc                       & Dataset & 2 (y,x) & Cartesian x-coordinate  \\
yc                       & Dataset & 2 (y,x) & Cartesian y-coordinate \\
vorticity                & Dataset & 3 (time, y, x) & electon density $n$ \\
potential                & Dataset & 3 (time, y, x) & electric potential $\phi$  \\
vorticity\_1d            & Dataset & 1 (time) & Vorticity integral $V$  \\
enstrophy\_1d            & Dataset & 1 (time) & Enstropy integral $\Omega$  \\
energy\_1d               & Dataset & 1 (time) & Total energy integral computed using $E = \int_D \phi\omega \dA$ \\
time\_per\_step          & Dataset & 1 (time) & Average computation time for one step \\
error                    & Dataset & 1 (time) & Relative error to analytical solution if available, 0 else \\
\bottomrule
\end{longtable}
The output fields are determined in the file \texttt{feltor/src/lamb\_dipole/diag.h}.

%..................................................................
\bibliography{../common/references}
%..................................................................


\end{document}
