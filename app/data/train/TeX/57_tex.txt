%
% Adobe Systems Engineering GmbH - 2014
% Erhan Bagdemir <bagdemir@adobe.com>
%
\documentclass{beamer}

% package declerations
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{listings}

\lstset{
        language=Java,
        tabsize=4,
        breaklines=true,
        breakatwhitespace=true,
        escapechar=|,
        basicstyle=\footnotesize\ttfamily,
        numberstyle=\footnotesize\ttfamily,
        aboveskip=\baselineskip,
        captionpos=b,
        columns=fullflexible,
        showstringspaces=false,
        extendedchars=true,
        breaklines=true,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0.498,0.0,0.333},
        stringstyle=\color[rgb]{0.165,0.0,0.999},
        commentstyle=\color[rgb]{0.247,0.498,0.372}
}

\newcommand\red[1]{\setlength\fboxsep{0pt}\colorbox{red}{\strut #1}}

% theme
\usetheme{torino}

\graphicspath{{./images/}}

% header informations
\author[Bagdemir]{Erhan Bagdemir}
\title{{\fontsize{2em}{1em}\selectfont Lambda Expressions in Java}}
\institute{bagdemir.com - Follow on @ebagdemir}
\setbeamerfont{footnote}{size=\tiny}

% logo of the team.
\titlegraphic{
   \includegraphics[width=4cm]{duke8}
}

\begin{document}
	\setbeamertemplate{itemize items}[default]
	
	% Cover page.
	\begin{frame}
		\titlepage
		\section{Cover}
	\end{frame}

	% Agenda
	\begin{frame}{Today's Agenda}
		\section{Agenda}
		\begin{columns}
    			\begin{column}{0.3\textwidth}
					\centering
					\includegraphics[width=2cm]{lambda}	
    			\end{column}
    			\begin{column}{0.7\textwidth}
    				%	\setbeamertemplate{itemize items}[square]
        				\begin{itemize}
        					\item Definition of Lambda.
        					\item Lambda Expressions in Java.
							\item Functional Interfaces
							\item Method References :: Operator
        					\item forEach()
							\item Streams
					
        				\end{itemize}
    		
    			\end{column}
		\end{columns}
	\end{frame}
	
	\begin{frame}{Lambda Expressions: Definition of Lambda}
		\section{Definition}
		\begin{columns}
    			\begin{column}{0.3\textwidth}
					\centering
					\includegraphics[width=4cm]{church}	
    			\end{column}
    			\begin{column}{0.7\textwidth}
					
					\begin{itemize}
						\item \textbf{A formal system for expressing computational behaviour}.
						\begin{itemize}
						\item Invented by Alonzo Church in 1930.	
						\end{itemize}
						\item Lambda expressions consist of many parentheses i.e in \textbf{Y-Combinator}:					
					
						\[ Y = \lambda f. (\lambda x. f (x x))(\lambda x. f (x x)) \]
					\end{itemize}
    			\end{column}
		\end{columns}
	\end{frame}	

	\begin{frame}{Lambda Expressions: The Idea, behind}
		\section{The idea}
		\begin{columns}
    			\begin{column}{0.3\textwidth}
					\centering
					\includegraphics[width=4cm]{cloudlambdabot}	
    			\end{column}
    			\begin{column}{0.7\textwidth}
					
					\begin{itemize}
						\item \textbf{Functions are first-class citizens.}
						\item \textbf{Lambda expressions are high order functions:}
						\begin{itemize}
						\item They take other functions as a parameter.	
						\item They may return functions.					
						\end{itemize}
						\item \textbf{The functions in Lambda all referentially transparent (pure functions). They:} 
						\begin{itemize}
						\item provide a better parallelisation (no side-effects),	
						\item are easier to test,		
						\item are cacheable and provide \textit{lazy} evaluation.				
						\end{itemize}
					\end{itemize}
    			\end{column}
		\end{columns}
	\end{frame}	
	
	
	\begin{frame}{Lambda Expressions: Java 8}
	\section{Lambdas in Java}
	\begin{columns}
    	\begin{column}{0.3\textwidth}
			\centering
			\includegraphics[width=5cm]{duke8}	
    	\end{column}
    	\begin{column}{0.7\textwidth}
			\textbf{Some examples of function definitions:}
			\begin{itemize}
				\item in Javascript : \textbf{function () \{ return x + 1 \};}
				\item in LISP: \textbf{(lambda (x) x + 1)}
				\item in C++11: \textbf{[](int x) \{ return x + 1; \} }
				\item in Scala: \textbf{x => x + 1 or just \_ + 1}
				\item in Java 8: \textbf{(int x) -> x + 1}
				\end{itemize}
  		\end{column}
	\end{columns}
	\end{frame}	

	\begin{frame}[fragile]{Lambda Expressions: Type of Lambda Expressions}
		\section{Type of Lambda in Java}
		Types of lambda expressions are defined in the \textbf{java.util.function}
		\begin{lstlisting}
			Function<Integer, String> toStr = x -> Integer.parseValue(x);

		\end{lstlisting}
		
		You can pass lambdas as a parameter:
		
		\begin{lstlisting}
		final Double forNetPrice = 50.0d;
		final Function<Double, Double> withVAT = x -> x * 1.19;
		prepareForShipment(withVAT, forPrice);
		\end{lstlisting}
	\end{frame}	
	
	\begin{frame}[fragile]{Lambda Expressions: Type of Lambda Expressions}
		\section{Functional Interfaces}
		If there is no functional interface in the \textbf{java.util.function} package for your usage, create your own:
		\begin{lstlisting}
			@FunctionalInterface
			public interface WorkflowLambda {
			    IAsset execute(String clientId, String userId, MetadataView view);
			}

		WorkflowLambda workflow = (clientId, userId, view) -> executeWith(clientId, userId, view);
		\end{lstlisting}
		
		\begin{itemize}
			\item Call \textit{Functional Interfaces} or \textit{Single Abstract Method} interfaces.
		\end{itemize}
				
	\end{frame}	


	\begin{frame}[fragile]{Lambda Expressions: Scope of Lambda Expressions}
		\section{Scope of Lambda Expressions}
		
		The scope of lambda expressions, the scope of the enclosing type:
		\begin{lstlisting}
		@Service
		public class OrderManagement {

		   @Inject
  			private ShippingCostService scService;

  			private void calculateOrder() {
    			/* final */ double vatRate = vatService.getVAT(Country.DE);
    			Function<Double, Double> total = x -> (x * vatRate) + this.scService.getCost();
 			 }
		}
		\end{lstlisting}
		
		Local variables can be referenced by lambda expressions, as long as they are \textbf{effective final}.
	\end{frame}	
	
	\begin{frame}[fragile]{Lambda Expressions: Method References}
		\section{Method References}
		We can use methods of existing classes as lambda expressions.
		Method references are syntactic shortcuts to the lambda expressions:
		\begin{lstlisting}
		// static <T> void sort(T[] a, Comparator<? super T> c)
		
		Collections.sort(myList, (firstInt, secondInt) -> firstInt - secondInt);
		Collections.sort(myList, FooComparator::compare);
		
		// if we'd an existing comparator
		public class ExistingComparator {
  			public static Integer compare(Integer first, Integer second) {
    		    return first - second;
  			}
		}
		\end{lstlisting}
		
	\end{frame}	
	
	% 
	\begin{frame}[fragile]{Lambda Examples: forEach() }
		\section{forEach}
			\begin{itemize}
				\item Collections know how to iterate through their elements.
				\item It's a better style, which provides functional polymorphism, in comparison to imperative external loops.
			\end{itemize}

			\begin{lstlisting}
    		final List<Integer> myList = new ArrayList<>(3);
    		myList.add(1);
    		myList.add(5);
    		myList.add(2);

    		myList.forEach(System.out::println);
			\end{lstlisting}
			
			A new method in the "Collection" interface without breaking code?
	\end{frame}	

	% 
	\begin{frame}[fragile]{Lambda Examples: Default Implementations}
		\section{Default Implementations}
		
		Interfaces may have \textbf{default} implementations: 
		\begin{lstlisting}
		public interface Dog {
		
		    public void wagTail();
			
		    public default void bark() {
		        System.out.println("Bark!");
		    }
		}
		\end{lstlisting}
		\begin{itemize}
			\item The interfaces may contain static methods as well.
		\end{itemize}
	\end{frame}
	
	% Streams cover
	\begin{frame}[fragile]{Lambda Examples: Streams}
		\section{Streams}

		\begin{center}
		\Huge Streams
		\end{center}


	\end{frame}	


	% Stream Intro
	\begin{frame}[fragile]{Lambda Examples: Streams}
		\section{Stream Definition}
		
			\begin{itemize}
				\item Streams represent a sequence of elements, which support different operations that perform computations on these elements. 
				\item There are two types of operations:
				\begin{itemize}
					\item Intermediate Operations (filter, sort, etc.). 
					\item Terminal Operations (collect, forEach, reduce, etc.)
				\end{itemize}

				\item Stream features:
				\begin{itemize}
				\item No storage. 
				\item Functional in nature (No side-effects).
				\item Streams are lazy (except sort).
				\item Allowed to be unbounded.
				\item Consumable.
				\end{itemize}
				\item Streams are monads!
			\end{itemize}

	\end{frame}	

	% Stream Pipeline
	\begin{frame}[fragile]{Lambda Examples: Stream Pipelines}
		\section{Stream Pipeline}
		
		The processing pipeline consists of a source, intermediate operations and a terminal operation.
		
		\includegraphics[width=11cm]{pipeline}	
		
	\end{frame}	


	% Stream Processing
	\begin{frame}[fragile]{Lambda Examples: Stream Processing}
		\section{Stream Processing}
		
		\includegraphics[width=11cm]{processing}	
		
	\end{frame}	
	
	% Stream Processing
	\begin{frame}[fragile]{Lambda Examples: Streams}
		\section{Stream Properties}
		
		\begin{itemize}
			\item Stream sources: Arrays, Collections, Generators and I/O Streams, e.g:
				
			\begin{lstlisting}
			try (BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
			    br.lines().forEach(System.out::println);
			}
			catch (Exception e) {
			    System.out.println(e.getMessage());
			}
   			\end{lstlisting}
			
			\item After a terminal operation, the stream is considered to be consumed.
			\item Intermediate operations are lazy and always return a new stream. (see Example 6)
				
		\end{itemize}
		
	\end{frame}	
	
	% Examples
	\begin{frame}[fragile]{Lambda Examples: Code Samples}
		\section{Stream Examples}

		Some examples (https://github.com/bagdemir/java8-training) : 
		\begin{itemize}
			\item Generators
			\item Comparators
			\item File I/O
			\item Regular Expressions
			\item Reducer
			\item Collectors
			\item Parallel Streams
		\end{itemize}		
	\end{frame}	
	
	% Book Suggestions
	\begin{frame}[fragile]{Lambda Examples: Finish}
		\section{Books}

	\begin{columns}
    	\begin{column}{0.5\textwidth}
			\vspace{0pt}
			\centering
			\includegraphics[width=3cm]{scalabook} \\
			Functional Programming (in Scala)\\
			
    	\end{column}
    	\begin{column}{0.5\textwidth}
			\vspace{0pt}
			\includegraphics[width=3cm]{lambdabook}	\\
			Structure and Interpretation of Computer Programs
	  		\end{column}
	\end{columns}
	\end{frame}	
			
	% Links
	\begin{frame}[fragile]{Links}
		\section{Links}
		
		\textbf{Lambda Quick Start}\\
		Oracle.com : http://bit.ly/1eR0we0 \\
		-\\
		\textbf{Streams}\\
		Oracle.com : http://bit.ly/1eh4aZo\\
		Oracle.com : http://bit.ly/1ustKrM\\
		-\\
		\textbf{Contact}\\
		https://github.com/bagdemir\\
		https://twitter.com/ebagdemir\\
		http://www.bagdemir.com\\

	\end{frame}	
	
\end{document}