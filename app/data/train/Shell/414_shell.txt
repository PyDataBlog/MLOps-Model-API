#!/bin/sh
#shell script saved in /usr/local/iptables

IPTABLES=/sbin/iptables
IP6TABLES=/sbin/ip6tables
MODPROBE=/sbin/modprobe
INT_NET=192.168.179.0/24
EXT_NET=10.0.1.5
SER_NET=192.168.200.192
DMZ_INTF=eth1
INT_INTF=eth2
EXT_INTF=eth0

#---------------------------------------------------------------------
echo "[+] Setting core network function..."
echo 1 > /proc/sys/net/ipv4/tcp_syncookies   #阻止SYN Flooding攻击
echo 3 > /proc/sys/net/ipv4/tcp_syn_relries  #缩短TCP队列占用时间
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts  #忽略Icmp广播响应请求

for i in /proc/sys/net/ipv4/conf/*/{rp_filter,log_martians}; do
	echo 1 > $i   #记录假冒非法地址的ip包：rp_filter自动过滤掉伪造的ip地址(ethX和其对应的网段不匹配)
done
for i in /proc/sys/net/ipv4/conf/*/{accept_source_route,accept_redirects,send_redirects}; do
	  echo "0" > $i
done

### flush existing rules and set chain policy setting to DROP
echo "[+] Flushing existing iptables rules..."
$IPTABLES -F
$IPTABLES -F -t nat
$IPTABLES -X
$IPTABLES -X -t nat
$IPTABLES -Z
$IPTABLES -Z -t nat
$IPTABLES -P INPUT DROP
$IPTABLES -P OUTPUT DROP
$IPTABLES -P FORWARD DROP

### this policy does not handle IPv6 traffic except to drop it.
#
echo "[+] Disabling IPv6 traffic..."
$IP6TABLES -P INPUT DROP
$IP6TABLES -P OUTPUT DROP
$IP6TABLES -P FORWARD DROP

### load connection-tracking modules
#
$MODPROBE ip_conntrack
$MODPROBE iptable_nat
$MODPROBE ip_conntrack_ftp
$MODPROBE ip_nat_ftp

### USER chain ####
$IPTABLES -N HTTP_SRV
$IPTABLES -N FTP_SRV
$IPTABLES -N SSH_SRV
#
echo "[+] Setting up USER chain..."

##### HTTP_SRV #####
$IPTABLES -A HTTP_SRV -m recent --name web_srv --update --seconds 60 --hitcount 10 -j LOG --log-level 
alert --log-prefix "HTTP attack:" #LOG记录封包，不处理封包
$IPTABLES -A HTTP_SRV -m recent --name web_srv --update --seconds 60 --hitcount 10 -j DROP #达到指定条件执行drop
$IPTABLES -A HTTP_SRV -m recent --name web_srv --set -j ACCEPT

#### FTP_SRV ####
$IPTABLES -A FTP_SRV -m recent --name ftp_srv --update --seconds 60 --hitcount 10 -j LOG --log-level 
alert --log-prefix "FTP acctack:"
$IPTABLES -A FTP_SRV -m recent --name ftp_srv --update --seconds 60 --hitcount 10 -j DROP
$IPTABLES -A FTP_SRV -m recent --name ftp_srv --set -j ACCEPT

#### SSH_SRV ####
$IPTABLES -A SSH_SRV -m recent --name ssh_srv --update --seconds 60 --hitcount 3 -j LOG --log-level 
alert --log-prefix "SSH attack:"
$IPTABLES -A SSH_SRV -m recent --name ssh_srv --update --seconds 60 --hitcount 3 -j DROP
$IPTABLES -A SSH_SRV -m recent --name ssh_srv --set -j ACCEPT

###### INPUT chain ######
#
echo "[+] Setting up INPUT chain..."

### state tracking rules
$IPTABLES -A INPUT -m conntrack --ctstate INVALID -j LOG --log-prefix "DROP INVALID " --log-ip-options --log-tcp-options
$IPTABLES -A INPUT -m conntrack --ctstate INVALID -j DROP
$IPTABLES -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

### anti-spoofing rules
$IPTABLES -A INPUT -i $INT_INTF ! -s $INT_NET -j LOG --log-prefix "SPOOFED PKT "
$IPTABLES -A INPUT -i $INT_INTF ! -s $INT_NET -j DROP

### ACCEPT rules
$IPTABLES -A INPUT -i $INT_INTF -p tcp -s $INT_NET --dport 22 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A INPUT -p icmp --icmp-type echo-request -j DROP

### port scan ####
#$IPTABLES -A INPUT -p tcp --syn -m recent --name portscan --rcheck --seconds 60 --hitcount 10 -j LOG --log-level 
#alert log-prefix "portscan:"
#$IPTABLES -A INPUT -p tcp --syn -m recent --name portscan --set -j DROP

### default INPUT LOG rule
$IPTABLES -A INPUT ! -i lo -j LOG --log-prefix "DROP " --log-ip-options --log-tcp-options

### make sure that loopback traffic is accepted
$IPTABLES -A INPUT -i lo -j ACCEPT

###### OUTPUT chain ######
#
echo "[+] Setting up OUTPUT chain..."

### state tracking rules
$IPTABLES -A OUTPUT -m conntrack --ctstate INVALID -j LOG --log-prefix "DROP INVALID " --log-ip-options --log-tcp-options
$IPTABLES -A OUTPUT -m conntrack --ctstate INVALID -j DROP
$IPTABLES -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

### ACCEPT rules for allowing connections out
$IPTABLES -A OUTPUT -p tcp --dport 21 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A OUTPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A OUTPUT -p tcp --dport 25 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A OUTPUT -p tcp --dport 43 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A OUTPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW -j ACCEPT
#$IPTABLES -A OUTPUT -p tcp --dport 443 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A OUTPUT -p tcp --dport 4321 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A OUTPUT -p tcp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A OUTPUT -p udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT

### default OUTPUT LOG rule
$IPTABLES -A OUTPUT ! -o lo -j LOG --log-prefix "DROP " --log-ip-options --log-tcp-options

### make sure that loopback traffic is accepted
$IPTABLES -A OUTPUT -o lo -j ACCEPT

###### FORWARD chain ######
#
echo "[+] Setting up FORWARD chain..."

### state tracking rules
$IPTABLES -A FORWARD -m conntrack --ctstate INVALID -j LOG --log-prefix "DROP INVALID " --log-ip-options --log-tcp-options
$IPTABLES -A FORWARD -m conntrack --ctstate INVALID -j DROP
$IPTABLES -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

### anti-spoofing rules
$IPTABLES -A FORWARD -i $INT_INTF ! -s $INT_NET -j LOG --log-prefix "SPOOFED PKT "
$IPTABLES -A FORWARD -i $INT_INTF ! -s $INT_NET -j DROP

### ACCEPT rules
$IPTABLES -A FORWARD -p tcp --syn -i $EXT_INTF -d $SER_NET -m multiport --dports 80,443 -m conntrack --ctstate NEW -j HTTP_SRV
$IPTABLES -A FORWARD -p tcp -i $EXT_INTF -d $SER_NET --dport 21 -m conntrack --ctstate NEW -j FTP_SRV
$IPTABLES -A FORWARD -p tcp -i $INT_INTF -s $INT_NET --dport 21 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A FORWARD -p tcp -i $EXT_INTF -d $SER_NET --dport 22 -m conntrack --ctstate NEW -j SSH_SRV
$IPTABLES -A FORWARD -p tcp -i $INT_INTF -s $INT_NET --dport 22 -m conntrack --ctstate NEW -j ACCEPT
#$IPTABLES -A FORWARD -p tcp -i $INT_INTF -s $INT_NET --dport 25 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A FORWARD -p tcp -i $INT_INTF -s $INT_NET --dport 43 -m conntrack --ctstate NEW -j ACCEPT
#$IPTABLES -A FORWARD -p tcp --dport 443 -m conntrack --ctstate NEW -j HTTP_SRV
$IPTABLES -A FORWARD -p tcp -i $INT_INTF -s $INT_NET --dport 4321 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A FORWARD -p tcp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A FORWARD -p udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT
$IPTABLES -A FORWARD -p icmp --icmp-type echo-request -j ACCEPT

### default LOG rule
$IPTABLES -A FORWARD ! -i lo -j LOG --log-prefix "DROP " --log-ip-options --log-tcp-options

###### NAT rules ######
#
echo "[+] Setting up NAT rules..."
$IPTABLES -t nat -A PREROUTING -p tcp --dport 80 -i $EXT_INTF -j DNAT --to $SER_NET:80
$IPTABLES -t nat -A PREROUTING -p tcp --dport 21 -i $EXT_INTF -j DNAT --to $SER_NET:21
$IPTABLES -t nat -A PREROUTING -p tcp --dport 22 -i $EXT_INTF -j DNAT --to $SER_NET:22
$IPTABLES -t nat -A PREROUTING -p tcp --dport 443 -i $EXT_INTF -j DNAT --to $SER_NET:443
#$IPTABLES -t nat -A PREROUTING -p udp --dport 53 -i $EXT_INTF -j DNAT --to $SER_NET:53
$IPTABLES -t nat -A POSTROUTING -s $INT_NET -o $EXT_INTF -j SNAT --to $EXT_NET
#$IPTABLES -t nat -A POSTROUTING -s $INT_NET -o $EXT_INTF -j MASQUERADE

###### LOG ######
#
$IPTABLES -A INPUT -i $INT_INTF -j LOG
$IPTABLES -A OUTPUT -o $EXT_INTF -j LOG
$IPTABLES -A FORWARD -i $EXT_INTF -o $DMZ_INTF -j LOG
$IPTABLES -A FORWARD -i $DMZ_INTF -o $EXT_INTF -j LOG 
###### forwarding ######
#
echo "[+] Enabling IP forwarding..."
echo 1 > /proc/sys/net/ipv4/ip_forward

exit
### EOF ###