#!/bin/bash 

CERTM_IMAGE=${CERTM_IMAGE:-'ehazlett/certm'}

#show help
docker run --rm $CERTM_IMAGE -h

#Generate CA
#This will generate a CA with the organization "local".
docker run --rm -v $(pwd)/certs:/certs $CERTM_IMAGE -d /certs ca generate -o=local

#Generate server certificate
#This will generate a server certificate with a SAN of "localhost" and an IP SAN of "127.0.0.1" with the organization "local".
docker run --rm -v $(pwd)/certs:/certs $CERTM_IMAGE -d /certs server generate --host localhost --host 127.0.0.1 -o=local

#Generate client certificate
#This will generate a client certificate with the common name of "ehazlett".
docker run --rm -v $(pwd)/certs:/certs $CERTM_IMAGE -d /certs client generate --common-name=ehazlett -o=local

#Generate CA, server and client certificates / keys
#This will generate a CA using the org "local", a server certificate with an IP SAN of "127.0.0.1" and a client certificate.
docker run --rm -v $(pwd)/certs:/certs $CERTM_IMAGE -d /certs bundle generate --host 127.0.0.1 -o=local

#Generate CA, client and server certificates/keys
#This will generate a CA using the org "local", a client cert, and a server certificate that is valid using the DNS names "localhost" and "foo.local" as well as the IP "127.0.0.1"
docker run --rm -v $(pwd)/certs:/certs $CERTM_IMAGE -d /certs bundle generate -o=local --host localhost --host 127.0.0.1 --host foo.local

#Server cert can be used for swarm and has cert extensions for both docker server and clien