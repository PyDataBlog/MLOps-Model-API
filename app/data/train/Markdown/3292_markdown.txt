# A0141021H
###### \java\seedu\whatnow\logic\commands\ChangeCommand.java
``` java
package seedu.whatnow.logic.commands;

import java.io.IOException;
import java.util.Optional;
import java.util.logging.Logger;

import seedu.whatnow.commons.core.Config;
import seedu.whatnow.commons.core.LogsCenter;
import seedu.whatnow.commons.exceptions.DataConversionException;
import seedu.whatnow.commons.util.ConfigUtil;
import seedu.whatnow.commons.util.StringUtil;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import static seedu.whatnow.commons.core.Messages.*;

/**
 * Changes the data file location of WhatNow.
 */
public class ChangeCommand extends Command {

    public static final String COMMAND_WORD = "change";

    public static final String MESSAGE_USAGE = COMMAND_WORD + ": Changes the WhatNow data file storage location. "
            + "Parameters: PATH\n" + "Example: " + COMMAND_WORD + " location to" + " PATH: C:" + "\\" + "Users" + "\\"
            + "Jim" + "\\" + "Dropbox";

    public static final String MESSAGE_SUCCESS = "The data storage location has been successfully changed to: %1$s";

    public static final String MESSAGE_UNDO_FAIL = "Unable to undo due to no previous location information";

    public static final String MESSAGE_UNDO_SUCCESS = "Successfully able to undo to %1$s";

    public static final String MESSAGE_REDO_SUCCESS = "Successfully able to redo to %1$s";

    public static final String MESSAGE_REDO_FAIL = "Unable to redo due to no previous undo command";
    
    public static final String WHATNOW_XMLFILE = "whatnow.xml";

    public static final String DOUBLE_BACKSLASH = "\\";

    public static final String SINGLE_FORWARDSLASH = "/";

    public String newPath;

    public Path source;

    public Path destination;

    public Config config;

    private static final Logger logger = LogsCenter.getLogger(ChangeCommand.class);

    public ChangeCommand(String newPath) {
        this.newPath = newPath;
    }

    /**
     * Execute the ChangeCommand to change to the updated data filepath
     */
    @Override
    public CommandResult execute() { 
        Path path = FileSystems.getDefault().getPath(newPath);

        if (Files.exists(path)) {
            if (newPath.contains(DOUBLE_BACKSLASH)) {
                newPath = newPath + DOUBLE_BACKSLASH + WHATNOW_XMLFILE;
            } else if (newPath.contains(SINGLE_FORWARDSLASH)) {
                newPath = newPath + SINGLE_FORWARDSLASH + WHATNOW_XMLFILE;
            } else {
                newPath = newPath + SINGLE_FORWARDSLASH + WHATNOW_XMLFILE;
            }

            path = FileSystems.getDefault().getPath(newPath);
            String configFilePathUsed = Config.DEFAULT_CONFIG_FILE;
            
            try {
                Optional<Config> configOptional = ConfigUtil.readConfig(configFilePathUsed);
                config = configOptional.orElse(new Config());
                model.getStackOfChangeFileLocationOld().push(config.getWhatNowFilePath());
                config.setWhatNowFilePath(newPath);
                model.changeLocation(path, config);
                model.getUndoStack().push(COMMAND_WORD);
                model.clearRedoAll();
            } catch (DataConversionException e1) {
                logger.warning("Config file at " + configFilePathUsed + " is not in the correct format. " +
                        "Using default config properties");
                config = new Config();
            }
            
            try {
                ConfigUtil.saveConfig(config, configFilePathUsed);
            } catch (IOException e) {
                logger.warning("Failed to save config file : " + StringUtil.getDetails(e));
            }

            return new CommandResult(String.format(MESSAGE_SUCCESS, newPath));
        } else {
            return new CommandResult(String.format(MESSAGE_INVALID_PATH, newPath));
        }
    }
}
```
###### \java\seedu\whatnow\logic\commands\HelpCommand.java
``` java
package seedu.whatnow.logic.commands;

import seedu.whatnow.commons.core.EventsCenter;
import seedu.whatnow.commons.events.ui.ShowHelpRequestEvent;

/**
 * Format full help instructions for every command for display.
 */
public class HelpCommand extends Command {

    public static final String COMMAND_WORD = "help";

    public static final String MESSAGE_USAGE = COMMAND_WORD + ": Shows program usage instructions.\n" + "Example: "
            + COMMAND_WORD;

    public static final String SHOWING_HELP_MESSAGE = "Opened help window.";

    /**
     * Executes the FindCommand that launches the help page
     */
    @Override
    public CommandResult execute() {
        EventsCenter.getInstance().post(new ShowHelpRequestEvent());
        return new CommandResult(SHOWING_HELP_MESSAGE);
    }
}
```
###### \java\seedu\whatnow\logic\commands\MarkUndoneCommand.java
``` java
package seedu.whatnow.logic.commands;

import static seedu.whatnow.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;

import seedu.whatnow.commons.core.Messages;
import seedu.whatnow.commons.core.UnmodifiableObservableList;
import seedu.whatnow.model.task.ReadOnlyTask;
import seedu.whatnow.model.task.UniqueTaskList.TaskNotFoundException;

/**
 * Marks a task identified using it's last displayed index from WhatNow as
 * completed.
 */
public class MarkUndoneCommand extends Command {

    public static final String COMMAND_WORD = "undone";

    public static final String MESSAGE_USAGE = COMMAND_WORD
            + ": Mark the task identified by the index number used in the last task listing as incompleted.\n"
            + "Parameters: TODO/SCHEDULE INDEX (must be a positive integer)\n" + "Example: " + COMMAND_WORD
            + " todo 1\n" + "Example: " + COMMAND_WORD + " schedule 1";

    public static final String MESSAGE_MARK_TASK_SUCCESS = "Task marked as incompleted: %1$s";
    public static final String MESSAGE_MARK_TASK_FAIL = "Unable to mark task as incomplete";
    private static final String TASK_TYPE_FLOATING = "todo";
    private static final String TASK_TYPE_SCHEDULE = "schedule";
    public static final String MESSAGE_MISSING_INDEX = "Please specify index";
    public static final String MESSAGE_MISSING_TASKTYPE_AND_INDEX = "Please specify taskType and index";
    
    public final String taskType;
    public final int targetIndex;

    public MarkUndoneCommand(String taskType, int targetIndex) {
        this.taskType = taskType;
        this.targetIndex = targetIndex;
    }

    /**
     * Executes the MarkUndoneCommand to mark a completed task as incomplete
     */
    @Override
    public CommandResult execute() {
        UnmodifiableObservableList<ReadOnlyTask> lastShownList;
        if (taskType.equals(TASK_TYPE_FLOATING)) {
            model.updateFilteredListToShowAllCompleted();
            lastShownList = model.getCurrentFilteredTaskList();
        } else if (taskType.equals(TASK_TYPE_SCHEDULE)) {
            model.updateFilteredListToShowAllCompleted();
            lastShownList = model.getCurrentFilteredScheduleList();
        } else {
            return new CommandResult(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkUndoneCommand.MESSAGE_USAGE));
        }

        if (lastShownList.size() < targetIndex || targetIndex <0) {
            indicateAttemptToExecuteIncorrectCommand();
            return new CommandResult(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);
        }

        ReadOnlyTask taskToMark = lastShownList.get(targetIndex - 1);

        try {
            model.unMarkTask(taskToMark);
            model.getUndoStack().push(COMMAND_WORD);
            model.getStackOfMarkUndoneTask().push(taskToMark);
            model.clearRedoAll();   
        } catch (TaskNotFoundException tnfe) {
            return new CommandResult(String.format(MESSAGE_MARK_TASK_FAIL));
        }

        return new CommandResult(String.format(MESSAGE_MARK_TASK_SUCCESS, taskToMark));
    }
}
```
###### \java\seedu\whatnow\logic\commands\RedoCommand.java
``` java
    private CommandResult performRedoChange() {
        if(model.getStackOfChangeFileLocationNew().isEmpty()) {
            return new CommandResult(String.format(RedoCommand.MESSAGE_FAIL));
        }
        Config config;
        String configFilePathUsed = Config.DEFAULT_CONFIG_FILE;
        String curr="";
        String old="";
        try {
            Optional<Config> configOptional = ConfigUtil.readConfig(configFilePathUsed);
            config = configOptional.orElse(new Config());
            curr = config.getWhatNowFilePath();
            old = model.getStackOfChangeFileLocationNew().pop();
            model.getStackOfChangeFileLocationOld().push(curr);
            config.setWhatNowFilePath(old);
            model.changeLocation(FileSystems.getDefault().getPath(old), config);
        } catch (DataConversionException e) {
            logger.warning("Config file at " + configFilePathUsed + " is not in the correct format. " +
                    "Using default config properties");
            config = new Config();
        }
        
        try {
            ConfigUtil.saveConfig(config, configFilePathUsed);
        } catch (IOException e) {
            logger.warning("Failed to save config file : " + StringUtil.getDetails(e));
        }
        
        return new CommandResult(String.format(ChangeCommand.MESSAGE_REDO_SUCCESS, old));
    }

```
###### \java\seedu\whatnow\logic\commands\UndoCommand.java
``` java
    private CommandResult performUndoChange() {
        if(model.getStackOfChangeFileLocationOld().isEmpty()) {
            return new CommandResult(String.format(UndoCommand.MESSAGE_FAIL));
        }
        
        Config config;
        String configFilePathUsed = Config.DEFAULT_CONFIG_FILE;
        String curr="";
        String old="";
        try {
            Optional<Config> configOptional = ConfigUtil.readConfig(configFilePathUsed);
            config = configOptional.orElse(new Config());
            curr = config.getWhatNowFilePath();
            old = model.getStackOfChangeFileLocationOld().pop();
            model.getStackOfChangeFileLocationNew().push(curr);
            config.setWhatNowFilePath(old);
            model.changeLocation(FileSystems.getDefault().getPath(old), config);     
        } catch (DataConversionException e) {
            logger.warning("Config file at " + configFilePathUsed + " is not in the correct format. " +
                    "Using default config properties");
            config = new Config();
        }
        
        try {
            ConfigUtil.saveConfig(config, configFilePathUsed);
        } catch (IOException e) {
            logger.warning("Failed to save config file : " + StringUtil.getDetails(e));
        }
        
        return new CommandResult(String.format(ChangeCommand.MESSAGE_UNDO_SUCCESS, old));
    }
    
    private CommandResult performUndoDelete() {
        if (model.getDeletedStackOfTasks().isEmpty() || model.getDeletedStackOfTasksIndex().isEmpty()) {
            return new CommandResult(String.format(UndoCommand.MESSAGE_FAIL));
        }
        ReadOnlyTask taskToReAdd = model.getDeletedStackOfTasks()
                .pop(); /** Gets the required task to reAdd */
        model.getDeletedStackOfTasksRedo()
                .push(taskToReAdd); /**
                                     * Stores the required task for redoCommand
                                     * if needed
                                     */
        int idxToReAdd = model.getDeletedStackOfTasksIndex()
                .pop(); /** Gets the required task index to reAdd */
        try {
            model.addTaskSpecific((Task) taskToReAdd, idxToReAdd);
            model.getDeletedStackOfTasksIndexRedo().push(idxToReAdd);
        } catch (DuplicateTaskException e) {
            return new CommandResult(String.format(UndoCommand.MESSAGE_FAIL));
        }
        return new CommandResult(String.format(UndoCommand.MESSAGE_SUCCESS));
    }

    private CommandResult performUndoList() {
        if (model.getStackOfListTypes().isEmpty()) {
            return new CommandResult(MESSAGE_LIST_NOT_ENTERED);
        } else {
            String prevListCommand = model.getStackOfListTypes().pop();
            model.getStackOfListTypesRedo().push(prevListCommand);
            if (model.getStackOfListTypes().isEmpty()) {
                model.updateFilteredListToShowAllIncomplete();
                model.updateFilteredScheduleListToShowAllIncomplete();
                return new CommandResult(UndoCommand.MESSAGE_SUCCESS);
            } else {
                String reqCommandListType = model.getStackOfListTypes().peek();
                return performRequiredUndoUpdateList(reqCommandListType);
            }
        }
    }

    private CommandResult performRequiredUndoUpdateList(String reqCommandListType) {
        if (reqCommandListType.equals(ListCommand.TASK_STATUS_ALL)) {
            model.updateFilteredListToShowAll();
            model.updateFilteredScheduleListToShowAll();
            return new CommandResult(UndoCommand.MESSAGE_SUCCESS);
        } else if (reqCommandListType.equals(ListCommand.TASK_STATUS_INCOMPLETE)) {
            model.updateFilteredListToShowAllIncomplete();
            model.updateFilteredScheduleListToShowAllIncomplete();
            return new CommandResult(UndoCommand.MESSAGE_SUCCESS);
        } else {
            model.updateFilteredListToShowAllCompleted();
            model.updateFilteredScheduleListToShowAllCompleted();
            return new CommandResult(UndoCommand.MESSAGE_SUCCESS);
        }
    }

    private CommandResult performUndoMarkDone() {
        if (model.getStackOfMarkDoneTask().isEmpty()) {
            return new CommandResult(String.format(UndoCommand.MESSAGE_FAIL));
        } else {
            ReadOnlyTask taskToReAdd = model.getStackOfMarkDoneTask().pop();
            try {
                model.getStackOfMarkDoneTaskRedo().push(taskToReAdd);
                model.unMarkTask(taskToReAdd);
            } catch (TaskNotFoundException tnfe) {
                model.getStackOfMarkDoneTaskRedo().pop();
                return new CommandResult(UndoCommand.MESSAGE_FAIL);
            }
            return new CommandResult(String.format(UndoCommand.MESSAGE_SUCCESS));
        }
    }

    private CommandResult performUndoMarkUnDone() {
        if (model.getStackOfMarkUndoneTask().isEmpty()) {
            return new CommandResult(String.format(UndoCommand.MESSAGE_FAIL));
        } else {
            ReadOnlyTask taskToReAdd = model.getStackOfMarkUndoneTask().pop();
            try {
                model.getStackOfMarkUndoneTaskRedo().push(taskToReAdd);
                model.markTask(taskToReAdd);
            } catch (TaskNotFoundException tnfe) {
                model.getStackOfMarkUndoneTaskRedo().pop();
                return new CommandResult(UndoCommand.MESSAGE_FAIL);
            }
            return new CommandResult(String.format(UndoCommand.MESSAGE_SUCCESS));
        }
    }

    private CommandResult performUndoUpdate() throws TaskNotFoundException {
        assert model != null;
        if (model.getOldTask().isEmpty() && model.getCurrentTask().isEmpty()) {
            return new CommandResult(String.format(UndoCommand.MESSAGE_FAIL));
        } else {
            try {
                Task toChangeInto = (Task) model.getOldTask().pop();
                Task theOriginal = (Task) model.getCurrentTask().pop();
                model.updateTask((Task)theOriginal, toChangeInto);
                model.getOldNextTask().push(theOriginal);
                model.getNewNextTask().push(toChangeInto);
            } catch (UniqueTaskList.DuplicateTaskException utle) {
                return new CommandResult(UndoCommand.MESSAGE_FAIL);
            }
            return new CommandResult(UndoCommand.MESSAGE_SUCCESS);
        }
    }

    private CommandResult performUndoClear() {
        assert model != null;
        model.revertData();
        return new CommandResult(UndoCommand.MESSAGE_SUCCESS);
    }
}
```
###### \java\seedu\whatnow\logic\parser\Parser.java
``` java
    /**
     * Parses arguments in the context of the change data file location command.
     * 
     * @param args
     *            full command args string
     * @return the prepared command
     */
    private Command prepareChange(String args) {
        String[] argComponents= args.trim().split(DELIMITER_BLANK_SPACE);
        if(argComponents[CHANGE_LOCATION].equals("location") && argComponents[CHANGE_LOCATION_TO].equals("to")){
            return new ChangeCommand(argComponents[CHANGE_LOCATION_TO_PATH]);
        } else {
            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeCommand.MESSAGE_USAGE));
        }
    }

```
###### \java\seedu\whatnow\logic\parser\Parser.java
``` java
    /**
     * Parses arguments in the context of the markUndone task command.
     *
     * @param args full command args string
     * @return the prepared command
     */
    private Command prepareMarkUndone(String args) {
        String[] argComponents = args.trim().split(DELIMITER_BLANK_SPACE);
        if(argComponents.length > 1) {
            Optional<Integer> index = parseIndex(argComponents[INDEX]);
            if (!index.isPresent()) {
                return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkUndoneCommand.MESSAGE_MISSING_INDEX));
            }
            return new MarkUndoneCommand(argComponents[TASK_TYPE], index.get());
        } else {
            if(argComponents.length == 1 && !argComponents[0].equals("")) {
                return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkUndoneCommand.MESSAGE_MISSING_INDEX));
            } else {
                return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkUndoneCommand.MESSAGE_MISSING_TASKTYPE_AND_INDEX));
            }
        }
    }

```
###### \java\seedu\whatnow\model\Model.java
``` java
    /** Gets stack of Task that were marked and corresponds to UndoneCommand */
    Stack<ReadOnlyTask> getStackOfMarkUndoneTask();

    /** Gets stack of Task that were marked and corresponds to RedoCommand */
    Stack<ReadOnlyTask> getStackOfMarkUndoneTaskRedo();

    /**
     * Gets a stack of String that corresponds to the list of commands that were
     * executed
     */
    Stack<String> getStackOfListTypes();

    /**
     * Gets a stack of String that corresponds to the list of Commands that were
     * undone
     */
    Stack<String> getStackOfListTypesRedo();
    
    /**Clears All relevant Redo Stacks when a new Command has been executed */
    void clearRedoAll();
    
```
###### \java\seedu\whatnow\model\Model.java
``` java
    /**Gets a stack of String that corresponds to the list of previous file path */
    Stack<String> getStackOfChangeFileLocationOld();
    
    /**Gets a stack of String that corresponds to the list of new file path */
    Stack<String> getStackOfChangeFileLocationNew();
```
###### \java\seedu\whatnow\model\Model.java
``` java
    void changeLocation(Path destination, Config config) throws DataConversionException;

}
```
###### \java\seedu\whatnow\model\ModelManager.java
``` java
    /** Raises an event to indicate the config has changed */
    private void indicateConfigChanged(Path destination, Config config) {
        raise(new ConfigChangedEvent(destination, config));
    }

```
###### \java\seedu\whatnow\model\ModelManager.java
``` java
    @Override
    public synchronized void changeLocation(Path destination, Config config) throws DataConversionException {
        indicateWhatNowChanged();
        indicateConfigChanged(destination, config);
        indicateWhatNowChanged();
    }

```
###### \java\seedu\whatnow\model\ModelManager.java
``` java
    @Override
    public synchronized void unMarkTask(ReadOnlyTask target) throws TaskNotFoundException {
        whatNow.unMarkTask(target);
        indicateWhatNowChanged();
    }

```
###### \java\seedu\whatnow\model\ModelManager.java
``` java
    @Override
    public Stack<ReadOnlyTask> getStackOfMarkUndoneTask() {
        return stackOfMarkUndone;
    }

```
###### \java\seedu\whatnow\model\ModelManager.java
``` java
    @Override 
    public Stack<String> getStackOfChangeFileLocationOld() {
        return stackOfChangeFileLocationOld;
    }
    
```
###### \java\seedu\whatnow\model\ModelManager.java
``` java
    @Override 
    public Stack<String> getStackOfChangeFileLocationNew() {
        return stackOfChangeFileLocationNew;
    }

```
###### \java\seedu\whatnow\model\ModelManager.java
``` java
    // ========== Inner classes/interfaces used for filtering =============
    
    interface Expression {
        boolean satisfies(ReadOnlyTask task);

        String toString();
    }

    private class PredicateExpression implements Expression {

        private final Qualifier qualifier;

        PredicateExpression(Qualifier qualifier) {
            this.qualifier = qualifier;
        }

        @Override
        public boolean satisfies(ReadOnlyTask task) {
            return qualifier.run(task);
        }

        @Override
        public String toString() {
            return qualifier.toString();
        }
    }

    interface Qualifier {
        boolean run(ReadOnlyTask task);

        String toString();
    }

```
###### \java\seedu\whatnow\model\task\TaskDate.java
``` java
    public static boolean getIsValidDate(String date) throws ParseException, IllegalValueException{
        return isValidDate(date);
    }

    public static boolean getIsValidDateRange(String start, String end) throws ParseException {
        return isValidDateRange(start, end);
    }
    
    public void setFullDate(String fullDate) {
        this.fullDate = fullDate;
    }
}
```
###### \java\seedu\whatnow\model\task\UniqueTaskList.java
``` java
    /**
     * 
     * Mark the equivalent task from the list as uncompleted.
     */
    public boolean unmark(ReadOnlyTask target) throws TaskNotFoundException {
        assert target != null;
        final boolean taskFoundAndMarked = internalList.contains(target);
        if (!taskFoundAndMarked) {
            throw new TaskNotFoundException();
        }
        internalList.get(internalList.indexOf(target)).setStatus("incomplete");
        internalList.set(internalList.indexOf(target), internalList.get(internalList.indexOf(target)));
        return taskFoundAndMarked;
    }

    public ObservableList<Task> getInternalList() {
        return internalList;
    }

    @Override
    public Iterator<Task> iterator() {
        return internalList.iterator();
    }

    @Override
    public boolean equals(Object other) {
        return other == this // short circuit if same object
                || (other instanceof UniqueTaskList // instanceof handles nulls
                        && this.internalList.equals(((UniqueTaskList) other).internalList));
    }

    @Override
    public int hashCode() {
        return internalList.hashCode();
    }
}
```
###### \java\seedu\whatnow\model\WhatNow.java
``` java
    public boolean unMarkTask(ReadOnlyTask target) throws UniqueTaskList.TaskNotFoundException {
        if (tasks.unmark(target)) {
            return true;
        } else {
            throw new UniqueTaskList.TaskNotFoundException();
        }
    }
    
    
    //// tag-level operations

    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {
        tags.add(t);
    }

    //// util methods

    @Override
    public String toString() {
        return tasks.getInternalList().size() + " tasks, " + tags.getInternalList().size() + " tags";
    }

    @Override
    public List<ReadOnlyTask> getTaskList() {
        return Collections.unmodifiableList(tasks.getInternalList());
    }

    @Override
    public List<Tag> getTagList() {
        return Collections.unmodifiableList(tags.getInternalList());
    }

    @Override
    public UniqueTaskList getUniqueTaskList() {
        return this.tasks;
    }

    @Override
    public UniqueTagList getUniqueTagList() {
        return this.tags;
    }

    @Override
    public boolean equals(Object other) {
        return other == this // short circuit if same object
                || (other instanceof WhatNow // instanceof handles nulls
                        && this.tasks.equals(((WhatNow) other).tasks) && this.tags.equals(((WhatNow) other).tags));
    }

    @Override
    public int hashCode() {
        // use this method for custom fields hashing instead of implementing
        // your own
        return Objects.hash(tasks, tags);
    }
}
```
###### \java\seedu\whatnow\storage\StorageManager.java
``` java
import com.google.common.eventbus.Subscribe;

import seedu.whatnow.commons.core.ComponentManager;
import seedu.whatnow.commons.core.Config;
import seedu.whatnow.commons.core.LogsCenter;
import seedu.whatnow.commons.events.model.ConfigChangedEvent;
import seedu.whatnow.commons.events.model.PinnedItemChangedEvent;
import seedu.whatnow.commons.events.model.WhatNowChangedEvent;
import seedu.whatnow.commons.events.storage.DataSavingExceptionEvent;
import seedu.whatnow.commons.exceptions.DataConversionException;
import seedu.whatnow.commons.util.ConfigUtil;
import seedu.whatnow.model.ReadOnlyWhatNow;
import seedu.whatnow.model.UserPrefs;
import seedu.whatnow.model.WhatNow;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.Optional;
import java.util.logging.Logger;

/**
 * Manages storage of WhatNow data in local storage.
 */
public class StorageManager extends ComponentManager implements Storage {

    private static final Logger logger = LogsCenter.getLogger(StorageManager.class);
    private XmlWhatNowStorage xmlWhatNowStorage;
    private UserPrefsStorage userPrefsStorage;

    public StorageManager(XmlWhatNowStorage xmlWhatNowStorage, UserPrefsStorage userPrefsStorage) {
        super();
        this.xmlWhatNowStorage = xmlWhatNowStorage;
        this.userPrefsStorage = userPrefsStorage;
    }

    public StorageManager(String xmlWhatNowFilePath, String userPrefsFilePath) {
        this(new XmlWhatNowStorage(xmlWhatNowFilePath), new JsonUserPrefsStorage(userPrefsFilePath));
    }

    // ================ UserPrefs methods ==============================

    @Override
    public Optional<UserPrefs> readUserPrefs() throws DataConversionException, IOException {
        return userPrefsStorage.readUserPrefs();
    }

    @Override
    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {
        userPrefsStorage.saveUserPrefs(userPrefs);
    }

    // ================ WhatNow methods ==============================
```
###### \java\seedu\whatnow\storage\StorageManager.java
``` java
    @Override
    public String getWhatNowFilePath() {
        return xmlWhatNowStorage.getWhatNowFilePath();
    }

    @Override
    public Optional<ReadOnlyWhatNow> readWhatNow() throws DataConversionException, IOException {
        return readWhatNow(xmlWhatNowStorage.getWhatNowFilePath());
    }

    @Override
    public Optional<ReadOnlyWhatNow> readWhatNow(String filePath) throws DataConversionException, IOException {
        logger.fine("Attempting to read data from file: " + filePath);
        return xmlWhatNowStorage.readWhatNow(filePath);
    }

    @Override
    public void saveWhatNow(ReadOnlyWhatNow whatNow) throws IOException {
        saveWhatNow(whatNow, xmlWhatNowStorage.getWhatNowFilePath());
    }

    @Override
    public void saveConfig(Config config) throws IOException {
        saveConfig(config, xmlWhatNowStorage.getWhatNowFilePath());
    }

    @Override
    public void saveWhatNow(ReadOnlyWhatNow whatNow, String filePath) throws IOException {
        logger.fine("Attempting to write to data file: " + filePath);
        xmlWhatNowStorage.saveWhatNow(whatNow, filePath);
    }

    @Override
    public void saveConfig(Config config, String filePath) throws IOException {
        logger.fine("Attempting to write to config data file: " + filePath);
        WhatNow whatNow = new WhatNow();
        xmlWhatNowStorage.saveWhatNow(whatNow, filePath);
    }

    @Override
    @Subscribe
    public void handleWhatNowChangedEvent(WhatNowChangedEvent event) {
        logger.info(LogsCenter.getEventHandlingLogMessage(event, "Local data changed, saving to file"));
        try {
            saveWhatNow(event.data);
        } catch (IOException e) {
            raise(new DataSavingExceptionEvent(e));
        }
    }

    @Override
    @Subscribe
    /**
     * Changes the xml and config file path to the new file path location.
     */
    public void handleFileLocationChangedEvent(ConfigChangedEvent event) {
        logger.info(LogsCenter.getEventHandlingLogMessage(event, "Local config data changed, saving to file"));
        try {
            Path source = FileSystems.getDefault().getPath(xmlWhatNowStorage.getWhatNowFilePath());
            xmlWhatNowStorage.setWhatNowFilePath(event.destination.toString());
            Files.move(source, event.destination, StandardCopyOption.REPLACE_EXISTING);
            saveConfig(event.config);
        } catch (IOException e) {
            raise(new DataSavingExceptionEvent(e));
        }
    }
    
    @Override
    @Subscribe
    /**
     * Changes the config file with updated pinned item type and keyword
     */
    public void handlePinnedItemChangedEvent(PinnedItemChangedEvent event) {
        logger.info(LogsCenter
                .getEventHandlingLogMessage(event, "Local config data (pinned item and keyword) changed, saving to file"));
        try {
            ConfigUtil.saveConfig(event.config, Config.DEFAULT_CONFIG_FILE);
        } catch (IOException e) {
            raise(new DataSavingExceptionEvent(e));
        }
    }

    // ============ CompletedTask Storage methods ================

}
```
