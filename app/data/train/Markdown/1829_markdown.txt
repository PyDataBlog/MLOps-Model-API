---
layout: post
title: "Android Inter-Fragment Communication"
modified:
categories: blog
excerpt:
tags: [Android, Coding]
image:
  feature: so-simple-sample-image-5.jpg
comments: true
share: true
date: 2014-10-25T23:12:55-04:00
author: vlnvv
---

There are a bunch of tutorials on inter-fragment communications in Android.

For those who haven’t yet explored Android Fragments, the best way to communicate between fragments is through their parent activity. A fragment should never keep a hard reference of another fragment because doing so would ruin the main purpose of fragments, i.e., code reusability. A fragment should define an Interface and have it’s parent activity implement it (Refer [this](http://developer.android.com/training/basics/fragments/communicating.html)).

![Inter-Fragment_Communication](/images/Inter-Fragment_Communication.png)

Let’s say we have 2 fragments: `Fragment 1` and `Fragment 2` and their parent activity, `MainActivity`. Now, to allow communication between fragments, Fragment 1 needs to define a Java Interface, which MainActivity will implement. So Fragment 1 can pass data to it’s parent activity through this interface. After receiving the data from Fragment 1, MainActivity can now call Fragment 2 by calling `findFragmentById(R.id.FragmentB_ID)` and pass the data.

This method works perfectly fine but there are cases where MainActivity will not have IDs of it’s Fragments. An example of such a case would be when using SwipeViews. When implementing SwipeViews, you’ll declare ViewPager in MainActivity’s layout file and add Fragments by creating instances dynamically. So you won’t have the IDs (nor tag names) of fragments.

This can be fixed easily in a couple of steps. You can't set the Tag name of Fragments but there is a method `getTag()`, which returns the tag name of the current Fragment.


####To sum up:

Fragment 1 defines an Interface which the MainActivity implements. When Fragment 1 wants to pass data, it calls a method of it’s Interface.


Now when Fragment 2 gets created, it passes it’s Tag name (by calling `getTag()` method) to MainActivity. When Fragment 1 needs to pass data to Fragment 2, it calls it’s Interface method to send data to MainActivity. Now, MainActivity can pass this data using `findFragmentByTag(FragmentB_TAG)`.

###Note:
The above method will work assuming Fragment 2 is still active (and not destroyed) when Fragment 1 passes data. If Fragment 2 hasn’t been created (or has been destroyed), `NullPointerException` will be thrown.