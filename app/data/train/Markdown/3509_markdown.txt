# CleoDB
C# Language Entities Oriented Database
___

## Nuget
`Install-Package CleoDB`

## What is CleoDB?
CleoDB is a data storage framework written entirely in C#, for C#. It is optimized for easily storing and restoring your POCOs (and more).

In its current state, CleoDB is in no way a competitor for professional database systems such as SQL Server or MySQL, but rather a simple framework that can be used by beginners who need to cache their memory objects and restore them at a later time.

CleoDB also resembles the syntax and semantics of Entity Framework, in order to make the transition as easy as possible.

## Getting started

First of all you will have to define where CleoDB looks for and saves the stored data. You do this by using the `SetWorkingDirectory` method :

```csharp
CleoDB.SetWorkingDirectory("C:\CleoDB\MyApp");
```

Then you will have to register your types. Once you do this, CleoDB will create a database table for each one.

```csharp
CleoDB.RegisterType<MyType>();
```

After registering all your types, you can call `LoadDatabase` in order to populate them with data from the Working Directory, if any.

```csharp
CleoDB.LoadDatabase();
```

You can access the set for any type using the generic method `Set` :

```csharp
CleoDB.Set<MyType>();   // returns ReadOnlyCollection<T>
```

You can add / remove objects using the generic methods `Add` and `Remove` :

```csharp
var obj = new MyType();
// database is automatically saved after every add / remove
CleoDB.Add<MyType>(obj);
CleoDB.Remove<MyType>(obj);
```

## Advanced features deep dive

* ID auto-increment (coming soon)
* Relationships (coming soon)

## Credits

[JSON.NET](https://github.com/JamesNK/Newtonsoft.Json)