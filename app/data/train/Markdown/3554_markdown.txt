PyCAMo
======

Python CA Module

## Path structure

```
PyCAMo/
├── LICENSE
├── pycamo
│   ├── crypto.py
│   ├── __init__.py
│   └── logHandler.py
└── README.md
```

## How to install
PyCAMo is actually under pre-beta development, to install it copy the pycamo folder under your project folder.

Import it with.

```
from pycamo import Certificate
```

or

```
from pycamo import *
```

or

```
import pycamo
```

You can also clone the repo in your main project folder:

```
git clone git@github.com:gonzalezkrause/pycamo.git
```

and then simply do an import:	

```
from pycamo import Certificate
```

## API Reference
The API references are a TODO, meanwhile here are some examples.


### Activate debug on the module
To add the debug feature to pycamo module the only thing that is needed is adding debug=True at object initialization:

```
c = Certificate(debug=True)
```


### Generate a self signed certificate:
```
c = Certificate()

c.genSelfSigned(
	certDir='/home/user/Desktop/',
	keySize=2048,
	expDate=2,
	CN='John Doe',
	C='AF',
	ST='Farah Desert',
	O='United camel exports',
	email='john@foo.bar',
	usage='user'
)
```

### Generate a CA
```
c = Certificate()

c.genCA(
	caPath='/home/user/Desktop/testCA/',
	caName='testCA',
	CASerial=0x01,
	serial=0x01,
	keySize=4096,
	C='AF',
	O='United camel exports',
	OU='Identity verification',
	CN='Camel CA',
	email='ca@foo.bar',
	expDate=10
)
```


### Generate a CSR
```
c = Certificate()

privateKey, csrId = c.genCSR(
	caPath='/home/user/Desktop/testCA/',
	keySize=2048,
	email='exports@foo.bar',
	C='AF',
	ST='Farah',
	O='United camel exports',
	OU='International exports',
	CN='John_Doe'
)
```


### Sign a CSR
```
c = Certificate()

c.signCSR(
	caPath='/home/user/Desktop/testCA/',
	csrID='ayJXySUyaJWkIx6',
	expDate=1,
	usage='client'
)
```


### Generate a CSR and sign it automatically
```
c = Certificate()

priv, csrId = c.genCSR(
	caPath='/home/user/Desktop/testCA/',
	keySize=2048,
	email='exports@foo.bar',
	C='AF',
	ST='Farah',
	O='United camel exports',
	OU='International exports',
	CN='John_Doe'
)

cert = c.signCSR(
	caPath='/home/user/Desktop/testCA/',
	csrID=csrId,
	expDate=1,
	usage='client'
)

print priv
print cert
```


### Sign a self signed cert with our CA
```
c = Certificate()

return c.signCert(
	caPath='/home/user/Desktop/testCA/',
	certFile='/home/user/Desktop/John_Doe.crt',
	keySize=2048,
	notAfter=2,
	usage='user'
)
```


### Export a certificate to a PKCS12 container
```
c = Certificate()

c.p12Export(
	caPath='/home/user/Desktop/testCA/',
	cert='/home/user/Desktop/test.crt',
	key='/home/user/Desktop/test.key',
	dst='/home/user/Desktop/test.p12',
	passwd='testpass123',
	iter=4096,
	maciter=200
)
```


### Rip and semi clone a certificate -Don't use for evil things ;)-
```
c = Certificate()

rcert = c.ripCert(
	certFile='/home/user/Desktop/google.crt',
	certDir=/home/user/Desktop/,
	keySize=2048,
	expDate=2,
	CN='fake_google'
)

c.genSelfSigned(copy=rcert)
```

### Generate a Certificate Revocation List
```
c = Certificate()

c.genCRL(
	caPath='/home/user/Desktop/testCA/',
	crlDays=100
)
```

### Revoke a certificate
```
c = Certificate()

rl = c.revokeCert(
	caPath='/home/user/Desktop/testCA/',
	crlPath='/home/user/Desktop/testCA/crl.pem',
	# revCert='/home/user/Desktop/test.crt',
	rCertSerial='08',
	reason='cessationOfOperation',
	crlDays=100
)
								
print rl
```

### Dump revoked certificates from CRL
```
c = Certificate()

cd = c.dumpCRL(crlPath='/home/user/Desktop/testCA/crl.pem')

print cd
```

### CA administration
```
c = Certificate()

c.caAdmin(
	caPath='/home/user/Desktop/testCA',
	caInfo=True
)
```
Possible values are:

* listCerts=True
* archive=True
* printArchive=True


Can also be called with:

```
c = Certificate()

c.caAdmin(
	caPath='/home/user/Desktop/testCA',
	caInfo=False,
	listCerts=False,
	archive=False,
	printArchive=True
)
```


## OpenSSL tests:
### Setup an OpenSSL TLS Server/Client
With this you can test if your certificates are correct generated and suitable for a SSL/TSL connection.

```
openssl s_server -accept 1337 -cert /home/user/Desktop/Server.crt -key /home/user/Desktop/Server.key

openssl s_client -CAfile /home/user/Desktop/testCA/testCA.crt -connect localhost:1337
```

## Application example:
See the 'demoApp.py' for a complete application example.
