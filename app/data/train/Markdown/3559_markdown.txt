# A0138967J
###### /java/seedu/todo/commons/events/ui/SummaryPanelSelectionEvent.java
``` java
public class SummaryPanelSelectionEvent extends BaseEvent {
    
    @Override
    public String toString() {
        return this.getClass().getSimpleName();
    }
}
```
###### /java/seedu/todo/commons/events/ui/WeekSummaryPanelSelectionEvent.java
``` java
public class WeekSummaryPanelSelectionEvent extends BaseEvent {
    
    @Override
    public String toString() {
        return this.getClass().getSimpleName();
    }
    
}
```
###### /java/seedu/todo/logic/commands/MarkCommand.java
``` java
/**
 * Marks a task identified using it's last displayed index from the to do list.
 */
public class MarkCommand extends Command {

    public static final String COMMAND_WORD = "mark";

    public static final String MESSAGE_USAGE = COMMAND_WORD
            + ": Marks the task identified by the index number used in the last task listing.\n"
            + "Parameters: INDEX (must be a positive integer)\n"
            + "Example: " + COMMAND_WORD + " 1";

    public static final String MESSAGE_SUCCESS = "Mark Task at Index: %1$d\n%2$s";

    public final int targetIndex;

    public MarkCommand(int targetIndex) {
        this.targetIndex = targetIndex;
    }

    /**
     * Executes the Mark Command
     * 
     * Will return a message to inform the user if an invalid target index is used 
     * or the task specified cannot be found,
     */
    @Override
    public CommandResult execute() {
        
        UnmodifiableObservableList<ReadOnlyTask> lastShownList = model.getFilteredTaskList();

        if (lastShownList.size() < targetIndex) {
            indicateAttemptToExecuteIncorrectCommand();
            return new CommandResult(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);
        }

        ReadOnlyTask taskToMark = lastShownList.get(targetIndex - 1);
        
        try {
            Task newTask = new Task(taskToMark);
            if (newTask.isRecurring()) {
                newTask.getRecurrence().updateTaskDate(newTask);
            }
            else {
                newTask.setCompletion(new Completion(true));
            }
            
            model.updateTask(taskToMark, newTask);
            
            model.refreshCurrentFilteredTaskList();
            model.updateTodayListToShowAll();
            model.updateWeekListToShowAll();
            
        } catch (TaskNotFoundException tnfe) {
            return new CommandResult(Messages.MESSAGE_TASK_NOT_FOUND);
        } 

        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex, taskToMark));
    }
}
```
###### /java/seedu/todo/logic/Logic.java
``` java
    ObservableList<ReadOnlyTask> getUnmodifiableTodayTaskList();
    ObservableList<ReadOnlyTask> getUnmodifiableWeekTaskList();
    
```
###### /java/seedu/todo/logic/LogicManager.java
``` java
    public ObservableList<ReadOnlyTask> getUnmodifiableTodayTaskList() {
        return model.getFilteredTodayTaskList();
    }
    public ObservableList<ReadOnlyTask> getUnmodifiableWeekTaskList() {
        return model.getFilteredWeekTaskList();
    }
    
```
###### /java/seedu/todo/logic/parser/ToDoListParser.java
``` java
    /**
     * Parses arguments in the context of the mark task command.
     *
     * @param args full command args string
     * @return the prepared command
     */
    private Command prepareMark(String args) {

        Optional<Integer> index = parseIndex(args);
        if (!index.isPresent()) {
            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, 
                    MarkCommand.MESSAGE_USAGE));
        }

        return new MarkCommand(index.get());
    }
```
###### /java/seedu/todo/model/Model.java
``` java
    /** Returns the filtered tasks list as an {@code UnmodifiableObservableList<ReadOnlyTask>} */
    UnmodifiableObservableList<ReadOnlyTask> getFilteredTaskList();

    /** Returns the filtered tasks list as an {@code UnmodifiableObservableList<ReadOnlyTask>} */
    UnmodifiableObservableList<ReadOnlyTask> getFilteredTodayTaskList();
    
    /** Returns the filtered tasks list as an {@code UnmodifiableObservableList<ReadOnlyTask>} */
    UnmodifiableObservableList<ReadOnlyTask> getFilteredWeekTaskList();
    
```
###### /java/seedu/todo/model/Model.java
``` java
    /** Updates today list to show all today tasks */
    void updateTodayListToShowAll();
    
    /** Updates today list to show all today tasks */
    void updateWeekListToShowAll();
    
```
###### /java/seedu/todo/model/Model.java
``` java
    /** Updates the filter of the filtered task list to filter for today's date only */
    void updateFilteredTaskListTodayDate(LocalDateTime datetime);
    
```
###### /java/seedu/todo/model/ModelManager.java
``` java
    private final FilteredList<Task> todayTasks; //for today summary list
    private final FilteredList<Task> weekTasks; //for weekly summary list
```
###### /java/seedu/todo/model/ModelManager.java
``` java
    /**
     * Initializes a ModelManager with the given ToDoList
     * ToDoList and its variables should not be null
     */
    public ModelManager(ReadOnlyToDoList src, UserPrefs userPrefs) {
        super();
        assert src != null;
        assert userPrefs != null;

        logger.fine("Initializing with to-do app: " + src + " and user prefs " + userPrefs);

        dodobird = new DoDoBird(src);
        filteredTasks = new FilteredList<>(dodobird.getTasks());
        todayTasks = new FilteredList<>(dodobird.getTasks());
        weekTasks = new FilteredList<>(dodobird.getTasks());
        tagList = new FilteredList<>(dodobird.getTags());
        
        pe =  new PredicateExpression(new CompletedQualifier(false));
                
        updateFilteredListToShowAllNotCompleted();
        updateTodayListToShowAll();
        updateWeekListToShowAll();
    }
```
###### /java/seedu/todo/model/ModelManager.java
``` java
    public UnmodifiableObservableList<ReadOnlyTask> getFilteredTodayTaskList() {
        return new UnmodifiableObservableList<>(todayTasks);
    } 
    public UnmodifiableObservableList<ReadOnlyTask> getFilteredWeekTaskList() {
        return new UnmodifiableObservableList<>(weekTasks);
    } 
    
```
###### /java/seedu/todo/model/ModelManager.java
``` java
    @Override
    public void updateTodayListToShowAll() {
        todayTasks.setPredicate(null);
        todayTasks.setPredicate((new PredicateExpression(new TodayDateQualifier(LocalDateTime.now())))::satisfies);
    }
    @Override
    public void updateWeekListToShowAll() {
        weekTasks.setPredicate(null);
        weekTasks.setPredicate((new PredicateExpression(new WeekDateQualifier(LocalDateTime.now())))::satisfies);
    }

```
###### /java/seedu/todo/model/ModelManager.java
``` java
    @Override
    public void updateFilteredTaskListTodayDate(LocalDateTime datetime){
        updateFilteredTaskList(new PredicateExpression(new TodayDateQualifier(datetime)));
    }
    
```
###### /java/seedu/todo/model/ModelManager.java
``` java
    @Subscribe
    private void handleSummaryPanelSelectionEvent(SummaryPanelSelectionEvent spse) {
        updateFilteredTaskList(new PredicateExpression(new TodayDateQualifier(LocalDateTime.now())));
    }
    
    @Subscribe
    private void handleWeekSummaryPanelSelectionEvent(WeekSummaryPanelSelectionEvent wspse) {
        updateFilteredTaskList(new PredicateExpression(new WeekDateQualifier(LocalDateTime.now())));
    }
}
```
###### /java/seedu/todo/model/qualifiers/TodayDateQualifier.java
``` java
/**
 * filters tasks by whether they belong to today
 *
 */
public class TodayDateQualifier implements Qualifier{
    private LocalDateTime datetime;

    public TodayDateQualifier(LocalDateTime datetime) {
        this.datetime = datetime;
    }

    @Override
    public boolean run(ReadOnlyTask task) {
        if (task.getOnDate().getDate() != null && task.getByDate().getDate() != null) {
            LocalDateTime onDateTime = DateTimeUtil.combineLocalDateAndTime(task.getOnDate().getDate(), 
                        task.getOnDate().getTime());
            LocalDateTime byDateTime = DateTimeUtil.combineLocalDateAndTime(task.getByDate().getDate(),
                        task.getByDate().getTime());
            boolean byTodayCheck = true;
            boolean onTodayCheck = true;
            onTodayCheck = onDateTime.toLocalDate().equals(datetime.toLocalDate()) || onDateTime.toLocalDate().isBefore(datetime.toLocalDate());          
            byTodayCheck = byDateTime.toLocalDate().equals(datetime.toLocalDate()) || byDateTime.toLocalDate().isAfter(datetime.toLocalDate());
            
            return byTodayCheck && onTodayCheck;
        } else if (task.getByDate().getDate() != null) {
            LocalDateTime byDateTime = DateTimeUtil.combineLocalDateAndTime(task.getByDate().getDate(),
                    task.getByDate().getTime());
            return byDateTime.toLocalDate().equals(datetime.toLocalDate()) || byDateTime.toLocalDate().isAfter(datetime.toLocalDate());
        } else if (task.getOnDate().getDate() != null) {
            LocalDateTime onDateTime = DateTimeUtil.combineLocalDateAndTime(task.getOnDate().getDate(),
                    task.getOnDate().getTime());
            return onDateTime.toLocalDate().equals(datetime.toLocalDate()) || onDateTime.toLocalDate().isBefore(datetime.toLocalDate());
        } else {
            return false;
        }
        
    }

    @Override
    public String toString() {
        return "datetime=" + datetime.toString();
    }
}
```
###### /java/seedu/todo/model/qualifiers/WeekDateQualifier.java
``` java
/**
* filters tasks by whether they belong to next 7 days
*
*/
public class WeekDateQualifier implements Qualifier{
    private LocalDateTime startDatetime;
    private LocalDateTime endDatetime;

    public WeekDateQualifier(LocalDateTime datetime) {
        this.startDatetime = datetime.plusDays(1);
        this.endDatetime = datetime.plusWeeks(1);
    }

    @Override
    public boolean run(ReadOnlyTask task) {
        if (task.getOnDate().getDate() != null && task.getByDate().getDate() != null) {
            LocalDateTime onDateTime = DateTimeUtil.combineLocalDateAndTime(task.getOnDate().getDate(), 
                        task.getOnDate().getTime());
            LocalDateTime byDateTime = DateTimeUtil.combineLocalDateAndTime(task.getByDate().getDate(),
                        task.getByDate().getTime());
            boolean byWeekCheck = true;
            boolean onWeekCheck = true;
            boolean intermediateCheck = 
                    onDateTime.toLocalDate().isBefore(endDatetime.toLocalDate()) 
                    && onDateTime.toLocalDate().isAfter(startDatetime.toLocalDate());
            onWeekCheck = 
                    onDateTime.toLocalDate().equals(endDatetime.toLocalDate()) 
                    || intermediateCheck;          
            byWeekCheck = byDateTime.toLocalDate().equals(startDatetime.toLocalDate()) 
                    || byDateTime.toLocalDate().isAfter(startDatetime.toLocalDate());
            
            return byWeekCheck || onWeekCheck;
        } else if (task.getByDate().getDate() != null) {
            LocalDateTime byDateTime = DateTimeUtil.combineLocalDateAndTime(task.getByDate().getDate(),
                    task.getByDate().getTime());
            return byDateTime.toLocalDate().equals(startDatetime.toLocalDate()) 
                    || byDateTime.toLocalDate().isAfter(startDatetime.toLocalDate());
        } else if (task.getOnDate().getDate() != null) {
            LocalDateTime onDateTime = DateTimeUtil.combineLocalDateAndTime(task.getOnDate().getDate(),
                    task.getOnDate().getTime());
            boolean intermediateCheck = 
                    onDateTime.toLocalDate().isBefore(endDatetime.toLocalDate()) 
                    && onDateTime.toLocalDate().isAfter(startDatetime.toLocalDate());
            return onDateTime.toLocalDate().equals(endDatetime.toLocalDate()) 
                    || intermediateCheck 
                    || onDateTime.toLocalDate().equals(startDatetime.toLocalDate());
        } else {
            return false;
        }
        
    }

    @Override
    public String toString() {
        return "startDatetime=" + startDatetime.toString();
    }
}
```
###### /java/seedu/todo/ui/CommandBox.java
``` java
    @Subscribe
    private void handleSummaryPanelSelectionEvent(SummaryPanelSelectionEvent spse) {
    	resultDisplay.postMessage("Displaying list of tasks today ");
    }
    
    @Subscribe
    private void handleWeekSummaryPanelSelectionEvent(WeekSummaryPanelSelectionEvent wpse) {
    	resultDisplay.postMessage("Displaying list of tasks to be done in next 7 days ");
    }
    
```
###### /java/seedu/todo/ui/HelpWindow.java
``` java
    private static final String USERGUIDE_URL =
            "https://github.com/CS2103AUG2016-W13-C1/main/blob/master/docs/UserGuide.md";
```
###### /java/seedu/todo/ui/MainWindow.java
``` java
    private SummaryPanel summaryPanel;
    private WeekSummaryPanel weekSummaryPanel;
```
###### /java/seedu/todo/ui/MainWindow.java
``` java
    @FXML
    private AnchorPane summaryPlaceholder;
    @FXML
    private AnchorPane weekSummaryPlaceholder;

```
###### /java/seedu/todo/ui/MainWindow.java
``` java
        summaryPanel = SummaryPanel.load(primaryStage, getSummaryPlaceholder(), logic.getUnmodifiableTodayTaskList());
        weekSummaryPanel = WeekSummaryPanel.load(primaryStage, getWeekSummaryPlaceholder(), logic.getUnmodifiableWeekTaskList());
```
###### /java/seedu/todo/ui/MainWindow.java
``` java
    private AnchorPane getSummaryPlaceholder(){
        return summaryPlaceholder;
    }
    private AnchorPane getWeekSummaryPlaceholder(){
        return weekSummaryPlaceholder;
    }
```
###### /java/seedu/todo/ui/SummaryCard.java
``` java
/**
 * Tasks to be done today
 *
 */
public class SummaryCard extends UiPart{

    private static final String FXML = "SummaryCard.fxml";

    @FXML
    private HBox cardPane;
    @FXML
    private Text name;
    @FXML
    private Label details;
    @FXML
    private Label tags;
    @FXML
    private Circle priorityLevel;

    private ReadOnlyTask task;

    public static SummaryCard load(ReadOnlyTask task){
        SummaryCard card = new SummaryCard();
        card.task = task;
        return UiPartLoader.loadUiPart(card);
    }

    @FXML
    public void initialize() {
        name.setText(task.getName().fullName);
       
        details.setText(task.getDetail().value);
        initPriority();
        if(task.getCompletion().isCompleted()) {
            markComplete();
        }
        tags.setText(task.tagsString());
    }

    public HBox getLayout() {
        return cardPane;
    }

    @Override
    public void setNode(Node node) {
        cardPane = (HBox) node;
    }

    @Override
    public String getFxmlPath() {
        return FXML;
    }
    
    private void initPriority() {
        if (task.getPriority().toString().equals(Priority.LOW)) {
            priorityLevel.setFill(Color.web("#b2ff59"));
            priorityLevel.setStroke(Color.LIMEGREEN);
        } else if (task.getPriority().toString().equals(Priority.MID)) {
            priorityLevel.setFill(Color.web("#fff59d"));
            priorityLevel.setStroke(Color.web("#ffff00"));
        } else {
            priorityLevel.setFill(Color.RED);
            priorityLevel.setStroke(Color.web("#c62828"));
        }
    }
    
    
    private void markComplete() {
        name.setFill(Color.LIGHTGREY);
        name.setStyle("-fx-strikethrough: true");
        name.setOpacity(50);
        
        details.setTextFill(Color.LIGHTGREY);
        tags.setTextFill(Color.LIGHTGREY);

        priorityLevel.setFill(Color.WHITE);
        priorityLevel.setStroke(Color.WHITE);

    }
    
    
}
```
###### /java/seedu/todo/ui/SummaryPanel.java
``` java
/**
 * Panel containing the list of tasks today.
 */
public class SummaryPanel extends UiPart {
    private static final String FXML = "SummaryPanel.fxml";
    private VBox panel;
    private AnchorPane placeHolderPane;

    @FXML
    private ListView<ReadOnlyTask> summaryListView;
    
    public SummaryPanel() {
        super();
    }

    @Override
    public void setNode(Node node) {
        panel = (VBox) node;
    }

    @Override
    public String getFxmlPath() {
        return FXML;
    }

    @Override
    public void setPlaceholder(AnchorPane pane) {
        this.placeHolderPane = pane;
    }

    public static SummaryPanel load(Stage primaryStage, AnchorPane summaryPlaceholder,
                                       ObservableList<ReadOnlyTask> taskList) {
        SummaryPanel summaryPanel =
                UiPartLoader.loadUiPart(primaryStage, summaryPlaceholder, new SummaryPanel());
        summaryPanel.configure(taskList);
        return summaryPanel;
    }

    private void configure(ObservableList<ReadOnlyTask> taskList) {
        setConnections(taskList);
        addToPlaceholder();
    }

    private void setConnections(ObservableList<ReadOnlyTask> taskList) {
        summaryListView.setItems(taskList);
        summaryListView.setCellFactory(listView -> new TaskListViewCell());
    }

    private void addToPlaceholder() {
        SplitPane.setResizableWithParent(placeHolderPane, false);
        placeHolderPane.getChildren().add(panel);
    }


    public void scrollTo(int index) {
        Platform.runLater(() -> {
            summaryListView.scrollTo(index);
            summaryListView.getSelectionModel().clearAndSelect(index);
        });
    }

    @FXML
    private void todayTextOnMouseClicked() {
        raise (new SummaryPanelSelectionEvent());
    }
    
    class TaskListViewCell extends ListCell<ReadOnlyTask> {

        public TaskListViewCell() {
        }

        @Override
        protected void updateItem(ReadOnlyTask task, boolean empty) {
            super.updateItem(task, empty);
            boolean dateCheck = false;
            try{
                LocalDate taskByDate = task.getByDate().getDate();
                LocalDate taskOnDate = task.getOnDate().getDate();
                LocalDate todayDate = LocalDate.now();
                dateCheck = todayDate.isAfter(taskByDate) || todayDate.isBefore(taskOnDate);
                }
            catch(Exception e) {
                dateCheck = false;
            }
            if (empty || task == null) {
                setGraphic(null);
                setText(null);
            } else if(!dateCheck) {
                setGraphic(SummaryCard.load(task).getLayout());
            } else {
                setGraphic(null);
            }
        }
    }

}
```
###### /java/seedu/todo/ui/WeekSummaryCard.java
``` java
/**
 * tasks to be done in the next 7 days
 *
 */
public class WeekSummaryCard extends UiPart{

    private static final String FXML = "WeekSummaryCard.fxml";

    @FXML
    private HBox cardPane;
    @FXML
    private Text name;
    @FXML
    private Label details;
    @FXML
    private Label tags;
    @FXML
    private Circle priorityLevel;

    private ReadOnlyTask task;

    public static WeekSummaryCard load(ReadOnlyTask task){
        WeekSummaryCard card = new WeekSummaryCard();
        card.task = task;
        return UiPartLoader.loadUiPart(card);
    }

    @FXML
    public void initialize() {
        name.setText(task.getName().fullName);
        details.setText(task.getDetail().value);
      
        initPriority();
        tags.setText(task.tagsString());
        
        if(task.getCompletion().isCompleted()) {
            markComplete();
        }
        
    }

    public HBox getLayout() {
        return cardPane;
    }

    @Override
    public void setNode(Node node) {
        cardPane = (HBox) node;
    }

    @Override
    public String getFxmlPath() {
        return FXML;
    }
    
    
    private void initPriority() {
        if (task.getPriority().toString().equals(Priority.LOW)) {
            priorityLevel.setFill(Color.web("#b2ff59"));
            priorityLevel.setStroke(Color.LIMEGREEN);
        } else if (task.getPriority().toString().equals(Priority.MID)) {
            priorityLevel.setFill(Color.web("#fff59d"));
            priorityLevel.setStroke(Color.web("#ffff00"));
        } else {
            priorityLevel.setFill(Color.RED);
            priorityLevel.setStroke(Color.web("#c62828"));
        }
    }
    
    
    private void markComplete() {
        name.setFill(Color.LIGHTGREY);
        name.setStyle("-fx-strikethrough: true");
        name.setOpacity(50);
        
        details.setTextFill(Color.LIGHTGREY);
        tags.setTextFill(Color.LIGHTGREY);

        priorityLevel.setFill(Color.WHITE);
        priorityLevel.setStroke(Color.WHITE);

    }
}
```
###### /java/seedu/todo/ui/WeekSummaryPanel.java
``` java
/**
 * Panel containing the list of tasks for the next 7 days.
 */
public class WeekSummaryPanel extends UiPart {
    private final Logger logger = LogsCenter.getLogger(WeekSummaryPanel.class);
    private static final String FXML = "WeekSummaryPanel.fxml";
    private VBox panel;
    private AnchorPane placeHolderPane;

    @FXML
    private ListView<ReadOnlyTask> weekSummaryListView;

    public WeekSummaryPanel() {
        super();
    }

    @Override
    public void setNode(Node node) {
        panel = (VBox) node;
    }

    @Override
    public String getFxmlPath() {
        return FXML;
    }

    @Override
    public void setPlaceholder(AnchorPane pane) {
        this.placeHolderPane = pane;
    }

    public static WeekSummaryPanel load(Stage primaryStage, AnchorPane weekSummaryPlaceholder,
                                       ObservableList<ReadOnlyTask> taskList) {
        WeekSummaryPanel weekSummaryPanel =
                UiPartLoader.loadUiPart(primaryStage, weekSummaryPlaceholder, new WeekSummaryPanel());
        weekSummaryPanel.configure(taskList);
        return weekSummaryPanel;
    }

    private void configure(ObservableList<ReadOnlyTask> taskList) {
        setConnections(taskList);
        addToPlaceholder();
    }

    private void setConnections(ObservableList<ReadOnlyTask> taskList) {
        weekSummaryListView.setItems(taskList);
        weekSummaryListView.setCellFactory(listView -> new TaskListViewCell());
    }

    private void addToPlaceholder() {
        SplitPane.setResizableWithParent(placeHolderPane, false);
        placeHolderPane.getChildren().add(panel);
    }

    public void scrollTo(int index) {
        Platform.runLater(() -> {
            weekSummaryListView.scrollTo(index);
            weekSummaryListView.getSelectionModel().clearAndSelect(index);
        });
    }

    @FXML
    private void weekTextOnMouseClick() {
        raise (new WeekSummaryPanelSelectionEvent());
    }
    
    class TaskListViewCell extends ListCell<ReadOnlyTask> {

        public TaskListViewCell() {
        }

        @Override
        protected void updateItem(ReadOnlyTask task, boolean empty) {
            super.updateItem(task, empty);
            boolean dateCheck = false;
            try{
                dateCheck = LocalDate.now().isAfter(task.getByDate().getDate()) || LocalDate.now().plusWeeks(1).isBefore(task.getOnDate().getDate());
                }
            catch(Exception e){
                dateCheck = false;
            }
            if (empty || task == null) {
                setGraphic(null);
                setText(null);
            } else if(!dateCheck){
                setGraphic(WeekSummaryCard.load(task).getLayout());
            } else {
                setGraphic(null);
            }
        }
    }

}
```
###### /resources/view/MainWindow.fxml
``` fxml
                  <AnchorPane fx:id="summaryPlaceholder" prefHeight="500.0" prefWidth="340.0">
                      <padding>
                          <Insets bottom="10" left="10" right="10" top="10" />
                      </padding>
                  </AnchorPane>
                  <AnchorPane fx:id="weekSummaryPlaceholder" minHeight="200.0" prefHeight="500.0" prefWidth="340.0">
                     <padding>
                        <Insets bottom="10" left="10" right="10" top="10" />
                     </padding>
                  </AnchorPane>
```
###### /resources/view/SummaryCard.fxml
``` fxml

<HBox fx:id="cardPane" maxHeight="50.0" maxWidth="250.0" minHeight="50.0" minWidth="150.0" prefHeight="50.0" prefWidth="200.0" style="-fx-background-color: #FFFFFF;" xmlns="http://javafx.com/javafx/8.0.65" xmlns:fx="http://javafx.com/fxml/1">
    <children>
        <GridPane maxHeight="50.0" maxWidth="250.0" minHeight="50.0" minWidth="110.0" prefHeight="50.0" prefWidth="110.0" translateY="5.0" HBox.hgrow="ALWAYS">
            
            <columnConstraints>
                <ColumnConstraints hgrow="SOMETIMES" maxWidth="218.0" minWidth="10.0" prefWidth="203.0" />
                <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="10.0" prefWidth="47.0" />
            </columnConstraints>
            
            <children>
            <GridPane prefHeight="32.0" prefWidth="580.0" translateY="2.0" GridPane.hgrow="NEVER">
              <columnConstraints>
                  <ColumnConstraints hgrow="SOMETIMES" maxWidth="555.0" minWidth="10.0" prefWidth="487.0" />
              </columnConstraints>
              <rowConstraints>
                <RowConstraints maxHeight="49.0" minHeight="0.0" prefHeight="19.0" vgrow="SOMETIMES" />
                <RowConstraints maxHeight="86.0" minHeight="20.0" prefHeight="86.0" vgrow="NEVER" />
              </rowConstraints>
               <children>
                        <Label fx:id="details" prefHeight="16.0" prefWidth="587.0" styleClass="cell_small_label" text="\$details" translateX="18.0" translateY="-35.0" GridPane.rowIndex="1" />
                          <HBox maxHeight="20.0" maxWidth="212.0" minHeight="20.0" minWidth="110.0" prefHeight="20.0" prefWidth="212.0">
                             <children>
                        <Circle fx:id="priorityLevel" fill="#1fff4d" radius="6.0" stroke="BLACK" strokeType="INSIDE" translateY="5.0" />
                        <Text fx:id="name" strokeType="OUTSIDE" strokeWidth="0.0" text="Text" translateX="9.0" translateY="2.0" />
                                <Label fx:id="tags" styleClass="cell_small_label" text="\$tags" translateX="20.0" translateY="4.0">
                           <graphic>
                              <Ellipse fill="DODGERBLUE" radiusX="5.0" radiusY="5.0" stroke="BLACK" strokeType="INSIDE" strokeWidth="0.0" visible="false" />
                           </graphic>
                        </Label>
                             </children>
                          </HBox>
               </children>
            </GridPane>
            <VBox alignment="CENTER_LEFT" maxHeight="116.0" minHeight="105.0" prefHeight="105.0" prefWidth="40.0" translateY="-5.0" GridPane.columnIndex="1">
               <padding>
                  <Insets bottom="2.0" left="-20.0" right="2.0" top="2.0" />
               </padding>
            </VBox>
            </children>
         <rowConstraints>
            <RowConstraints />
         </rowConstraints>
        </GridPane>
    </children>
</HBox>
```
###### /resources/view/SummaryPanel.fxml
``` fxml

<VBox maxWidth="200.0" prefHeight="175.0" prefWidth="200.0" style="-fx-background-color: #FFFFFF;" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" xmlns="http://javafx.com/javafx/8.0.60" xmlns:fx="http://javafx.com/fxml/1" fx:controller="seedu.todo.ui.SummaryPanel">
    <children>
      <Text fx:id="todayText" onMouseClicked="#todayTextOnMouseClicked" onMousePressed="#todayTextOnMouseClicked" opacity="0.6" strokeType="OUTSIDE" strokeWidth="0.0" text="Today" wrappingWidth="200.13671875">
         <font>
            <Font name="Arial Bold" size="30.0" />
         </font></Text>
        <ListView fx:id="summaryListView" prefHeight="200.0" prefWidth="200.0" style="-fx-background-color: #FFFFFF;" VBox.vgrow="ALWAYS" />
    </children>
</VBox>
```
###### /resources/view/WeekSummaryCard.fxml
``` fxml

<HBox fx:id="cardPane" maxHeight="50.0" maxWidth="250.0" minHeight="50.0" minWidth="150.0" prefHeight="50.0" prefWidth="200.0" style="-fx-background-color: #FFFFFF;" xmlns="http://javafx.com/javafx/8.0.65" xmlns:fx="http://javafx.com/fxml/1">
    <children>
        <GridPane maxHeight="50.0" maxWidth="250.0" minHeight="50.0" minWidth="110.0" prefHeight="50.0" prefWidth="110.0" translateY="5.0" HBox.hgrow="ALWAYS">
            
            <columnConstraints>
                <ColumnConstraints hgrow="SOMETIMES" maxWidth="218.0" minWidth="10.0" prefWidth="203.0" />
                <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="10.0" prefWidth="47.0" />
            </columnConstraints>
            
            <children>
            <GridPane prefHeight="32.0" prefWidth="580.0" translateY="2.0" GridPane.hgrow="NEVER">
              <columnConstraints>
                  <ColumnConstraints hgrow="SOMETIMES" maxWidth="555.0" minWidth="10.0" prefWidth="487.0" />
              </columnConstraints>
              <rowConstraints>
                <RowConstraints maxHeight="49.0" minHeight="0.0" prefHeight="19.0" vgrow="SOMETIMES" />
                <RowConstraints maxHeight="86.0" minHeight="20.0" prefHeight="86.0" vgrow="NEVER" />
              </rowConstraints>
               <children>
                        <Label fx:id="details" prefHeight="16.0" prefWidth="587.0" styleClass="cell_small_label" text="\$details" translateX="18.0" translateY="-35.0" GridPane.rowIndex="1" />
                          <HBox maxHeight="20.0" maxWidth="212.0" minHeight="20.0" minWidth="110.0" prefHeight="20.0" prefWidth="212.0">
                             <children>
                        <Circle fx:id="priorityLevel" fill="#1fff4d" radius="6.0" stroke="BLACK" strokeType="INSIDE" translateY="5.0" />
                        <Text fx:id="name" strokeType="OUTSIDE" strokeWidth="0.0" text="Text" translateX="8.0" translateY="2.0" />
                                <Label fx:id="tags" styleClass="cell_small_label" text="\$tags" translateX="20.0" translateY="4.0">
                           <graphic>
                              <Ellipse fill="DODGERBLUE" radiusX="5.0" radiusY="5.0" stroke="BLACK" strokeType="INSIDE" strokeWidth="0.0" visible="false" />
                           </graphic>
                        </Label>
                             </children>
                          </HBox>
               </children>
            </GridPane>
            <VBox alignment="CENTER_LEFT" maxHeight="116.0" minHeight="105.0" prefHeight="105.0" prefWidth="40.0" translateY="-5.0" GridPane.columnIndex="1">
               <padding>
                  <Insets bottom="2.0" left="-20.0" right="2.0" top="2.0" />
               </padding>
            </VBox>
            </children>
         <rowConstraints>
            <RowConstraints />
         </rowConstraints>
        </GridPane>
    </children>
</HBox>
```
###### /resources/view/WeekSummaryPanel.fxml
``` fxml

<VBox maxWidth="200.0" prefHeight="175.0" prefWidth="200.0" style="-fx-background-color: #FFFFFF;" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" xmlns="http://javafx.com/javafx/8.0.60" xmlns:fx="http://javafx.com/fxml/1" fx:controller="seedu.todo.ui.WeekSummaryPanel">
    <children>
      <Text onMouseClicked="#weekTextOnMouseClick" opacity="0.6" strokeType="OUTSIDE" strokeWidth="0.0" text="Next 7 Days" wrappingWidth="181.13671875">
         <font>
            <Font name="Arial Bold" size="30.0" />
         </font></Text>
        <ListView fx:id="weekSummaryListView" prefHeight="139.0" prefWidth="100.0" style="-fx-background-color: #FFFFFF;" VBox.vgrow="ALWAYS" />
    </children>
</VBox>
```
