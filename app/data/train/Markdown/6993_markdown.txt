## 9. Animation

지금까지는 Meteor, React를 이용하여 앱을 개발할 때의 가장 기본적인 기능을 구현했다.
이번에는 앱의 UI를 보다 세련되게 구현해보자. 그 첫 단계로 Animation을 구현해본다.


### 9.1. Sidebar

헤더 상단에 아이콘 버튼을 만들고 이를 누르면, 왼쪽에서 사이드바 메뉴가 슬라이드 형식으로 나타나는 기능을 구현한다.

#### 1. Font Awesome

우리가 가진 아이콘이 없으므로, 현재 폭넓게 사용되는 Font Awesome 아이콘을 앱에 추가해본다.

    meteor npm install --save font-awesome

이것은 bootstrap-less와 마찬가지로 import하여 사용하면 된다.

그런데, 여기서 아이콘을 사용하기 위해서는 이 font-awesome의 폰트 파일들을 `/public/fonts` 디렉토리에 옮겨 두어야 한다.

`/node_modules/font-awesome/fonts` 경로의 모든 파일을 `/public/fonts` 디렉토리로 복사한다.

그러면, 화면에서 font-awesome의 아이콘을 사용할 수 있다.

#### 2. Style 지정 방식

실행에 앞서 앱의 스타일을 기존보다 좀 더 보기 좋게 수정하기로 하자.

먼저 헤더의 UI를 수정한다:

`/client/less` 디렉토리에 `layout.less` 파일을 생성한다.
그리고 이 파일을 `style.less`에서 import 하여 사용한다.

스타일은 크게 _structure_ 와 _visual_ 로 구분하여 작성한다.

_structure_ 는 각 요소의 외형과 다른 요소와의 관계를 지정한다.
일반적으로 width, height, margin, padding, overflow 등의 속성을 지정한다.

_visual_ 은 background, color, text-align 등 _structure_ 에 의해서 지정된 공간에서의
스타일을 지정한다.

#### 3. Sidebar

먼저 Sidebar 컴포넌트를 작성하고 Layout 컴포넌트를 이를 이용하여 수정 적용한다.

_/apps/mobile/imports/\_main/layouts/Sidebar.jsx_

    import React, { Component } from 'react';
    import { Link } from 'react-router';

    class Sidebar extends Component {

      render() {
        return (
          <nav>
            <Link to="/home">Home</Link>
            <Link to="/posts">Posts</Link>
            <Link to="/about">About</Link>
          </nav>
        );
      }
    }

    export default Sidebar;

_/apps/mobile/imports/\_main/layouts/Layout.jsx_

    import React, { Component } from 'react';

    import Header from './Header.jsx';
    import Sidebar from './Sidebar.jsx';

    class Layout extends Component {

      render() {
        return (
          <div className="layout">
            <Header />

            <Sidebar />

            <main>
              {this.props.children}
            </main>
          </div>
        );
      }
    }

    export default Layout;

그리고 Sidebar의 스타일을 편집하여 메뉴바의 외형을 구성한다.
메뉴바의 스타일 적용은 layout.less 파일을 참조하라.

아래 파일의 .sidebar 부분을 보면 된다:

_/apps/mobile/client/less/imports/variables.less_
_/apps/mobile/client/less/imports/layout.less_

### 9.2 Sidebar Animation

헤더의 메뉴바 아이콘을 클릭하면, 화면의 왼쪽에서 Sidebar가 나타나는 애니메이션을 구현한다.

작업은 두 과정으로 이루어진다:

1. 헤더의 메뉴바 아이콘을 클릭하는 이벤트 처리
2. 레이아웃의 외형을 애니메이션 방식으로 변경하는 기능 구현

#### 1. Click Event

`Header.jsx` 파일의 버튼에 새로운 이벤트를 추가한다.

_/apps/mobile/imports/\_main/layouts/Header.jsx_

    ...
    <nav>
      <button className="btn btn-link" onClick={this.props.onMenuBar}>
        <i className="fa fa-bars fa-2x fa-fw" />
      </button>
    </nav>
    ...

`Layout.jsx` 파일에서 해당 이벤트를 처리한다.
이 처리는 Layout 컴포넌트의 className 속성을 토글시키는 것이다.

이용자가 메뉴바 아이콘을 클릭할 때마다, Layout 컴포넌트의 className 속성이 바뀌는 것이다.
이 속성의 변경이 Sidebar를 보였다 숨겼다 하게 한다.

_/apps/mobile/imports/\_main/layouts/Layout.jsx_

    ...
    constructor(props) {
      super(props);
      this.state = { layoutClass: 'layout'};
    }

    ...

    <Header onMenuBar={this.handleMenuBar.bind(this)} />

    ...

    handleMenuBar() {
      const layoutClass = this.state.layoutClass === 'layout' ?
        'layout sidebar-on' : 'layout';
      this.setState({ layoutClass });
    }
    ...

이 때, `state`의 사용법과 `.bind(this)` 사용법을 숙지해야 한다.

#### 2. CSS Animation

이제 Layout 컴포넌트의 속성이 변경될 때, CSS Animation 기법을 적용하여 기능을 구현한다.

CSS Animation에서 trasition, translate3d 속성을 사용한다:

_/apps/mobile/client/less/imports/layout.less_


    // sidebar
    > nav {
      position: absolute;
      overflow: hidden;
      width: @sidebar-width;
      top: @header-height;
      bottom: 0;
      left: -@sidebar-width;
      border-right: solid 1px @sidebar-border-color;

      .transition(ease transform .5s);

      a {
        display: block;
        padding: 10px;
      }
    }

    > main {
      position: absolute;
      overflow: hidden;
      top: @header-height;
      right: 0;
      bottom: 0;
      left: 0;
      padding: 0;

      .transition(ease transform .5s);
    }

    &.sidebar-on {
      > nav {
        //left: 0;
        .translate3d(@sidebar-width, 0, 0);
      }

      > main {
        //left: @sidebar-width;
        .translate3d(@sidebar-width, 0, 0);
      }
    }

적용한 방법은 `.layout > nav, .layout > main` 엘리먼트에 transition 방식을 지정해두고,
`.sidebar-on` 속성이 지정되면 슬라이딩 에니메이션이 적용되는 방식이다.

이를 구현한 다음, 화면의 변화를 확인해보기 바란다.

#### 3. Sidebar Click

Sidebar의 메뉴 항목을 클릭했을 때,
페이지 이동 전 또는 동시에 Sidebar를 다시 원래 자리로 복귀시키자.

이를 위해서는 Sidebar의 메뉴를 클릭했을 때 Layout 상태를 변경시켜야 한다.

현재 Sidebar 내부에서 `Link`를 이용하는 것을 변경하여야 한다.
다음 장에 나오는 `withRouter` 기능을 이용한다.

_/apps/mobile/imports/\_main/layouts/Sidebar.jsx_

    import React, { Component } from 'react';
    import { withRouter } from 'react-router';

    const menu = [
      { title: 'Home', link: '/home' },
      { title: 'Posts', link: '/posts' },
      { title: 'About', link: '/about' },
    ];

    class Sidebar extends Component {

      renderMenu() {
        return menu.map((item, i) => {
          return (
            <p key={i}
               onClick={() => this.handleClick(item.link)}>{item.title}</p>
          )
        });
      }

      render() {
        return (<nav>{this.renderMenu()}</nav>);
      }

      handleClick(menuLink) {
        this.props.router.push(menuLink);
        this.props.onMenuItem();
      }
    }

    export default withRouter(Sidebar);

이제 Sidebar에서 메뉴 항목을 클릭했을 때의 처리도 Layout.jsx에서 처리한다.

_/apps/mobile/imports/\_main/layouts/Layout.jsx_

    ...

    constructor(props) {
      super(props);
      this.state = { layoutClass: 'layout'};
      this.handleMenuBar = this.handleMenuBar.bind(this);
    }

    ...

      <Sidebar onMenuItem={this.handleMenuBar} />

    ...

여기서 유의할 것은 handleMenuBar 메서드의 this 를 바인딩하는 방식이다.

이전에는 해당 이벤트 속성에서 바로 적용했지만,
여기서는 constructor에서 한 번만 하고 각 이벤트 속성에서는
그냥 가져다 적용하는 식으로 했다는 점이다.

이제 다시 앱을 실행하고 정상적으로 작동하는 것을 확인하라.

### 9.3 React Animation

이번에는 React 컴포넌트에 적용하는 Animation 기법을 공부해보자.

#### 1. npm install

    meteor npm install --save react-addons-css-transition-group

#### 2. Layout Animation

`Layout.jsx` 파일의 `main` 엘리먼트 영역을 다음과 같이 변경한다.

_/apps/mobile/imports/\_main/layouts/Layout.jsx_

    import ReactCSSTransitionGroup from 'react-addons-css-transition-group';

    ...

    render() {
      const path = this.props.location.pathname;

      return (
        <div className={this.state.layoutClass}>
          <Header onMenuBar={this.handleMenuBar} />

          <Sidebar onMenuItem={this.handleMenuBar} />

          <ReactCSSTransitionGroup component="main"
                                   transitionName="fade"
                                   transitionEnterTimeout={500}
                                   transitionLeaveTimeout={300}>
            <div key={path} className="transition-container">
              {this.props.children}
            </div>
          </ReactCSSTransitionGroup>
        </div>
      );
    }

    ...

레이아웃의 main 엘리먼트 영역에 React Animation 기법을 적용한 것이다.

애니메이션 대상이 되는 컴포넌트의 key는 pathname으로 지정한다.
그리고 애니메이션이 동작하도론 'transition-container'로 감싼다.

이제 less 파일에 애니메이션 속성을 지정한다.

_/apps/mobile/client/less/imports/animation.less_

    **.transition-container {
      position: absolute;
      overflow: hidden;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
    }

    .fade-enter {
      opacity: 0.01;
    }

    .fade-enter.fade-enter-active {
      opacity: 1;
      transition: opacity 500ms ease-in;
    }

    .fade-leave {
      opacity: 1;
    }

    .fade-leave.fade-leave-active {
      opacity: 0.01;
      transition: opacity 300ms ease-in;
    }


이제 앱을 실행하여 애니메이션이 정상적으로 동작하는 것을 확인하라.

