# McEA
###### Multicriterial cellular Evolutionary Algorithm

This project is a problem solver, which can be applied to almost all mathematical **optimization problems**.
The software is a work in progress as of now and part of my PHD project.
Thus it is only intended to serve as a demonstrator and will probably be never be evolving into a fully fledged user program.

The Algorithm named **McEA** has the following properties:

* **multicriteria**: It is able to solve optimization problems, that pursue more than one objective. This means it is searching for a so called **Pareto Front**.
* **parallel**: This implementation makes use of the highly parallelized calculations on GPUs. This is intended to save big amounts of time and the algorithm itself is geared towards such a SIMD architecture. For comparison purposes, the demonstrator is also capable of using multiple threads on a CPU (although not as optimized).
* **stochastic**: Because the algorithm uses the principles of **genetic algorithms**, is can be classified as a random search. Thus the results of 2 runs will never be the same. More internals of the algorithm are documented in the: Algorithm description](doc/algorithm.md).
* **unconstrainted**: As of now the algorithm can not handle constraints in a optimization problem. The constraints must be handled by the fitness function (e.g. by adding a penalty to invalid solutions)
* **optimized**: The aim is to provide an implementation that runs on NVidia GPUs (with CUDA) reasonably well. Additionally the design allows the algorithm to handle pretty high population (that is the pool of solutions, that is tried to improve) sizes, not achieved by most evolutionary algorithms (because of runtime constraints).

For more information see the other topics of this Documentation.

## Topics

* [Building and Usage](doc/install.md): How to build and run the program on your GPU and CPU.
* [Algorithm description](doc/algorithm.md): Presents the inner workings of the algorithm and how its mapped to the GPU.
* [Optimization Problems](doc/problems.md): Which Optimization problems can be solved right now and how to implement your own ones.
* [Results](doc/results.md): What means the output of the program and how can it be interpreted.

## Credits

The idea and most of the code came from me (Eric Starke) as part of my PhD project,
funded by the ESF (European Social Fonds) via the SAB (SÃ¤chsische Aufbau Bank).
But I had huge help from [Matthias Werner](https://gcoe-dresden.de/author/matwerne/) from the GCoE (GPU Center of Excellence) Dresden.
He helped me with the mapping of the algorithm to the GPU, the optimization and the build script.

The project is publicated under the [Apache licence 2.0](./LICENCE).
