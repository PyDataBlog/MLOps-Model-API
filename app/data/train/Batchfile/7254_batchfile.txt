@echo off
REM #!/bin/bash
REM # .bash_aliases by Sprax
REM # 
REM function _echo1etc() { echo -n=arg #1 is $1"; shift; echo= and the rest are: $*"; }
REM function _echonoshift() { echo=arg #1 is $1 and the rest are: ${@:2}"; }
REM # Alias: create an doskey that first displays a command as an alias, then performs it.
REM # NB: Using an Aliased command in the definition of another may cause both to display, or bust, depending.
REM # Building blocks such as alias, grep, and ls should probably not be Aliased.
REM function Alias() { doskey $1=echo -e 'alias \033[1m\033[4m$1\033[0m=\"\033[1m$2\033[0m\"'; $2"; }
REM 
REM # A different approach to displaying an aliased command before executing it:
REM doskey ra=function _ra(){ if doskey $1; then _rax=`alias $1 $b sed=s/^alias $1=.\(.*\).$/\1/"`; echo=     ===> $_rax ${@:2}"; fi; $*; }; _ra
REM doskey re=function _re(){ _rax=`alias $1 $b sed=s/alias $1=//"`; echo $_rax ; eval $*; }; _re
REM 
REM # Current Test
REM # Current R&D
REM doskey wub=python wud_parse.py   dictionary.txt  -beg 4000  -end 6000 -v 9 -a $b more
REM doskey wut=python wud_parse.py   dictionary.txt  -beg 4000  -end 6000 -v 10 -a $b more
REM doskey wuc=python wud_parse.py   dictionary.txt  -beg 4000  -end 6000 -v 13 -a $b more
REM doskey wud=cdpt; python wud_parse.py dictionary.txt -beg     0 -end 10000 -v 2 -both
REM doskey wue=cdpt; python wud_parse.py dictionary.txt -beg 10000 -end 20000 -v 2 -both
REM doskey wuf=cdpt; python wud_parse.py dictionary.txt -beg 20000 -end 30000 -v 2 -both
REM doskey wug=cdpt; python wud_parse.py dictionary.txt -beg 30000 -end 40000 -v 2 -both
REM doskey wuh=cdpt; python wud_parse.py dictionary.txt -beg     0 -end 40000 -v 2 -both
REM 
REM doskey ssa 'source $ALIASES; echo=Sourced $ALIASES
REM doskey vsa=vim $ALIASES && source $ALIASES; echo=Sourced $ALIASES
REM doskey vex=vim %HOME%/.exports && source %HOME%/.exports; echo=Sourced %HOME%/.exports
REM doskey vsb=vim %HOME%/.bashrc && source %HOME%/.bashrc; echo=Sourced %HOME%/.bashrc
REM doskey vsp=vim %HOME%/.bash_profile; source %HOME%/.bash_profile
REM doskey vsv=vim %HOME%/.bash_vars && source %HOME%/.bash_vars; echo=Sourced %HOME%/.bash_vars
REM 
REM # Get External IP / local IPs
REM doskey ipa=curl ipinfo.io/ip
REM doskey ipf=/sbin/ifconfig
REM doskey ips=ifconfig -a $b perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'
REM 
REM doskey a=alias
REM doskey al=alias
REM doskey alg=alias $b grep
REM doskey algg=alias $b grep grep
doskey asdf=cd %HOME%\asdf 
REM doskey casdf 'cd %GIT_HOME%
REM doskey bak=cd -
REM doskey bb=cd -
REM doskey berc=bundle exec rails console
REM doskey bercnp=DISABLE_PRY_RAILS=1 rails c
REM doskey berm=bundle exec rake db:migrate RAILS_ENV=development
REM doskey bermt=bundle exec rake db:migrate RAILS_ENV=test
REM doskey berr=bundle exec rake routes
REM doskey c=clear
doskey cb=cd build
REM doskey cbct 'cd build && make -j && ctest
REM doskey cbm  'cd build && make
REM doskey cbmt 'cd build && make -j && make test
REM doskey cbt  'cd build && make -j && ctest
REM doskey cda=cd %HOME%/asdf
REM doskey cdb  'cd %GIT_HOME/dracula/build/dracula && make -j8 && echo ____________________ MADE STANDALONE DRACULA
REM doskey cdbm 'cd build && make -j
doskey cdc=cd %GIT_CPP%
doskey cdct=cd %GIT_CPP%/tmpl
doskey cdd=cd data
doskey cdgo=cd $GIT_GOLANG%
doskey cdi=cd include
doskey cdot=cd %GIT_DOTS%
doskey cdp=cd %GIT_PYTHON%
doskey cdpj=cd %GIT_PYTHON%/emo
doskey cdpt=cd %GIT_PYTHON%/txt
doskey cdr=cd %GIT_RUBY%
REM doskey cdrs 'cd $DRAX/.. && ./setup.sh
REM doskey cds  'cd src
REM doskey cdt  'cd tests
REM doskey cdth=cd %TEXT_HOME%
REM doskey cpdot=function _cpdot(){ cp $1 $GIT_DOTS/$2; }; _cpdot
REM doskey cpfr=function _cpfr(){ cp $owd/$* .;}; _cpfr
REM doskey cpto=function _cpto(){ cp $* $owd;}; _cpto
REM doskey cs   'cd src
REM doskey csf  'cd $STUFF/build && make -j test_filter_plans && ./test_filter_plans
REM doskey csmd  'cd $STUFF/build && make -j && ./test_dir_poll
REM doskey cslt  'cd $STUFF/build && make -j test_logging && ./test_logging
REM doskey csmn  'cd $STUFF/build && make -j && ./test_sample_next
REM doskey csmp  'cd $STUFF/build && make -j test_PlanScoopFromContainerState && ./test_PlanScoopFromContainerState --gtest_filter=*
REM doskey csrs 'cd $STUFF && ./setup.sh
REM doskey cud=function _cud(){ cd ../$1; shift; $*; }; _cud
REM doskey cz   'cd $STUFF/build && make -j && ./zero_mq
REM doskey d=function _d(){ export owd=`pwd`; echo -e=\033[1m\033  owd==$owd \033[0m"; cd $*;}; _d
REM doskey dg 'd $GIT_GOLANG
REM doskey diffal 'diff $ALIASES $GIT_DOTS/bash_aliases.$SYS_EXT $b more
REM doskey diffdots 'diff $ALIASES $GIT_DOTS/bash_aliases.$SYS_EXT $b more
REM doskey dir=ls
REM doskey dontimes=function _dontimes(){ echo=Doing \"${@:2}\" $1 times..."; for j in `seq 1 $1`; do ${@:2}; done;}; _dontimes
REM doskey dr=cd $DRAX
REM doskey drac=pu $DRAX
REM doskey dracula=pu $DRACULA
REM doskey drax=pu %GIT_HOME/dracula
REM doskey dsg 'cd %GIT_HOME/stuff_getter
REM doskey dviz '/opt/drake/bin/drake-visualizer
REM doskey e=echo
doskey eg=env $b grep $*
REM doskey ega 'env $b grep AWS
REM doskey egi=env $b grep -i
doskey ga=git add
doskey gali=function _gali(){ grep=$*" $ALIASES;}; _gali
doskey gbd=git branch -d
doskey gbl=git branch -l
doskey gbm=git branch --merged
doskey gbs=git branch -rl --no-merge
doskey grep=grep --color=auto
doskey gcam=git commit -a -m $*
doskey gcamd=git commit --amend -m
doskey gcom=git commit -m
doskey gcm=git checkout master
doskey gitclean=git gc --prune=now && git remote prune origin
doskey gco=git checkout
doskey gd=git diff
doskey gdn=git diff --name-only
doskey gdl=git log -p -n 1
doskey gdlf=git log -p -n 5
doskey gdm=git diff master
doskey gdom=git diff origin/master
doskey gdoom=git diff origin master
doskey gdn=git diff --name-status master
doskey gruph=git reset --hard HEAD^
doskey glf=git log -n 5
doskey glg=git log
doskey glgn=git log -n
doskey glgo=git log -n 1
doskey gpl=git pull
doskey gps=git push
doskey grc=git rebase --continue
doskey grim=git rebase -i master
doskey grall=grep -RI --exclude-dir="build*" --exclude-dir="log*" $*" .
REM doskey grcs=function _grcs(){ grep -R -I --exclude-dir=node*" --exclude="react_bundle.*" --include=".*css" --include=".*jsx"=$*" .;}; _grcs
REM doskey grcss=function _grcss(){ grep -R -I --exclude-dir=node*" --exclude="react_bundle.*" --exclude=".*jsx" --include=".*css"=$*" .;}; _grcss
REM doskey grrb=function _grrb(){ grep -R -I --exclude-dir=node*" --exclude-dir="db" --exclude="react_bundle.*" --exclude=".*css" --include=".*rb"=$*" .;}; _grrb
REM doskey grubi=function _grubi(){ grep -R -I --exclude-dir=node*" --exclude-dir="db" --exclude="react_bundle.*" --exclude=".*css" --include=".*rb" -i=$*" .;}; _grubi
REM doskey grail=function _grail(){ grep -R -I --exclude-dir=node*" --exclude-dir="db" --exclude="react_bundle.*" --exclude=".*css" --include=".*jsx" --include=".*js" --include=".*rb"   =$*" .;}; _grail
REM doskey gruby=function _gruby(){ grep -R -I --exclude-dir=node*" --exclude-dir="db" --exclude="react_bundle.*" --exclude=".*css" --include=".*rb"   =$*" .;}; _gruby
REM doskey graby=function _graby(){ grep -R -I --exclude-dir=node*" --exclude-dir="db" --exclude="react_bundle.*" --exclude=".*css" --include=".*rb"   =$*" . $b grep -v _spec;}; _graby
doskey grech=grep -RI --exclude-dir="external*" --include="*.c" --include="*.cc" --include="*.cpp" --include="*.h" --include="*.hpp" "$*" .
REM doskey grich 'function _grich(){ grep -RIi --exclude-dir=external*" --include=".*\.c" --include=".*\.cc" --include=".*\.cpp" --include=".*\.h" --include=".*\.hpp"=$*" .;}; _grich
REM doskey gred  'function _gred(){ grep -R -I --exclude-dir=bazel*" --include=".*\.c" --include=".*\.cc" --include=".*\.cpp" --include=".*\.h" --include=".*\.hpp" --include=".*\.txt"=$*" .;}; _gred
doskey grch=grep -RI --include="*.c" --include="*.cc" --include="*.cpp" --include="*.h" --include="*.hpp" "$*" .
REM doskey grec  'function _grec(){ grep -R -I --exclude-dir=external*" --include=".*\.c" --include=".*\.cc" --include=".*\.cpp"=$*" .;}; _grec
REM doskey grecd 'function _grecd(){ grep -R -I --exclude-dir=bazel*" --include=".*\.c" --include=".*\.cc" --include=".*\.cpp"=$*" .;}; _grecd
doskey grey=grep -RI --exclude-dir=".git*" --exclude-dir="build*" --include="*.h" --include="*.hpp" --include="*.hh" "$*" .
doskey grpy=grep -RI --exclude-dir=".git*" --exclude-dir="build*" --exclude=".*pyc" --include=".*\.py" "$*" .
doskey grpug=grep -RI --exclude=data --exclude="text" --exclude="*.pyc" --include="*.py" "\(^\\s*import pdb\|set_trace()\)" .
REM doskey gersh 'function _gersh(){ grep -R -I --include=.*\.sh"=$*" .;}; _gersh
REM doskey grbug=egrep -R -I --exclude-dir=node" --exclude-dir="node_modules" --exclude="react_bundle.*" --include=".*rb"=binding.(remote_)?pry" .
doskey grgo=grep -RI --exclude-dir="vendor" --include="*.go" "$*" .
REM doskey grgol=function _grgol(){ grep -R -I --include=.*\.go"=$*" .;}; _grgol
REM doskey grex=function _grex(){ grep -R -I --exclude-dir=node*" --exclude-dir="public" --exclude="react_bundle.*" --exclude="chart.js" --exclude=".*css" --include=".*jsx" --include=".*js"=$*" .;}; _grex
doskey grjs=grep -RI --exclude-dir="node*" --exclude-dir='javascripts' --include='*.js' $* .
REM doskey grjsx=function _grjsx(){ grep -R -I --exclude-dir=node*" --exclude="react_bundle.*" --exclude="chart.js" --exclude=".*css" --include=".*jsx" --include=".*js"=$*" .;}; _grjsx
REM doskey grjson=function _grjson(){ grep -R -I --exclude-dir=node*" --exclude-dir=".git" --exclude="react_bundle.*" --include=".*\.json"=$*" .;}; _grjson
doskey grjv=grep -RI --exclude-dir="classes" --exclude-dir=".git" --include="*.java" "$*" .
REM doskey grjx=grep -R -I --exclude-dir=node*' --exclude='react_bundle.*' --exclude='.*css' --include='.*jsx'
REM doskey grjsbug=grep -R -I --exclude-dir=node' --exclude-dir='node_modules' --exclude='react_bundle.*' --exclude='ionicons.scss' --include='.*js' 'debugger' .
REM doskey grjsxbug=grep -R -I --exclude-dir=node' --exclude-dir='node_modules' --exclude='react_bundle.*' --exclude='ionicons.scss' --include='.*jsx' 'debugger' .
REM doskey g =git status
doskey gs=git status
REM 
doskey jun=jupyter notebook
REM doskey kone 'kill %1
REM doskey ktwo 'kill %2
REM doskey kthree 'kill %3
REM doskey kfour 'kill %4
doskey l=ls -FG
doskey lad=ls -lahFG $b grep ^d
doskey lah=ls -lahFG
doskey ldir=ls -lhFG $b grep ^d
doskey lsdr 'function _lsdr(){ ls -dlhFG=$*" $b grep ^d ;}; _lsdr
doskey ldd=ls -ldAF .??* $b grep ^d
doskey lidot=ls -ldAF .??* $b grep -v ^d
doskey lart=ls -alrtG
doskey ll=ls -lFG
doskey lla=ls -lAFG
doskey lli=ls -ilAFG
doskey llwc=ls -ilAFG
doskey lls=ls -lS
doskey lrt=ls -lrtG
doskey llrt=ls -lrtGL
doskey lrtc=ls -lrtG *.c*
doskey lrtp=ls -lrtG *.py
doskey lsd=ls -ldAF .??*
doskey lsdort=ls -ldAFrt .??* $b grep -v ^d
doskey lss=ls -sFG
doskey lst=ls -ltG
REM doskey listening=function _listening(){ lsof -n -i4TCP:"$*" $b grep LISTEN; }; _listening
doskey mk=make -j
REM doskey meld=~/bin/meld
REM doskey mld=$HOME/bin/meld
REM doskey m=more
REM doskey mtvc=sshfs developer@192.168.56.101:/home/developer/development /users/sprax/ubu -o reconnect  -o cache_timeout=14400 -o volname=ubu
REM doskey mtu 'pushd ~; umount ubu || diskutil unmount force ubu; sshfs ubu:/home/sprax /users/sprax/ubu -o reconnect -o cache=no; popd
REM doskey mtv 'sshfs ubu:/home/developer/development /users/sprax/ubu -o reconnect -o cache=no
REM doskey ngrokloc 'ngrok http 9081
REM doskey pg=ps aux $b grep
REM doskey peg=python -c=import math; gr=(1 + math.sqrt(5))/2; print(\"PI, E, golden ratio, recip:\", math.pi, math.e, gr, 1/gr)
REM doskey psqld 'psql assistant_development
REM doskey psqli 'psql pipedream
REM doskey owd=echo $owd
REM doskey path=echo \$PATH $b awk -F: -v OFS="'"\\n" '"'{\$1=\$1; print \$0}'
REM doskey pdr 'pu $GIT_RUBY
REM doskey po=function _pop(){ export owd=`pwd`; popd;}; _pop
REM doskey pod=function _pod(){ export cwd=`pwd`; pushd $owd; export owd=$cwd;}; _pod
REM doskey pu=function _push(){ export owd=`pwd`; pushd $*;}; _push
REM doskey pud=function _pud(){ pu ../$1; shift; $*; }; _pud
doskey puf=pu %GIT_HOME%
doskey pui=pushd ../include
REM doskey puel=pushd %GIT_ELASTIC%
doskey puh=function _puh(){ export owd=`pwd`; pushd %HOME%/$*; }; _puh
doskey pum=pushd %HOME%
doskey put=pushd %TEXT_HOME%
doskey pupt=pu %GIT_PYTHON%/txt
doskey pup=pushd ..
doskey pupp=pushd ../..
doskey puup=pushd ../..
doskey puppp=pushd ../../..
doskey pupppp=pushd ../../../..
REM doskey puss 'pu $SANDBOX_HOME/%USER%
doskey py=python
doskey py2=python2
doskey py3=python3
doskey pyl=pylint -rn --rcfile=~/.pylintrc $*
REM doskey pylun=pylint -rn --rcfile=~/.pylintrc $b grep undefined
REM doskey pyl2=pylint2 -rn
REM doskey pyl3=$PYTHON_3/pylint -rn
REM doskey pylint3=$PYTHON_3/pylint
REM doskey r=fc -e
REM doskey rep 'fc -e
REM doskey rmf=rm -f
doskey rrm=rm -fr
REM doskey rw=ruby -w
REM doskey sam=source activate magic
REM doskey scat=source %HOME%/catkin_ws/devel/setup.bash
REM # Quickly serve the current directory as HTTP
REM doskey serve=ruby -run -e httpd . -p 8000'  # Or python -m SimpleHTTPServer :)
REM doskey simkl=source /opt/intel/mkl/bin/mklvars.sh intel64
REM doskey speedtest=wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip
REM doskey stuff 'pu $STUFF
REM doskey startpost '/usr/local/bin/pg_ctl -D /usr/local/var/postgres/data -l logfile start
REM doskey tshas 'tsh --proxy=bastion-internal.example.com:443 ssh ec2-user@"application=assistant,environment=default
REM doskey tshalp 'tsh --proxy=bastion-internal.example.com:443 ssh ec2-user@"application=assistant,environment=production" journalctl -f -u puma
REM doskey tshp 'tsh --proxy=bastion-internal.example.com:443 --user=%USER%
doskey u=cd ..
doskey up=cd ..
doskey upp=cd ../..
doskey uppp=cd ../../..
doskey upppp=cd ../../../..
doskey v=vim
doskey vw=view
