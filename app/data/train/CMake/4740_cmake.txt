if (NOT THIRDPARTY_BINARY_DIR)
    set(THIRDPARTY_BINARY_DIR "${CMAKE_BINARY_DIR}/thirdparty")
endif()
if (NOT THIRDPARTY_INSTALL_PREFIX)
    set(THIRDPARTY_INSTALL_PREFIX "${THIRDPARTY_BINARY_DIR}/prefix")
endif()
file(MAKE_DIRECTORY ${THIRDPARTY_BINARY_DIR})

set(USE_CUSTOM_ZLIB OFF)
if((DEFINED ZLIB_LIB) AND (DEFINED ZLIB_INCLUDE_DIRS))
	set(USE_CUSTOM_ZLIB ON)
elseif (DEFINED ZLIB_LIB)
    message(WARNING "ZLIB_LIB was defined but ZLIB_INCLUDE_DIRS was undefined. ZLIB_LIB will be ignored.")
elseif (DEFINED ZLIB_INCLUDE_DIRS)
    message(WARNING "ZLIB_INCLUDE_DIRS was defined but ZLIB_LIB was undefined. ZLIB_INCLUDE_DIRS will be ignored.")
endif()

set(USE_CUSTOM_LIBPNG OFF)
if((DEFINED LIBPNG_LIB) AND (DEFINED LIBPNG_INCLUDE_DIRS))
	set(USE_CUSTOM_LIBPNG ON)
elseif (DEFINED LIBPNG_LIB)
    message(WARNING "LIBPNG_LIB was defined but LIBPNG_INCLUDE_DIRS was undefined. LIBPNG_LIB will be ignored.")
elseif (DEFINED LIBPNG_INCLUDE_DIRS)
    message(WARNING "LIBPNG_INCLUDE_DIRS was defined but LIBPNG_LIB was undefined. LIBPNG_INCLUDE_DIRS will be ignored.")
endif()

set(USE_CUSTOM_ZEROMQ OFF)
if((DEFINED ZEROMQ_LIB) AND (DEFINED ZEROMQ_INCLUDE_DIRS))
	set(USE_CUSTOM_ZEROMQ ON)
elseif (DEFINED ZEROMQ_LIB)
    message(WARNING "ZEROMQ_LIB was defined but ZEROMQ_INCLUDE_DIRS was undefined. ZEROMQ_LIB will be ignored.")
elseif (DEFINED ZEROMQ_INCLUDE_DIRS)
    message(WARNING "ZEROMQ_INCLUDE_DIRS was defined but ZEROMQ_LIB was undefined. ZEROMQ_INCLUDE_DIRS will be ignored.")
endif()

execute_process(
    COMMAND ${CMAKE_COMMAND} ${CMAKE_SOURCE_DIR}/thirdparty -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${THIRDPARTY_INSTALL_PREFIX} -DSKIP_ZLIB=${USE_CUSTOM_ZLIB} -DSKIP_LIBPNG=${USE_CUSTOM_LIBPNG} -DSKIP_ZEROMQ=${USE_CUSTOM_ZEROMQ}
    WORKING_DIRECTORY ${THIRDPARTY_BINARY_DIR}
    RESULT_VARIABLE THIRDPARTY_CONFIGURE_STATUS
)
if (NOT ${THIRDPARTY_CONFIGURE_STATUS} EQUAL 0)
    message(FATAL_ERROR "Failed to configure thirdparty dependencies.")
endif()

execute_process(
    COMMAND ${CMAKE_COMMAND} --build ${THIRDPARTY_BINARY_DIR}
    WORKING_DIRECTORY ${THIRDPARTY_BINARY_DIR}
    RESULT_VARIABLE THIRDPARTY_BUILD_STATUS
)
if (NOT ${THIRDPARTY_BUILD_STATUS} EQUAL 0)
    message(FATAL_ERROR "Failed to build thirdparty dependencies.")
endif()

set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${THIRDPARTY_INSTALL_PREFIX})

find_package(glfw3 3.2.1 REQUIRED)
find_package(OpenGL REQUIRED)
find_package(glm REQUIRED)
find_package(PythonLibs REQUIRED)

add_library(zlib STATIC IMPORTED)
if(USE_CUSTOM_ZLIB)
    set_property(TARGET zlib PROPERTY IMPORTED_LOCATION ${ZLIB_LIB})
    include_directories(${ZLIB_INCLUDE_DIRS})
else()
    set_property(TARGET zlib PROPERTY IMPORTED_LOCATION ${THIRDPARTY_INSTALL_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}z${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()

add_library(libpng STATIC IMPORTED)
if(USE_CUSTOM_LIBPNG)
    set_property(TARGET libpng PROPERTY IMPORTED_LOCATION ${LIBPNG_LIB})
    include_directories(${LIBPNG_INCLUDE_DIRS})
else()
    set_property(TARGET libpng PROPERTY IMPORTED_LOCATION ${THIRDPARTY_INSTALL_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}png${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()
set_property(TARGET libpng PROPERTY INTERFACE_LINK_LIBRARIES zlib)

add_library(gtest STATIC IMPORTED)
set_property(TARGET gtest PROPERTY IMPORTED_LOCATION ${THIRDPARTY_INSTALL_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET gtest PROPERTY IMPORTED_LINK_INTERFACE_LIBRARIES pthread)

add_library(gtest_main STATIC IMPORTED)
set_property(TARGET gtest_main PROPERTY IMPORTED_LOCATION ${THIRDPARTY_INSTALL_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}gtest_main${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET gtest_main PROPERTY IMPORTED_LINK_INTERFACE_LIBRARIES gtest)

add_library(zeromq SHARED IMPORTED)
if(USE_CUSTOM_ZEROMQ)
    set_property(TARGET zeromq PROPERTY IMPORTED_LOCATION ${ZEROMQ_LIB})
    include_directories(${ZEROMQ_INCLUDE_DIRS})
else()
    set_property(TARGET zeromq PROPERTY IMPORTED_LOCATION ${THIRDPARTY_INSTALL_PREFIX}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}zmq${CMAKE_SHARED_LIBRARY_SUFFIX})
endif()
