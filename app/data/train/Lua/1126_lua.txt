local mstacks = assert(mstacks)
local ZORDER = 0
local START_ID = os.time()

local function next_id()
	local id = START_ID + 1
	START_ID = id
	
	return id
end

local Node = class("Node")

function Node:ctor()

	self._id = next_id() + 1
	self._name = ""
	self._pos = {x = 0,y = 0,z = 0}
	self._zorder = 0
	self._program = nil
	self._coverage_corlor = {r = 255,g = 255,b = 255}
	self._is_visible = true
	self._content_size = {width = 0,height = 0}
	self._scale = {x = 1,y = 1,z = 1}
	
	self._children = {}
	self._name_children = {}
end

function Node:dtor()

end

function Node:id()
	return self._id
end

function Node:visit(dt)

	if not self._is_visible then
		return
	end
	
	table.sort(self._children,function(first,second)
	
		if first._zorder < second._zorder then
			return true
		end

		if first._zorder > second._zorder then
			return false
		end
		
		if first._id < second._id then
			return true
		end

		if first._id > second._id then
			return false
		end
		
		return false
	end)
	
	mstacks.push_matrix()
	mstacks.translate(self._pos.x,self._pos.y,self._pos.z)
	-- rotation
	mstacks.scale(self._scale.x,self._scale.y,self._scale.z)
	
	self:draw(dt)
	
	for _,child in ipairs(self._children) do
		child:visit(dt)
	end
	
	mstacks.pop_matrix()
end

function Node:draw(dt)

end

function Node:add(name,child)

	if self._name_children[name] then
		return
	end
	
	child._name = child

	table.insert(self._children,child)
	self._name_children[name] = child
end

function Node:remove(child)

	for key,exist in ipairs(self._children) do
		if exist == child then
			table.remove(self._children,key)
			break
		end
	end
	
	self._name_children[child._name] = nil
end

function Node:remove_by_name(name)

	self._name_children[name] = nil
	for key,exist in ipairs(self._children) do
		if exist._name == name then
			table.remove(self._children,key)
			break
		end
	end
end

function Node:enbale_visible(is_visible)
	self._is_visible = is_visible
end

function Node:set_pos(x,y,z)
	if x then self._pos.x = x end
	if y then self._pos.y = y end
	if z then self._pos.z = z end
end

function Node:set_content_size(width,height)
	if width then self._content_size.width = width end
	if height then self._content_size.height = height end
end

function Node:set_coverage_color(color)
	if color.r then self._coverage_corlor.r = color.r end
	if color.g then self._coverage_corlor.g = color.g end
	if color.b then self._coverage_corlor.b = color.b end
end

function Node:set_scale(val)
	self._scale.x,self._scale.y = val,val
end

function Node:set_scale_x(val)
	self._scale.x = val,val
end

function Node:set_scale_y(val)
	self._scale.y = val,val
end

return Node