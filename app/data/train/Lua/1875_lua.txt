SceneTransition = Core.class()

-- Private functions

local function getTableCopy(t)
    local nt = {}
    for k, v in pairs(t) do
        nt[k] = v
    end
    return nt
end

local function combineTables(t1, t2)
    local nt = getTableCopy(t1)
    for k, v in pairs(t2) do
        nt[k] = v
    end
    return nt
end

-- Class implementation

function SceneTransition:init(nsStart, nsFinish, osStart, osFinish, easingFunction)
    -- Perform argument error checks
    if easingFunction and not type(easingFunction) == "function" then
        error("SceneTransition:init(nsStart, nsFinish, osStart, osFinish, [easingFunction]) easingFunction must be a function.")
    end
    if not nsStart or type(nsStart) ~= "table" or not nsFinish or type(nsFinish) ~= "table" or  not osStart or type(osStart) ~= "table" or  not osFinish or type(osFinish) ~= "table" then
        error("SceneTransition:init(nsStart, nsFinish, osStart, osFinish, [easingFunction]) properties must be  or table.")
    end
    if easingFunction then
        self.easing = easingFunction
    else
        self.easing = easing.linear
    end
    self.nsStart = nsStart
    self.nsFinish = nsFinish
    self.osStart = osStart
    self.osFinish = osFinish
end

function SceneTransition:combineWith(transition, easingFunction)
    if not (type(transition) == "table") then
        error("SceneTransition:combineWith(transition, [easingFunction]) transition must be a table.")
    end
    if easingFunction and type(easingFunction) ~= "function" then
        error("SceneTransition:combineWith(transition, [easingFunction]) easingFunction must be a function.")
    end
    local easing = easingFunction
    if not easing then
        easing = self.easing
    end
    -- Process properties
    local nnsStart = combineTables(self.nsStart, transition.nsStart)
    local nnsFinish = combineTables(self.nsFinish, transition.nsFinish)
    local nosStart = combineTables(self.osStart, transition.osStart)
    local nosFinish = combineTables(self.osFinish, transition.osFinish)
    -- Return new transition object
    return SceneTransition.new(nnsStart, nnsFinish, nosStart, nosFinish, easing)
end

-- Pre-made transitions

SceneTransition.FADE_IN = SceneTransition.new({alpha = 0}, {alpha = 1}, {}, {})
SceneTransition.FADE_OUT = SceneTransition.new({}, {}, {alpha = 1}, {alpha = 0})
SceneTransition.CROSS_FADE = SceneTransition.FADE_IN:combineWith(SceneTransition.FADE_OUT)
