function AxE.API.checkPlayerCheckStats(stid)
	local postData = {}
	postData["steamID"] = util.SteamIDFrom64(stid)
	AxE:makeCall(postData, "GET", "stats", "time", _)
end

function AxE.API.updatePlayerStats(ply)
	if(ply:IsValid() and IsValid(ply))then
		local postData = {}
		postData["steamID"] = ply:SteamID()
		postData["timeon"]  = tostring(ply:TimeConnected()) 
		AxE:makeCall(postData, "PUT", "stats", "time", _)
	else
		print("You threw Thor's hammer at me! I couldn't catch it. Now there is egg on the floor. (player disconnected error) ")
	end
end

hook.Add("CheckPassword", "AxESTATSCHECK", AxE.API.checkPlayerCheckStats)
hook.Add("PlayerDisconnected", "AxESTATSUPDATE", AxE.API.updatePlayerStats)

local gmode = 'terrortown'


print("Stats Detected: " .. gmode .. " as the gamemode")
if( gmode == 'terrortown') then
	--this is for the 'terror town' stats
	
	--capture the hit markers.
	function AxE.API.tttCaptureHitMarker(ply, hitgroup, dmginfo)
		--set where the player was hit
		ply.AxEHitgroup = hitgroup
	end
	
	
	function AxE.API.tttDeathStats(ply, _, attacker)
		local postData = {}
		
		print("Death Stats Hook Active")
		if(AxE.API.debugPrint == true)then
			print("Inside Debug")
			--do some quick checks
			if(!attacker:IsBot())then
				if !attacker:IsValid() or !attacker:IsPlayer() then
					print("Not a valid attacker...")
					return 
				end
			else
				print("This is a bot...")
			end
			
			if SpecDM then 
				if attacker:IsGhost() then 
					print("attacker is a ghost!")
					return 
				end 
			end 
			
			--ignore out of round.
			if GAMEMODE.round_state != ROUND_ACTIVE then 
				print("ignoring out of round death")
				return 
			end
		else
			--do some quick checks
			if !attacker:IsValid() or !attacker:IsPlayer() then return end
			if SpecDM then if attacker:IsGhost() then return end end 
			--ignore out of round.
			if GAMEMODE.round_state != ROUND_ACTIVE then return end
		end
		
		postData["victim"]   = tostring(ply:SteamID())
		postData["attacker"] = tostring(attacker:SteamID())
		
		if(ply.AxEHitgroup) then
			postData["hitgroup"] = tostring(ply.AxEHitgroup)
		else
			postData["hitgroup"] = "None"
		end
		AxE:makeCall(postData, "PUT", "stats", "ttt_death_stat", ply)
	end
	
	function AxE.API.tttEndRoundStats( x )
		local postData = {}
		--cycle through the players.
		for _, ply in pairs( player.GetAll() ) do
			if(ply:IsBot()) then return end
			--determine the teams and then determine if it was a win.(update stat conn time?)
			if( ply:IsValid() and IsValid(ply) )then
				postData["steamID"] = tostring(ply:SteamID())
				
				if( x == WIN_TRAITOR)then
					postData["Round_Win"] = "Traitors"
				else
					postData["Round_Win"] = "Innocent"
				end
				
				if(ply:IsTraitor())then
					postData["Role"] = "T"
				elseif(ply:IsDetective())then
					postData["Role"] = "D"
				elseif(!ply:IsTraitor() and !ply:IsDetective())then
					postData["Role"] = "I"
				end
				
				AxE:makeCall(postData, "PUT", "stats", "ttt_stats", ply)
			end
		end
	end
	
	--end of round hook.
	hook.Add("TTTEndRound", "AxETTTStatsUpdate", AxE.API.tttEndRoundStats)
	--deathstats hook
	hook.Add("PlayerDeath", "AxETTTdeathUpdateStats", AxE.API.tttDeathStats)
	--capture hooks.
	hook.Add("ScalePlayerDamage", "AxETTTDamageRecorder", AxE.API.tttCaptureHitMarker)
end

if( gmode == 'prop_hunt') then

end