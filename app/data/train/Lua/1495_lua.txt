local new = nil

local function prepend(list, val)
	list.root.child.parent = val
	val.child = list.root.child
	val.parent = list.root
	list.root.child = val
end

local function append(list, val)
	val.parent = list.last
	list.last.child = val
	list.last = val
end

local function insertafter(list, val, index)
	local curr_node = list.root
	while curr_node do 
		local ok = true
		for k, v in pairs(index) do
			ok = ok and curr_node[k] == v
		end
		if ok then
			curr_node.child.parent = val
			val.child = curr_node.child
			curr_node.child = val
			val.parent = curr_node
			break 
		end
		curr_node = curr_node.child
	end
end

local function delete(list, index)
	local curr_node = list.root
	while curr_node do 
		local ok = true
		for k, v in pairs(index) do
			ok = ok and curr_node[k] == v
		end
		if ok then
			curr_node.parent.child = curr_node.child
			curr_node.child.parent = curr_node.parent
			curr_node.child = nil
			curr_node.parent = nil
			break 
		end
		curr_node = curr_node.child
	end
end


local function map(list, func)
	local curr_node = list.root.child
	while curr_node do 
		func(curr_node)
		curr_node = curr_node.child
	end
end

local function filter(list, pattern)
	local filtered_list = new()
	local default_filter = function(node) 
		local ok = true
		for k, v in pairs(pattern) do
			ok = ok and node[k] == v
		end
		return ok
	end
	local filter_func = nil
	if type(pattern) == "table" then
		filter_func = default_filter
	elseif type(pattern) == "function" then
		filter_func = pattern
	end
	list:map(function(node)
		if filter_func(node) then
			filtered_list:append(node)
		end
	end)
	return filtered_list
end

new = function()
	local list = {
		len = 0,
		root ={},
		last = {},
		prepend = prepend,
		append = append,
		insertafter = insertafter,
		map = map,
		filter = filter,
		delete = delete,
	}
	list.root.parent = list.root
	list.last = list.root
	return list
end

local function print_list(n)
	print(n, n.val)
end

return {
	new = new
}
