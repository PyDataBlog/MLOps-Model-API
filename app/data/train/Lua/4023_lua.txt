require 'torch'
require 'paths'
require 'image'
require 'preprocess'
torch.setdefaulttensortype('torch.FloatTensor')
local dataset = {}
local msceleb_lowshot = {}
local ffi = require 'ffi'
function dataset.load_data(opt)
    local train = {}
    local test = {}
    msceleb_lowshot.root_folder = '/work/cv3/yan/Lowshot/novel_images/'
    msceleb_lowshot.train_path = paths.concat('/work/cv3/yan/faces/msceleb_lowshot_train.t7') --for st4, real-time can't use.
    --msceleb_lowshot.train_path = paths.concat('/work/cv3/yan/faces/allData.t7') --for st4, real-time can't use.	
    --msceleb_lowshot.train_path = paths.concat('/work/cv3/yan/faces/allData_new.t7') --for st4, real-time can't use.	
--    msceleb_lowshot.train_path = paths.concat('/data02/shenyan/openNMT/faces/msceleb_lowshot_top5.t7') --for st4, real-time can't use.	
    data = torch.load(msceleb_lowshot.train_path)
    data = randperm(data)

    local total_size = data.imagePath:size(1) 
    train.data = data.imagePath:narrow(1,1,total_size)
    train.label = data.imageClass:type('torch.FloatTensor'):narrow(1,1,total_size)
    train.root_folder = msceleb_lowshot.root_folder

    test.data = data.imagePath:narrow(1,1,total_size)
    test.label = data.imageClass:type('torch.FloatTensor'):narrow(1,1,total_size)
    test.root_folder = msceleb_lowshot.root_folder

    print('train set ', train)
    print('test set ', test)
    return train, test
end
return dataset



