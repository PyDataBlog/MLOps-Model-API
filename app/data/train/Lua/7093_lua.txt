function getMessageHeader(msg)
	local len = #msg
	local ret = ""
	ret = ret..string.char(bit.band(bit.rshift(len, 24), 0xFF))
	ret = ret..string.char(bit.band(bit.rshift(len, 16), 0xFF))
	ret = ret..string.char(bit.band(bit.rshift(len,  8), 0xFF))
	ret = ret..string.char(bit.band(           len,      0xFF))
	return ret
end
function getMessageLength(header)
	local len1 = bit.lshift(string.byte(header:sub(1,1)), 24)
	local len2 = bit.lshift(string.byte(header:sub(2,2)), 16)
	local len3 = bit.lshift(string.byte(header:sub(3,3)),  8)
	local len4 =            string.byte(header:sub(4,4))
	
	return len1 + len2 + len3 + len4
end
function parse(raw)
	local _sensors = { }
	local _broadcasts = { }
	for key, value in raw:gmatch('sensor%-update "(.-)" "(.+)"') do
		table.insert(_sensors, {key = key, value = value})
	end
	for broadcast in raw:gmatch('broadcast "(.+)"') do
		table.insert(_broadcasts, broadcast)
	end
	return {broadcasts = _broadcasts, sensors = _sensors}
end

function sendBroadcast(skt, broadcast)
	local msg = string.format('broadcast "%s"', broadcast:gsub('"', '""'))
	local tosend = getMessageHeader(msg)..msg
	skt:send(tosend)
end

function sendSensor(skt, key, value)
	local msg = string.format('sensor-update "%s" "%s"', key:gsub('"', '""'), value:gsub('"', '""'))
	local tosend = getMessageHeader(msg)..msg
	skt:send(tosend)
end