
!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
!*                                                                           *
!*       https://github.com/wildsandalwood9/Fortran-OOP-PACKAGE              *
!*                                                                           *
!*                                                                           *
!*                                                                           *
!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


module FileReaderClass
	implicit none
	private

	type,public :: FileReader
		private
		character(len=100):: fileName="UndefinedFileName.txt"
		integer :: fileId = 20
		integer :: lineNum
        logical alive
        contains
		procedure,public :: initialization => initialization
		procedure,public :: closeFile => closeFile
		procedure,public :: readAInt => readAInt
		procedure,public :: readAReal8 => readAReal8
		procedure,public :: readAString => readAString
		procedure,public :: getLineNum => getLineNum
		procedure,public :: readAReal8MatrixFromMNLines => readAReal8MatrixFromMNLines
		procedure,public :: readAColumnVector => readAColumnVector
    end type

	contains

	subroutine initialization(this,fileNameIn)
		implicit none
		class(FileReader)::this
		character(len=*)::fileNameIn

		integer::val,lineNum
		character(len=100)lineStr


		write(this%fileName,*)fileNameIn

		lineNum = 0
		val=0

		open(this%fileId, file = this%fileName,action = 'read')
		do while(val==0)
			read(this%fileId,'(a100)',iostat=val) lineStr
			lineNum=lineNum+1
		end do
!		write(*,*) lineNum
		this%lineNum = lineNum
        close(this%fileId)

		open(this%fileId, file = this%fileName,action = 'read')
	end subroutine initialization

	subroutine closeFile(this)
		implicit none
		class(FileReader)::this
        close(this%fileId)
	end subroutine closeFile


    integer function readAInt(this)
    	class(FileReader)::this
    	read(this%fileId,*)readAInt
    end function

	real(8) function readAReal8(this)
    	class(FileReader)::this
    	read(this%fileId,*)readAReal8
    end function

    function readAString(this)
!    	character(len=:),allocatable::readAString
    	character(len=100)::readAString
    	class(FileReader)::this

!    	allocate(character (len=100):: readAString)
    	read(this%fileId,'(a100)')readAString
    end function

    integer function getLineNum(this)
    	class(FileReader)::this
    	getLineNum = this%lineNum
    end function

    subroutine readAReal8MatrixFromMNLines( this,aIn )
    	class(FileReader)::this
    	real(8)::aIn(:,:)

		integer::m,n,i,j


		m = size(aIn,1)
		n = size(aIn,2)

        if(this%lineNum<m*n)then
        	write(*,*)"readAMatrixFromMNLines·½·¨±¨´í£ºÎÄ¼þÐÐÊý²»×ã"
        	return
        end if

		do j=1,n
			do i=1,m
				aIn(i,j) = this%readAReal8()
			end do
    	end do

    end subroutine


    subroutine readAColumnVector( this,xIn )
    	class(FileReader)::this
    	real(8)::xIn(:)

		integer::lenth,i


		lenth = size(xIn,1)

        if(this%lineNum<lenth)then
        	write(*,*)"readAColumnVector·½·¨±¨´í£ºÎÄ¼þÐÐÊý²»×ã"
        	return
        end if

		do i=1,lenth
			xIn(i) = this%readAReal8()
		end do


    end subroutine



end module FileReaderClass
