module formfactor
implicit none
    double precision, parameter :: pi = acos(-1d0)
    double precision, parameter :: sq2pi = sqrt(2d0*pi)
    
contains
!!Model -1: Magnetic Sphere
!    recursive subroutine i_sphere_magsphere(q, parameters, add_parameters, &
!            Nq, Np, ff_intensity)
!        ! Magnetic Sphere FF Intensity
!        ! Parameters:  R, SLDsphere, SLDmatrix
!                    ! mR, mSLDsphere, mSLDmatrix [sigR, sigmR]
!                    ! plusorminus, xi, sin2alpha
!        double precision, dimension(Nq), intent(in) :: q
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nq, Np
!        double precision, dimension(Nq), intent(out) :: ff_intensity
!        
!        integer :: Np_nuc, Np_mag
!        
!        select case(Np)
!            case(6)
!                Np_nuc = 3
!                Np_mag = 3
!                
!                call magnetic_scattering(q, parameters(1:3),&
!                    parameters(4:6), add_parameters, p_sphere, p_sphere,&
!                    Nq, Np_nuc, Np_mag, ff_intensity)

!            case(7) ! particle size distribution
!                call size_distribution_lognormal(q, parameters(1:6), add_parameters,&
!                        1, parameters(7), i_sphere_magsphere, 51, Nq, 6, ff_intensity)

!            case(8) ! magnetic size distribution
!                call size_distribution_lognormal(q, parameters(1:7), add_parameters,&
!                        4, parameters(8), i_sphere_magsphere, 51, Nq, 7, ff_intensity)
!            case default
!                print *, "Either 6, 7  or 8 parameters are expected. Got ", Np
!                return
!        end select
!    end subroutine i_sphere_magsphere

!    subroutine sld_sphere_magsphere(x, parameters, Nx, Np, sld_nuc, sld_mag)
!        ! Parameters:  R, SLDsphere, SLDmatrix
!                    ! mR, mSLDsphere, mSLDmatrix [sigR, sigmR]
!        double precision, dimension(Nx), intent(in) :: x
!        double precision, dimension(Np), intent(in) :: parameters
!        integer, intent(in) :: Nx, Np
!        double precision, dimension(Nx), intent(out) :: sld_nuc
!        double precision, dimension(Nx), intent(out) :: sld_mag

!        double precision :: R, SLDsphere, SLDmatrix
!        double precision :: mR, mSLDsphere, mSLDmatrix
!        double precision, dimension(6) :: add_parameters !dummy

!        R = parameters(1)
!        SLDsphere = parameters(2)
!        SLDmatrix = parameters(3)
!        mR = parameters(4)
!        mSLDsphere = parameters(5)
!        mSLDmatrix = parameters(6)
!        
!        select case(Np)
!            case(6)
!                call sld_sphere(x, (/R, SLDsphere, SLDmatrix/), add_parameters, &
!                        Nx, 3, sld_nuc)
!                call sld_sphere(x, (/mR, mSLDsphere, mSLDmatrix/), add_parameters, &
!                        Nx, 3, sld_mag)
!            case(7) ! particle size distribution
!                call size_distribution_lognormal(x, (/R, SLDsphere, SLDmatrix/), &
!                        add_parameters, 1, parameters(7), sld_sphere, 1001, Nx, 3, sld_nuc)
!                call sld_sphere(x, (/mR, mSLDsphere, mSLDmatrix/), add_parameters,&
!                        Nx, 3, sld_mag)
!            case(8) ! magnetic size distribution
!                call size_distribution_lognormal(x, (/R, SLDsphere, SLDmatrix/), &
!                        add_parameters, 1, parameters(7), sld_sphere, 1001, Nx, 3, sld_nuc)
!                call size_distribution_lognormal(x, (/mR, mSLDsphere, mSLDmatrix/), &
!                        add_parameters, 1, parameters(8), sld_sphere, 1001, Nx, 3, sld_mag)
!            case default
!                print *, "Either 6, 7 or 8 parameters are expected. Got ", Np
!                return
!        end select
!    end subroutine sld_sphere_magsphere

!!Model 2: Core-Shell Particle
!    subroutine p_coreshell(q, parameters, Nq, Np, ff_amplitude)
!        ! Core-Shell ff
!        ! Parameters: R, d, SLDcore, SLDshell, SLDmatrix
!        double precision, dimension(Nq), intent(in) :: q
!        double precision, dimension(Np), intent(in) :: parameters
!        integer, intent(in) :: Nq, Np
!        double precision, dimension(Nq), intent(out) :: ff_amplitude
!        
!        double precision :: R, d, SLDcore, SLDshell, SLDmatrix
!        double precision, dimension(Nq) :: ff_amp_core, ff_amp_shell
!        double precision, dimension(3) :: hparameters

!        R = parameters(1)
!        d = parameters(2)
!        SLDcore = parameters(3)
!        SLDshell = parameters(4)
!        SLDmatrix = parameters(5)

!        hparameters(1) = R+d
!        hparameters(2) = SLDshell
!        hparameters(3) = SLDmatrix
!        call p_sphere(q, hparameters, Nq, 3, ff_amp_shell)
!        
!        hparameters(1) = R
!        hparameters(2) = SLDcore
!        hparameters(3) = SLDshell
!        call p_sphere(q, hparameters, Nq, 3, ff_amp_core)
!        
!        ff_amplitude = ff_amp_shell + ff_amp_core
!    end subroutine p_coreshell

!    recursive subroutine i_coreshell(q, parameters, add_parameters, Nq, Np, ff_intensity)
!        ! Core-Shell FF Intensity
!        ! Parameters: R, d, SLDcore, SLDshell, SLDmatrix, [sigR, sigd]
!        double precision, dimension(Nq), intent(in) :: q
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nq, Np
!        double precision, dimension(Nq), intent(out) :: ff_intensity
!        
!        double precision, dimension(Nq) :: ff_amplitude
!        
!        select case(Np)
!            case(5)
!                call p_coreshell(q, parameters, Nq, Np, ff_amplitude)
!                ff_intensity = abs(ff_amplitude)**2

!            case(6) ! particle core size distribution
!                call size_distribution_lognormal(q, parameters(1:5), add_parameters,&
!                        1, parameters(6), i_coreshell, 51, Nq, 5, ff_intensity)

!            case(7) ! particle shell size distribution
!                call size_distribution_lognormal(q, parameters(1:6), add_parameters,&
!                        2, parameters(7), i_coreshell, 21, Nq, 6, ff_intensity)
!            case default
!                print *, "Either 5, 6 or 7 parameters are expected."
!        end select
!    end subroutine i_coreshell
!    
!    recursive subroutine sld_coreshell(x, parameters, add_parameters, Nx, Np, sld)
!        ! Parameters: R, d, SLDcore, SLDshell, SLDmatrix [sigR, sigD]
!        double precision, dimension(Nx), intent(in) :: x
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nx, Np
!        double precision, dimension(Nx), intent(out) :: sld
!        
!        integer :: ix
!        double precision :: R, d, SLDcore, SLDshell, SLDmatrix
!        
!        select case(Np)
!        
!            case(5)
!                R = parameters(1)
!                d = parameters(2)
!                SLDcore = parameters(3)
!                SLDshell = parameters(4)
!                SLDmatrix = parameters(5)
!                
!                do ix=1, Nx, 1
!                    if (x(ix) < 0) then
!                        sld(ix) = 0d0
!                    else if (x(ix) < R) then
!                        sld(ix) = SLDcore
!                    else if (x(ix) < R+d) then
!                        sld(ix) = SLDshell
!                    else
!                        sld(ix) = SLDmatrix
!                    end if
!                end do
!            case(6) ! particle core size distribution
!                call size_distribution_lognormal(x, parameters(1:5), add_parameters,&
!                        1, parameters(6), sld_coreshell, 1001, Nx, 5, sld)
!            case(7) ! particle shell size distribution
!                call size_distribution_lognormal(x, parameters(1:6), add_parameters,&
!                        2, parameters(7), sld_coreshell, 501, Nx, 6, sld)
!            case default
!                print *, "Either 5, 6 or 7 parameters are expected. Got ", Np
!            end select
!    end subroutine sld_coreshell

!!Model -2: Magnetic Coreshell
!    recursive subroutine i_coreshell_magcoreshell(q, parameters, add_parameters, &
!            Nq, Np, ff_intensity)
!        ! Magnetic Core-Shell FF Intensity
!        ! Parameters:  R, d, SLDcore, SLDsphere, SLDmatrix
!                    ! mR, md, mSLDcore, mSLDsphere, mSLDmatrix [sigR, sigd, sigmR, sigmd]
!                    ! plusorminus, xi, sin2alpha
!        double precision, dimension(Nq), intent(in) :: q
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nq, Np
!        double precision, dimension(Nq), intent(out) :: ff_intensity
!        
!        integer :: Np_nuc, Np_mag
!        
!        select case (Np)
!            case(10) ! No size distributions
!                Np_nuc = 5
!                Np_mag = 5
!                call magnetic_scattering(q, parameters(1:5),&
!                    parameters(6:10), add_parameters, p_coreshell, p_coreshell,&
!                    Nq, Np_nuc, Np_mag, ff_intensity)
!            case(11) ! particle size distribution
!                call size_distribution_lognormal(q, parameters(1:10), &
!                        add_parameters, 1, parameters(11), &
!                        i_coreshell_magcoreshell, 51, Nq, 10, ff_intensity)
!            case(12) ! particle shell distribution
!                call size_distribution_lognormal(q, parameters(1:11), &
!                        add_parameters, 2, parameters(12), &
!                        i_coreshell_magcoreshell, 21, Nq, 11, ff_intensity)
!            case(13) ! magnetic size distribution
!                call size_distribution_lognormal(q, parameters(1:12), &
!                        add_parameters, 6, parameters(13), &
!                        i_coreshell_magcoreshell, 51, Nq, 12, ff_intensity)
!            case(14) ! magnetic shell distribution
!                call size_distribution_lognormal(q, parameters(1:13), &
!                        add_parameters, 7, parameters(14), &
!                        i_coreshell_magcoreshell, 21, Nq, 13, ff_intensity)
!            case default
!                print *, "10 - 14 parameters are expected. But got ", Np
!                return
!            end select
!    end subroutine i_coreshell_magcoreshell

!    subroutine sld_coreshell_magcoreshell(x, parameters, Nx, Np, sld_nuc, sld_mag)
!        ! Parameters:  R, d, SLDcore, SLDsphere, SLDmatrix
!                    ! mR, md, mSLDcore, mSLDsphere, mSLDmatrix [sigR, sigd, sigmR, sigmd]
!                    ! plusorminus, xi, sin2alpha

!        double precision, dimension(Nx), intent(in) :: x
!        double precision, dimension(Np), intent(in) :: parameters
!        integer, intent(in) :: Nx, Np
!        double precision, dimension(Nx), intent(out) :: sld_nuc
!        double precision, dimension(Nx), intent(out) :: sld_mag

!        double precision :: R, d, SLDcore, SLDshell, SLDmatrix

!        double precision :: mR, md, mSLDcore, mSLDshell, mSLDmatrix
!        double precision, dimension(6) :: add_parameters !dummy
!        logical :: calc_sld_mag
!        
!        R = parameters(1)
!        d = parameters(2)
!        SLDcore = parameters(3)
!        SLDshell = parameters(4)
!        SLDmatrix = parameters(5)
!        mR = parameters(6)
!        md = parameters(7)
!        mSLDcore = parameters(8)
!        mSLDshell = parameters(9)
!        mSLDmatrix = parameters(10)
!        
!        if (mR <= 0 .and. md <= 0) then
!            calc_sld_mag = .FALSE.
!            sld_mag = 0d0
!        else
!            calc_sld_mag = .TRUE.
!        end if
!        
!        ! Nuclear SLD
!        if (Np < 10 .OR. Np > 14) then
!            print *, "10-14 parameters are expected. Got ", Np
!            return
!        else if (Np == 10) then
!            call sld_coreshell(x, (/R, d, SLDcore, SLDshell, SLDmatrix/), &
!                        add_parameters, Nx, 5, sld_nuc)
!        else if (Np == 11) then ! particle size distribution
!            call sld_coreshell(x, &
!                    (/R, d, SLDcore, SLDshell, SLDmatrix, parameters(11)/), &
!                    add_parameters, Nx, 6, sld_nuc)
!        else ! particle size, shell distribution
!            call sld_coreshell(x, &
!                    (/R, d, SLDcore, SLDshell, SLDmatrix, parameters(11), &
!                    parameters(12)/), &
!                    add_parameters, Nx, 7, sld_nuc)
!        end if

!        ! Magnetic SLD
!        if (calc_sld_mag) then
!            if (Np <= 12) then ! No size distributions
!                call sld_coreshell(x, &
!                        (/mR, md, mSLDcore, &
!                        mSLDshell, mSLDmatrix/), &
!                        add_parameters, Nx, 5, sld_mag)
!            else if (Np == 13) then ! Magnetic core distribution
!                call sld_coreshell(x, &
!                        (/mR, md, mSLDcore, &
!                        mSLDshell, mSLDmatrix, parameters(13)/), &
!                        add_parameters, Nx, 6, sld_mag)
!            else if (Np == 14) then ! Magnetic core,shell distribution
!                call sld_coreshell(x, &
!                        (/mR, md, mSLDcore, &
!                        mSLDshell, mSLDmatrix, parameters(13),&
!                        parameters(14)/), &
!                        add_parameters, Nx, 7, sld_mag)
!            end if
!        end if
!    end subroutine sld_coreshell_magcoreshell

!!Model 3: Core-Shell Surfactant Particle
!    subroutine p_coreshellsurfactant(q, parameters, Nq, Np, ff_amplitude)
!        ! Core-Shell-Surfactant ff amplitude
!        ! Parameters: R, dshell, dsurfactant, SLDcore, SLDshell, SLDsurfactant, SLDmatrix
!        double precision, dimension(Nq), intent(in) :: q
!        double precision, dimension(Np), intent(in) :: parameters
!        integer, intent(in) :: Nq, Np
!        double precision, dimension(Nq), intent(out) :: ff_amplitude
!        
!        double precision :: R, dshell, dsurfactant
!        double precision :: SLDcore, SLDshell, SLDsurfactant, SLDmatrix
!        double precision, dimension(Nq) :: ff_amp_core, ff_amp_shell, ff_amp_surfactant
!        double precision, dimension(3) :: hparameters

!        R = parameters(1)
!        dshell = parameters(2)
!        dsurfactant = parameters(3)
!        SLDcore = parameters(4)
!        SLDshell = parameters(5)
!        SLDsurfactant = parameters(6)
!        SLDmatrix = parameters(7)

!        hparameters(1) = R+dshell+dsurfactant
!        hparameters(2) = SLDsurfactant
!        hparameters(3) = SLDmatrix
!        call p_sphere(q, hparameters, Nq, 3, ff_amp_surfactant)
!        
!        hparameters(1) = R+dshell
!        hparameters(2) = SLDshell
!        hparameters(3) = SLDsurfactant
!        call p_sphere(q, hparameters, Nq, 3, ff_amp_shell)

!        hparameters(1) = R
!        hparameters(2) = SLDcore
!        hparameters(3) = SLDshell
!        call p_sphere(q, hparameters, Nq, 3, ff_amp_core)
!        
!        ff_amplitude = ff_amp_surfactant + ff_amp_shell + ff_amp_core
!    end subroutine p_coreshellsurfactant

!    recursive subroutine i_coreshellsurfactant(q, parameters, add_parameters,&
!            Nq, Np, ff_intensity)
!        ! Core-Shell-Surfactant FF Intensity
!        ! Parameters: R, dshell, dsurfactant, SLDcore, SLDshell, SLDsurfactant, SLDmatrix, [sigR, sigdshell, sigdsurfactant]
!        double precision, dimension(Nq), intent(in) :: q
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nq, Np
!        double precision, dimension(Nq), intent(out) :: ff_intensity
!        
!        double precision, dimension(Nq) :: ff_amplitude
!        
!        select case(Np)
!            case(7)
!                call p_coreshellsurfactant(q, parameters, Nq, Np, ff_amplitude)
!                ff_intensity = abs(ff_amplitude)**2

!            case(8) ! particle core size distribution
!                call size_distribution_lognormal(q, parameters(1:7), add_parameters,&
!                        1, parameters(8), i_coreshellsurfactant, 51, Nq, 7, ff_intensity)

!            case(9) ! particle shell size distribution
!                call size_distribution_lognormal(q, parameters(1:8), add_parameters,&
!                        2, parameters(9), i_coreshellsurfactant, 21, Nq, 8, ff_intensity)

!            case(10) ! particle surfactant size distribution
!                call size_distribution_lognormal(q, parameters(1:9), add_parameters,&
!                        3, parameters(10), i_coreshellsurfactant, 21, Nq, 9, ff_intensity)
!            case default
!                print *, "FF: 7-10 parameters are expected. Got ", Np
!                return
!        end select
!    end subroutine i_coreshellsurfactant
!    
!    recursive subroutine sld_coreshellsurfactant(x, parameters, add_parameters, &
!            Nx, Np, sld)
!        ! Parameters: R, dshell, dsurfactant, SLDcore, SLDshell, SLDsurfactant,
!        ! SLDmatrix, [sigR, sigdshell, sigdsurfactant]
!        double precision, dimension(Nx), intent(in) :: x
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nx, Np
!        double precision, dimension(Nx), intent(out) :: sld
!        
!        integer :: ix
!        double precision :: R, dshell, dsurfactant
!        double precision :: SLDcore, SLDshell, SLDsurfactant, SLDmatrix
!        
!        select case(Np)
!            case(7)
!                R = parameters(1)
!                dshell = parameters(2)
!                dsurfactant = parameters(3)
!                SLDcore = parameters(4)
!                SLDshell = parameters(5)
!                SLDsurfactant = parameters(6)
!                SLDmatrix = parameters(7)
!                
!                do ix=1, Nx
!                    if (x(ix) < 0) then
!                        sld(ix) = 0d0
!                    else if (x(ix) < R) then
!                        sld(ix) = SLDcore
!                    else if (x(ix) < R+dshell) then
!                        sld(ix) = SLDshell
!                    else if (x(ix) < R+dshell+dsurfactant) then
!                        sld(ix) = SLDsurfactant
!                    else
!                        sld(ix) = SLDmatrix
!                    end if
!                end do
!            case(8) ! particle core size distribution
!                call size_distribution_lognormal(x, parameters(1:7), add_parameters,&
!                        1, parameters(8), sld_coreshellsurfactant, 101, Nx, 7, sld)
!            case(9) ! particle shell size distribution
!                call size_distribution_lognormal(x, parameters(1:8), add_parameters,&
!                        2, parameters(9), sld_coreshellsurfactant, 101, Nx, 8, sld)
!            case(10) ! particle surfactant size distribution
!                call size_distribution_lognormal(x, parameters(1:9), add_parameters,&
!                        3, parameters(10), sld_coreshellsurfactant, 101, Nx, 9, sld)
!            case default
!                print *, "SLD: 7-10 parameters are expected. Got ", Np
!                return
!            end select
!    end subroutine sld_coreshellsurfactant

!!!Model -3: Magnetic Core-shell-surfactant
!    recursive subroutine i_coreshellsurfactant_magcoreshellsurfactant(q, parameters, add_parameters, &
!            Nq, Np, ff_intensity)
!        ! Magnetic Core-Shell-Surfactant FF Intensity
!        ! Parameters: R, dshell, dsurfactant, SLDcore, SLDshell, SLDsurfactant, SLDmatrix, 
!        ! mR, mdshell, mdsurfactant, mSLDcore, mSLDshell, mSLDsurfactant, mSLDmatrix, 
!        ! [sigR, sigdshell, sigdsurfactant, sigmR, sigmdshell, sigmdsurfactant]

!        double precision, dimension(Nq), intent(in) :: q
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nq, Np
!        double precision, dimension(Nq), intent(out) :: ff_intensity
!        
!        integer :: Np_nuc, Np_mag
!        
!        select case (Np)
!            case(14) ! No size distributions
!                Np_nuc = 7
!                Np_mag = 7
!                call magnetic_scattering(q, parameters(1:7),&
!                    parameters(8:14), add_parameters, p_coreshellsurfactant, p_coreshellsurfactant,&
!                    Nq, Np_nuc, Np_mag, ff_intensity)
!            case(15) ! particle size distribution
!                call size_distribution_lognormal(q, parameters(1:14), &
!                        add_parameters, 1, parameters(15), &
!                        i_coreshellsurfactant_magcoreshellsurfactant, 51, Nq, 14, ff_intensity)
!            case(16) ! particle shell distribution
!                call size_distribution_lognormal(q, parameters(1:15), &
!                        add_parameters, 2, parameters(16), &
!                        i_coreshellsurfactant_magcoreshellsurfactant, 21, Nq, 15, ff_intensity)
!            case(17) ! particle surfactant distribution
!                call size_distribution_lognormal(q, parameters(1:16), &
!                        add_parameters, 3, parameters(17), &
!                        i_coreshellsurfactant_magcoreshellsurfactant, 51, Nq, 16, ff_intensity)
!            case(18) ! magnetic size distribution
!                call size_distribution_lognormal(q, parameters(1:17), &
!                        add_parameters, 8, parameters(18), &
!                        i_coreshellsurfactant_magcoreshellsurfactant, 51, Nq, 17, ff_intensity)
!            case(19) ! magnetic shell distribution
!                call size_distribution_lognormal(q, parameters(1:18), &
!                        add_parameters, 9, parameters(19), &
!                        i_coreshellsurfactant_magcoreshellsurfactant, 21, Nq, 18, ff_intensity)
!            case(20) ! magnetic surfactant distribution
!                call size_distribution_lognormal(q, parameters(1:19), &
!                        add_parameters, 10, parameters(20), &
!                        i_coreshellsurfactant_magcoreshellsurfactant, 21, Nq, 19, ff_intensity)

!            case default
!                print *, "FF CoreshellSurfactant: 14 - 20 parameters are expected. But got ", Np
!                return
!            end select
!    end subroutine i_coreshellsurfactant_magcoreshellsurfactant

!    subroutine sld_coreshellsurfactant_magcoreshellsurfactant(x, parameters, Nx, Np, sld_nuc, sld_mag)
!        ! Parameters: R, dshell, dsurfactant, SLDcore, SLDshell, SLDsurfactant, SLDmatrix, 
!        ! mR, mdshell, mdsurfactant, mSLDcore, mSLDshell, mSLDsurfactant, mSLDmatrix, 
!        ! [sigR, sigdshell, sigdsurfactant, sigmR, sigmdshell, sigmdsurfactant]

!        double precision, dimension(Nx), intent(in) :: x
!        double precision, dimension(Np), intent(in) :: parameters
!        integer, intent(in) :: Nx, Np
!        double precision, dimension(Nx), intent(out) :: sld_nuc
!        double precision, dimension(Nx), intent(out) :: sld_mag

!        double precision :: R, dshell, dsurfactant
!        double precision :: SLDcore, SLDshell, SLDsurfactant, SLDmatrix

!        double precision :: mR, mdshell, mdsurfactant 
!        double precision :: mSLDcore, mSLDshell, mSLDsurfactant, mSLDmatrix
!        double precision, dimension(6) :: add_parameters !dummy
!        logical :: calc_sld_mag
!        
!        
!        R = parameters(1)
!        dshell = parameters(2)
!        dsurfactant = parameters(3)
!        SLDcore = parameters(4)
!        SLDshell = parameters(5)
!        SLDsurfactant = parameters(6)
!        SLDmatrix = parameters(7)
!        
!        mR = parameters(8)
!        mdshell = parameters(9)
!        mdsurfactant = parameters(10)
!        mSLDcore = parameters(11)
!        mSLDshell = parameters(12)
!        mSLDsurfactant = parameters(13)
!        mSLDmatrix = parameters(14)
!        
!        if (mR <= 0 .and. mdshell <= 0 .and. mdsurfactant <= 0) then
!            calc_sld_mag = .FALSE.
!            sld_mag = 0d0
!        else
!            calc_sld_mag = .TRUE.
!        end if


!        ! Nuclear SLD
!        if (Np < 14 .OR. Np > 20) then
!            print *, "14-20 parameters are expected. Got ", Np
!            return
!        else if (Np == 14) then
!            call sld_coreshellsurfactant(x, &
!                    (/R, dshell, dsurfactant, SLDcore, SLDshell, &
!                    SLDsurfactant, SLDmatrix/), &
!                    add_parameters, Nx, 7, sld_nuc)
!        else if (Np == 15) then ! particle size distribution
!            call sld_coreshellsurfactant(x, &
!                    (/R, dshell, dsurfactant, SLDcore, SLDshell, &
!                    SLDsurfactant, SLDmatrix, parameters(15)/), &
!                    add_parameters, Nx, 8, sld_nuc)
!        else if (Np == 16) then ! particle size and shell distribution
!            call sld_coreshellsurfactant(x, &
!                    (/R, dshell, dsurfactant, SLDcore, SLDshell, &
!                    SLDsurfactant, SLDmatrix, parameters(15),&
!                    parameters(16)/), &
!                    add_parameters, Nx, 9, sld_nuc)
!        else ! particle size, shell and surfactant distribution
!            call sld_coreshellsurfactant(x, &
!                    (/R, dshell, dsurfactant, SLDcore, SLDshell, &
!                    SLDsurfactant, SLDmatrix, parameters(15),&
!                    parameters(16), parameters(17)/), &
!                    add_parameters, Nx, 10, sld_nuc)
!        end if

!        ! Magnetic SLD
!        if (calc_sld_mag) then
!            if (Np <= 17) then ! No size distributions
!                call sld_coreshellsurfactant(x, &
!                        (/mR, mdshell, mdsurfactant, mSLDcore, &
!                        mSLDshell, mSLDsurfactant, mSLDmatrix/), &
!                        add_parameters, Nx, 7, sld_mag)
!            else if (Np == 18) then ! Magnetic core distribution
!                call sld_coreshellsurfactant(x, &
!                        (/mR, mdshell, mdsurfactant, mSLDcore, &
!                        mSLDshell, mSLDsurfactant, mSLDmatrix,&
!                        parameters(18)/), &
!                        add_parameters, Nx, 8, sld_mag)
!            else if (Np == 19) then ! Magnetic core, shell distribution
!                call sld_coreshellsurfactant(x, &
!                        (/mR, mdshell, mdsurfactant, mSLDcore, &
!                        mSLDshell, mSLDsurfactant, mSLDmatrix,&
!                        parameters(18), parameters(19)/), &
!                        add_parameters, Nx, 9, sld_mag)
!            else if (Np == 20) then ! Magnetic core, shell, surfactant distribution
!                call sld_coreshellsurfactant(x, &
!                        (/mR, mdshell, mdsurfactant, mSLDcore, &
!                        mSLDshell, mSLDsurfactant, mSLDmatrix,&
!                        parameters(18), parameters(19), parameters(20)/), &
!                        add_parameters, Nx, 10, sld_mag)
!            end if
!        end if
!    end subroutine sld_coreshellsurfactant_magcoreshellsurfactant
!    
!! Model 4: Coupled Core-Shell 
!    recursive subroutine i_coreshell_coupled(q, parameters, add_parameters, Nq, Np, ff_intensity)
!        ! Core-Shell FF Intensity
!        ! Parameters: R+d, d, SLDcore, SLDshell, SLDmatrix, [sigR+d, sigd]]
!        double precision, dimension(Nq), intent(in) :: q
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nq, Np
!        double precision, dimension(Nq), intent(out) :: ff_intensity
!        
!        double precision, dimension(Np) :: hparameters
!        double precision, dimension(Nq) :: ff_amplitude
!        
!        select case(Np)
!            case(5)
!                hparameters = parameters
!                hparameters(1) = (parameters(1) - parameters(2))
!                call p_coreshell(q, hparameters, Nq, Np, ff_amplitude)
!                ff_intensity = abs(ff_amplitude)**2
!            case(6) ! particle sum core,shell size distribution
!                call size_distribution_lognormal(q, parameters(1:5), add_parameters,&
!                        1, parameters(6), i_coreshell_coupled, 51, Nq, 5, ff_intensity)

!            case(7) ! particle difference core, shell size distribution
!                call size_distribution_lognormal(q, parameters(1:6), add_parameters,&
!                        2, parameters(7), i_coreshell_coupled, 51, Nq, 6, ff_intensity)
!            case default
!                print *, "Either 5, 6 or 7 parameters are expected."
!        end select
!    end subroutine i_coreshell_coupled
!    
!    recursive subroutine sld_coreshell_coupled(x, parameters, add_parameters, &
!            Nx, Np, sld)
!        ! Parameters: R, d, SLDcore, SLDshell, SLDmatrix [sigR, sigD]
!        double precision, dimension(Nx), intent(in) :: x
!        double precision, dimension(Np), intent(in) :: parameters
!        double precision, dimension(6), intent(in) :: add_parameters
!        integer, intent(in) :: Nx, Np
!        double precision, dimension(Nx), intent(out) :: sld
!        
!        integer :: ix
!        double precision :: R, d, SLDcore, SLDshell, SLDmatrix
!        
!        select case(Np)
!            case(5)
!                R = (parameters(1) - parameters(2))
!                d = parameters(2)
!                SLDcore = parameters(3)
!                SLDshell = parameters(4)
!                SLDmatrix = parameters(5)
!                
!                do ix=1, Nx
!                    if (x(ix) < 0) then
!                        sld(ix) = 0d0
!                    else if (x(ix) < R) then
!                        sld(ix) = SLDcore
!                    else if (x(ix) < R+d) then
!                        sld(ix) = SLDshell
!                    else
!                        sld(ix) = SLDmatrix
!                    end if
!                end do
!            case(6) ! particle core size distribution
!                call size_distribution_lognormal(x, parameters(1:5), add_parameters,&
!                        1, parameters(6), sld_coreshell_coupled, 1001, Nx, 5, sld)
!            case(7) ! particle shell size distribution
!                call size_distribution_lognormal(x, parameters(1:6), add_parameters,&
!                        2, parameters(7), sld_coreshell_coupled, 501, Nx, 6, sld)
!            case default
!                print *, "Either 5, 6 or 7 parameters are expected. Got ", Np
!            end select
!    end subroutine sld_coreshell_coupled
!    
end module formfactor
