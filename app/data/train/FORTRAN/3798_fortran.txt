      SUBROUTINE XYCUR
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*PURPOSE
*	TO OBTAIN A LIST OF X,Y POSITIONS AND IDENTIFIERS FROM THE
*	ARGS SCREEN AND INSERT THEM IN A FILE, USING THE ARGS PAN & ZOOM
*	ROUTINE TO MOVE AROUND THE SCREEN.
*
*METHOD
*	OBTAIN AN INPUT FILE IF SUPPLIED. OBTAIN WORKSPACE AND COPY
*	INPUT FILE TO IT IF GIVEN. CALL XYINCR TO INTERACT WITH THE
*	SCREEN. OBTAIN AN OUTPUT FILE OF THE REQUIRED SIZE AND INSERT
*	THE LISTS INTO IT. UPDATE THE OUTPUT DESCRIPTOR ITEMS
*
*ARGUMENTS
*	NONE
*
*STARLINK PARAMETERS
*	ILEVEL
*		INTERACTION LEVEL: CONTROLS PRINTING OF INFORMATIONAL 
*		MESSAGES
*	INPUT
*		OPTIONAL EXISTING FILE TO ADD POSITIONS TO
*	MAXENTRY
*		MAX NUMBER OF LIST ENTRIES (USED TO ASSIGN WORKSPACE)
*	NOSPACE/ERROR/
*		ACCESSED IF WORKSPACE CANNOT BE OBTAINED
*	IDENTIFY
*		(LOGICAL) IF TRUE, PROGRAM PROMPTS FOR AN IDENTIFIER
*		FOR EACH X,Y POSITION
*       NOARGS/ERROR/
*               ACCESSED IF ARGS IS NOT AVAILABLE
*	NOLIST/ERROR/
*		ACCESSED IF NO ENTRIES WERE GIVEN WITH THE CURSOR
*	OUTPUT
*		OUTPUT FILE
*	TITLE
*		A TITLE FOR THE OUTPUT FILE
*
*CALLS
*	THIS PACKAGE:
*		GETPAR,GTXYLR,EXTLST,XYINCR,GTXYLW,ADDLST,LBGONE,GTDSCR,
*		PTDSCR
*	STARLINK:
*		GETDYN,WRERR,WRUSER,RDKEYC,CYDSCR,FRDATA
*       ARGSLIB:
*               SRINIT
*	ASPIC:
*		ASP_PAN
*
*NOTES
*	USES VAX %VAL FACILITY
*
*WRITTEN BY
*	R.F. WARREN-SMITH
*-----------------------------------------------------------------------
C
C
      CHARACTER CVAL*1,TITLE(1)*30,PRBUF*40
      LOGICAL IDENT(1)
C
C OBTAIN INTERACTION LEVEL
C
      ILEVEL=2
      CALL GETPAR('ILEVEL','INTEGER',1,1.0,3.0,.TRUE.,ILEVEL,RVAL,IERR)
C
C OBTAIN AN OPTIONAL INPUT DATA FRAME
C
      CALL GTXYLR('INPUT',.TRUE.,NITEM,LSTLEN,IPIN,IERRI)
C
C IF INPUT NOT OBTAINED, SET DEFAULT VALUES FOR THE LIST DIMENSIONS
C NITEM=NO OF 4-BYTE ITEMS PER LIST RECORD
C LSTLEN=NO OF LIST RECORDS
C
      IF(IERRI.NE.0) THEN
	NITEM=7
	LSTLEN=0
      ENDIF
C
C SET DEFAULT FOR MAX LENGTH OF OUTPUT LIST, THEN OBTAIN VALUE FROM
C ENVIRONMENT
C
      LENOUT=LSTLEN+100
      CALL GETPAR('MAXENTRY','INTEGER',1,REAL(LSTLEN+1),1.0E6,.TRUE.,
     +LENOUT,RVAL,IERR)
C
C OBTAIN VIRTUAL MEMORY WORKSPACE TO HOLD IDENTIFIERS AND X,Y
C VALUES
C
      CALL GETDYN('ID',104,5*LENOUT,IPID,ISTATI)
      CALL GETDYN('X',104,LENOUT,IPX,ISTATX)
      CALL GETDYN('Y',104,LENOUT,IPY,ISTATY)
C
C IF SPACE NOT AVAILABLE... GIVE ERROR MESSAGE AND ABORT
C
      IF((ISTATI.NE.0).OR.(ISTATX.NE.0).OR.(ISTATY.NE.0)) THEN
	CALL WRERR('NOSPACE')
        GO TO 99
      ENDIF
C
C IF INPUT WAS SUPPLIED, COPY INPUT LIST DATA TO WORKSPACE
C
      IF(IERRI.EQ.0) THEN
	CALL EXTLST(%VAL(IPIN),NITEM,LSTLEN,%VAL(IPID),1,20)
	CALL EXTLST(%VAL(IPIN),NITEM,LSTLEN,%VAL(IPX),21,24)
	CALL EXTLST(%VAL(IPIN),NITEM,LSTLEN,%VAL(IPY),25,28)
      ENDIF
C
C DETERMINE IF IDENTIFIERS ARE TO BE PROMPTED FOR
C
      IDENT(1)=.FALSE.
      CALL RDKEYL('IDENTIFY',.TRUE.,1,IDENT,NVAL,ISTAT)
C
C CALL SRINIT TO INITIALLISE ARGS
C
      ISTAT=0
      CALL SRINIT(0,.FALSE.,ISTAT)
      IF(ISTAT.NE.0) THEN
        CALL WRERR('NOARGS')
        GO TO 99
      ENDIF
C
C CALL XYINCR TO ADD NEW VALUES TO THE WORKSPACE
C
      CALL XYINCR(%VAL(IPID),%VAL(IPX),%VAL(IPY),LENOUT,LSTLEN,
     +IDENT(1),ILEVEL,IERR)
C
C IF NO LIST OBTAINED, GIVE ERROR MESSAGE AND ABORT... OTHERWISE
C OBTAIN OUTPUT DATA FRAME
C
      IF(LSTLEN.LE.0) THEN
        CALL WRERR('NOLIST')
	GO TO 99
      ELSE
	CALL GTXYLW('OUTPUT',.FALSE.,7,LSTLEN,IPOUT,IERR2)
	IF(IERR2.EQ.0) THEN
C
C OUTPUT FRAME SUCCESSFULLY OBTAINED. COPY LISTS FROM WORKSPACE TO
C OUTPUT DATA FRAME
C
          CALL ADDLST(%VAL(IPOUT),7,LSTLEN,%VAL(IPID),1,20)
	  CALL ADDLST(%VAL(IPOUT),7,LSTLEN,%VAL(IPX),21,24)
	  CALL ADDLST(%VAL(IPOUT),7,LSTLEN,%VAL(IPY),25,28)
C
C TELL USER HOW MANY ENTRIES IN OUTPUT LIST
C
	  IF(ILEVEL.GE.2) THEN
            WRITE(PRBUF,104)LSTLEN
	    IF(LSTLEN.EQ.1) PRBUF(28:)='ENTRY'
  104       FORMAT('   OUTPUT LIST HAS ',I7,' ENTRIES')
            CALL LBGONE(PRBUF(20:))
	    CALL WRUSER(' ',ISTAT)
            CALL WRUSER(PRBUF,ISTAT)
	    CALL WRUSER(' ',ISTAT)
	  ENDIF
C
C DEFAULT OUTPUT TITLE IS EITHER THE INPUT TITLE, OR BLANK.
C THEN OBTAIN A NEW ONE FROM THE ENVIRONMENT
C
	  TITLE(1)=' '
	  IF(IERRI.EQ.0) THEN
	    CALL GTDSCR('INPUT','TITLE','CHARACTER',IVAL,RVAL,TITLE(1),
     +      IERR)
          ENDIF
          CALL RDKEYC('TITLE',.TRUE.,1,TITLE,NVAL,ISTAT)
C
C COPY INPUT DESCRIPTOR TO OUTPUT (IF AVAILABLE) THEN UPDATE 
C DESCRIPTOR ITEMS
C
	  IF(IERRI.EQ.0) CALL CYDSCR('INPUT','OUTPUT',ISTAT)
	  CALL PTDSCR('OUTPUT','NITEM','INTEGER',7,RVAL,CVAL,IERR)
	  CALL PTDSCR('OUTPUT','LSTLEN','INTEGER',LSTLEN,RVAL,CVAL,
     +    IERR)
	  CALL PTDSCR('OUTPUT','TITLE','CHARACTER',IVAL,RVAL,TITLE(1),
     +	  IERR)
	ENDIF
C
C CALL ASP_PAN TO ALLOW THE USER TO REPOSITION THE IMAGE
C
        CALL WRUSER(' ',ISTAT)
        CALL WRUSER(' REPOSITION IMAGE FOR FUTURE USE IF NECESSARY...',
     +  ISTAT)
        CALL ASP_PAN(IX,IY,RX,RY)
      ENDIF
C
C FREE ALL DATA AREAS AND RETURN
C
   99 CALL FRDATA(' ',ISTAT)
      RETURN
      END
