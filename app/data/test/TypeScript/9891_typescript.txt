interface IDataFSM {
    name: string,
    from: string,
    to: string,
    onEnter: Function,
    onExit: Function,
    onUpdate: Function,
}

export class FSM {
    stateMap: { [index: string]: IDataFSM }
    currentState: string
    currentLogic: Function
    stack: string[]
    target: any
    constructor(states: IDataFSM[]) {
        this.stateMap = {}
        this.stack = []
        states.forEach(state => this.stateMap[state.name] = state)
    }
    switchState(newState: string) {
        var oldState = this.currentState
        var oldData = this.stateMap[oldState]
        if (oldData && oldData.onExit) oldData.onExit(this.target)
        this.currentState = newState
        var newData = this.stateMap[newState]
        if (newState && newData.onEnter) newData.onEnter(this.target)
    }
    pushState(newState: string) {
        this.stack.push(this.currentState)
        this.switchState(newState)
    }
    popState() {
        var restoreState = this.stack.pop()
        if (restoreState) this.switchState(restoreState)
    }
    update(dt: number) {
        if (this.stateMap[this.currentState].onUpdate) {
            this.stateMap[this.currentState].onUpdate(this.target, dt)
        }
    }
}