import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';

import { BlogCategory, BlogCategoryFilter } from './blog.category';

import { PaginatedResult } from '../../shared/interfaces/pagination';
import { ApiService } from '../../shared/api.service';
import { Headers, RequestOptions} from '@angular/http';

@Injectable()
export class BlogCategoryService {
    private headers = new Headers({'Content-Type': 'application/json'});

    constructor(
        private API: ApiService
    ) {}

    getCategories(filter: BlogCategoryFilter = new BlogCategoryFilter): Observable<PaginatedResult<BlogCategory[]>> {
        return this.API.get('blogs/categories?' + filter.getEndpointParameters())
            .map(res => res.json())
            .catch(this.observableHandleError);
    }

    getCategory(id: number): Observable<BlogCategory> {
        return this.API.get('blogs/categories/' + id)
            .map(res => <BlogCategory> res.json())
            .catch(this.observableHandleError);
    }

    delete(id: number): Observable<void> {
        return this.API.delete('blogs/categories/' + id, {headers: this.headers})
            .map(() => null)
            .catch(this.observableHandleError);
    }

    create(blogCategory: Object): Observable<BlogCategory> {
        let options = new RequestOptions({ headers: this.headers });
        let body = JSON.stringify(blogCategory);

        return this.API.post('blogs/categories', body, options)
            .map(response => response.json())
            .catch(this.observableHandleError);
    }

    update(categoryID: number, categoryData: Object): Observable<void> {
        let options = new RequestOptions({ headers: this.headers });
        let body = JSON.stringify(categoryData);

        return this.API.put('blogs/categories/' + categoryID, body, options)
            .map(() => null)
            .catch(this.observableHandleError);
    }

    private observableHandleError (error: any) {
        // in a real world app, we may send the server to some remote logging infrastructure
        // instead of just logging it to the console
        let errorMessage = (error.message) ? error.message :
            error.status ? `${error.status} - ${error.statusText}` : 'Server error - Your request could not be processed';
        console.error(error);
        return Observable.throw(errorMessage || 'Server error - Your request could not be processed');
    }
}
