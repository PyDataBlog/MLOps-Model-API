import { Next, Request, Response } from "restify";

export interface PaginationMiddlewareConfig {
    perPage?: number;
    count: number;
}

export interface PaginatedResponse extends Response {
    sendPaginatedResponse(status?: any, body?: any, headers?: { [header: string]: string }): any;
}

export interface PaginatedRequest extends Request {
    per_page: number;
    page: number;
}

export class PaginationMiddleware {
    /**
     * Pagination Middleware Request handler
     *
     * @param config pagination options
     */
    public handlePagination(config: PaginationMiddlewareConfig) {
        if (config.perPage === undefined) {
            config.perPage = 30;
        }

        return (req: PaginatedRequest, res: PaginatedResponse, next: Next) => {
            const page = (req.query.page !== undefined) ? Number(req.query.page) : 1;
            const perPage = (req.query.per_page !== undefined) ? Number(req.query.per_page) : config.perPage;

            res.sendPaginatedResponse = (code: number, object: any, headers?: { [header: string]: string }): any => {
                const link: string[] = [];
                const baseUrl: string = (req.isSecure() ? "https://" : "http://") + req.headers.host;
                const lastPage = config.count / perPage;

                // If we are not on the last page, display the last page and next
                if (page < lastPage) {
                    link.push("<" + baseUrl + "?page=" + (page + 1) + "&per_page=" + perPage + '>; rel="next"');
                    link.push("<" + baseUrl + "?page=" + lastPage + "&per_page=" + perPage + '>; rel="last"');
                }

                // If we are not on the first page, display the first page
                if (page > 1) {
                    link.push("<" + baseUrl + "?page=1&per_page=" + perPage + '>; rel="first"');
                    link.push("<" + baseUrl + "?page=" + (page - 1) + "&per_page=" + perPage + '>; rel="prev"');
                }

                res.setHeader("link", link);
                res.send(code, object, headers);
            };

            next();
        };
    }
}
