import * as React from 'react';
import { colors } from "../../../../../../../../../data/themeOptions";
import {prefixer} from '../../../../../../../../../data/helpers/prefixer';

interface IProps {
    isLaptop: boolean
    isHovered: boolean
}

interface IState {}

export class UnderlineToArrow extends React.Component<IProps, IState> {

    public constructor(props?: any, context?: any) {
        super(props, context);
    }

    render(): JSX.Element {
        const { isHovered, isLaptop } = this.props;

        const thickness = 2;
        const headRadius = 20;
        const sectionLength = 40;
        const itemWidth = (isLaptop ? 380 : 640) * 0.25;

        const styles = {
            underlineToArrow:
                isHovered
                    ?   prefixer({
                            position: "absolute",
                            top: 0,
                            left: 0,
                            width: itemWidth,
                            height: thickness,
                            background: colors.std,
                            transform: "rotate(0deg) translateY(42px)",
                            transition: "transform 500ms, width 500ms"
                        })
                    :   prefixer({
                            position: "absolute",
                            top: 0,
                            left: 0,
                            width: itemWidth,
                            height: thickness,
                            background: colors.std,
                            transform: `rotate(0deg) translateY(50px)`,
                            transition: "transform 500ms, width 500ms"
                        }),
            underlineToArrow__headTop:
                isHovered
                    ?    prefixer({
                            position: "absolute",
                            top: 0,
                            right: -headRadius * 0.25,
                            width: headRadius * 0.5,
                            height: thickness,
                            background: colors.std,
                            transform: `rotate(-45deg) translateX(-50%)`,
                            transition: "transform 500ms, right 500ms, width 500ms"
                        })
                    :   prefixer({
                            position: "absolute",
                            top: 0,
                            right: 0,
                            width: sectionLength,
                            height: thickness,
                            background: colors.std,
                            transform: `rotate(0deg) translateX(40px)`,
                            transition: "transform 500ms, right 500ms, width 500ms"
                        }),
            underlineToArrow__headBottom:
                isHovered
                    ?    prefixer({
                            position: "absolute",
                            top: 0,
                            right: -headRadius * 0.25,
                            width: headRadius * 0.5,
                            height: thickness,
                            background: colors.std,
                            transform: `rotate(45deg) translateX(-50%)`,
                            transition: "transform 500ms, right 500ms, width 500ms"
                        })
                    :   prefixer({
                            position: "absolute",
                            top: 0,
                            right: 0,
                            width: sectionLength,
                            height: thickness,
                            background: colors.std,
                            transform: `rotate(0deg) translateX(80px)`,
                            transition: "transform 500ms, right 500ms, width 500ms"
                        })
        } as any;
        return (
            <div style={styles.underlineToArrow}>
                <div style={ styles.underlineToArrow__headTop }/>
                <div style={ styles.underlineToArrow__headBottom }/>
            </div>
        );
    }
}
