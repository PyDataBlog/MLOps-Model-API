<?php

/*
 * This file is part of KoolKode Async.
 *
 * (c) Martin SchrÃ¶der <m.schroeder2007@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace KoolKode\Async\Socket;

use PHPUnit\Framework\TestCase;

/**
 * @covers KoolKode\Async\Socket\Connect
 */
class ConnectTest extends TestCase
{
    public function testDefaults()
    {
        $connect = new Connect();
        
        $this->assertEquals(5000, $connect->getTimeout());
        $this->assertEquals(2, $connect->getMaxAttempts());
        $this->assertEquals(0xFFFF, $connect->getBufferSize());
        $this->assertFalse($connect->toArray()['socket']['tcp_nodelay']);
    }
    
    public function testDetectsInvalidTimeoutInConstructor()
    {
        $this->expectException(\InvalidArgumentException::class);
        
        new Connect(0);
    }

    public function testCanSetTimeout()
    {
        $connect = new Connect();
        $connect = $connect->withTimeout(1000);
        
        $this->assertEquals(1000, $connect->getTimeout());
    }
    
    public function testDetectsInvalidTimeout()
    {
        $connect = new Connect();
        
        $this->expectException(\InvalidArgumentException::class);
        
        $connect->withTimeout(0);
    }
    
    public function testDetectsInvalidMaxAttemptsInConstructor()
    {
        $this->expectException(\InvalidArgumentException::class);
        
        new Connect(1000, 0);
    }
    
    public function testCanSetMaxAttempts()
    {
        $connect = new Connect();
        $connect = $connect->withMaxAttempts(5);
        
        $this->assertEquals(5, $connect->getMaxAttempts());
    }

    public function testDetectsInvalidMaxAttempts()
    {
        $connect = new Connect();
        
        $this->expectException(\InvalidArgumentException::class);
        
        $connect->withMaxAttempts(0);
    }
    
    public function testCanSetBufferSize()
    {
        $connect = new Connect();
        $connect = $connect->withBufferSize(256);
        
        $this->assertEquals(256, $connect->getBufferSize());
    }
    
    public function testDetectsInvalidBufferSize()
    {
        $connect = new Connect();
        
        $this->expectException(\InvalidArgumentException::class);
        
        $connect->withBufferSize(-1);
    }
    
    public function testDetectsInvalidBufferSizeInConstructor()
    {
        $this->expectException(\InvalidArgumentException::class);
        
        new Connect(100, 1, -1);
    }
    
    public function testCanSetTcpNodelay()
    {
        $connect = new Connect();
        $connect = $connect->withTcpNodelay(true);
        
        $this->assertTrue($connect->toArray()['socket']['tcp_nodelay']);
    }
}
