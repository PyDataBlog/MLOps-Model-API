<?php
/**
*
* @author Reense Meetsma, 2015
* @copyright Reense Meetsma under the MIT License, which can be found in the LICENSE.txt File.
*
* This file will be required  by mvc-example/index.php, and contains all the logic
* Our application contains.
*/

/**
* We start a sessin here, so that we can use it every file we require/include
* after this one.
*/
session_start();

class mvcExample
{
	/**
	* The default controller ,we might set
	* This to a different one later.
	*/
	private $_controller = 'example';

	/**
	* We call the init function in the controller
	* we require above here.
	*/
	private $_method = 'init';

	/**
	* The parameters we are sending with the method, we
	* are calling above here.
	*/
	private $_parameters = [];

	/**
	* This method is being called by the index.php file in mvc-example/.
	*/
	public function init() {

		/**
		* url is an array that contains all the parts of the URL, in an array.
		* If someone goes to mvc-example/example/helloworld/,
		* $url will look like this:
		* $url[0] => 'example'
		* $url[1] => 'helloworld'.
		*/
		$url = $this->parseURL();


		/**
		* Here we check if the first parameter contains a valid controller.
		* If the first parameter is 'example', and the file mvc-example/application/controllers/exampleController.php
		* exists, we set the _controller paramter to the first parameter, and then unset the first parameter,
		* for later use.
		*
		*/
		if(file_exists('application/controllers/'. $url[0].'Controller.php')) {
			$this->_controller = $url[0];
			unset($url[0]);
		}

		/**
		* We then require the controller. If the above if statement was a valid one,
		* And set the $this->_controller, than it will require the controller with the
		* $url[0] parameter. But if it didn't, it will require the default one, we declared
		* before the class, which is the exampleController.
		*/
		require_once 'application/controllers/'.$this->_controller.'Controller.php';

		/**
		* Create a new instance of the class we created above. The file mvc-example/application/controllers/exampleController.php
		* Contains the class example, which we instantiate here.
		*/
		$this->_controller = new $this->_controller;


		/**
		* If there are any parameters, (besides $url[0], which if it would have exists, was unset on line 61), we
		* fill _parameters with that. We use a shorthanded if statement, but if you don't understand it, it basicly
		* says, that if url isset, and not false, we fill the parameters with array_values($url) (which will just re-order the array to
		* be 0 1 2, because we deleted the $url[0] it would've been 1 2 3). But if it's false, it will just stay an empty array.
		*/
		$this->_parameters = $url ? array_values($url) : [];

		/**
		* call_user_func_array is a function that will create a class instance, and call a method inside of that,
		* with a specific set of parameters. The _controller is the one we defined first, which will be example by default,
		* but if there was a custom one, it will be the one in the $url[0] parameter. The method is by default 'init'.
		* If there were any other parameters, it will send them with it.
		* This is a shorthanded function of
		* $this->_controller->this->_method($this->_parameters).
		*
		*/
		call_user_func_array([$this->_controller, $this->_method], [$this->_parameters]);



	}

	/**
	* @return string
	*/
	private function parseURL() {
		/**
		* If there is a url set, we parse it.
		* if the URL would be mvc-example/test/foo/bar/?e=g than the last parameter would be ?e=g.
		*/
		if(isset($_GET['url'])) {
			return $url = explode('/',filter_var(rtrim($_GET['url'], '/'),FILTER_SANITIZE_URL));
		}
	}
}
