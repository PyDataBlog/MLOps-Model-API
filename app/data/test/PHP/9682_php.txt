<?php

namespace ShaneDaSilva\Darklaunch\Operator;

use PHPUnit_Framework_TestCase;
use ShaneDaSilva\Darklaunch\Operator\LessThanEqual;

class LessThanEqualOperatorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @test
     * @dataProvider greaterValues
     */
    public function it_does_not_apply_to_greater_values($value, $argument)
    {
        $operator = new LessThanEqual($value);
        $this->assertFalse($operator->appliesTo($argument));
    }

    public function greaterValues()
    {
        return [
            [42,  43],
            [42,  1337],
            [42,  42.1],
            [0.1, 0.2]
        ];
    }

    /**
     * @test
     * @dataProvider equalValues
     */
    public function it_applies_to_equal_values($value, $argument)
    {
        $operator = new LessThanEqual($value);
        $this->assertTrue($operator->appliesTo($argument));
    }

    public function equalValues()
    {
        return [
            [42,   42],
            [42.1, 42.1],
            [0.1,  0.1]
        ];
    }

    /**
     * @test
     * @dataProvider smallerValues
     */
    public function it_applies_to_smaller_values($value, $argument)
    {
        $operator = new LessThanEqual($value);
        $this->assertTrue($operator->appliesTo($argument));
    }

    public function smallerValues()
    {
        return [
            [43, 42],
            [1337, 42],
            [42.1, 42],
            [0.2, 0.1]
        ];
    }

    /**
     * @test
     */
    public function it_exposes_its_name()
    {
        $operator = new LessThanEqual(42);
        $this->assertEquals($operator->getName(), 'lessThanEqual');
    }

    /**
     * @test
     */
    public function it_exposes_its_value()
    {
        $operator = new LessThanEqual(42);
        $this->assertEquals(42, $operator->getValue());
    }

}
