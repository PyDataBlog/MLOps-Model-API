using System.IO;
using System.Text;
using Easily.Framework.Bases;
using Easily.Framework.Utility;
using Google.ProtocolBuffers;

namespace Easily.Framework.Network {
		
/// <summary>
/// @author Easily
/// </summary>
public class SendStream : BaseObject {

	private readonly MemoryStream _stream;
	private readonly BinaryWriter _writer;

	public long Position {
		get { return _stream.Position; }
		set { _stream.Position = value; }
	}

	public long Length {
		get { return _stream.Length; }
	}

	public byte[] ToArray() {
		return _stream.ToArray();
	}

	public SendStream() {
		_stream = new MemoryStream();
		_writer = new BinaryWriter(_stream);
	}

	public void Write(byte value) {
		_writer.Write(value);
	}

	public void Write(byte[] value) {
		_writer.Write(value);
	}

	public void Write(byte[] value, int index, int offset) {
		_writer.Write(value, index, offset);
	}

	public void Write(ushort value) {
		_writer.Write(value);
	}

	public void Write(uint value) {
		_writer.Write(value);
	}

	public void Write(ulong value) {
		_writer.Write(value);
	}

	public void Write(string value) {
		var bytes = Encoding.UTF8.GetBytes(value);
		Write((ushort)bytes.Length);
		Write(bytes);
	}

	public void Write(IMessage value) {
		Write(value.GetType().Name);
		using (new SectionWriter(this)) {
			value.WriteTo(_stream);
		}
	}

	public void Write(NetPacket packet) {
		packet.WriteTo(this);
	}

	override protected void Destroy() {
		_writer.Dispose();
		_stream.Dispose();
		base.Destroy();
	}

}
	
}