namespace AlgoDS.Leetcode
{
    using System;

    public sealed class _10 : IOnlineProblem
    {
        /// <summary>
        /// [[Problem]]
        /// Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.
        /// '.' Matches any single character.
        /// '*' Matches zero or more of the preceding element.
        /// The matching should cover the entire input string (not partial).
        /// Note:
        /// s could be empty and contains only lowercase letters a-z.
        /// p could be empty and contains only lowercase letters a-z, and characters like.or*.
        /// [[Example]]
        /// s = "aa"
        /// p = "a"
        /// Output: false
        /// Explanation: "a" does not match the entire string "aa".
        /// Input:
        /// s = "aa"
        /// p = "a*"
        /// Output: true
        /// Explanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
        /// Input:
        /// s = "ab"
        /// p = ".*"
        /// Output: true
        /// Explanation: ".*" means "zero or more (*) of any character (.)".
        /// s = "aab"
        /// p = "c*a*b"
        /// Output: true
        /// Explanation: c can be repeated 0 times, a can be repeated 1 time.Therefore it matches "aab".
        /// </summary>
        public void Solve()
        {
            Console.WriteLine(this.IsMatch("aa", "a"));
            Console.WriteLine(this.IsMatch("aa", "a*"));
            Console.WriteLine(this.IsMatch("ab", ".*"));
            Console.WriteLine(this.IsMatch("aab", "c*a*b"));
            Console.WriteLine(this.IsMatch("mississippi", "mis*is*p*."));
        }

        public bool IsMatch(string s, string p)
        {
            return false;
        }
    }
}
