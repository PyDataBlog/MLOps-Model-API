namespace Rikrop.Core.Framework.Algorithms.CnfTransformer
{
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Òðàíñôîðìàöèÿ, ïðèâîäÿùàÿ äåðåâî â ÊÍÔ ôîðìó
    /// Êîðåíü - äèçúþíêöèÿ
    /// Äåòè êîðíÿ - ýëåìåíòàðíûå êîíúþíêöèè
    /// </summary>
    public class CnfLogicalTreeTransformation : ILogicalTreeTransformation
    {
        private readonly TreeHeightReductionTransformation _treeHeightReductionTransformation;

        private readonly DeMorganNegationPuller _deMorganNegationPuller;

        public CnfLogicalTreeTransformation()
        {
            _treeHeightReductionTransformation = new TreeHeightReductionTransformation();
            _deMorganNegationPuller = new DeMorganNegationPuller();
        }

        public void Transform(LogicalTreeNode root)
        {
            // Âíà÷àëå èçáàâëÿåìñÿ îò âñåõ îòðèöàíèé â íåëèñòüÿõ
            // Ïîòîì ðåäóöèðóåì äåðåâî ïî âûñîòå ê ÊÍÔ ôîðìå
            PullNegationsDown(root);

            ReductHeight(root);
        }

        private void PullNegationsDown(LogicalTreeNode root)
        {
            _deMorganNegationPuller.Transform(root);
        }

        private void ReductHeight(LogicalTreeNode root)
        {
            // Ò.ê. âûñîòà êàêîãî-ëèáî ýëåìåíòà äåðåâà íå ìîæåò óâåëè÷èòüñÿ,
            // è âûñîòà âåðøèíû ïîñëå ðåäóêöèè íèêîãäà íå ïðåâûøàåò 3 (âûñîòà ÊÍÔ)
            // òî ïðîõîäÿ îò ñàìîãî "íèçêîãî" ýëåìåíòà ê ñàìîìó "âûñîêîìó",
            // ãàðàíòèðîâàííî â êîíöå ïîëó÷èì ïðàâèëüíûé ðåçóëüòàò.
            var heightOrderedNodes = GetNodesOrderedByHeight(root).ToArray();

            foreach (var node in heightOrderedNodes)
            {
                _treeHeightReductionTransformation.Transform(node);
            }
        }

        /// <summary>
        /// Âîçâðàùàåò ñïèñîê âåðøèí äåðåâà, óïîðÿäî÷åííûå ïî âûñîòå 
        /// </summary>
        /// <param name="root">Êîðåíü äåðåâà, äëÿ êîòîðîãî âû÷èñëÿåòñÿ óïîðÿäî÷åííûé ñïèñîê åãî âåðøèí</param>
        /// <returns>Ñïèñîê âåðøèí äåðåâà, óïîðÿäî÷åííûå ïî âûñîòå</returns>
        private IEnumerable<LogicalTreeNode> GetNodesOrderedByHeight(LogicalTreeNode root)
        {
            var nodes = GetNodes(root);

            return nodes.OrderBy(x => x.Height);
        }
        
        /// <summary>
        /// Âîçâðàùàåò âñå âåðøèíû äåðåâà, âêëþ÷àÿ êîðåíü
        /// </summary>
        /// <param name="root">Êîðåíü äåðåâà, äëÿ êîòîðîãî âû÷èñëÿåòñÿ ñïèñîê åãî âåðøèí</param>
        /// <returns>Ñïèñîê âåðøèí äåðåâà</returns>
        private IEnumerable<LogicalTreeNode> GetNodes(LogicalTreeNode root)
        {
            var result = new List<LogicalTreeNode>();
            
            result.Add(root);
            
            foreach (var node in root.Children)
            {
                result.AddRange(GetNodes(node));
            }

            return result;
        }
    }
}