//
// Copyright (C) 2016 Andrew Lord
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License.
//
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
namespace AndrewLord.UnityAdvertBridge {

  using UnityEngine;
  using System;

  /// <summary>
  /// Display in-game adverts from many different sources. If an advert from a particular source fails to load it will 
  /// try the next source. After a particular source fails a set number of times, it will be blocked until the next 
  /// time the game is brought into the foreground.
  /// </summary>
  public class AdvertBridge : MonoBehaviour, AdvertCallback {

    private const int DefaultLoadFailCountLimit = 3;
    private const int AdvertNotFound = -1;

    /// <summary>
    /// Advert sources you want to use, in order of preference.
    /// </summary>
    public GameAdvert[] adverts;

    /// <summary>
    /// The limit for the number of times an advert source can fail to load before it is blocked until the next time 
    /// game is brought into foreground.
    /// </summary>
    public int loadFailCountLimit = DefaultLoadFailCountLimit;

    private int currentAdvertIndex = AdvertNotFound;

    /// <summary>
    /// Event handler for an advert being clicked on.
    /// </summary>
    public delegate void AdvertClickedEventHandler();

    /// <summary>
    /// Event handler for an advert being completed.
    /// </summary>
    public delegate void AdvertCompletedEventHandler();

    /// <summary>
    /// Event handler for an advert being cancelled.
    /// </summary>
    public delegate void AdvertCancelledEventHandler();
  
    /// <summary>
    /// An advert has been clicked.
    /// </summary>
    public event AdvertClickedEventHandler AdvertClicked = delegate {};

    /// <summary>
    /// An advert has been completed. For example, for a rewarded video advert this would be the user watching the video 
    /// to completion. It should signify that the has user completed with the advert to the extent you would want as an 
    /// advertiser, as opposed to the user cancelling the advert by closing it.
    /// </summary>
    public event AdvertCompletedEventHandler AdvertCompleted = delegate {};

    /// <summary>
    /// An advert has been cancelled. This would signify that the user has closed the advert with a 
    /// close button for example.
    /// </summary>
    public event AdvertCancelledEventHandler AdvertCancelled = delegate {};

    void Awake() {
      AddSelfToAdverts();
      SetCurrentAdvertToFirst();
    }

    private void AddSelfToAdverts() {
      Array.ForEach(adverts, advert => advert.Callback = this);
    }

    private void SetCurrentAdvertToFirst() {
      if (currentAdvertIndex < adverts.Length) {
        currentAdvertIndex = 0;
      }
    }

    void OnEnable() {
      ResetLoadFailCounters();
    }

    private void ResetLoadFailCounters() {
      Array.ForEach(adverts, advert => advert.ResetLoadFailCount());
    }

    void OnApplicationPause(bool pause) {
      if (!pause) {
        ResetLoadFailCounters();
      }
    }

    private bool IsCurrentAdvertEnabled() {
      return currentAdvertIndex != AdvertNotFound;
    }

    private bool ShouldLoadAdvert() {
      return IsCurrentAdvertEnabled() && !IsCurrentAdvertLoaded();
    }

    private bool ShouldShowAdvert() {
      return IsCurrentAdvertEnabled() && IsCurrentAdvertLoaded();
    }

    private bool IsCurrentAdvertLoaded() {
      return adverts[currentAdvertIndex].IsLoaded();
    }

    /// <summary>
    /// Load an advert, so that it is ready to be displayed. For many advert sources this will involve caching the 
    /// advert from the network so that it is faster to display and so that it can be shown with a poor network 
    /// connection.
    /// </summary>
    public void LoadAdvert() {
      if (ShouldLoadAdvert()) {
        adverts[currentAdvertIndex].Load();
      }
    }

    /// <summary>
    /// Show an advert. This will display it to the user for them to interact with.
    /// </summary>
    public void ShowAdvert() {
      if (ShouldShowAdvert()) {
        adverts[currentAdvertIndex].Show();
      }
    }

    /// <summary>
    /// The current advert failed to load, so load one from the next source.
    /// </summary>
    public void AdvertFailedToLoad() {
      currentAdvertIndex = FindNextAdvertIndex();
      LoadAdvert();
    }

    private int FindNextAdvertIndex() {
      int nextAdvertIndex = FindAfterCurrentAdvert();
      if (nextAdvertIndex == AdvertNotFound) {
        return FindBeforeCurrentAdvert();
      }
      return nextAdvertIndex;
    }

    private int FindAfterCurrentAdvert() {
      int advertCount = adverts.Length;
      for (int i = currentAdvertIndex + 1; i < advertCount; i++) {
        if (IsValidAdvert(i)) {
          return i;
        }
      }
      return AdvertNotFound;
    }

    private bool IsValidAdvert(int advertIndex) {
      return adverts[advertIndex].LoadFailCount < loadFailCountLimit;
    }

    private int FindBeforeCurrentAdvert() {
      for (int i = 0; i < currentAdvertIndex; i++) {
        if (IsValidAdvert(i)) {
          return i;
        }
      }
      return AdvertNotFound;
    }

    /// <summary>
    /// The current advert was clicked.
    /// </summary>
    public void AdvertWasClicked() {
      AdvertClicked();
    }

    /// <summary>
    /// The current advert was completed.
    /// </summary>
    public void AdvertWasCompleted() {
      AdvertCompleted();
    }

    /// <summary>
    /// The current advert was cancelled.
    /// </summary>
    public void AdvertWasCancelled() {
      AdvertCancelled();
    }
  }
}