using System;
using Tutor.Structure;

namespace Tutor.Theory
{
	/// <summary>
	/// Summary description for Field.
	/// </summary>
	/// 
	public class EvalFailed : Exception
	{
	}

	public class Field
	{
		public static EquConstant Eval(Equation E)
		{
			if(E is EquConstant)
				return (EquConstant) E;

			if(E is EquAddition)
			{
				EquAddition V = (EquAddition) E;
				long result = 0;
				foreach(Equation P in V._Terms)
				{
					EquConstant S = Eval(P);
					result += S.Value;
				}
				return new EquConstant(result);
			}

			if(E is EquAbsoluteValue)
			{
				EquAbsoluteValue V = (EquAbsoluteValue) E;
				EquConstant S = Eval(V.Term);
				return new EquConstant((S.Value < 0) ? (-S.Value) : S.Value );
			}

			if(E is EquMultiplication)
			{
				EquMultiplication V = (EquMultiplication) E;
				long result = 1;
				foreach(Equation P in V._Factors)
				{
					EquConstant S = Eval(P);
					result *= S.Value;
				}
				return new EquConstant(result);
			}
			/*
			if(E is EquPower)
			{
				EquPower V = (EquPower) E;
				EquConstant B = Eval(V.Base);
				EquConstant P = Eval(V.Power);
				if(P.Value > 0)
				{

				}
				long result = Math.Pow(.Pow(B.Value, P.Value);
				return new EquConstant(result);
			}
			*/
			if(E is EquNegation)
			{
				EquNegation V = (EquNegation) E;
				EquConstant T = Eval(V.Term);
				return new EquConstant(-T.Value);
			}

			throw new EvalFailed();
		}
	}
}
