; prints the value of DX as hex
print_hex:
	pusha					; save the registers to the stack
	
	mov cx, 4				; Start the counter: we want to print 4 characters
							; 4 bits per char, so we're printing a total of 16 bits
	
char_loop:
	dec cx				; Decrement the counter
	
	mov ax, dx			; copy dx into ax so we can mask it for the last chars
	shr dx, 4			; shift dx 4 bits to the right
	and ax, 0xf			; mask ah to get the last 4 bits
	
	mov bx, HEX_OUT		; set bc to the memory address of our string
	add bx, 2			; skip the '0x'
	add bx, cx			; add the current counter to the address
	
	cmp ax, 0xa			; Check to see if it's a letter or number
	jl set_letter		; If it's a number, go straight to setting the value
	add byte [bx], 7	; If it's a letter, add 7 to cover the distance in ASCII
	
set_letter:
	add byte [bx], al	; Add the value of the byte to the char at bx (0)
	
	cmp cx, 0			; if the counter is 0
	je print_hex_done	; 	finish
	jmp char_loop		; otherwise, loop again

print_hex_done:	
	mov bx, HEX_OUT		; print the string pointed to
	call print_string	; by BX
	call hex_reset		; reset the HEX_OUT to 0x0000
	popa				; pop the initial registers to the stack
	ret
	
hex_reset:
	mov bx, HEX_OUT
	add bx, 2			; skip the 0x

start_reset:
	cmp byte [bx],0		; while not null
	jne set_reset		; put 0 as ASCII string
	ret

set_reset:
	mov byte [bx], 0x30 ; set byte at index to '0'
	inc bx				; increment index
	jmp start_reset		; loop

; global variables
HEX_OUT: db '0x0000',0