    # Exercise: Write a program that reads two numbers. The program must print
    # what number is the largest.
    
.data
        #.ascii str - stores 'str' in memory
        #.asciiz str - stores 'str' in memory, with a "null" (ascii code 0)
        # terminator. This is "C-style" string.

        #.byte b1,...,bn - stores 'n bytes' contiguosly in memory (10 or hex)
        
        #.halfword h1,...,hn - stores 'n halfwords aligned'. Addresses divided
        #by two  (10 or hex)' 

        #.word w1,...,wn - stores 'n words aligned'. Addresses divided by four
        #(10 or hex)

        #OBS: 1 word = 2 halfwords = 4 bytes

       #.space n - reserves 'n bytes' of space in memory

        first_number_request_text: .asciiz "\Digite o primeiro numero: "
        second_number_request_text: .asciiz "\Digite o segundo numero: "
        output_response_text: .asciiz "\Maior numero: "
        
        first_number: .word 4

.text
        
    main:
        la $a0, first_number_request_text
        jal print_string
        
        jal read_integer
        add $s0, $zero, $v0
        
        la $a0, second_number_request_text
        jal print_string

        jal read_integer
        add $s1, $zero, $v0

        add $a0, $zero, $s0
        add $a1, $zero, $s1
        jal return_greater_number

        add $s2, $zero, $v0

        la $a0, output_response_text
        jal print_string

        add $a0, $zero, $s0
        jal print_integer

        jal exit
    
    return_greater_number:
        slt $t0, $a0, $a1
        beq $t0, $zero, case_a1_bigger 
        
        case_a0_bigger:
        add $v0, $zero, $a0
        j exit_beq

        case_a1_bigger:
        add $v0, $zero, $a1

        exit_beq:
#        add $t0, $zero, $v0 #debug
#        jal exit #debug
        jr $ra

    read_integer:
        li $v0, 5
        syscall
        jr $ra
        
    print_integer:
        li $v0, 1
        syscall
        jr $ra

    print_string:
        li $v0, 4
        syscall
        jr $ra

    exit:
        li $v0 10
        syscall
