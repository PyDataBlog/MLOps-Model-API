package demo.model

import demo.model.Application.{ getLinesFromResource, perform0 }
import org.scalatest.{FlatSpec, Matchers}

/**
  * Created by dv on 10/09/2017.
  */
class ProcessingSpec extends FlatSpec {

  "Partner's purchase transaction" should "decrease stock qty and increase balance" in {
    for {
      c1 <- Client("C1\t1000\t130\t240\t760\t320")
//      c2 <- Client("C2\t1000\t130\t240\t760\t320")
//      o1 <- Order("C1\ts\tC\t13\t2")
      o2 <- Order("C2\tb\tC\t13\t2")
    } yield {
      val oldBalance = c1.balance
      val oldQty     = c1.qtyC
      c1.apply(o2)
      assert(c1.balance > oldBalance && c1.qtyC < oldQty)
    }
  }

  "Partner's sell transaction" should "increase stock qty and decrease balance" in {
    for {
//      c1 <- Client("C1\t1000\t130\t240\t760\t320")
      c2 <- Client("C2\t1000\t130\t240\t760\t320")
      o1 <- Order("C1\ts\tC\t13\t2")
//      o2 <- Order("C2\tb\tC\t13\t2")
    } yield {
      val oldBalance = c2.balance
      val oldQty     = c2.qtyC
      c2.apply(o1)
      assert(c2.balance < oldBalance && c2.qtyC > oldQty)
    }
  }


  "Any given order list" should "not alter overall balance" in {
    val clientSource = getLinesFromResource("clients.txt")
    val ordersSource = getLinesFromResource("orders.txt")

    val clients = clientSource
      .map( Client apply )
      .flatten
      .map(c => c.id -> c)
      .toMap

    val orders = ordersSource
      .map( Order apply )
      .flatten

    val sum1 = checksum(clients.values)
    perform0(clients, orders)
    val sum2 = checksum(clients.values)
    require( sum1.zip(sum2).forall(x => x._1 == x._2) )
  }


  private def checksum(cls:Iterable[Client]) = {
    val arr = Array.ofDim[Long](5)
    cls.foreach { cl =>
      arr(0) += cl.balance
      arr(1) += cl.qtyA
      arr(2) += cl.qtyB
      arr(3) += cl.qtyC
      arr(4) += cl.qtyD
    }
    arr
  }

}
