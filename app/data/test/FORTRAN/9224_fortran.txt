!
! Distinct primes factors
!
! Problem 47
!
! The first two consecutive numbers to have two distinct prime factors are:
!
!   14 = 2 × 7
!   15 = 3 × 5
!
! The first three consecutive numbers to have three distinct prime factors are:
!
!   644 = 2^2 × 7 × 23
!   645 = 3 × 5 × 43
!   646 = 2 × 17 × 19.
!
! Find the first four consecutive integers to have four distinct prime factors
! each. What is the first of these numbers?
!
program distinct_primes_factor
    implicit none
    integer, parameter :: consecutive_numbers = 4
    integer, parameter :: distinct_numbers = 4
    call solver
    contains

    subroutine smallest_prime_factor(max_num, spf_table)
        integer, intent(in) :: max_num
        integer, allocatable, intent(inout) :: spf_table(:)
        integer, allocatable :: tmp_table(:)
        integer :: table_size, prime, i, j

        allocate(tmp_table(max_num))
        tmp_table = 0
        table_size = 0
        if (allocated(spf_table)) then
            table_size = ubound(spf_table, 1)
            tmp_table(1:table_size) = spf_table
        end if
        spf_table = tmp_table

        do i = 2, max_num
            if (spf_table(i) == 0) then
                spf_table(i) = i
            else if (spf_table(i) /= i) then
                cycle
            end if
            prime = spf_table(i)
            do j = (table_size / prime + 1) * prime, max_num, prime
                if (spf_table(j) == 0) then
                    spf_table(j) = prime
                end if
            end do
        end do
    end subroutine smallest_prime_factor

    subroutine prime_factors(num, spf_table, factors, powers)
        integer, intent(in) :: num, spf_table(:)
        integer, allocatable :: factors(:), powers(:)
        integer :: n, p, q, m, i

        if (num > ubound(spf_table, 1)) error stop
        n = num
        m = int(sqrt(real(n)))
        factors = [ (0, i = 1, m ) ]
        powers = [ (0, i = 1, m ) ]
        i = 0
        q = 0
        do
            p = spf_table(n)
            if (p /= q) then
                q = p
                i = i + 1
            end if
            factors(i) = p
            powers(i) = powers(i) + 1
            if (n == p) exit
            n = n / p
        end do
        factors = factors(1:i)
        powers = powers(1:i)
    end subroutine prime_factors

    subroutine solver
        integer, allocatable :: spf_table(:), factors(:), powers(:)
        integer :: n, m, i, k, first_n

        allocate(spf_table(0))
        n = 2
        k = 0
        do
            if (n > ubound(spf_table, 1)) then
                call smallest_prime_factor(n * 2, spf_table)
            end if
            call prime_factors(n, spf_table, factors, powers)
            m = ubound(factors, 1)
            if (m == consecutive_numbers) then
                print '(i0": "*(i0":"i0:" "))', n, (factors(i), powers(i), i = 1, m)
                k = k + 1
                if (k == 1) then
                    first_n = n
                end if
                if (k == distinct_numbers) exit
            else
                k = 0
            end if
            n = n + 1
        end do
        print *, 'result =', first_n
    end subroutine solver

end program distinct_primes_factor