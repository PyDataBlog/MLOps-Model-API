\part{Getting Started}
\label{part:gettingstarted}
{
\hypersetup{linkcolor=black}
\parttoc
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INTRODUCTION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Introduction}
\label{chapter:introduction}
\section{Functionality and Purpose - What is it?}
Cytomine IRIS, the \textbf{I}nterobserver \textbf{R}el\textbf{I}ability Study module, is an additional module to the Cytomine core web application. 
IRIS is based on Grails (backend) and AngularJS (frontend) and makes use of the Cytomine REST API via the open-source Cytomine Java client. 

Cytomine has initially been developed as a web platform for collaborative and large-scale analysis of biomedical images. 
In its basic functionality, the core application also enables to conduct studies in the so called ``blind mode'', where users do not see the labels of others, and some other image and project properties are anonymized. 

The purpose of IRIS is to provide a convenient interface for labeling hundrets of annotations in a blinded fashion and assess the agreement of observers. 
Furthermore, it extends the standard data model of Cytomine and provides overall progress statistics to each user during the labeling such that a high percentage or - in the best case - all annotations in a project get at a label assigned. 
This is of particular interest for tasks like creating training datasets for supervised machine learning algorithms with a maximum level of interobserver agreement. 
Given the large variability of biological tissue, a strict classification of e.g. cells may be a hard task, depends on the observer's experience and thus many experts have to agree on a particular label. 
IRIS provides analysis and visualization tools for the observer agreement at the level of each annotation. 

\section{Limitations - What is it not?}
\warnbox{Single Label Restriction}{
As of version \appVersion , IRIS is restricted to assign one single label per user only.
This essentially means that you should not use IRIS for projects, where users are allowed to assign labels using the Cytomine core web interface as well.
This is because once a user uses IRIS to assign a label to an annotation, all previously assigned labels are removed!
}

%\section{Outlook}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% System Requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{System Requirements}
\label{section:systemrequirements}
\begin{itemize}
\item Apache Tomcat Servlet Container
\end{itemize}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Downloading/Installation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{System Deployment}
\label{chapter:deployment}

\section{Building from Source}
\label{section:buildingfromsource}
In order to build a self-contained web application archive (\texttt{*.war}), Grails must be installed on the machine you are building IRIS on. 
Download and install Grails version \grailsVersion\ according to the instructions available on \url{https://grails.org/download.html}.

Once Grails is installed, clone the Github repository and build the deployable \texttt{*.war} file from the command line: 
\begin{lstlisting}
$ git clone https://github.com/cytomine/Cytomine-IRIS
$ grails war
\end{lstlisting}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Webapp installation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Installation}
\label{section:installation}


\subsection{Server Configuration Files}
\label{subsec:serverconfig}
\tobedone
Describe externalized configuration and where to put the config files. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUPPORT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Support}
\label{chapter:support}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Bug reports
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Bug Reports}
\label{section:bugreports}


