\input{introduction/preliminaries}
\section{Introduction}

One of the reasons why powerful autonomous service robots cannot be
bought off the shelf is their extremely high price. This is not
surprising, because for every new application the complete robot
software and often even hardware is being developed from scratch. 
The Collaborative Center for Applied Research on Service Robotics (ZAFH
Service Robotics),
funded by the German state of Baden-W\"urttemberg, aims at making
the development of robots cap-{\bf able}, afford-{\bf able}
and depend-{\bf able}. Within this research consortium one subproject
develops the {\bf \tb{}} which uses advanced machine learning
techniques to relieve the robot developer from extensive (and expensive)
programming of sophisticated robot behaviours. Furthermore, current machine
learning research provides numerous examples of
complex robot 
behaviours that today can be learned, but can not be classically programmed, e.g.~\cite{Ted08}.

% We are well aware of the curse of dimensionality inherent to
% reinforcement learning algorithms. Unfortunately we can not provide new
% algorithms that solve this severe problem. 

The \tb{} provides a rich and comfortable toolbox for easy
experimenting with different algorithms and different ways of
learning. For example, for teaching a robot arm to solve some task,
creating a first policy by demonstration learning 
and then improving it by reinforcement learning may lead to a good
behaviour. Similarly, it is possible to improve classically programmed
policies with reinforcement learning.  In cases with rare feedback
from the environment, additional human trainer
feedback may increase the learning speed. In such a spirit, the \tb{}
will support the robot developer in training his robot with heuristic
manual support and guidance in a pragmatic and easily configurable
way. The intended users of the \tb{} are researchers as well as
industrial robot engineers. 

The \tb{} does not contain algorithms that remedy the curse of
dimensionality inherent to reinforcement learning. However, since the \tb{}
facilitates experiments that combine different learning methods and
heuristics, it may help the engineer to solve problems which could not
be solved with reinforcement learning only.


In particular, the \tb{}
comes up with the following features:

\subsection{Learning by demonstration (currently in preparation)} The robot developer demonstrates the
	   task to the robot and the robot tries to imitate the
	   demonstrated behaviour. For
	   example, a robot arm may be trained by a human teacher
	   to solve some task while the teacher manually guides the
	   arm. During this process, at each discrete time step the
	   state of the robot (e.g.\ the vector of the angles of all the
	   joints) and the current action (e.g.\ the vector of the
	   angular accelerations of all or some of the
	   joints) are stored. Then an
	   algorithm for supervised learning (e.g.\ a neural
	   network or decision tree learning) is trained on these data
	   in order to generalize from the finite data sample to the
	   whole state space~\cite{BCDS08,FMD96}. To provide
	   more appropriate feedback for the learning agent, the human
	   teacher can give feedback to the robot either via the GUI or
	   by means of a speech recognition component~\cite{TB08}. 

\subsection{Reinforcement learning} The robot explores its environment by
	   performing actions and receiving reward which may be delayed
	   or missing for many time steps. Based on the reward, the
	   robot continually improves its policy~\cite{SB98}.

\subsection{Java Library} 
Learning algorithms for supervised learning and reinforcement learning
are provided in a Java library. We intend to add other open libraries
	   such as the FANN neural network library as well as the WEKA
	   library with algorithms for supervised learning to the
	   \tb{}.

\subsection{Open Interface Standards} 
           Interfacing a \tb{} project with reinforcement
           learning algorithms in other languages can easily be done
           with the integrated RL-Glue components~\cite{RLGlue}. For connecting
           complex robots and other software such as image processing or
           sensor fusion programs to the \tb{} we provide an
           interface to the middleware SmartSoft
           \cite{Schl06}.
\subsection{Open Source}
	   The \tb{} is open source and we want to invite the
	   machine learning and the robot learning communities to
	   contribute software to this platform. 

%\fehltnoch{Richard, bitte Webseite
%	   www.servicerobotik.hs-weingarten.de/teachingbox
%	   einrichten mit dem 
%	   Hinweis, dass spï¿½testens ab Juni 2009 hier was kommt ...}



