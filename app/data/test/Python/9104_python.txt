from django.test import TestCase

from seedsdb.models import (
    Plant, Tag, Harvest, Activity
)


class TestPlant(TestCase):

    def tearDown(self):
        Plant.objects.all().delete()

    def make_test_plant(self, aliases=None):
        if aliases:
            aliases = "|".join(aliases)
        else:
            aliases = ""

        plant = Plant.objects.create(
            name="Love in idleness",
            description="Test description",
            aliases=aliases
        )
        return plant

    def test_unicode(self):
        "The unicode method of a plant returns the expected value"
        plant = self.make_test_plant()

        self.assertEqual(u"Love in idleness", unicode(plant))

    def test_slug_create(self):
        "Creating a new plant sets the slug as expected "
        plant = self.make_test_plant()

        self.assertEqual("love-in-idleness", plant.slug)

    def test_slug_update(self):
        "Renaming an existinmg plant updates the slug as expected "
        plant = self.make_test_plant()
        plant.name = 'Love lies oozing'
        plant.save()

        self.assertEqual("love-lies-oozing", plant.slug)

    def test_get_absolute_url(self):
        plant = self.make_test_plant()
        expected_url = "/plants/detail/love-in-idleness/"

        self.assertEqual(expected_url, plant.get_absolute_url())

    def test_aliases_string_none(self):
        "Ensure the liases_string property works when no alias is defined"
        plant = self.make_test_plant()

        self.assertEqual(u"", plant.aliases_string)

    def test_aliases_string_one(self):
        "Ensure the aliases_string property works when one alias is defined"
        plant = self.make_test_plant(aliases=["Alternative"])

        self.assertEqual(u"Alternative", plant.aliases_string)

    def test_aliases_string_multiple(self):
        "Ensure the aliases property works when more than one alias is defined"
        plant = self.make_test_plant(aliases=["Alternative", "Beta"])

        self.assertEqual(u"Alternative, Beta", plant.aliases_string)

    def test_aliases_search_none(self):
        "Ensure the aliases_search property works when no alias is defined"
        plant = self.make_test_plant()

        self.assertEqual(u"", plant.aliases_search)

    def test_aliases_search_one(self):
        "Ensure the aliases_search property works when one alias is defined"
        plant = self.make_test_plant(aliases=["Alternative"])

        self.assertEqual(u"Alternative", plant.aliases_search)

    def test_aliases_search_multiple(self):
        "Ensure the aliases_search property works when more than one alias is defined"
        plant = self.make_test_plant(aliases=["Alternative", "Beta"])

        self.assertEqual(u"Alternative Beta", plant.aliases_search)


class TestTag(TestCase):

    def tearDown(self):
        Tag.objects.all().delete()

    def test_unicode(self):
        "The unicode method of a tag returns the expected value"
        tag = Tag.objects.create(caption="test tag")

        self.assertEqual(u"test tag", unicode(tag))

    def test_tag_normalisation(self):
        "A tag is normalised on save as expecgted"
        tag = Tag.objects.create(caption=" VALUE ")

        self.assertEqual("value", tag.caption)


class TestHarvest(TestCase):

    def setUp(self):
        self.test_plant = Plant.objects.create(
            name="Love in idleness",
            description="Test description",
        )

    def tearDown(self):
        Harvest.objects.all().delete()

    def test_unicode(self):
        "The unicode method of a harvest returns the expected value"
        harvest = Harvest.objects.create(season=2014, plant=self.test_plant)

        self.assertEqual(u"2014 harvest of Love in idleness", unicode(harvest))


class TestActivity(TestCase):

    def setUp(self):
        self.test_plant = Plant.objects.create(
            name="Love in idleness",
            description="Test description",
        )

    def tearDown(self):
        Activity.objects.all().delete()

    def test_unicode(self):
        "The unicode method of an activity returns the expected value"
        activities = ['Sow', 'Plant out', 'Flowering', 'Harvest']
        months = ['January', 'February', 'March', 'April', 'May', 'June',
                  'July', 'August', 'September', 'October', 'November', 'December']

        for i, activity_name in enumerate(activities):
            for j, month in enumerate(months):
                activity = Activity.objects.create(plant=self.test_plant,
                                                   activity=i + 1,
                                                   month=j + 1)
                expected = u"{0} Love in idleness in {1}".format(activity_name, month)

                self.assertEqual(expected, unicode(activity))

