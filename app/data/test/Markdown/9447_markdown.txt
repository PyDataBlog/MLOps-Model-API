# Understanding and Using the App
In the following we briefly describe the structure of this sample app, then provide instructions on how to use it together with some insights into the code.

### Overview
The actual application is located in the [`webclient`](webclient) directory of this GitHub repositoriy. It has the following structure:
* [readapp.py](webclient/readapp.py): Python script with the application code
* [Procfile](webclient/Procfile): Process file which tells Bluemix / Cloud Foundry how to start the application. This is especially needed when there are several Python files.
* [requirements.txt](webclient/requirements.txt): Holds the dependencies, i.e., packages that need to be installed for the application to be able to run.
* [readapp.cfg](webclient/readapp.cfg): Only needed when testing locally, it holds configuration parameters for the app that else are specified through the user-provided service.
* [templates](webclient/templates): Directory with HTML templates. The files are used by the app and the Flask framework to produce (render) the Web pages.
  * [layout.html](webclient/templates/layout.html): Common template with the general page layout. It is extended by the other templates.
  * [index.html](webclient/templates/index.html): Template file for the index page that displays a table with the list entries.
  * [new.html](webclient/templates/new.html): Template file for the page with a form to enter new list items.
* [requirements.txt.db2](webclient/requirements.txt.db2): Not used, but shows a requirements.txt if DB2 or dashDB are used.
* [requirements.txt.mysql](webclient/requirements.txt.mysql): Not used, but shows a requirements.txt for MySQL usage.

As you noticed, most files are just for the page layout or to tell Bluemix how to set up the application. Almost all logic is in a single file.

### Using the App

After we have learned about the structure of the application, we are going to take a look now at how to use it once it has been deployed.

1. First Test - Hello
   As a simple test that the app has been successfully deployed and is started go to its "hello" page. The URL is `http://yourAppName.eu-gb.mybluemix.net/hello` if you deployed to the London/EU-GB data center or `http://yourAppName.mybluemix.net/hello` for the US-SOUTH/NG data center. You should see the following as response.

   ```
   Hello folks, this is Python with Flask on Bluemix!
   ```
   
   The output corresponds with what we have in the [app](webclient/readapp.py) itself. When the path `/hello` is visited, the Flask framework directs the request to the code path for the "hello" route and executes the given code:

   ```
   # Simple route to test the app. It does not use a template, just returns a string.
   @app.route('/hello')
   def hello():
       return "Hello folks, this is Python with Flask on Bluemix!"
   ```


2. Initialize
   Based on the configuration the app knows where the database is located and which database system is going to be used. As you remember, we didn't create any tables or inserted any data yet. We are going to do this as part of the initialization. Instead of `/hello` we are now going to use the `/init` path. In the app first all tables related to the model are dropped (if existing), then created. When done, a short message with a link to the index page is returned. Dropping existing tables is useful when the schema is changed as part of testing or code extensions. 

   ```
   # This is a "secret" init page that can be called to initialize an empty database
   # with our "readlist" table. The table structure is defined above through the model.
   @app.route('/init')
   def init():
	   db.drop_all()
	   db.create_all()
	   return 'ok, go to <a href="/">home</a>'
   ```


3. Index Page
   The index page shows the items that have been added so far. Initially this is an empty list. If an internal server is shown it could mean that either the database has not been initialized yet (see above) or that the URL for the database server has not been configured correctly (see the [overview document](README.md)).

   The list is generated by SQLAlchemy by composing a query on the readlist model. All attributes should be returned, sorted by the date they were added. That list is passed as parameter to the function which renders the HTML template [`index.html`](webclient/templates/index.html). Take a look at that [template](webclient/templates/index.html) to see how the attributes are included into the output.
   ```
   # Our title/index page shows the items on the reading list, so
   # we have to grab them sorted by the date they were added.
   @app.route('/')
   def index():
       	return render_template('index.html',
        items=Readlist.query.order_by(Readlist.add_date.desc()).all()
   )
   ```
   ![](https://raw.githubusercontent.com/data-henrik/Bluemix-onprem-data/master/screenshots/BMReadingListIndex.png)

4. Adding an Entry
   After clicking on `New Item` on the index page you get to the form shown below. Provide a short description and a link/URL to a web resource, then click `Create Item`. It will now be added to the list. Within the code the new values are taken from the input form to create a new Readlist item. It is then added and the change committed to the database.

   ![](https://raw.githubusercontent.com/data-henrik/Bluemix-onprem-data/master/screenshots/BMReadListNewItem.png)

### Closing Remarks
Go back to the [overview document](README.md).
