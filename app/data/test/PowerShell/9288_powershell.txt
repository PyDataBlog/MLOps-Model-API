# PowerShell o[W2Î
# OC[U[ÌDropboxtH_ÉAXVt@CðRs[·éB
#
# Àsû@
# ENbNµÄAuPowerShell ÅÀsvðIÔB

# Rs[æpXð^¦ÄÀsµADropboxtH_ÈOÉRs[·é±ÆàÅ«éB
param($dropfolder)

function UseArgOrDrop {
  if($dropfolder -eq $null) { $script:dropfolder = GetDropLesMills }
  if($dropfolder -eq $null) { Write-Error "Rs[æwè³µ" -ea Stop }
  if(!$(Test-Path $dropfolder)) { Write-Error "Rs[ætH_ªÝÂ©çÈ¢" -ea Stop }
}

# DropboxtH_Íinfo.json©çæ¾·éB

function GetDropLesMills {
  $x = GetDropboxFolder $(FindDropboxInfo)
  if($x -eq $null) { return $null }
  $x + "\LesMills Song Search"
}

function FindDropboxInfo {
  $a = "Dropbox\info.json"
  $b = @("$env:APPDATA\$a", "$env:LOCALAPPDATA\$a")
  foreach($p in $b) {
    if(Test-Path $p) { return $p }
  }
  Write-Error "DropboxÝèÈµB"
  return($null)
}

function GetDropboxFolder {
  param($infopath)
  if($infopath -eq $null) { return $null }
  $a = cat $infopath | fromJson
  return($($a.personal.path) -replace '=',':' -replace '\\\\','\')
}

# v2ÍjsonªÇßÈ¢ÌÅA±ÌP[XêpÌÈÕp[T[B
# : ðÜÆßÄÏ··éÌÅApXÌ : ÜÅÏ·³êéªAãÅß·B
function fromJson {
  param(
    [Parameter(ValueFromPipeline=$true, Mandatory=$true)]
    [string[]] $json
  )
  begin {
    $x = @()
  }
  process {
    $x += $($json -join "")
  }
  end {
    trap {"t@Cöê $x"; break;}
    $x -join "" -replace
      '(:\s*)(\w)','$1"$2' -replace
      '(\w\s*)(,)','$1"$2' -replace
      ':','=' -replace
      ',',';' -replace
      '{','@{' |
      Invoke-Expression
  }
}


# Às

UseArgOrDrop
$dest = $(Resolve-Path $dropfolder).Path
$dest + "É]µÜ·B"

$srcroot = $(Split-Path -parent $(Split-Path -parent $MyInvocation.MyCommand.Path))
$srcroot + "ª]³B"

# json data
$src = $srcroot + "\json"
robocopy $src "$dest\json" /S /XA:RSH /XF .*.* /XD .*.*

# ipad html
$src = $srcroot + "\iPad"
$srcfile="song.ipad.html"
robocopy $src $dest $srcfile /NJH /NJS

