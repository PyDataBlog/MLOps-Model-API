package leetcode

// Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

// An input string is valid if:

// Open brackets must be closed by the same type of brackets.
// Open brackets must be closed in the correct order.
// Note that an empty string is also considered valid.

// Example 1:

// Input: "()"
// Output: true
// Example 2:

// Input: "()[]{}"
// Output: true
// Example 3:

// Input: "(]"
// Output: false
// Example 4:

// Input: "([)]"
// Output: false
// Example 5:

// Input: "{[]}"
// Output: true
// score:100(0ms)
// time:O(L)
// space:O(L)
func isValid(s string) bool {
	stack := make([]byte, 0)
	for _, c := range s {
		if c == '{' {
			stack = append(stack, '}')
		} else if c == '[' {
			stack = append(stack, ']')
		} else if c == '(' {
			stack = append(stack, ')')
		} else {
			if len(stack) == 0 {
				return false
			}
			var last byte
			last, stack = stack[len(stack)-1], stack[:len(stack)-1]
			if last != byte(c) {
				return false
			}
		}
	}
	return len(stack) == 0
}

// Input: "{[]}"
// Output: true
// score:100(0ms)
// time:O(L)
// space:O(L)
func isValid2(s string) bool {
	stack := make([]byte, 0)
	for _, c := range s {
		switch c {
		case '{':
			stack = append(stack, '}')
		case '[':
			stack = append(stack, ']')
		case '(':
			stack = append(stack, ')')
		default:
			if len(stack) == 0 {
				return false
			}
			var last byte
			last, stack = stack[len(stack)-1], stack[:len(stack)-1]
			if last != byte(c) {
				return false
			}
		}
	}
	return len(stack) == 0
}
