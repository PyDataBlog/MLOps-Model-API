#ifndef __VR_CAMERA_H
#define __VR_CAMERA_H

#include <memory>

#include <glm/glm.hpp>

namespace vr
{
  class SceneObject;

  enum class CameraTrackingMode
  {
    none,
    point,
    object
  };

  class Camera
  {
  public:
    inline auto getPosition() const noexcept { return position; }
    inline void setPosition(const glm::vec3& value) noexcept { position = value; }

    inline auto getNearPlane() const noexcept { return nearPlane; }
    inline void setNearPlane(float value) noexcept { nearPlane = value; }

    inline auto getFarPlane() const noexcept { return farPlane; }
    void setFarPlane(float value) noexcept { farPlane = value; }

    inline auto getViewAngle() const noexcept { return viewAngle; }
    void setViewAngle(float value) noexcept { viewAngle = value; }

    inline auto getTrackingMode() const noexcept { return trackingMode; }
    void setTrackingMode(CameraTrackingMode value) noexcept { trackingMode = value; }

    inline auto& getPointTarget() const noexcept { return pointTarget; }
    void setPointTarget(const glm::vec3& value) noexcept { pointTarget = value; }

    inline auto& getObjTarget() const noexcept { return objTarget; }
    void setObjTarget(const std::weak_ptr<SceneObject>& value) noexcept { objTarget = value; }

    inline auto& getViewTransform() const noexcept { return viewTransform; }
    inline auto& getProjectionTransform() const { return projectionTransform; }
    inline auto& getUpDirection() const noexcept { return upDirection; }
    inline auto& getViewDirection() const noexcept { return viewDirection; }
    
    virtual void update(float aspect, float deltaTime);

  private:
    float nearPlane{ 0.1f };
    float farPlane{ 100.0f };
    float viewAngle{ 30.0f };
    
    glm::vec3 position;
    glm::vec3 upDirection{ 0.0f, 1.0f, 0.0f };
    glm::vec3 viewDirection{ 0.0f, 0.0f, 1.0f };
    glm::vec3 pointTarget;
    std::weak_ptr<SceneObject> objTarget;
    glm::mat4 viewTransform;
    glm::mat4 projectionTransform;
    CameraTrackingMode trackingMode{ CameraTrackingMode::none };

    void lookAtTarget(const glm::vec3& target);
  };
}

#endif
