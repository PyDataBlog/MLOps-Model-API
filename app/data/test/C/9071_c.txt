/*
 * Node.h
 *
 *  Created on: Nov 6, 2013
 *      Author: jasonr
 */

#ifndef CORE_PARTITION_NODE_H_
#define CORE_PARTITION_NODE_H_

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <vector>
#include <sg/classPointers.h>
#include <sg/node.h>

#include "autoreg.h"
#include "classPointers.h"
#include "meshData.h"
#include "visibleObject.h"

namespace Core
{

class PartitionNode : public VisibleObject,
                      public autoregister<PartitionNode>
{
  public:
    using Indices = std::vector<MeshData::FaceSet>;

    PartitionNode();
    virtual ~PartitionNode();

    virtual std::string                 nodeType() const;
    static std::string                  nodetype;

    const std::vector<unsigned int> &   indices() const;
    void                                setIndices(std::vector<unsigned int> &&indices);

    const Indices &                     faceSets() const;
    void                                setFaceSets(Indices &&facesets);

    unsigned int                        chunk() const;
    void                                setChunk(unsigned int chunk);

    Ut::Box3f                           globalBoundingBox() const;

  protected:
    virtual void                        initializeNode();

  private:
    Indices                             m_faceSets;
    unsigned int                        m_chunk;

    using Super = VisibleObject;
};

inline PartitionNodePtr         asPartitionNode(Sg::NodePtr object) { return std::exempt_pointer_cast<PartitionNode>(object); }
inline bool                     isPartitionNode(Sg::NodePtr object) { return std::exempt_pointer_cast<PartitionNode>(object) != nullptr; }

}

#endif // CORE_PARTITION_NODE_H_
