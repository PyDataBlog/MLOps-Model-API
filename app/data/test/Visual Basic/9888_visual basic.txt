Imports System.Runtime.InteropServices
Module Module1

    Sub Main()
        Dim objSEApplication As SolidEdgeFramework.Application = Nothing
        Dim objDoc As SolidEdgePart.PartDocument = Nothing
        Dim objModel As SolidEdgePart.Model = Nothing
        Dim objFace As SolidEdgeGeometry.Face = Nothing
        Dim objEdge As SolidEdgeGeometry.Edge = Nothing
        Dim objVertex As SolidEdgeGeometry.Vertex = Nothing
        Dim objInputFaces(0 To 1) As Object
        Dim vertexStartPointData(0 To 2) As Double
        Dim vertexEndPointData(0 To 2) As Double
        Dim objCutOut As SolidEdgePart.ExtrudedCutout = Nothing
        Dim objType As Type
        Try
            ' Get the application with specific settings
            'objSEApplication = GetObject(, "SolidEdge.Application")
            ' Get the type from the Solid Edge ProgID
            objType = Type.GetTypeFromProgID("SolidEdge.Application")
            ' Start Solid Edge
            objSEApplication = Activator.CreateInstance(objType)
            ' Make Solid Edge visible
            objSEApplication.Visible = True

            'Add new part document.
            objDoc = objSEApplication.Documents.Add("SolidEdge.PartDocument")

            objDoc.RestoreLiveRules()

            'Set the modeling mode to synchronous
            objDoc.ModelingMode = SolidEdgePart.ModelingModeConstants.seModelingModeSynchronous

            'Create a box feature at the origin
            objModel = objDoc.Models.AddBoxByCenter(0.0, 0.0, 0.0, 0.08, 0.08, 0.0, 0.08, objDoc.RefPlanes.Item(3), SolidEdgePart.FeaturePropertyConstants.igLeft, False, Nothing, 0)

            'create a cutout feature at the origin.
            objCutOut = objDoc.Models.Item(1).BoxFeatures.AddCutoutByCenter(0.0, 0.0, 0.0, 0.02, 0.02, 0.0, 0.02, objDoc.RefPlanes.Item(3), SolidEdgePart.FeaturePropertyConstants.igLeft, SolidEdgePart.FeaturePropertyConstants.igLeft, False, Nothing, 0)

            'Get a face and an edge from the body
            objFace = objModel.Body.Faces(SolidEdgeGeometry.FeatureTopologyQueryTypeConstants.igQueryAll).Item(1)
            objEdge = objModel.Body.Edges(SolidEdgeGeometry.FeatureTopologyQueryTypeConstants.igQueryAll).Item(1)

            'Get the start vertex from the selected edge.
            objVertex = objEdge.StartVertex
            objVertex.GetPointData(vertexStartPointData)

            'Perform a linear move of the face. Here we are inputting start point data, direction and extent distance.
            objInputFaces(0) = objFace

            objModel.SyncLinearMove(1, objInputFaces, SolidEdgeConstants.MoveConnectedFaceTypes.seMoveConnectedFaceTypeExtendTrim, _
            SolidEdgeConstants.MovePrecedenceConstants.igSelectSetMovePrecedence, StartKeyPtObj:=Nothing, StartPtX:=vertexStartPointData(0), StartPtY:=vertexStartPointData(1), StartPtZ:=vertexStartPointData(2), _
            DirectionX:=-1.0#, DirectionY:=0.0#, DirectionZ:=0.0#, ExtentKeyPtObj:=Nothing, ExtentDistance:=0.1, bCopy:=False, bDetach:=False)

            'Because of the model changes, fetch the data again
            objFace = objModel.Body.Faces(SolidEdgeGeometry.FeatureTopologyQueryTypeConstants.igQueryAll).Item(1)
            objEdge = objModel.Body.Edges(SolidEdgeGeometry.FeatureTopologyQueryTypeConstants.igQueryAll).Item(1)

            'Get the start vertex from the selected edge.
            objVertex = objEdge.StartVertex
            objVertex.GetPointData(vertexStartPointData)

            'Perform a Planar move of the cutout feature. Here we are inputting start point data, direction and extent distance.
            objInputFaces(0) = objCutOut

            objModel.SyncPlanarMove(1, objInputFaces, SolidEdgeConstants.MoveConnectedFaceTypes.seMoveConnectedFaceTypeExtendTrim, _
            SolidEdgeConstants.MovePrecedenceConstants.igSelectSetMovePrecedence, PlaneNormalX:=0.0, PlaneNormalY:=1.0, PlaneNormalZ:=0.0, StartKeyPtObj:=Nothing, StartPtX:=vertexStartPointData(0), StartPtY:=vertexStartPointData(1), StartPtZ:=vertexStartPointData(2), _
            DirectionX:=1.0#, DirectionY:=0.0#, DirectionZ:=0.0#, ExtentKeyPtObj:=Nothing, ExtentDistance:=0.05, bCopy:=False, bDetach:=False)

            'Perform another Planar move in Z direction of the cutout feature. Here we are inputting start point data, direction and extent distance.
            objModel.SyncPlanarMove(1, objInputFaces, SolidEdgeConstants.MoveConnectedFaceTypes.seMoveConnectedFaceTypeExtendTrim, _
            SolidEdgeConstants.MovePrecedenceConstants.igSelectSetMovePrecedence, PlaneNormalX:=0.0, PlaneNormalY:=1.0, PlaneNormalZ:=0.0, StartKeyPtObj:=Nothing, StartPtX:=vertexStartPointData(0), StartPtY:=vertexStartPointData(1), StartPtZ:=vertexStartPointData(2), _
            DirectionX:=0.0, DirectionY:=0.0#, DirectionZ:=1.0, ExtentKeyPtObj:=Nothing, ExtentDistance:=0.02, bCopy:=False, bDetach:=False)

            'Because of the model changes, fetch the data again
            'Get a face and an edge from the body
            objFace = objModel.Body.Faces(SolidEdgeGeometry.FeatureTopologyQueryTypeConstants.igQueryAll).Item(1)
            objEdge = objModel.Body.Edges(SolidEdgeGeometry.FeatureTopologyQueryTypeConstants.igQueryAll).Item(1)

            'Get the start vertex from the selected edge.
            objVertex = objEdge.StartVertex
            objVertex.GetPointData(vertexStartPointData)

            objVertex = objEdge.EndVertex
            objVertex.GetPointData(vertexEndPointData)

            'Clear the symmetric live rule.
            objDoc.SetLiveRules(SolidEdgePart.LiveRulesConstants.igSymmetricLiveRule, False)

            'Rotate a face by 0.5 radians
            objInputFaces(0) = objFace

            'Perform a rotate operation.
            objModel.SyncRotate(1, objInputFaces, SolidEdgeConstants.MoveConnectedFaceTypes.seMoveConnectedFaceTypeExtendTrim, _
            SolidEdgeConstants.MovePrecedenceConstants.igSelectSetMovePrecedence, AxisStartKeyPtObj:=Nothing, AxisStartPtX:=vertexStartPointData(0), AxisStartPtY:=vertexStartPointData(1), AxisStartPtZ:=vertexStartPointData(2), _
            AxisEndKeyPtObj:=Nothing, AxisEndPtX:=vertexEndPointData(0), AxisEndPtY:=vertexEndPointData(1), AxisEndPtZ:=vertexEndPointData(2), RotationAngle:=0.5, bCopy:=False, bDetach:=False)

            objDoc.RestoreLiveRules()
        Catch ex As Exception
            Console.WriteLine(ex.ToString)
        End Try
    End Sub

End Module
