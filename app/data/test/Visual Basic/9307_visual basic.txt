Namespace Extensions

    Public Module DevComponents_DotNetBar_Controls_DataGridViewX

        Private Delegate Sub dlgPopulateFromIEnumerable(Of T As {New, Models.GenericEntity})(d As DevComponents.DotNetBar.Controls.DataGridViewX, enabled As Boolean, items As IEnumerable(Of T))

        <System.Runtime.CompilerServices.Extension()> Public Async Function PopulateFromQueryAsync(Of T As {New, Models.GenericEntity})(d As DevComponents.DotNetBar.Controls.DataGridViewX, commandText As String, dbAccess As Data.IDBAccessAsync, enabled As Boolean) As Task
            Await d.PopulateFromQueryAsync(Of T)(commandText, dbAccess, enabled, Nothing)
        End Function

        <System.Runtime.CompilerServices.Extension()> Public Async Function PopulateFromQueryAsync(Of T As {New, Models.GenericEntity})(d As DevComponents.DotNetBar.Controls.DataGridViewX, commandText As String, dbAccess As Data.IDBAccessAsync, enabled As Boolean, parameters As IDictionary(Of String, Object)) As Task
            Using Performance.StartCounter("ExtensionMethods", "PopulateFromQuery")
                If enabled AndAlso commandText.IsSet() Then
                    d.PopulateFromIEnumerable(True, Await dbAccess.ExecuteReader(Of T)(commandText, parameters))
                Else
                    d.PopulateFromIEnumerable(False, New List(Of T))
                End If
            End Using
        End Function

        <System.Runtime.CompilerServices.Extension()> Public Sub ApplyFilter(Of T As {New, Models.GenericEntity})(d As DevComponents.DotNetBar.Controls.DataGridViewX, filterText As String)
            d.ApplyFilter(Of T)("", filterText)
        End Sub

        <System.Runtime.CompilerServices.Extension()> Public Sub ApplyFilter(Of T As {New, Models.GenericEntity})(d As DevComponents.DotNetBar.Controls.DataGridViewX, fields As String, filterText As String)
            Using Performance.StartCounter("ExtensionMethods", "ApplyFilter")
                Dim CurrentID As String = ""
                If d.SelectedRows.Count > 0 Then
                    CurrentID = DirectCast(d.SelectedRows(0).DataBoundItem, T).ID
                End If

                If d.DataSource Is Nothing Then
                    Return
                End If

                If Not (TypeOf d.DataSource Is Windows.Forms.BindingSource) Then
                    Return
                End If

                Dim BindingSource As Windows.Forms.BindingSource = DirectCast(d.DataSource, Windows.Forms.BindingSource)

                If filterText.IsNotSet() Then
                    BindingSource.RemoveFilter()
                Else
                    Dim NewFilter As String = ""
                    If fields.IsNotSet() Then
                        For Each PropertyDescriptor As System.ComponentModel.PropertyDescriptor In BindingSource.CurrencyManager.GetItemProperties()
                            NewFilter.Append(" OR ", "{0} LIKE '%{1}%'".FormatWith(PropertyDescriptor.Name, filterText))
                        Next
                    Else
                        For Each FieldName As String In Split(fields, ",")
                            NewFilter.Append(" OR ", "{0} LIKE '%{1}%'".FormatWith(FieldName.Trim, filterText))
                        Next
                    End If
                    If NewFilter.IsNotSet() Then
                        BindingSource.RemoveFilter()
                    Else
                        BindingSource.Filter = NewFilter
                    End If
                End If

                If CurrentID.IsSet() Then
                    Dim Position As Integer = 0
                    Dim PropertyName As String = "ID"
                    Dim oPDC As System.ComponentModel.PropertyDescriptorCollection = BindingSource.CurrencyManager.GetItemProperties
                    If oPDC Is Nothing OrElse oPDC(PropertyName) Is Nothing Then
                    Else
                        Position = BindingSource.Find(PropertyName, CurrentID)
                        If Position <= 0 Then
                            Position = 0
                        End If
                    End If
                    BindingSource.Position = Position
                End If

                d.AutoResizeColumns(Windows.Forms.DataGridViewAutoSizeColumnsMode.AllCells)
            End Using
        End Sub

        <System.Runtime.CompilerServices.Extension()> Public Sub FormatAndSetBackColor(d As DevComponents.DotNetBar.Controls.DataGridViewX, automaticallyResizeGridColumns As Boolean, displayGridLines As Boolean, useAlternatingLineColors As Boolean, ByRef color As Drawing.Color, ByRef fieldWidths As Dictionary(Of String, Integer))
            Using Performance.StartCounter("ExtensionMethods", "FormatAndSetBackColor")
                If displayGridLines Then
                    d.ColumnHeadersBorderStyle = Windows.Forms.DataGridViewHeaderBorderStyle.Raised
                    d.CellBorderStyle = Windows.Forms.DataGridViewCellBorderStyle.Single
                    d.GridColor = Drawing.Color.Black
                Else
                    d.ColumnHeadersBorderStyle = Windows.Forms.DataGridViewHeaderBorderStyle.None
                    d.CellBorderStyle = Windows.Forms.DataGridViewCellBorderStyle.None
                End If

                If useAlternatingLineColors Then
                    d.DefaultCellStyle.BackColor = color
                    d.AlternatingRowsDefaultCellStyle.BackColor = Drawing.Color.AliceBlue
                Else
                    d.DefaultCellStyle.BackColor = color
                    d.AlternatingRowsDefaultCellStyle = Nothing
                End If

                For Each Current As Windows.Forms.DataGridViewColumn In d.Columns
                    If Current.Width = 23 Then
                        Continue For
                    End If

                    Dim Width As Integer = fieldWidths.Where(Function(o) o.Key.IsEqualTo(Current.DataPropertyName) OrElse o.Key.IsEqualTo(Current.Name)).Select(Function(o) o.Value).FirstOrDefault()

                    If Width <= 0 Then
                        If automaticallyResizeGridColumns Then
                            Current.AutoSizeMode = Windows.Forms.DataGridViewAutoSizeColumnMode.DisplayedCells
                        Else
                            Current.AutoSizeMode = Windows.Forms.DataGridViewAutoSizeColumnMode.None
                        End If
                    Else
                        Current.Width = Width
                    End If
                Next
            End Using
        End Sub

        <System.Runtime.CompilerServices.Extension()> Public Sub PopulateFromIEnumerable(Of T As {New, Models.GenericEntity})(d As DevComponents.DotNetBar.Controls.DataGridViewX, enabled As Boolean, items As IEnumerable(Of T))
            If Settings.SynchronizationForm IsNot Nothing AndAlso Settings.SynchronizationForm.IsHandleCreated AndAlso Settings.SynchronizationForm.InvokeRequired Then
                Settings.SynchronizationForm.Invoke(New dlgPopulateFromIEnumerable(Of T)(AddressOf PopulateFromIEnumerable), {d, enabled, items})
                Return
            End If

            Using Performance.StartCounter("ExtensionMethods", "PopulateFromIEnumerable")
                Dim CurrentID As String = ""
                If d.SelectedRows.Count > 0 Then
                    CurrentID = DirectCast(d.SelectedRows(0).DataBoundItem, T).ID
                End If

                Dim BindingSource As Windows.Forms.BindingSource = Nothing
                Dim SortableSearchableBindingList As Data.SortableSearchableBindingList(Of T) = Nothing
                If d.DataSource IsNot Nothing Then
                    If TypeOf d.DataSource Is Windows.Forms.BindingSource Then
                        BindingSource = DirectCast(d.DataSource, Windows.Forms.BindingSource)
                        If TypeOf BindingSource.DataSource Is Data.SortableSearchableBindingList(Of T) Then
                            SortableSearchableBindingList = DirectCast(BindingSource.DataSource, Data.SortableSearchableBindingList(Of T))
                        Else
                            SortableSearchableBindingList = New Data.SortableSearchableBindingList(Of T)
                            BindingSource.DataSource = SortableSearchableBindingList
                            d.DataSource = BindingSource
                        End If
                    Else
                        SortableSearchableBindingList = New Data.SortableSearchableBindingList(Of T)
                        BindingSource = New Windows.Forms.BindingSource
                        BindingSource.DataSource = SortableSearchableBindingList
                        d.DataSource = BindingSource
                    End If
                Else
                    SortableSearchableBindingList = New Data.SortableSearchableBindingList(Of T)
                    BindingSource = New Windows.Forms.BindingSource
                    BindingSource.DataSource = SortableSearchableBindingList
                    d.DataSource = BindingSource
                End If

                BindingSource.RemoveFilter()
                SortableSearchableBindingList.Clear()
                If Not enabled Then
                    Return
                End If

                d.SuspendDrawing()
                SortableSearchableBindingList.AddRange(items)

                If CurrentID.IsSet() Then
                    Dim Position As Integer = 0
                    Dim PropertyName As String = "ID"
                    Dim oPDC As System.ComponentModel.PropertyDescriptorCollection = BindingSource.CurrencyManager.GetItemProperties
                    If oPDC Is Nothing OrElse oPDC(PropertyName) Is Nothing Then
                    Else
                        Position = BindingSource.Find(PropertyName, CurrentID)
                        If Position <= 0 Then
                            Position = 0
                        End If
                    End If
                    BindingSource.Position = Position
                End If

                d.AutoResizeColumns(Windows.Forms.DataGridViewAutoSizeColumnsMode.AllCells)
                d.ResumeDrawing(True)
            End Using
        End Sub

        <System.Runtime.CompilerServices.Extension()> Public Sub PopulateFromQuery(Of T As {New, Models.GenericEntity})(d As DevComponents.DotNetBar.Controls.DataGridViewX, commandText As String, dbAccess As Data.IDBAccess, enabled As Boolean)
            d.PopulateFromQuery(Of T)(commandText, dbAccess, enabled, Nothing)
        End Sub

        <System.Runtime.CompilerServices.Extension()> Public Sub PopulateFromQuery(Of T As {New, Models.GenericEntity})(d As DevComponents.DotNetBar.Controls.DataGridViewX, commandText As String, dbAccess As Data.IDBAccess, enabled As Boolean, parameters As IDictionary(Of String, Object))
            Using Performance.StartCounter("ExtensionMethods", "PopulateFromQuery")
                If Not enabled OrElse commandText.IsNotSet() OrElse commandText.Contains("1=2") Then
                    d.PopulateFromIEnumerable(False, New List(Of T))
                Else
                    d.PopulateFromIEnumerable(True, dbAccess.ExecuteReader(Of T)(commandText, parameters))
                End If
            End Using
        End Sub

    End Module

End Namespace