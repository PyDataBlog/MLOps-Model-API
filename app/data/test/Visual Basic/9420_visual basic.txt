'///////////////////////////////////////////////////////////////////////////////////////
'Hawthorne. A neurocryptographical software, written for scienctific research in mind. |
'Copyright (C) 2014  Anish Chhetri <http://twitter.com/ashtopher>                      |
'                                                                                      |
'This program is free software: you can redistribute it and/or modify                  |
'it under the terms of the GNU General Public License as published by                  |
'the Free Software Foundation, either version 3 of the License, or                     |
'(at your option) any later version.                                                   |
'                                                                                      |
'This program is distributed in the hope that it will be useful,                       |
'but WITHOUT ANY WARRANTY; without even the implied warranty of                        |
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         |
'GNU General Public License for more details.                                          |
'                                                                                      |
'You should have received a copy of the GNU General Public License                     |
'along with this program.  If not, see <http://www.gnu.org/licenses/>.                 |
'///////////////////////////////////////////////////////////////////////////////////////

'================================ HAWTHORNE ALPHA v0.15 ==============================='
'---------------------------------------------------------------------------------------
'                                    THINGS TO DO                                      |
'                                                                                      |
'                  Map ticket sequence to artificial alphabets (images)                |
'                      Map image to random 5-tone sequence (audio)                     |
'           Create word array to be inserted randomly in as encryption password        |
'         Arrange images randomly, proceed next image after tones are pressed          |
'                                                                                      |
'           Sequence images in shuffled order with sham images (for authentication)    |
'        Create an effective scoring system based on learning (for authentication)     |
'            Create algorithm that injects previous passphrase for decryption          |
'---------------------------------------------------------------------------------------

Imports System.Text.RegularExpressions
Imports System.Security.Cryptography
Imports System.Windows.Forms
Imports System.Text
Imports System.Collections
Imports System.IO

Public Class NeuroCrypt


    '//OPEN/SAVE FILE
    Public Sub OpenFileDialog1_FileOk(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles OpenFileDialog1.FileOk
        Dim readstring() As String
        GC.Collect()
        readstring = System.IO.File.ReadAllLines(OpenFileDialog1.FileName)
        GC.Collect()
        datafield.Text = readstring(0)
    End Sub
    Public Sub OpenToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles OpenToolStripMenuItem.Click
        OpenFileDialog1.Filter = "NeuroKey Files (*.Neuk)|*.Neuk|All files (*.*)|*.*"
        OpenFileDialog1.Title = "Save a Text File"
        OpenFileDialog1.ShowDialog()
    End Sub
    Public Sub SaveFileDialog1_FileOk(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles SaveFileDialog1.FileOk
        Dim writestring(0) As String
        writestring(0) = datafield.Text
        GC.Collect()
        System.IO.File.WriteAllLines(SaveFileDialog1.FileName, writestring)
        GC.Collect()
    End Sub
    Public Sub SaveToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SaveToolStripMenuItem.Click
        MsgBox("Warning: Plaintext is unencrypted and unsecure. Take caution if file contains sensitive information.")
        SaveFileDialog1.Filter = "NeuroKey Files (*.Neuk)|*.Neuk|All files (*.*)|*.*"
        SaveFileDialog1.Title = "Save an Text File"
        SaveFileDialog1.ShowDialog()
    End Sub

    '//NEW FILE
    Public Sub NewToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewToolStripMenuItem.Click
        If MessageBox.Show("Are you sure?", "NeuroCrypt", _
        MessageBoxButtons.YesNo, MessageBoxIcon.Question) _
        = DialogResult.Yes Then
            Result.Text = ""
        End If
    End Sub

    '//About 
    Public Sub AboutToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AboutToolStripMenuItem.Click
        AboutBox1.ShowDialog()
    End Sub

    '//If text clears, reset bruteforce rate value to null
    Public Sub Result_TextChanged(sender As Object, e As EventArgs) Handles Result.TextChanged
        If Result.Text = "" Then
            TextBox1.Text = "0 bits"
            RichTextBox1.Text = "0 hrs"
            RichTextBox2.Text = "Null"
            RichTextBox2.SelectionAlignment = HorizontalAlignment.Center
            RichTextBox2.BackColor = Color.White
            RichTextBox2.ForeColor = Color.Black
        End If
    End Sub

    '//Exit menu item
    Public Sub ExitToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ExitToolStripMenuItem.Click
        If MessageBox.Show("Do you want to exit?", "NeuroCrypt", _
      MessageBoxButtons.YesNo, MessageBoxIcon.Question) _
      = DialogResult.Yes Then
            Application.Exit()
        End If
    End Sub

    '//Function to split width by 2 (view as 2-bit binary integers)
    Public Function ToQuaternary(value As Integer) As String
        Select Case value
            Case 0 : Return "G"  ' binary 00 
            Case 1 : Return "R"  ' binary 01
            Case 2 : Return "B"  ' binary 10
            Case 3 : Return "Y"  ' binary 11
            Case Else : Return Nothing
        End Select
    End Function


    '//Start Neural Transfer
    Public Sub EncyptionToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EncyptionToolStripMenuItem.Click
        Dim pool As String = ""

        '//GENERATE TICKET & ENTROPY CALCULATION & TICKET RATING & BRUTEFORCE RATE CALCULATOR

        If ((NumbersToolStripMenuItem.Checked = False) And (LettersToolStripMenuItem.Checked = False) And (CapitalLettersToolStripMenuItem.Checked = False) And (BinaryToolStripMenuItem.Checked = False) And (DNAToolStripMenuItem.Checked = False) And (RNAToolStripMenuItem.Checked = False) And (SymbolsToolStripMenuItem.Checked = False) And (AminoAcidsToolStripMenuItem.Checked = False)) Then
            MsgBox("Please select at least one option.")
        Else

            pool = ""

            If NumbersToolStripMenuItem.Checked = True Then
                pool = pool & "1023456789" 'NUMERALS
            End If
            If LettersToolStripMenuItem.Checked = True Then
                pool = pool & "abcdefghijklmnopqrstuvwxyz" 'LOWER CASE
            End If
            If CapitalLettersToolStripMenuItem.Checked = True Then
                pool = pool & "ABCDEFGHIJKLMNOPQRSTUVWXYZ" 'UPPER CASE
            End If
            If SymbolsToolStripMenuItem.Checked = True Then
                pool = pool & "!@#$%^&*()_+|\/?><\~"";:\'*" 'SYMBOLS
            End If
            If BinaryToolStripMenuItem.Checked = True Then
                pool = "01" 'BINARY
            End If
            If DNAToolStripMenuItem.Checked = True Then
                pool = "aTGc" 'mRNA
            End If
            If RNAToolStripMenuItem.Checked = True Then
                pool = "aUGc" 'RNA
            End If
            If AminoAcidsToolStripMenuItem.Checked = True Then
                pool = "GPAVLIMCFYWHKRQNEDST" 'AMINO ACIDS
            End If
            Dim count = 0
            Result.Text = ""

            Dim cc As New Random
            Dim strpos = ""
            While count <= Lengthh.Text
                strpos = cc.Next(0, pool.Length)

                Result.Text = Result.Text & pool(strpos)
                count = count + 1

            End While

        End If

        '//SHANNON ENTROPY CALCULATION 
        Dim textboxread As String = Result.Text
        Dim map = New Dictionary(Of Char, Integer)()
        For Each c As Char In textboxread
            If Not map.ContainsKey(c) Then
                map.Add(c, 1)
            Else
                map(c) += 1
            End If
        Next
        Dim resulted As Double = 0.0
        Dim len As Integer = textboxread.Length
        For Each item In map
            Dim frequency = CDbl(item.Value) / len
            resulted -= frequency * (Math.Log(frequency) / Math.Log(2))
        Next
        TextBox1.Text = resulted & " bits"

        '//Ticket Rating
        If resulted >= 6 Then
            RichTextBox2.Text = "✔" 'Excellent ticket'
            RichTextBox2.SelectionAlignment = HorizontalAlignment.Center
            RichTextBox2.BackColor = Color.Green
            RichTextBox2.ForeColor = Color.White
        ElseIf resulted >= 5 Then
            RichTextBox2.Text = "▬" 'OK ticket'
            RichTextBox2.SelectionAlignment = HorizontalAlignment.Center
            RichTextBox2.BackColor = Color.Orange
            RichTextBox2.ForeColor = Color.Black
        ElseIf resulted < 4.7 Then
            RichTextBox2.Text = "✘" 'Poor ticket'
            RichTextBox2.SelectionAlignment = HorizontalAlignment.Center
            RichTextBox2.BackColor = Color.Red
            RichTextBox2.ForeColor = Color.White
        End If

        '//BRUTEFORCE CALCULATOR
        Dim crackinformation As String = Result.Text
        Dim guessrate = 1000
        RichTextBox1.Text = FormatNumber(((((2 ^ resulted / guessrate) * 24) * 60) / 60), 2) & " hrs"

        MessageBox.Show("Please wait...")

        '<<<<<<<<<<<<NOT DONE. NEEDS TO BE DONE>>>>>>>>>>>>>'
        If Result.Text = "" Then
            MsgBox("Import data first.")
        Else

            Dim builder As New StringBuilder()
            For Each c As Char In Result.Text
                Dim charValue As Integer = AscW(c)
                builder.Append(ToQuaternary((charValue >> 6) And 3))
                builder.Append(ToQuaternary((charValue >> 4) And 3))
                builder.Append(ToQuaternary((charValue >> 2) And 3))
                builder.Append(ToQuaternary((charValue And 3)))
                builder.AppendLine()
            Next
            Debug.Print(builder.ToString())

            Console.SetOut(New TextBoxWriter(TextBox2)) 'output console to textbox
            Console.WriteLine(builder.ToString())

            'Dim setpassword As String = InputBox("please enter", "enter", Result.Text)
            NeuralEncoding()
            NeuralEncodingForDatafield()

            'Change the below to the actual directory for users
            System.Diagnostics.Process.Start("C:\Users\Alice\Documents\GitHub\Hawthorne\Hawthorne Alpha Build\lab4-SimonSays\lab4-SimonSays\bin\Debug\lab4-SimonSays.exe")
        End If
    End Sub


    '//Start ticket authentication

    Public Sub DecryptionToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles DecryptionToolStripMenuItem.Click
        '<<<<<<<<<<<<NOT DONE. NEEDS TO BE DONE>>>>>>>>>>>>>'

    End Sub

    '//Debugging the menu bar
    Public Sub NumbersToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NumbersToolStripMenuItem.Click
        If NumbersToolStripMenuItem.Checked = True Then
            BinaryToolStripMenuItem.CheckState = CheckState.Unchecked
            DNAToolStripMenuItem.CheckState = CheckState.Unchecked
            RNAToolStripMenuItem.CheckState = CheckState.Unchecked
            AminoAcidsToolStripMenuItem.CheckState = CheckState.Unchecked
        End If
    End Sub
    Public Sub LettersToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles LettersToolStripMenuItem.Click
        If LettersToolStripMenuItem.Checked = True Then
            BinaryToolStripMenuItem.CheckState = CheckState.Unchecked
            DNAToolStripMenuItem.CheckState = CheckState.Unchecked
            RNAToolStripMenuItem.CheckState = CheckState.Unchecked
            AminoAcidsToolStripMenuItem.CheckState = CheckState.Unchecked
        End If
    End Sub
    Public Sub CapitalLettersToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CapitalLettersToolStripMenuItem.Click
        If CapitalLettersToolStripMenuItem.Checked = True Then
            BinaryToolStripMenuItem.CheckState = CheckState.Unchecked
            DNAToolStripMenuItem.CheckState = CheckState.Unchecked
            RNAToolStripMenuItem.CheckState = CheckState.Unchecked
            AminoAcidsToolStripMenuItem.CheckState = CheckState.Unchecked
        End If
    End Sub
    Public Sub BinaryToolStripMenuItem_Click_1(sender As Object, e As EventArgs) Handles BinaryToolStripMenuItem.Click
        If BinaryToolStripMenuItem.Checked = True Then
            If MessageBox.Show("Are you sure you want to clear & display only Binary information?", "NeuroCrypt", _
        MessageBoxButtons.YesNo, MessageBoxIcon.Question) _
        = DialogResult.Yes Then
                MessageBox.Show("Binary mode on. Press 'Generate' to proceed.")
                Result.Text = ""
                CapitalLettersToolStripMenuItem.CheckState = CheckState.Unchecked
                NumbersToolStripMenuItem.CheckState = CheckState.Unchecked
                LettersToolStripMenuItem.CheckState = CheckState.Unchecked
                SymbolsToolStripMenuItem.CheckState = CheckState.Unchecked
                DNAToolStripMenuItem.CheckState = CheckState.Unchecked
                RNAToolStripMenuItem.CheckState = CheckState.Unchecked
                AminoAcidsToolStripMenuItem.CheckState = CheckState.Unchecked
            Else
                BinaryToolStripMenuItem.CheckState = CheckState.Unchecked
            End If
        End If
    End Sub
    Public Sub DNAToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles DNAToolStripMenuItem.Click
        If DNAToolStripMenuItem.Checked = True Then
            If MessageBox.Show("Are you sure you want to clear & display only mRNA information?", "NeuroCrypt", _
        MessageBoxButtons.YesNo, MessageBoxIcon.Question) _
        = DialogResult.Yes Then
                MessageBox.Show("mRNA mode on. Press 'Generate' to proceed.")
                Result.Text = ""
                CapitalLettersToolStripMenuItem.CheckState = CheckState.Unchecked
                NumbersToolStripMenuItem.CheckState = CheckState.Unchecked
                LettersToolStripMenuItem.CheckState = CheckState.Unchecked
                SymbolsToolStripMenuItem.CheckState = CheckState.Unchecked
                BinaryToolStripMenuItem.CheckState = CheckState.Unchecked
                RNAToolStripMenuItem.CheckState = CheckState.Unchecked
                AminoAcidsToolStripMenuItem.CheckState = CheckState.Unchecked
            Else
                DNAToolStripMenuItem.CheckState = CheckState.Unchecked
            End If
        End If
    End Sub
    Public Sub SymbolsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SymbolsToolStripMenuItem.Click
        BinaryToolStripMenuItem.CheckState = CheckState.Unchecked
        DNAToolStripMenuItem.CheckState = CheckState.Unchecked
        RNAToolStripMenuItem.CheckState = CheckState.Unchecked
        AminoAcidsToolStripMenuItem.CheckState = CheckState.Unchecked
    End Sub
    Public Sub AminoAcidsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AminoAcidsToolStripMenuItem.Click
        If AminoAcidsToolStripMenuItem.Checked = True Then
            If MessageBox.Show("Are you sure you want to clear & display only Amino Acid strand information?", "NeuroCrypt", _
        MessageBoxButtons.YesNo, MessageBoxIcon.Question) _
        = DialogResult.Yes Then
                MessageBox.Show("Amino Acid mode on. Press 'Generate' to proceed.")
                Result.Text = ""
                CapitalLettersToolStripMenuItem.CheckState = CheckState.Unchecked
                NumbersToolStripMenuItem.CheckState = CheckState.Unchecked
                LettersToolStripMenuItem.CheckState = CheckState.Unchecked
                SymbolsToolStripMenuItem.CheckState = CheckState.Unchecked
                BinaryToolStripMenuItem.CheckState = CheckState.Unchecked
                DNAToolStripMenuItem.CheckState = CheckState.Unchecked
                RNAToolStripMenuItem.CheckState = CheckState.Unchecked
            Else
                AminoAcidsToolStripMenuItem.CheckState = CheckState.Unchecked
            End If
        End If
    End Sub
    Public Sub RNAToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles RNAToolStripMenuItem.Click
        If RNAToolStripMenuItem.Checked = True Then
            If MessageBox.Show("Are you sure you want to clear & display only RNA strand information?", "NeuroCrypt", _
        MessageBoxButtons.YesNo, MessageBoxIcon.Question) _
        = DialogResult.Yes Then
                MessageBox.Show("RNA mode on. Press 'Generate' to proceed.")
                Result.Text = ""
                CapitalLettersToolStripMenuItem.CheckState = CheckState.Unchecked
                NumbersToolStripMenuItem.CheckState = CheckState.Unchecked
                LettersToolStripMenuItem.CheckState = CheckState.Unchecked
                SymbolsToolStripMenuItem.CheckState = CheckState.Unchecked
                BinaryToolStripMenuItem.CheckState = CheckState.Unchecked
                DNAToolStripMenuItem.CheckState = CheckState.Unchecked
                AminoAcidsToolStripMenuItem.CheckState = CheckState.Unchecked
            Else
                RNAToolStripMenuItem.CheckState = CheckState.Unchecked
            End If
        End If
    End Sub

    '//View string as binary
    Public Sub AsBinaryToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AsBinaryToolStripMenuItem.Click
        'binary check'
        If Regex.IsMatch(datafield.Text, "^[01]+$") Then
            MessageBox.Show("Already in binary form!")
        Else
            'converting string to binary'
            Dim Resultconvert As String = ""
            For Each C As Char In datafield.Text
                Dim s As String = System.Convert.ToString(AscW(C), 2).PadLeft(8, "0")
                Resultconvert &= s
            Next
            datafield.Text = Resultconvert
        End If
    End Sub

    '//View binary as string
    Public Sub AsStringToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AsStringToolStripMenuItem.Click
        If BinaryToolStripMenuItem.CheckState = CheckState.Checked Then
            MessageBox.Show("NeuroCrypt cannot view as string, since the binary is malformed (indivisible by 8). Please turn off Binary mode and try again.", "Error")
            'Check if text is a string before attempting to view as string'
        ElseIf Regex.IsMatch(datafield.Text, "^[a-z, A-Z, 1-9, /!-*/, ?ATGC, ?GPAVLIMCFYWHKRQNEDST]") Then
            MessageBox.Show("Already in string form!")
        Else
            'converting binary to string' 
            Dim BinaryText As String = datafield.Text
            Dim Values As String = Nothing
            Dim Character As String = System.Text.RegularExpressions.Regex.Replace(datafield.Text, "[^01]", "")
            Dim ByteArrays((Character.Length / 8) - 1) As Byte
            For Index As Integer = 0 To ByteArrays.Length - 1
                ByteArrays(Index) = Convert.ToByte(Character.Substring(Index * 8, 8), 2)
            Next
            Values = System.Text.ASCIIEncoding.ASCII.GetString(ByteArrays)
            datafield.Text = Values
            If DNAToolStripMenuItem.CheckState = CheckState.Checked Or RNAToolStripMenuItem.CheckState = CheckState.Checked Or AminoAcidsToolStripMenuItem.CheckState = CheckState.Checked Then
            Else
                SymbolsToolStripMenuItem.CheckState = CheckState.Checked
            End If
        End If
    End Sub

    '//ENCRYPTION/DECRYPTION 3DES (160-BIT) WRAPPER//
    Public NotInheritable Class Simple3Des

        Sub New(ByVal key As String)
            ' Initialize the crypto provider.
            TripleDes.Key = TruncateHash(key, TripleDes.KeySize \ 8)
            TripleDes.IV = TruncateHash("", TripleDes.BlockSize \ 8)
        End Sub
        Public TripleDes As New TripleDESCryptoServiceProvider
        Public Function TruncateHash(
    ByVal key As String,
    ByVal length As Integer) As Byte()

            Dim sha1 As New SHA1CryptoServiceProvider

            ' Hash the key. 
            Dim keyBytes() As Byte =
                System.Text.Encoding.Unicode.GetBytes(key)
            Dim hash() As Byte = sha1.ComputeHash(keyBytes)

            ' Truncate or pad the hash. 
            ReDim Preserve hash(length - 1)
            Return hash
        End Function

        Public Function EncryptData(
    ByVal plaintext As String) As String

            ' Convert the plaintext string to a byte array. 
            Dim plaintextBytes() As Byte =
                System.Text.Encoding.Unicode.GetBytes(plaintext)

            ' Create the stream. 
            Dim ms As New System.IO.MemoryStream
            ' Create the encoder to write to the stream. 
            Dim encStream As New CryptoStream(ms,
                TripleDes.CreateEncryptor(),
                System.Security.Cryptography.CryptoStreamMode.Write)

            ' Use the crypto stream to write the byte array to the stream.
            encStream.Write(plaintextBytes, 0, plaintextBytes.Length)
            encStream.FlushFinalBlock()

            ' Convert the encrypted stream to a printable string. 
            Return Convert.ToBase64String(ms.ToArray)


        End Function


        Public Function DecryptData(
    ByVal encryptedtext As String) As String

            ' Convert the encrypted text string to a byte array. 
            Dim encryptedBytes() As Byte = Convert.FromBase64String(encryptedtext)

            ' Create the stream. 
            Dim ms As New System.IO.MemoryStream
            ' Create the decoder to write to the stream. 
            Dim decStream As New CryptoStream(ms,
                TripleDes.CreateDecryptor(),
                System.Security.Cryptography.CryptoStreamMode.Write)

            ' Use the crypto stream to write the byte array to the stream.
            decStream.Write(encryptedBytes, 0, encryptedBytes.Length)
            decStream.FlushFinalBlock()

            ' Convert the plaintext stream to a string. 
            Return System.Text.Encoding.Unicode.GetString(ms.ToArray)
        End Function
    End Class
    'test encryption
    Sub TestEncoding()
        Dim encyresult As String = Result.Text

        Dim password As String = InputBox("Enter a passphrase:")
        If password <> "" Then
            Dim wrapper As New Simple3Des(password)
            Dim cipherText As String = wrapper.EncryptData(encyresult)

            MsgBox("Please save the ciphertext. This is very important for decryption.")
            If SaveFileDialog2.ShowDialog() = DialogResult.OK Then
                System.IO.File.WriteAllText(SaveFileDialog2.FileName, cipherText)
                MsgBox("Hurray! Ticket has been succesfully encrypted as ciphertext.")
                MsgBox("Your cipher text is: " & cipherText)
                Result.Text = ""
            Else
                'password cancelled or empty
            End If
            'My.Computer.FileSystem.WriteAllText(
            '   My.Computer.FileSystem.SpecialDirectories.MyDocuments &
            ' "\cipherText.txt", cipherText, False)
            'MsgBox("Ciphertext has been saved in your My Documents folder.")
        Else
            'save file dialog cancelled, or empty
        End If
    End Sub
    'test decryption
    Sub TestDecoding()
        'Dim cipherText As String = My.Computer.FileSystem.ReadAllText(
        '    My.Computer.FileSystem.SpecialDirectories.MyDocuments &
        '       "\cipherText.txt")

        If OpenFileDialog2.ShowDialog() = DialogResult.OK Then
            System.IO.File.ReadAllText(OpenFileDialog2.FileName)
            Dim cipherText As String = System.IO.File.ReadAllText(OpenFileDialog2.FileName)

            Dim password As String = InputBox("Enter the passphrase:")
            If password <> "" Then
                Dim wrapper As New Simple3Des(password)

                ' DecryptData throws if the wrong password is used. 
                Try
                    Dim plainText As String = wrapper.DecryptData(cipherText)
                    MsgBox("Success! Ciphertext has been decrypted.")
                    Result.Text = plainText

                    Dim entropytext As String = Result.Text

                    Dim theresult = entropytext.GroupBy(Function(o) o) _
                        .Select(Function(o) New With {.Count = o.Count(), .Character = o.Key}) _
                        .GroupBy(Function(o) o.Count, Function(o) o.Character) _
                        .OrderByDescending(Function(o) o.Key)

                    Dim totalEntropy As Double = 0
                    Dim partialEntropy As Double
                    Dim partialP As Double

                    For Each item In theresult
                        Console.Write(item.Key & " of chars: ")

                        For Each character In item
                            Console.Write(character)
                        Next

                        partialP = item.Key / entropytext.Count
                        Console.Write(". p of each " & partialP & ", total p = " & item.Count * partialP)
                        partialEntropy = partialP * Math.Log(partialP) * item.Count
                        totalEntropy += partialEntropy
                        Console.WriteLine()
                    Next

                    totalEntropy *= -1
                    TextBox1.Text = totalEntropy & " Bits"

                Catch ex As System.Security.Cryptography.CryptographicException
                    MsgBox("The data could not be decrypted with the passphrase.")
                End Try
            Else
                'password field cancelled, or empty
            End If
        Else
            'open file dialog cancelled or empty
        End If
    End Sub
    '//END WRAPPER//

    'Interface code for encyption/decryption 
    Public Sub EncryptTestToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EncryptTestToolStripMenuItem.Click
        If Result.Text = "" Then
            MsgBox("NeuroCrypt must generate a key first.")
        Else
            TestEncoding()
        End If
    End Sub
    Public Sub DecryptTestToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles DecryptTestToolStripMenuItem.Click
        TestDecoding()
    End Sub

    Public Sub TextBox1_TextChanged(sender As Object, e As EventArgs) Handles TextBox1.TextChanged
    End Sub

    'Run the EEG program
    Public Sub EEGViewerToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EEGViewerToolStripMenuItem.Click
        EEG_Viewer.Show()
    End Sub

    'Including hours to days format for Bruteforce calculator
    Public Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim textboxread As String = Result.Text
        Dim map = New Dictionary(Of Char, Integer)()
        For Each c As Char In textboxread
            If Not map.ContainsKey(c) Then
                map.Add(c, 1)
            Else
                map(c) += 1
            End If
        Next
        Dim resulted As Double = 0.0
        Dim len As Integer = textboxread.Length
        For Each item In map
            Dim frequency = CDbl(item.Value) / len
            resulted -= frequency * (Math.Log(frequency) / Math.Log(2))
        Next

        Dim guessrate As String = InputBox("Iteration count (n guesses per second):", "Bruteforce rate", "1000")

        If Not IsNumeric(guessrate) Then
            'do nothing
        ElseIf guessrate <> "" Then
            RichTextBox1.Text = FormatNumber(((((2 ^ resulted / guessrate) * 24) * 60) / 60), 2) & " hrs"
        Else
            'cancelled or empty
        End If

        'if hours is over 999 (greater than 9 digits), then display days format
        If RichTextBox1.TextLength > 9 Then
            RichTextBox1.Text = FormatNumber((((((2 ^ resulted / guessrate) * 24) * 60) / 60) / 24), 0) & " days"
        End If

    End Sub

    '//Stops letters being entered for the string length field (numeral input only)
    Public Sub TextBox1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles Lengthh.KeyPress

        '97 - 122 = Ascii codes for simple letters
        '65 - 90  = Ascii codes for capital letters
        '48 - 57  = Ascii codes for numbers

        If Asc(e.KeyChar) <> 8 Then
            If Asc(e.KeyChar) < 48 Or Asc(e.KeyChar) > 57 Then
                e.Handled = True
            End If
        End If
    End Sub

    '//Textbox
    Public Sub RichTextBox2_TextChanged(sender As Object, e As EventArgs) Handles RichTextBox2.TextChanged
    End Sub

    Public Sub RichTextBox1_TextChanged(sender As Object, e As EventArgs) Handles RichTextBox1.TextChanged
    End Sub

    '//Help menu
    Public Sub HelpToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles HelpToolStripMenuItem.Click
    End Sub

    Public Sub OptionsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles OptionsToolStripMenuItem.Click

    End Sub

    Public Sub Label2_Click(sender As Object, e As EventArgs) Handles Label2.Click

    End Sub

    Public Sub MenuStrip1_ItemClicked(sender As Object, e As ToolStripItemClickedEventArgs) Handles MenuStrip1.ItemClicked

    End Sub

    Public Sub Lengthh_TextChanged(sender As Object, e As EventArgs) Handles Lengthh.TextChanged

    End Sub

    Public Sub NeuroCrypt_Load(sender As Object, e As EventArgs) Handles MyBase.Load

    End Sub

    Public Sub Label3_Click(sender As Object, e As EventArgs)
    End Sub


    Dim password As String = "lol" '//set the encryption password

    Sub NeuralEncoding()

        '//encryption
        Dim plainText As String = TextBox2.Text
        'Dim password As String = InputBox("Password", "Number 1", Result.Text)
        Dim wrapper As New Simple3Des(password)
        Dim cipherText As String = wrapper.EncryptData(plainText)
        My.Computer.FileSystem.WriteAllText(
            My.Computer.FileSystem.SpecialDirectories.MyDocuments &
            "\cipherTextTicket.txt", cipherText, False)
        TextBox2.Text = ""


        Dim new_ciphertext As String = My.Computer.FileSystem.ReadAllText(
    My.Computer.FileSystem.SpecialDirectories.MyDocuments &
     "\cipherTextTicket.txt")
        Dim n_wrapper As New Simple3Des(password)

        Dim wowtext = wrapper.DecryptData(cipherText)

    End Sub

    Sub NeuralEncodingForDatafield()

        '//encryption
        Dim plainText As String = datafield.Text
        Dim password As String = "jHs2PBd3" '//NEEDS TO CHANGE BASED ON RESULT.TEXT FIELD
        'Dim password As String = InputBox("Password", "Number 1", Result.Text)
        Dim wrapper As New Simple3Des(password)
        Dim cipherText As String = wrapper.EncryptData(plainText)
        My.Computer.FileSystem.WriteAllText(
            My.Computer.FileSystem.SpecialDirectories.MyDocuments &
            "\cipherTextTicketdatafield.txt", cipherText, False)
        datafield.Text = ""

        Dim new_ciphertext As String = My.Computer.FileSystem.ReadAllText(
    My.Computer.FileSystem.SpecialDirectories.MyDocuments &
     "\cipherTextTicketdatafield.txt")
        Dim n_wrapper As New Simple3Des(password)

        Dim wowtext = wrapper.DecryptData(cipherText)

    End Sub


    'Sending the string to the Csharp Project
    Public Function CallResults() As String

        '//decryption for transfer

        Dim ciphertext As String = My.Computer.FileSystem.ReadAllText(
        My.Computer.FileSystem.SpecialDirectories.MyDocuments &
        "\cipherTextTicket.txt")
        Dim wrapper As New Simple3Des(password)
        Dim wowtext = wrapper.DecryptData(ciphertext)

        Dim hi As String = wowtext
        Return hi

        'Dim plaintext As String = My.Computer.FileSystem.ReadAllText(
        '   My.Computer.FileSystem.SpecialDirectories.MyDocuments &
        '        "\plaintext.txt")
    End Function

    Public Function CallDataback() As String

        '//decryption for transfer

        Dim ciphertext As String = My.Computer.FileSystem.ReadAllText(
        My.Computer.FileSystem.SpecialDirectories.MyDocuments &
        "\cipherTextTicketdatafield.txt")
        Dim password2 As String = "jHs2PBd3" '//NEEDS TO CHANGE BASED ON RESULT.TEXT FIELD
        Dim wrapper As New Simple3Des(password2)
        Dim wowtext = wrapper.DecryptData(ciphertext)

        Dim hi As String = wowtext
        Return hi

        'Dim plaintext As String = My.Computer.FileSystem.ReadAllText(
        '   My.Computer.FileSystem.SpecialDirectories.MyDocuments &
        '        "\plaintext.txt")
    End Function


    Public Class TextBoxWriter
        Inherits TextWriter
        Private _output As TextBox = Nothing

        Public Sub New(output As TextBox)
            _output = output
        End Sub

        Public Overrides Sub Write(value As Char)
            MyBase.Write(value)
            _output.AppendText(value.ToString())
        End Sub

        Public Overrides ReadOnly Property Encoding() As Encoding
            Get
                Return System.Text.Encoding.UTF8
            End Get
        End Property
    End Class

    Private Sub Label3_Click_1(sender As Object, e As EventArgs)

    End Sub

    Private Sub datafield_TextChanged(sender As Object, e As EventArgs) Handles datafield.TextChanged

    End Sub
End Class

