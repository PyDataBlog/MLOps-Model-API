/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdexcept>
#include <io/humble/ferry/JNIHelper.h>

extern "C" {
  SWIGEXPORT jint JNICALL JNI_OnLoad(JavaVM *jvm, void *);
};

/*
 * This will be called if an when we're loaded
 * directly by Java.  If we're linked to via
 * C/C++ linkage on another library, they
 * must call sSetVM().
 */
SWIGEXPORT jint JNICALL
JNI_OnLoad(JavaVM *, void *)
{
  /* Because of static initialize in Mac OS, the only safe thing
   * to do here is return the version */
  return io::humble::ferry::JNIHelper::sGetJNIVersion();
}
#include <io/humble/ferry/RefCounted.h>
#include <io/humble/ferry/AtomicInteger.h>
#include <io/humble/ferry/Logger.h>
#include <io/humble/ferry/Mutex.h>
#include <io/humble/ferry/Buffer.h>
#include <io/humble/ferry/RefCountedTester.h>

using namespace io::humble::ferry;

extern "C" {
SWIGEXPORT void JNICALL
Java_io_humble_ferry_Ferry_init(JNIEnv *env, jclass)
{
  JavaVM* vm=0;
  if (!io::humble::ferry::JNIHelper::sGetVM()) {
    env->GetJavaVM(&vm);
    io::humble::ferry::JNIHelper::sSetVM(vm);
  }
}

}


static void Buffer_javaDirectFreeFunc(void *, void * closure);
typedef jobject jNioByteArray;


SWIGINTERN jNioByteArray io_humble_ferry_Buffer_java_getByteBuffer(io::humble::ferry::Buffer *self,int32_t offset,int32_t length){
    void * buffer = 0;
    jobject retval = 0;
    
    buffer = self->getBytes(offset, length);
    if (buffer)
    {
      JNIEnv *env = JNIHelper::sGetEnv();
      if (env)
      {
        if (!env->ExceptionCheck())
          retval = env->NewDirectByteBuffer(buffer, length);
      }
    }
    return retval;
  }
SWIGINTERN jbyteArray io_humble_ferry_Buffer_getByteArray(io::humble::ferry::Buffer *self,int32_t offset,int32_t length){
    jbyte * buffer = 0;
    jbyteArray retval = 0;
    
    buffer = static_cast<jbyte*>(self->getBytes(offset, length));
    if (buffer)
    {
      JNIEnv *env = JNIHelper::sGetEnv();
      if (env)
      {
        if (env->ExceptionCheck())
          return 0;
        retval = env->NewByteArray(length);
        if (env->ExceptionCheck())
        {
          if (retval) env->DeleteLocalRef(retval);
          retval = 0;
        }
        if (retval)
        {
          // copy the data into the byte array
          env->SetByteArrayRegion(retval, 0, length, buffer);
          if (env->ExceptionCheck())
          {
            // an error occurred; release our byte array
            // reference and return.
            env->DeleteLocalRef(retval);
            retval = 0;
          }
        }
      }
    }
    return retval;
  }
SWIGINTERN io::humble::ferry::Buffer *io_humble_ferry_Buffer_make__SWIG_2(io::humble::ferry::RefCounted *requestor,jbyteArray buffer,int32_t offset,int32_t length){
    Buffer* retval = 0;
    try
    {
      JNIEnv* env = JNIHelper::sGetEnv();
      if (!env)
        throw std::runtime_error("could not get java environment");
      
      if (env->ExceptionCheck())
        throw std::runtime_error("pending Java exception");

      if (!buffer)
        throw std::invalid_argument("no byte buffer passed in");
      
      jsize bufSize = env->GetArrayLength(buffer);
      if (env->ExceptionCheck())
        throw std::runtime_error("could not get java byteArray size");

      if (bufSize < offset + length)
        throw std::out_of_range("invalid offset and length");
      
      retval = Buffer::make(requestor, length);
      if (!retval)
        throw std::runtime_error("could not allocate Buffer");

      jbyte* bytes = static_cast<jbyte*>(retval->getBytes(0, length));
      if (!bytes)
        throw std::bad_alloc();
      
      // now try the copy
      env->GetByteArrayRegion(buffer, offset, length, bytes);
      if (env->ExceptionCheck())
        throw std::runtime_error("could not copy data into native Buffer memory");
    }
    catch(std::exception & c)
    {
         do {      if (retval) {        (retval)->release();      }      (retval) = 0;    } while (0);
      throw;
    }
    return retval;

  }
SWIGINTERN io::humble::ferry::Buffer *io_humble_ferry_Buffer_make__SWIG_3(io::humble::ferry::RefCounted *requestor,jNioByteArray directByteBuffer,int32_t offset,int32_t length){
    Buffer * retval = 0;
    jobject globalRef = 0;
    JNIEnv* env = JNIHelper::sGetEnv();
    try
    {
      if (!env)
        throw std::runtime_error("could not get java environment");
      
      if (env->ExceptionCheck())
        throw std::runtime_error("pending Java exception");

      if (!directByteBuffer)
        throw std::invalid_argument("no byte buffer passed in");
      
      jclass byteBufferClass = env->FindClass("java/nio/ByteBuffer");
      if (env->ExceptionCheck() || !byteBufferClass)
        throw std::runtime_error("could not get find java/nio/ByteBuffer class");
      jboolean rightClass = env->IsInstanceOf(directByteBuffer,byteBufferClass);
      env->DeleteLocalRef(byteBufferClass);
      if (env->ExceptionCheck())
        throw std::runtime_error("could not get instanceof passed in object");
      if (!rightClass)
      {
        jclass cls=env->FindClass("java/lang/IllegalArgumentException");
        if (cls)
          env->ThrowNew(cls, "object passed in is not instance of java.nio.ByteBuffer");
        throw std::runtime_error("object not instanceof java.nio.ByteBuffer");
      }
      // let's figure out if this is a direct buffer
      int32_t availableLength = env->GetDirectBufferCapacity(directByteBuffer);
      if (env->ExceptionCheck())
        throw std::runtime_error("could not get java byteArray size");
      int8_t* javaBuffer = static_cast<int8_t*>(env->GetDirectBufferAddress(directByteBuffer));
      if (env->ExceptionCheck())
        throw std::runtime_error("could not get java direct byte buffer");
      
      if (availableLength == -1 || !javaBuffer)
      {
        jclass cls=env->FindClass("java/lang/IllegalArgumentException");
        if (cls)
          env->ThrowNew(cls, "object passed in is not instance of java.nio.ByteBuffer or this JVM doesn't allow native code to access direct buffers");
        throw std::runtime_error("object not instanceof java.nio.ByteBuffer");
      }


      if (availableLength < length + offset)
        throw std::runtime_error("not enough data in byte buffer");
      
      // Let's try creating a wrapper around this object.
      // Now, let's get a global reference to remember 
      globalRef = env->NewGlobalRef(directByteBuffer);
      if (env->ExceptionCheck())
        throw std::runtime_error("could not get global reference to passed in byte array");
            
      retval = Buffer::make(requestor, javaBuffer+offset, length,
          Buffer_javaDirectFreeFunc, globalRef);
      //fprintf(stderr, "Creating global ref: %p\n", globalRef);
      
      if (!retval)
        throw std::runtime_error("could not wrap java byte array");
      globalRef = 0;

    }
    catch (std::exception & c)
    {
      if (env && globalRef)
        env->DeleteGlobalRef(globalRef);
      globalRef = 0;
         do {      if (retval) {        (retval)->release();      }      (retval) = 0;    } while (0);
      throw;
    }
    
    return retval;
  }

  /**
   * This method is passed as a freefunc to the Buffer object.  Once
   * the Buffer has no more references to it, this method will be called,
   * and will release the backing java.nio.ByteBuffer object that we got
   * data from.
   */
  static void
  Buffer_javaDirectFreeFunc(void *, void * closure)
  {
    jobject globalRef = static_cast<jobject>(closure);
    JNIEnv* env = JNIHelper::sGetEnv();
    if (env && globalRef)
    {
      //fprintf(stderr, "Releasing global ref: %p\n", globalRef);
      env->DeleteGlobalRef(globalRef);
    }
  }
  


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_new_1AtomicInteger_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  io::humble::ferry::AtomicInteger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::AtomicInteger *)new io::humble::ferry::AtomicInteger();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::AtomicInteger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_new_1AtomicInteger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  io::humble::ferry::AtomicInteger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::AtomicInteger *)new io::humble::ferry::AtomicInteger(arg1);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::AtomicInteger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_delete_1AtomicInteger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      delete arg1;
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->get();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->set(arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1getAndSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getAndSet(arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1getAndIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getAndIncrement();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1getAndDecrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getAndDecrement();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1getAndAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getAndAdd(arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1incrementAndGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->incrementAndGet();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1decrementAndGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->decrementAndGet();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1addAndGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->addAndGet(arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1compareAndSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->compareAndSet(arg2,arg3);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_AtomicInteger_1isAtomic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::ferry::AtomicInteger *arg1 = (io::humble::ferry::AtomicInteger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::AtomicInteger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isAtomic();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_RefCounted_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::RefCounted *arg1 = (io::humble::ferry::RefCounted *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::RefCounted **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->acquire();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_RefCounted_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::RefCounted *arg1 = (io::humble::ferry::RefCounted *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::RefCounted **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->release();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_RefCounted_1getCurrentNativeRefCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::RefCounted *arg1 = (io::humble::ferry::RefCounted *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::RefCounted **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getCurrentRefCount();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Logger_1LEVEL_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::ferry::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::ferry::Logger::Level)io::humble::ferry::Logger::LEVEL_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Logger_1LEVEL_1WARN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::ferry::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::ferry::Logger::Level)io::humble::ferry::Logger::LEVEL_WARN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Logger_1LEVEL_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::ferry::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::ferry::Logger::Level)io::humble::ferry::Logger::LEVEL_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Logger_1LEVEL_1DEBUG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::ferry::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::ferry::Logger::Level)io::humble::ferry::Logger::LEVEL_DEBUG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Logger_1LEVEL_1TRACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  io::humble::ferry::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (io::humble::ferry::Logger::Level)io::humble::ferry::Logger::LEVEL_TRACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Logger_1getLogger(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  io::humble::ferry::Logger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::Logger *)io::humble::ferry::Logger::getLogger((char const *)arg1);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::Logger **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Logger_1getStaticLogger(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  io::humble::ferry::Logger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::Logger *)io::humble::ferry::Logger::getStaticLogger((char const *)arg1);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::Logger **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  io::humble::ferry::Logger::Level arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (io::humble::ferry::Logger::Level)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->log((char const *)arg2,arg3,arg4,(char const *)arg5,arg6);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->error((char const *)arg2,arg3,(char const *)arg4,arg5);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1warn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->warn((char const *)arg2,arg3,(char const *)arg4,arg5);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->info((char const *)arg2,arg3,(char const *)arg4,arg5);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1debug(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->debug((char const *)arg2,arg3,(char const *)arg4,arg5);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1trace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->trace((char const *)arg2,arg3,(char const *)arg4,arg5);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1isPrintStackTrace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isPrintStackTrace();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_Logger_1setPrintStackTrace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPrintStackTrace(arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1isLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  io::humble::ferry::Logger::Level arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = (io::humble::ferry::Logger::Level)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isLogging(arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_Logger_1setIsLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  io::humble::ferry::Logger::Level arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  arg2 = (io::humble::ferry::Logger::Level)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setIsLogging(arg2,arg3);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_io_humble_ferry_FerryJNI_Logger_1isGlobalLogging(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  io::humble::ferry::Logger::Level arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::ferry::Logger::Level)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)io::humble::ferry::Logger::isGlobalLogging(arg1);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_Logger_1setGlobalIsLogging(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  io::humble::ferry::Logger::Level arg1 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::ferry::Logger::Level)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      io::humble::ferry::Logger::setGlobalIsLogging(arg1,arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jstring JNICALL Java_io_humble_ferry_FerryJNI_Logger_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_delete_1Logger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  io::humble::ferry::Logger *arg1 = (io::humble::ferry::Logger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::humble::ferry::Logger **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      delete arg1;
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Mutex_1make(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  io::humble::ferry::Mutex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::Mutex *)io::humble::ferry::Mutex::make();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::Mutex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_Mutex_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  io::humble::ferry::Mutex *arg1 = (io::humble::ferry::Mutex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Mutex **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->lock();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_Mutex_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  io::humble::ferry::Mutex *arg1 = (io::humble::ferry::Mutex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Mutex **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->unlock();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1getBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::Buffer *arg1 = (io::humble::ferry::Buffer *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Buffer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getBufferSize();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  io::humble::ferry::RefCounted *arg1 = (io::humble::ferry::RefCounted *) 0 ;
  int32_t arg2 ;
  io::humble::ferry::Buffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::RefCounted **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::Buffer *)io::humble::ferry::Buffer::make(arg1,arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::Buffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::Buffer *arg1 = (io::humble::ferry::Buffer *) 0 ;
  io::humble::ferry::Buffer::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Buffer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::Buffer::Type)(arg1)->getType();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  io::humble::ferry::Buffer *arg1 = (io::humble::ferry::Buffer *) 0 ;
  io::humble::ferry::Buffer::Type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Buffer **)&jarg1; 
  arg2 = (io::humble::ferry::Buffer::Type)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setType(arg2);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return ;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return ;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1getTypeSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  io::humble::ferry::Buffer::Type arg1 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (io::humble::ferry::Buffer::Type)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)io::humble::ferry::Buffer::getTypeSize(arg1);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  io::humble::ferry::Buffer *arg1 = (io::humble::ferry::Buffer *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Buffer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSize();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  io::humble::ferry::RefCounted *arg1 = (io::humble::ferry::RefCounted *) 0 ;
  io::humble::ferry::Buffer::Type arg2 ;
  int32_t arg3 ;
  bool arg4 ;
  io::humble::ferry::Buffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::RefCounted **)&jarg1; 
  arg2 = (io::humble::ferry::Buffer::Type)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::Buffer *)io::humble::ferry::Buffer::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::Buffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1java_1getByteBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jobject jresult = 0 ;
  io::humble::ferry::Buffer *arg1 = (io::humble::ferry::Buffer *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  jNioByteArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Buffer **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = io_humble_ferry_Buffer_java_getByteBuffer(arg1,arg2,arg3);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1getByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jbyteArray jresult = 0 ;
  io::humble::ferry::Buffer *arg1 = (io::humble::ferry::Buffer *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  jbyteArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::Buffer **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = io_humble_ferry_Buffer_getByteArray(arg1,arg2,arg3);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1make_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  io::humble::ferry::RefCounted *arg1 = (io::humble::ferry::RefCounted *) 0 ;
  jbyteArray arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  io::humble::ferry::Buffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::RefCounted **)&jarg1; 
  arg2 = jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::Buffer *)io_humble_ferry_Buffer_make__SWIG_2(arg1,arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::Buffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1make_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  io::humble::ferry::RefCounted *arg1 = (io::humble::ferry::RefCounted *) 0 ;
  jNioByteArray arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  io::humble::ferry::Buffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::RefCounted **)&jarg1; 
  arg2 = jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::Buffer *)io_humble_ferry_Buffer_make__SWIG_3(arg1,arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::Buffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_RefCountedTester_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  io::humble::ferry::RefCountedTester *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::RefCountedTester *)io::humble::ferry::RefCountedTester::make();
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::RefCountedTester **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_RefCountedTester_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  io::humble::ferry::RefCountedTester *arg1 = (io::humble::ferry::RefCountedTester *) 0 ;
  io::humble::ferry::RefCountedTester *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(io::humble::ferry::RefCountedTester **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (io::humble::ferry::RefCountedTester *)io::humble::ferry::RefCountedTester::make(arg1);
    }
    catch(std::exception & e)
    {
      io::humble::ferry::JNIHelper::catchException(jenv, e);
      return 0;
    }
    catch(...)
    {
      std::runtime_error e("Unhandled and unknown native exception");
      io::humble::ferry::JNIHelper::throwJavaException(jenv, "java/lang/RuntimeException", e);
      return 0;
    }
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(io::humble::ferry::RefCountedTester **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Mutex_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::ferry::Mutex **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_Buffer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::ferry::Buffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_humble_ferry_FerryJNI_RefCountedTester_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(io::humble::ferry::RefCounted **)&baseptr = *(io::humble::ferry::RefCountedTester **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

