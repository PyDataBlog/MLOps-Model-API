#version 450 core
layout(location = 0)in vec3 position;
layout(location = 1)in float boundaries;
layout(location = 2)in vec3 normals;

#define PI 3.1415926535f

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 modelMatrix;

uniform float radius = 0.15;
uniform float fov = 45.0;
uniform float height = 920.0;

out flat float pointRadius;
out flat float boundary;
out vec3 posEye;
out vec3 posWorld;
out flat int pointId;


const float pointScale = height / tan(fov * (0.5f * PI/180.0f));

void main(){
    pointRadius = radius;
    vec3 pos = position.xyz;
    posWorld = pos;
    boundary = boundaries;
    pointId = gl_VertexID;
    posEye = (viewMatrix  * vec4(pos, 1.0)).xyz;
    float dist = length(posEye);
    gl_PointSize = pointRadius * (pointScale/dist);
    gl_Position = projectionMatrix * viewMatrix  * modelMatrix * vec4(pos, 1.0);
}

