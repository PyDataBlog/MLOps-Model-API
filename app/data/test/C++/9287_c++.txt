#include "include.h"
#include "cenum.h"


template<typename INT>
PyObject* cenum_object<INT>::_int(cenum_object* self)
{
    if (std::numeric_limits<INT>::is_signed)
    {
        return PyLong_FromLongLong(self->_value);
    }
    else
    {
        return PyLong_FromUnsignedLongLong(self->_value);
    }
}

template<typename INT>
PyNumberMethods cenum_object<INT>::number_methods =
{
	0,                              //binaryfunc nb_add;
	0,                              //binaryfunc nb_subtract;
	0,                              //binaryfunc nb_multiply;
	0,                              //binaryfunc nb_remainder;
	0,                              //binaryfunc nb_divmod;
	0,                              //ternaryfunc nb_power;
	0,                              //unaryfunc nb_negative;
	0,                              //unaryfunc nb_positive;
	0,                              //unaryfunc nb_absolute;
	0,                              //inquiry nb_bool;
	0,                              //unaryfunc nb_invert;
	0,                              //binaryfunc nb_lshift;
	0,                              //binaryfunc nb_rshift;
	0,                              //binaryfunc nb_and;
	0,                              //binaryfunc nb_xor;
	0,                              //binaryfunc nb_or;
	(unaryfunc)_int,                //unaryfunc nb_int;
	0,                              //void *nb_reserved;
	0,                              //unaryfunc nb_float;

	0,                              //binaryfunc nb_inplace_add;
	0,                              //binaryfunc nb_inplace_subtract;
	0,                              //binaryfunc nb_inplace_multiply;
	0,                              //binaryfunc nb_inplace_remainder;
	0,                              //ternaryfunc nb_inplace_power;
	0,                              //binaryfunc nb_inplace_lshift;
	0,                              //binaryfunc nb_inplace_rshift;
	0,                              //binaryfunc nb_inplace_and;
	0,                              //binaryfunc nb_inplace_xor;
	0,                              //binaryfunc nb_inplace_or;

	0,                              //binaryfunc nb_floor_divide;
	0,                              //binaryfunc nb_true_divide;
	0,                              //binaryfunc nb_inplace_floor_divide;
	0,                              //binaryfunc nb_inplace_true_divide;

	0,                              //unaryfunc nb_index;

	0,                              //binaryfunc nb_matrix_multiply;
	0,                              //binaryfunc nb_inplace_matrix_multiply;

};


#pragma warning(disable:4661)
template struct cenum_object<unsigned char>;
template struct cenum_object<signed char>;
template struct cenum_object<unsigned short>;
template struct cenum_object<signed short>;
template struct cenum_object<unsigned int>;
template struct cenum_object<signed int>;
template struct cenum_object<unsigned long long>;
template struct cenum_object<signed long long>;

