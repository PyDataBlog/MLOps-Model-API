package main

import (
	"flag"
	"fmt"
	"os"

	"github.com/antizealot1337/multihost"
)

func main() {
	// Create the filename flag
	filename := flag.String("file", "",
		"The file name that contains the routes.")

	// Create the check dir flag
	checkDir := flag.Bool("check", false, "Will check the path")

	// Parse the arguments
	flag.Parse()

	// Make sure we have a file name
	if *filename == "" {
		fmt.Println("Expected filename.")
		flag.PrintDefaults()
		os.Exit(-1)
	} //if

	// Attempt to open the file
	file, err := os.Open(*filename)

	// Check for the error
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(-1)
	} //if

	// The width of the host and path
	hostWidth, pathWidth := 20, 20

	// Read the routes
	routes := multihost.ReadRoutes(file)

	// Go ahead and close the file
	if err := file.Close(); err != nil {
		fmt.Println(err.Error())
		os.Exit(-1)
	} //if

	// Loop through to make sure we have enough space to print the hosts
	for host, path := range routes {
		// Check the length of the host
		if hostLen := len(host); hostLen > hostWidth {
			hostWidth = hostLen + 2
		} //if

		// Check the length of the path
		if pathLen := len(path); pathLen > pathWidth {
			pathWidth = pathLen + 2
		} //if
	} //for

	// Create the format string
	fmtStr := fmt.Sprintf("%%-%ds %%-%ds", hostWidth, pathWidth)

	// Print the header
	fmt.Printf(fmtStr, "Host", "Path")

	// Print a new line
	fmt.Println()

	// Loop through the routes printing them out
	for host, path := range routes {
		// Print the info for now
		fmt.Printf(fmtStr, host, path)

		// Check if we are checking the directory
		if *checkDir {
			fmt.Printf(" (%s)", checkStatus(path))
		} //if

		// Print a new line character
		fmt.Println()
	} //for
} //main

func checkStatus(path string) string {
	// Stat the path
	if info, err := os.Stat(path); err != nil {
		return "Does not exist"
	} else if !info.IsDir() {
		return "Not a directory"
	} //if
	return "OK"
} //checkStatus
