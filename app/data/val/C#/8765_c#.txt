using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using NldbApi.Models;
using NldbApi.Interfaces;


namespace NldbApi.Controllers
{
    public class ItemController : Controller
    {
        private IItemRepository _itemRepository;
        private IItemPickupRepository _itemPickupRepository;
        private ICharacterRepository _characterRepository;
        private IItemSourceRepository _itemSourceRepository;
        private ICurseRepository _curseRepository;
        private IVisitedFloorRepository _visitedFloorRepository;
        public ItemController(IItemRepository itemRepository, IItemPickupRepository itemPickupRepository, IItemSourceRepository itemSourceRepository, ICharacterRepository characterRepository, ICurseRepository curseRepository, IVisitedFloorRepository visitedFloorRepository)
        {
            _itemRepository = itemRepository;
            _itemPickupRepository = itemPickupRepository;
            _itemSourceRepository = itemSourceRepository;
            _characterRepository = characterRepository;
            _curseRepository = curseRepository;
            _visitedFloorRepository = visitedFloorRepository;
        }
        
        [HttpGet]
        [Route("items/all/{includeNonExisting}")]
        public async Task<IEnumerable<Item>> GetAllItems(bool includeNonExisting)
        {
            return await _itemRepository.GetAllItemsAsync(includeNonExisting);
        }

        [HttpGet]
        [Route("items/uniquenames/{includeNonItems}")]
        public async Task<IEnumerable<UrlName>> GetUrlNames(bool includeNonItems)
        {
            return await _itemRepository.GetUrlNames(includeNonItems);
        }

        [HttpGet]
        [Route("items/all/condensed/{includeNonExisting}")]
        public async Task<IEnumerable<ItemCondensed>> GetAllItemsCondensed(bool includeNonExisting)
        {
            return await _itemRepository.GetAllItemsCondensedAsync(includeNonExisting);
        }

        [HttpGet]
        [Route("items/{videoId}")]
        public async Task<IEnumerable<ItemPickup>> GetItemsForVideo(string videoId)
        {
            return await _itemPickupRepository.GetItemPickupsForVideoAsync(videoId);
        }

        [HttpGet]
        [Route("item/{urlName}")]
        public async Task<Item> GetItemInfo(string urlName)
        {
            return await _itemRepository.GetSingleItemByUrlNameAsync(urlName);
        }

        [HttpGet]
        [Route("item/{urlname}/throughouttheletsplay/{start}/{end}/{amount:int}")]
        public async Task<GraphBar[]> ThroughoutTheLetsPlay(DatabaseSearchOptions options)
        {
            return await _itemPickupRepository.GetItemPickupsThroughoutTheLetsPlayAsync(options);
        }

        [HttpGet]
        [Route("item/{urlname}/itemsources/{start}/{end}")]
        public async Task<List<DetailedItemSource>> ItemSourceDetails(DatabaseSearchOptions options)
        {
            return await _itemSourceRepository.GetItemSourceDetailsForItem(options);
        }

        [HttpGet]
        [Route("item/{urlname}/characters/{start}/{end}")]
        public async Task<IEnumerable<DetailedCharacter>> CharacterDetails(DatabaseSearchOptions options)
        {
            return await _characterRepository.GetCharacterDetailsForItem(options);
        }

        [HttpGet]
        [Route("item/{urlname}/curses/{start}/{end}")]
        public async Task<List<DetailedCurse>> CurseDetails(DatabaseSearchOptions options)
        {
            return await _curseRepository.GetCurseDetailsForItemAsync(options);
        }

        [HttpGet]
        [Route("item/{urlname}/floors/{start}/{end}")]
        public async Task<List<DetailedFloor>> FloorDetails(DatabaseSearchOptions options)
        {
            return await _visitedFloorRepository.GetFloorStatsForItemAsync(options);
        }
    }
}
