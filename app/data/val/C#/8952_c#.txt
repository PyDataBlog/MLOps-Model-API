using GKeyBank;
using System;
using System.Drawing;
using System.Windows.Forms;

namespace GKeyBank.UI
{
    public partial class CustomProgressBar : UserControl
    {
        private decimal maximum = 100;
        private decimal minimum = 0;
        private decimal progressvalue = 0;
        private Color progresscolor = Color.GreenYellow;
        private Color progressbackcolor = Color.Black;

        public CustomProgressBar()
        {
            InitializeComponent();

        }

        protected override void OnCreateControl()
        {
            base.OnCreateControl();
            if (App.CurrentConfig != null)
            {
                ProgressColor = App.CurrentConfig.ThemeColor;
                ProgressBackColor = App.CurrentConfig.GetThemeBackColor();
            }
        }

        public decimal Maximum
        {
            get
            {
                return maximum;
            }
            set 
            { 
                maximum = value;
                progressRefresh();
            }
        }

        public decimal Minimum
        {
            get
            {
                return minimum;
            }
            set 
            { 
                minimum = value;
                progressRefresh();
            }
        }

        public decimal ProgressValue
        {
            get
            {
                return progressvalue;
            }
            set 
            { 
                progressvalue = value;
                progressRefresh();
            }
        }

        public Color ProgressColor
        {
            get
            {
                return progresscolor;
            }
            set 
            { 
                progresscolor = value;
                progress.BackColor = value;
            }
        }

        public Color ProgressBackColor
        {
            get
            {
                return progressbackcolor;
            }
            set 
            { 
                progressbackcolor = value;
                back.BackColor = value;
            }
        }

        private void progressRefresh()
        {
            // calculate and define size of the progress
            if (ProgressValue > Maximum)
                ProgressValue = Maximum;
            if (ProgressValue < Minimum)
                ProgressValue = Minimum;
            float prValue = 0;
            if (Maximum > 0)
                prValue = (float)((ProgressValue - Minimum) / Maximum);
            progress.Width = (int)Math.Round(back.Width * prValue);
        }
    }
}