/*  
 * Copyright 2004-2009 unitarou <boss@unitarou.org>. 
 * All rights reserved.
 * 
 * This program and the accompanying materials are made available under the terms of 
 * the Common Public License v1.0 which accompanies this distribution, 
 * and is available at http://opensource.org/licenses/cpl.php
 * 
 * Contributors:
 *     unitarou - initial API and implementation
 */
package org.unitarou.yukinoshita.model.cmd;

import org.unitarou.lang.ArgumentChecker;
import org.unitarou.lang.Strings;
import org.unitarou.sgf.CardinalityType;
import org.unitarou.sgf.Property;
import org.unitarou.sgf.SgfId;
import org.unitarou.yukinoshita.model.NodeView;

/**
 * @author unitarou &lt;boss@unitarou.org&gt; 
 */
public class CommandFactory {

    /**
     * {@link UpdateProperty}ðì¬µÄÔµÜ·B<br>
     * ±±ÅnewDatumªóÌêÍnodeView©çsgfTypeðí·éR}hÉÈèÜ·B<br>
     * Ü½nodeViewÌlÆnewDatumÉ·ª³¢êÍnullðÔµÜ·B
     *  
     * @param newDatum {@link Property#Property(SgfId, String)}É¼Ún³êé¶ñAó¶ÌêÍíðÓ¡µÜ·B
     *                  <b>GXP[vÍÖ~Å·B</b>
     * @param sgfId XVÎÛÆÈévpeBÌ^
     * @param nodeView 
     * @param bindSameType trueÉÝè·éÆ{@link SgfId#propertyType()}ðÂNodeÜÅkÁÄA
     *                      (øÌnodeViewÅÍÈ­)»Ìm[hðXVµÜ·B
     * @return ì¬³ê½vpeBBNOT NULL
     * @throws org.unitarou.lang.NullArgumentException øª<code>null</code>ÌêB
     * @throws IllegalArgumentException sgfType ª{@link CardinalityType#SINGLE}ÈOÌlðÂB
     */
    static public UpdateProperty createUpdateProperty(
    		String newDatum, SgfId sgfId, NodeView nodeView, boolean bindSameType) 
    {
    	ArgumentChecker.throwIfNull(newDatum, sgfId, nodeView);
    	if (!sgfId.cardinalityType().equals(CardinalityType.SINGLE)) {
    		throw new IllegalArgumentException("Bad carinality, property must be single: " + sgfId); //$NON-NLS-1$
    	}
    	
        Property property = bindSameType 
        		? nodeView.findProperty(sgfId) 
        		: nodeView.getProperty(sgfId);
        String lastDatum = Strings.EMPTY;
        if (property != null) {
            lastDatum = property.getString();
        }
        if (newDatum.equals(lastDatum)) {
            return null;
        }
        if (newDatum.equals(Strings.EMPTY)) { // í
            // øÅGameInfoª éã¬ÌNodeÉXV·éæ¤Éwè
            property = new Property(sgfId, lastDatum);
            return new UpdateProperty(
            			(bindSameType) ? sgfId.propertyType() : null, 
            			null, 
            			property);
        }
        // øÅGameInfoª éã¬ÌNodeÉXV·éæ¤Éwè
        property = new Property(sgfId, newDatum);
        return new UpdateProperty(
        			(bindSameType) ? sgfId.propertyType() : null, 
        			property);
    }

    /**
	 * 
	 */
	protected CommandFactory() {
		super();
	}

}
