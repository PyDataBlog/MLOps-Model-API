#!/usr/bin/env perl

use warnings;
use strict;

use Data::Dumper;
use Carp;

use 5.010;

use Bio::Gonzales::Util::Cerial;

use Bio::Gonzales::Project::Functions;
use GO::Parser;
use Getopt::Long::Descriptive;

my ( $opt, $usage ) = describe_options(
  '%c %o <obo file>',
  [
    "format" => hidden => {
      one_of => [ [ "json|j" => "output in json format" ], [ "yaml|y" => "output in yaml format" ], ],
      default => 'json'
    }
  ],
  [ 'namespace|n=s', 'restrict to certain namespace' ],
  [ 'verbose|v',     "print extra stuff" ],
  [ 'help',          "print usage message and exit" ],
);

print( $usage->text ), exit if $opt->help;

my $file = shift;
die "$file is no file" unless ( -f $file );

my %go;

# ** FETCHING GRAPH OBJECTS FROM AN ONTOLOGY FILE **
my $parser = new GO::Parser( { handler => 'obj' } );    # create parser object
$parser->parse($file);                                  # parse file -> objects
my $graph = $parser->handler->graph;                    # get L<GO::Model::Graph> object

my @terms;
if ( $opt->namespace ) {
  @terms = grep { $_->namespace eq $opt->namespace } @{ $graph->get_all_terms };
} else {
  @terms = @{ $graph->get_all_terms };
}

my %gos;
for my $t (@terms) {
  die Dumper $t if ( $t->acc !~ /^GO:/ );
  $gos{ $t->acc } = { name => $t->name, def => $t->definition };
  for my $alt_id ( @{ $t->alt_id_list } ) {
    $gos{$alt_id} = { name => $t->name, def => $t->definition };
  }
}

if ( $opt->format eq 'json' ) {
  jspew( \*STDOUT, \%gos );
} elsif ( $opt->format eq 'yaml' ) {
  yspew( \*STDOUT, \%gos );
}
