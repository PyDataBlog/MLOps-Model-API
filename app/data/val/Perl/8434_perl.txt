use strict;

# files to be read
my $org_file = "const_menu_org.c2";

my $menu_text_file = "const_menu_menu_text.c2";
my $menu_type_file = "const_menu_menu_type.c2";
my $menu_id_file   = "const_menu_menu_id.c2";

my $menu_keypress_1_file =   "const_menu_keypress_1.c2";
my $menu_keypress_2_file =   "const_menu_keypress_2.c2";
my $menu_keypress_3_file =   "const_menu_keypress_3.c2";
my $menu_keypress_NUM_file = "const_menu_keypress_NUM.c2";
my $menu_keypress_AST_file = "const_menu_keypress_ASTERIX.c2";

my $menu_variable1_1_file = "const_menu_variable1_1.c2";
my $menu_variable1_2_file = "const_menu_variable1_2.c2";
my $menu_variable1_3_file = "const_menu_variable1_3.c2";

my $menu_variable2_1_file = "const_menu_variable2_1.c2";
my $menu_variable2_2_file = "const_menu_variable2_2.c2";
my $menu_variable2_3_file = "const_menu_variable2_3.c2";

my $menu_screen_text_file = "const_menu_screen_text.c2";
my $menu_screen_id_file   = "const_menu_screen_id.c2";

# translation files
my $menu_text_translation_file   = "const_menu_text.c2";
my $screen_text_translation_file = "const_screen_text.c2";
my $menu_id_translation_file     = "const_menu_id.c2";
my $screen_id_translation_file   = "const_screen_id.c2";
my %var_translation_file_hash;
$var_translation_file_hash{"temp_ctrl"}           = "..\\common_modules\\temp_ctrl.c2";
$var_translation_file_hash{"const_room_data"}     = "const_room_data.c2";
$var_translation_file_hash{"const_output_blinds"} = "const_output_blinds.c2";
$var_translation_file_hash{"const_dimmer"}        = "const_dimmer.c2";
$var_translation_file_hash{"const_house"}         = "const_house.c2";
$var_translation_file_hash{"const_switches"}      = "const_switches.c2";

# hashes to store info in
my %MENU_hash;
my %KEYPRESS_hash;

my %MENU_TEXT_hash;
my %MENU_ID_hash;
my %SCREEN_ID_hash;
my %VAR_ID_hash;

#################################################################################

my @menu_text_file_content = ();
my @menu_type_file_content = ();
my @menu_id_file_content   = ();

my @menu_keypress_1_file_content = ();
my @menu_keypress_2_file_content = ();
my @menu_keypress_3_file_content = ();
my @menu_keypress_NUM_file_content = ();
my @menu_keypress_AST_file_content = ();

my @menu_variable1_1_file_content = ();
my @menu_variable1_2_file_content = ();
my @menu_variable1_3_file_content = ();

my @menu_variable2_1_file_content = ();
my @menu_variable2_2_file_content = ();
my @menu_variable2_3_file_content = ();

my @menu_screen_text_file_content = ();
my @menu_screen_id_file_content   = ();

my $item_count;
my $hex_val;
my $EOL_char;
#################################################################################
#    script start
#################################################################################

# Extract name of script (without path)
$0 =~ /([^\\]*)$/;
my $script_name = $1;

# read the input file;
my @input_file_content = `type $org_file`;;

my $value_keypress_num;
my $value_keypress_ast;

my $org_line;
foreach $org_line(@input_file_content)
{
  if(/^\s+\/\//)
  {
    # if this is a comment
    next;
  }

  $org_line =~ s/^\s*//g;
  # read defines
  if ($org_line =~ /const MENU/)
  {
    $org_line =~ /(\d);$/;
    $MENU_hash{MENU} = $1;
#    print "MENU = $MENU_hash{MENU}\n";
  }
  elsif ($org_line =~ /const SCREEN/)
  {
    $org_line =~ /(\d);$/;
    $MENU_hash{SCREEN} = $1;
#    print "SCREEN = $MENU_hash{SCREEN}\n";
  }

  if ($org_line =~ /const LEVEL_CHANGE_LEVEL_UP/)
  {
    $org_line =~ /(0x\d*);$/;
    $KEYPRESS_hash{LEVEL_CHANGE_LEVEL_UP} = $1;
#    print "LEVEL_CHANGE_LEVEL_UP = $KEYPRESS_hash{LEVEL_CHANGE_LEVEL_UP}\n";
  }
  elsif ($org_line =~ /const LEVEL_CHANGE_NEXT_MENU/)
  {
    $org_line =~ /(0x\d*);$/;
    $KEYPRESS_hash{LEVEL_CHANGE_NEXT_MENU} = $1;
#    print "LEVEL_CHANGE_NEXT_MENU = $KEYPRESS_hash{LEVEL_CHANGE_NEXT_MENU}\n";
  }
  elsif ($org_line =~ /const LEVEL_CHANGE_NO_CHANGE/)
  {
    $org_line =~ /(0x\d*);$/;
    $KEYPRESS_hash{LEVEL_CHANGE_NO_CHANGE} = $1;
#    print "LEVEL_CHANGE_NO_CHANGE = $KEYPRESS_hash{LEVEL_CHANGE_NO_CHANGE}\n";
  }
  elsif ($org_line =~ /const LEVEL_CHANGE_REBUILD/)
  {
    $org_line =~ /(0x\d*);$/;
    $KEYPRESS_hash{LEVEL_CHANGE_REBUILD} = $1;
#    print "LEVEL_CHANGE_REBUILD = $KEYPRESS_hash{LEVEL_CHANGE_REBUILD}\n";
  }

  # get the menu structure;
  if ($org_line =~ /MenuText\[i\]/)
  {
    push(@menu_text_file_content, $org_line);
  }

  elsif ($org_line =~ /Screen_Type/)
  {
    push(@menu_type_file_content, $org_line);
  }

  elsif ($org_line =~ /Menu_Id/)
  {
    push(@menu_id_file_content, $org_line);
  }

  elsif ($org_line =~ /KeyPress\[0\]/)
  {
    push(@menu_keypress_1_file_content, $org_line);
  }
  elsif ($org_line =~ /KeyPress\[1\]/)
  {
    push(@menu_keypress_2_file_content, $org_line);
  }
  elsif ($org_line =~ /KeyPress\[2\]/)
  {
    push(@menu_keypress_3_file_content, $org_line);
  }
  elsif ($org_line =~ /KeyPress\[3\]/)
  {
    push(@menu_keypress_NUM_file_content, $org_line);
  }
  elsif ($org_line =~ /KeyPress\[4\]/)
  {
    push(@menu_keypress_AST_file_content, $org_line);
  }

  elsif ($org_line =~ /Variable1\[0\]/)
  {
    push(@menu_variable1_1_file_content, $org_line);
  }
  elsif ($org_line =~ /Variable1\[1\]/)
  {
    push(@menu_variable1_2_file_content, $org_line);
  }
  elsif ($org_line =~ /Variable1\[2\]/)
  {
    push(@menu_variable1_3_file_content, $org_line);
  }
  elsif ($org_line =~ /Variable2\[0\]/)
  {
    push(@menu_variable2_1_file_content, $org_line);
  }
  elsif ($org_line =~ /Variable2\[1\]/)
  {
    push(@menu_variable2_2_file_content, $org_line);
  }
  elsif ($org_line =~ /Variable2\[2\]/)
  {
    push(@menu_variable2_3_file_content, $org_line);
  }

  elsif ($org_line =~ /ScreenText\[i\]/)
  {
    push(@menu_screen_text_file_content, $org_line);
  }
  elsif ($org_line =~ /ScreenId\[i\]/)
  {
    push(@menu_screen_id_file_content, $org_line);
  }
}

#################################################################################
# read translation files
#################################################################################
my $entry;
my $key;
my $value;

open(IN, "<$menu_text_translation_file") or die "Can not open $menu_text_translation_file\n";
  while (<IN>)
  {
    if(/^\s+\/\//)
    {
      # if this is a comment
      next;
    }

    if(/const.*?=.*?\".*?\"/)
    {
      $entry = $_;
      $entry =~ /const\s([\w]*)\s*=\s*\"([0-9äöüÄÖÜ\(\)\/\.\ß\&\w\s\:]*)\"/;
      $key = $1;
      $value = "\"".$2."\"";
      $MENU_TEXT_hash{$key} = $value;
#      print "key = $key\tvalue = $MENU_TEXT_hash{$key}\n";
       
    }
  }
close(IN);
open(IN, "<$screen_text_translation_file") or die "Can not open $screen_text_translation_file\n";
  while (<IN>)
  {
    if(/^\s+\/\//)
    {
      # if this is a comment
      next;
    }

    if(/const.*?=.*?\".*?\"/)
    {
      $entry = $_;
      $entry =~ /const\s([\w]*)\s*=\s*\"([0-9äöüÄÖÜ\(\)\/\.\ß\&\w\s:]*)\"/;
      $key = $1;
      $value = "\"".$2."\"";
      $MENU_TEXT_hash{$key} = $value;
#      print "key = $key\tvalue = $MENU_TEXT_hash{$key}\n";
       
    }
  }
close(IN);

####################################################################

open(IN, "<$menu_id_translation_file") or die "Can not open $menu_id_translation_file\n";
  while (<IN>)
  {
    if(/^\s+\/\//)
    {
      # if this is a comment
      next;
    }

    if(/const.*?=/)
    {
      $entry = $_;
      $entry =~ /const\s([\w]*)\s*=\s*?([0-9A-Fa-fx]*);/;
      $key = $1;
      $value = $2;
      $MENU_ID_hash{$key} = $value;
#      print "key = $key\tvalue = $MENU_ID_hash{$key}\n";
    }
  }
close(IN);

####################################################################

my $increase_val;
open(IN, "<$screen_id_translation_file") or die "Can not open $screen_id_translation_file\n";
  while (<IN>)
  {
    if(/^\s+\/\//)
    {
      # if this is a comment
      next;
    }

    if(/const.*?=/)
    {
      $entry = $_;
#      print $entry;
      $entry =~ /const\s*([\w]*)\s*=\s*([\w]*)\s*\+\s*(\d);/;
      if($1 eq '')
      {
        # first value;
        $entry =~ /const\s([\w]*)\s*=\s*([x\d]*)/;
        $key = $1;
        $value = hex($2);
        $increase_val = $0;
        $hex_val = sprintf("0x%02X",$value);
        $SCREEN_ID_hash{$key} = $hex_val;
      }
      else
      {
        $key = $1;
        $value = $2;
        $increase_val = $3;
        $hex_val = sprintf("0x%02X",hex($SCREEN_ID_hash{$value}) + $increase_val);
        $SCREEN_ID_hash{$key} = $hex_val;
      }
#      print "key = $key\tvalue = $SCREEN_ID_hash{$key}\tincrease_val = $increase_val\n";
    }
  }
close(IN);

####################################################################
my $file_key;

foreach $file_key (keys %var_translation_file_hash)
{
#  print "checking file $var_translation_file_hash{$file_key}\n";
  open(IN, "<$var_translation_file_hash{$file_key}") or die "Can not open $var_translation_file_hash{$file_key}\n";
    while (<IN>)
    {
      if(/^\s+\/\//)
      {
        # if this is a comment
        next;
      }

      if(/const.*?=/)
      {
        $entry = $_;
  #      print $entry;
        if($file_key eq "const_house")
        {
          # read simple defines
          $entry =~ /const\s([\w]*)\s*=\s*([x\da-fA-F]*)/;
#          print "simple entry = $entry";
          $key = $1;
          $value = $2;
#          print "\tkey = $key - value = $value\n\n";
          if($1 eq '')
          {
            # read array entries
#            print "array entry = $entry";
            $entry =~ /const\s([\w]*)\[\]\s*=\s*(\w*),/;
            $key = $1;
            if(!exists($VAR_ID_hash{$2}))
            {
              die "key $2 does not exist for $VAR_ID_hash{$2}\n";
            }
            $value = $VAR_ID_hash{$2};
#            print "\tkey1 = $key - \tkey2 = $2 - value = $value\n\n";
#            sleep(1);
          }
        }
        else
        {
          $entry =~ /const\s([\w]*)\s*=\s*([x\da-fA-F]*)/;
          $key = $1;
          $value = $2;
        }
        $VAR_ID_hash{$key} = $value;
#        print "file = $var_translation_file_hash{$file_key}\tkey = $key\tvalue = $VAR_ID_hash{$key}\n";
      }
    }
  close(IN);
}

########################################################
# print file ------------- const_menu_menu_text.c2
########################################################

$item_count = 0;
open (OUT, ">$menu_text_file");
print OUT "/* generated file from $script_name*/
const MENU_TEXT[] =";

foreach $entry(@menu_text_file_content)
{
  if($item_count == $#menu_text_file_content)
  {
    $EOL_char = ";";
  }
  else
  {
    $EOL_char = ",";
  }

  $item_count++;
  $hex_val = sprintf("%X",$item_count);

  # extract the key value
  $entry =~ /const_menu_text\.(\w*);/;
#  print $entry;
  $key = $1;
  print OUT "/*,$item_count,-,$hex_val,const_menu_text\.$key,/* generated Element*/$MENU_TEXT_hash{$key}$EOL_char\n"
}
close(OUT);

########################################################
# print file ------------- const_menu_menu_type.c2
########################################################

$item_count = 0;
open (OUT, ">$menu_type_file");
print OUT "/* generated file from $script_name*/
const MENU = 1;
const SCREEN = 2;
const MENU_TYPE[] =";

foreach $entry(@menu_type_file_content)
{
  if($item_count == $#menu_type_file_content)
  {
    $EOL_char = ";";
  }
  else
  {
    $EOL_char = ",";
  }

  $item_count++;
  $hex_val = sprintf("%X",$item_count);
  if($entry =~ /MENU/)
  {
    print OUT "/*,$item_count,-,$hex_val,MENU,- generated Element*/$MENU_hash{MENU}$EOL_char\n";
  }
  elsif($entry =~ /SCREEN/)
  {
    print OUT "/*,$item_count,-,$hex_val,SCREEN,- generated Element*/$MENU_hash{SCREEN}$EOL_char\n";
  }
  else
  {
    close(OUT);
    die "unknown element: $entry\n";
  }
}
close(OUT);

########################################################
# print file ------------- const_menu_menu_id.c2
########################################################

$item_count = 0;
open (OUT, ">$menu_id_file");
print OUT "/* generated file from $script_name*/
const MENU_ID[] =";

foreach $entry(@menu_id_file_content)
{
#  print $entry;
  if($item_count == $#menu_id_file_content)
  {
    $EOL_char = ";";
  }
  else
  {
    $EOL_char = ",";
  }

  $item_count++;
  $hex_val = sprintf("%X",$item_count);

  # extract the key value
  $entry =~ /const_menu_id\.(\w*);/;
#  print $entry;
  $key = $1;
  print OUT "/*,$item_count,-,$hex_val,const_menu_id\.$key,- generated Element*/$MENU_ID_hash{$key}$EOL_char\n"
}
print OUT "\nconst NUM_OF_MENUS = $item_count;\n";
close(OUT);

########################################################
# print file ------------- const_menu_keypress_1.c2
########################################################
my $line = "/* generated file from $script_name*/
  const MENU_KEYPRESS_1[] =";
write_keyPress_files("const_menu_keypress_1.c2", $line, $#menu_keypress_1_file_content, \@menu_keypress_1_file_content);

########################################################
# print file ------------- const_menu_keypress_2.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_KEYPRESS_2[] =";
write_keyPress_files("const_menu_keypress_2.c2", $line, $#menu_keypress_2_file_content, \@menu_keypress_2_file_content);

########################################################
# print file ------------- const_menu_keypress_3.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_KEYPRESS_3[] =";
write_keyPress_files("const_menu_keypress_3.c2", $line, $#menu_keypress_3_file_content, \@menu_keypress_3_file_content);

########################################################
# print file ------------- const_menu_keypress_Asterix.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_KEYPRESS_ASTERIX[] =";
write_keyPress_files("const_menu_keypress_AST.c2", $line, $#menu_keypress_NUM_file_content, \@menu_keypress_NUM_file_content);

########################################################
# print file ------------- const_menu_keypress_NUM.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_KEYPRESS_NUM[] =";
write_keyPress_files("const_menu_keypress_NUM.c2", $line, $#menu_keypress_AST_file_content, \@menu_keypress_AST_file_content);


########################################################
# print file ------------- const_menu_keypress_NUM.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_VARIABLE1_1[] =";
write_keyPress_files("const_menu_variable1_1.c2", $line, $#menu_variable1_1_file_content, \@menu_variable1_1_file_content);

########################################################
# print file ------------- const_menu_keypress_NUM.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_VARIABLE1_2[] =";
write_keyPress_files("const_menu_variable1_2.c2", $line, $#menu_variable1_2_file_content, \@menu_variable1_2_file_content);

########################################################
# print file ------------- const_menu_keypress_NUM.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_VARIABLE1_3[] =";
write_keyPress_files("const_menu_variable1_3.c2", $line, $#menu_variable1_3_file_content, \@menu_variable1_3_file_content);

########################################################
# print file ------------- const_menu_keypress_NUM.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_VARIABLE2_1[] =";
write_keyPress_files("const_menu_variable2_1.c2", $line, $#menu_variable2_1_file_content, \@menu_variable2_1_file_content);

########################################################
# print file ------------- const_menu_keypress_NUM.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_VARIABLE2_2[] =";
write_keyPress_files("const_menu_variable2_2.c2", $line, $#menu_variable2_2_file_content, \@menu_variable2_2_file_content);

########################################################
# print file ------------- const_menu_keypress_NUM.c2
########################################################
$line = "/* generated file from $script_name*/
  const MENU_VARIABLE2_3[] =";
write_keyPress_files("const_menu_variable2_3.c2", $line, $#menu_variable2_3_file_content, \@menu_variable2_3_file_content);

########################################################
# print file ------------- const_menu_screen_id.c2
########################################################

$item_count = 0;
open (OUT, ">$menu_screen_id_file");
print OUT "/* generated file from const_menu.xls*/
const SCREEN_ID[] =";

foreach $entry(@menu_screen_id_file_content)
{
#  print $entry;
  if($item_count == $#menu_screen_id_file_content)
  {
    $EOL_char = ";";
  }
  else
  {
    $EOL_char = ",";
  }

  $item_count++;
  $hex_val = sprintf("%X",$item_count);

  # extract the key value
  $entry =~ /const_screen_id\.(\w*);/;
#  print $entry;
  $key = $1;
  print OUT "/*,$item_count,-,$hex_val,const_screen_id\.$key,- generated Element*/$SCREEN_ID_hash{$key}$EOL_char\n"
}
print OUT "\nconst NUM_OF_SCREENS = $item_count;\n";
close(OUT);

########################################################
# print file ------------- const_menu_screen_text.c2
########################################################

$item_count = 0;
open (OUT, ">$menu_screen_text_file");
print OUT "/* generated file from const_menu.xls*/
const SCREEN_TEXT[] =";

foreach $entry(@menu_screen_text_file_content)
{
#  print $entry;
  if($item_count == $#menu_screen_text_file_content)
  {
    $EOL_char = ";";
  }
  else
  {
    $EOL_char = ",";
  }

  $item_count++;
  $hex_val = sprintf("%X",$item_count);

  # extract the key value
  $entry =~ /const_(menu|screen)_text\.(\w*);/;
#  print $entry;
  my $kind = $1;
  $key = $2;
  print OUT "/*,$item_count,-,$hex_val,const_${kind}_text\.$key,- generated Element*/$MENU_TEXT_hash{$key}$EOL_char\n"
}
print OUT "\nconst NUM_OF_MENUS = $item_count;\n";
close(OUT);





###############################################################################
# sub progs
###############################################################################
sub write_keyPress_files
{
  my $file       = @_[0];
  my $first_line = @_[1];
  my $num_of_entries = @_[2];
  my $content    = @_[3];
  $item_count = 0;
  open (OUT, ">$file") or die "Can not open $file\n";
  print OUT $first_line;

  foreach $entry(@$content)
  {
  #  print $entry;
    if($item_count == $num_of_entries)
    {
      $EOL_char = ";";
    }
    else
    {
      $EOL_char = ",";
    }

    $item_count++;
    $hex_val = sprintf("%X",$item_count);

    if($entry =~ /const_menu_id/)
    {
      # extract the key value
      $entry =~ /const_menu_id\.(\w*);/;
#      print "$1\n";
      $key = $1;
      if(!exists($MENU_ID_hash{$key}))
      {
        die "key $key does not exist for entry $entry\n";
      }
      print OUT "/*,$item_count,-,$hex_val,const_menu_id\.$key,- generated Element*/$MENU_ID_hash{$key}$EOL_char\n"
    }
    elsif($entry =~ /const_screen_id/)
    {
      # extract the key value
      $entry =~ /const_screen_id\.(\w*);/;
#      print "$1\n";
      $key = $1;
      if(!exists($SCREEN_ID_hash{$key}))
      {
        die "key $key does not exist for entry $entry\n";
      }
  
      print OUT "/*,$item_count,-,$hex_val,const_screen_id\.$key,- generated Element*/$SCREEN_ID_hash{$key}$EOL_char\n"
    }
    else
    {
      my $found = 0;
      foreach $file_key (keys %var_translation_file_hash)
      {
        if($entry =~ /$file_key/)
        {
          # extract the key value
#          print $entry;
          $entry =~ /$file_key\.(\w*)[;\[]/;
#          print "$file_key - $1\n";
          $key = $1;
          $found = 1;
          if(!exists($VAR_ID_hash{$key}))
          {
            die "key $key does not exist for entry $entry\n";
          }
          print OUT "/*,$item_count,-,$hex_val,$file_key\.$key,- generated Element*/$VAR_ID_hash{$key}$EOL_char\n"
        }
      }
      
      if($found == 0)
      {
        close(OUT);
        print "$entry\n";
        die "unknown id type in $file\n";
      }
    }
  }
  close(OUT);
}