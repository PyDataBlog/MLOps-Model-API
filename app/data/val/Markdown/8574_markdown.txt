---
layout: post
category: interview
tagline: "Time Limit Exceeded"
tags: [lintcode, interview, java]
---
{% include JB/setup %}
 
## Word Ladder ii 

TLE solution by myself:

```java
public class Solution {
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return a list of lists of string
      */
      
    public List<List<String>> findLadders(String start, String end, Set<String> dict) {
        List<List<String>> results = new ArrayList<List<String>>(); 
        if (start == null || end == null || dict.size() == 0) {
            return results;
        }
        if (!dict.contains(start)) {
            dict.add(start);
        }
        if (!dict.contains(end)) {
            dict.add(end);
        }
        List<String> result = new ArrayList<String>();
        Map<String, ArrayList<String>> cache = new HashMap<String, ArrayList<String>>();
        Set<String> visited = new HashSet<String>();
        int pathlength = bfsFind(start, end, dict, cache, visited);
        result.add(start);
        dfsFind(start, end, dict, cache, pathlength, result, results);
        return results;
    }
    
    private int bfsFind(String start,
                        String end,
                        Set<String> dict,
                        Map<String, ArrayList<String>> cache,
                        Set<String> visited) {
        int pathlength = 1;
        Queue<String> queue = new LinkedList<String>();
        queue.offer(start);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (cur.equals(end)) {
                    return pathlength;
                } 
                if (!visited.contains(cur)){
                    visited.add(cur);
                    List<String> nextList = findNext(cur, cache, dict);
                    for (String next : nextList) {
                        queue.offer(next);
                    }
                }
            }
            pathlength++;
        }
        return pathlength;
    }
    
    private void dfsFind(String current,
                         String end,
                         Set<String> dict,
                         Map<String, ArrayList<String>> cache,
                         int pathlength,
                         List<String> result,
                         List<List<String>> results) {
        if (current.equals(end) && result.size() == pathlength) {
            results.add(new ArrayList<String>(result));
            return;
        }
        if (result.size() < pathlength) {
            List<String> nextList = findNext(current, cache, dict);
            for (String next : nextList) {
                result.add(next);
                dfsFind(next, end, dict, cache, pathlength, result, results);
                result.remove(result.size() - 1);
            }
        }
    }
    
    private List<String> findNext(String current, 
                                 Map<String, ArrayList<String>> cache, 
                                 Set<String> dict) {
        ArrayList<String> nextList = null;
        if (cache.containsKey(current)) {
            nextList = cache.get(current);
        } else {
            nextList = new ArrayList<String>();
            for (String str : dict) {
                if (isOneEditAway(current, str)) {
                    nextList.add(str);
                }
            }
            cache.put(current, nextList);
        }
        return nextList;
    }
    
    private boolean isOneEditAway(String first, String second) {
        if (first.length() == 0 
            || second.length() == 0 
            || first.length() != second.length()) {
            return false;
        }
        int count = 0;
        for (int i = 0; i < first.length(); i++) {
            if (first.charAt(i) != second.charAt(i)) {
                count++;
            }
        }
        if (count == 1) {
            return true;
        } else {
            return false;
        }
    }
    
}
```

Accepted solution by modifying the answer:

```java
public class Solution {
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return a list of lists of string
      */
      
    public List<List<String>> findLadders(String start, String end, Set<String> dict) {
        // "results" == "ladders" in answer
        List<List<String>> results = new ArrayList<List<String>>(); 
        if (start == null || end == null || dict.size() == 0) {
            return results;
        }
        // Note: do not need to worry about duplicates
        dict.add(start);
        dict.add(end);
        List<String> result = new ArrayList<String>();
        // "cache" == "map" in answer
        Map<String, ArrayList<String>> cache = new HashMap<String, ArrayList<String>>();
        // Note: map distance
        Map<String, Integer> distance = new HashMap<String, Integer>();
        
        bfsFind(start, end, dict, cache, distance);
        result.add(end);
        // Note: dfs from end to start
        dfsFind(end, start, dict, cache, distance, result, results);
        return results;
    }
    
    private void bfsFind(String start,
                        String end,
                        Set<String> dict,
                        Map<String, ArrayList<String>> cache,
                        Map<String, Integer> distance) {
        Queue<String> queue = new LinkedList<String>();
        queue.offer(start);
        distance.put(start, 0);
        
        for (String s : dict) {
            cache.put(s, new ArrayList<String>());
        }
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            List<String> nextList = expand(cur, dict);
            for (String next : nextList) {
                // Note: prepare for the inverse traverse
                cache.get(next).add(cur); // ? 
                if (!distance.containsKey(next)) {
                    distance.put(next, distance.get(cur) + 1);
                    queue.offer(next);
                }
            }
        }
    }
    
    private void dfsFind(String current,
                         String start,
                         Set<String> dict,
                         Map<String, ArrayList<String>> cache,
                         Map<String, Integer> distance,
                         List<String> result,
                         List<List<String>> results) {
        if (current.equals(start)) {
            Collections.reverse(result);
            results.add(new ArrayList<String>(result));
            Collections.reverse(result);
            return;
        } else {
            List<String> nextList = cache.get(current);
            for (String next : nextList) {
                // Note: review here
                if (distance.containsKey(next) && distance.get(current) == distance.get(next) + 1) {
                    result.add(next);
                    dfsFind(next, start, dict, cache, distance, result, results);
                    result.remove(result.size() - 1);
                }
            }
        }
    }
    
    List<String> expand(String cur, Set<String> dict) {
        List<String> expansion = new ArrayList<String>();
        // Note: O(l * 26 * l)
        for (int i = 0; i < cur.length(); i++) {
            for (char ch = 'a'; ch <= 'z'; ch++) {
                if (ch != cur.charAt(i)) {
                    String expanded = cur.substring(0, i) + ch + cur.substring(i + 1);
                    if (dict.contains(expanded)) {
                        expansion.add(expanded);
                    }
                }
            }
        }
        return expansion;
    }
    
}
```



**Thank you for reading this post.**
