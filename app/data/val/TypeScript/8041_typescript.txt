import { Injectable } from '@angular/core';
// import { Headers, RequestOptions, Response } from '@angular/http';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpErrorResponse } from '@angular/common/http/';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';

@Injectable()
export class DataService {
    private headers: HttpHeaders = new HttpHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
    });

    public baseUrl = 'http://localhost:15334/api';

    constructor(private http: HttpClient) { }

    private handleError(error: HttpErrorResponse | any) {
        // TODO: implement remote logging
        let errMsg: string;
        if (error.error instanceof Error) {
            const err = error.error || JSON.stringify(error);
            errMsg = `${error.status} - ${error.statusText || ''} ${err.message}`;
        } else {
            errMsg = error.error;
        }

        console.error(errMsg);
        return Observable.throw(errMsg);
    }

    get<T>(path: string, parameters?: {[param: string]: string | string[]}): Observable<T> {
        const token = this.getAuthToken();
        let requestHeaders = this.headers;
        const requestParams = new HttpParams({fromObject: parameters});
        if (token) {
            requestHeaders = requestHeaders.set('Authorization', 'Bearer ' + token);
        }

        return this.http.get<T>(
            `${this.baseUrl}${path}`,
            {
                headers: requestHeaders,
                params: requestParams
            })
            .catch(this.handleError);
    }

    post<T>(path: string, data: any, parameters?: {[param: string]: string | string[]}): Observable<T> {
        const token = this.getAuthToken();
        let requestHeaders = this.headers;
        const requestParams = new HttpParams({fromObject: parameters});
        if (token) {
            requestHeaders = requestHeaders.set('Authorization', 'Bearer ' + token);
        }

        if (Object.prototype.toString.call(data) !== '[object String]') {
            data = JSON.stringify(data);
        }

        return this.http.post<T>(
            `${this.baseUrl}${path}`,
            data,
            {
                headers: requestHeaders,
                params: requestParams
            })
            .catch(this.handleError);
    }

    put<T>(path: string, data: any, parameters?: {[param: string]: string | string[]}): Observable<T> {
        const token = this.getAuthToken();
        let requestHeaders = this.headers;
        const requestParams = new HttpParams({fromObject: parameters});
        if (token) {
            requestHeaders = requestHeaders.set('Authorization', 'Bearer ' + token);
        }

        if (Object.prototype.toString.call(data) !== '[object String]') {
            data = JSON.stringify(data);
        }

        return this.http.put<T>(
            `${this.baseUrl}${path}`,
            data,
            {
                headers: requestHeaders,
                params: requestParams
            })
            .catch(this.handleError);
    }

    delete<T>(path: string, parameters?: {[param: string]: string | string[]}): Observable<T> {
        const token = this.getAuthToken();
        let requestHeaders = this.headers;
        const requestParams = new HttpParams({fromObject: parameters});
        if (token) {
            requestHeaders = requestHeaders.set('Authorization', 'Bearer ' + token);
        }

        return this.http.delete<T>(
            `${this.baseUrl}${path}`,
            {
                headers: requestHeaders,
                params: requestParams
            })
            .catch(this.handleError);
    }

    private getAuthToken(): string {
        const storedAuthInfo = localStorage.getItem('currentAuthInfo');
        return storedAuthInfo ? JSON.parse(storedAuthInfo).access_token : null;
    }
}
