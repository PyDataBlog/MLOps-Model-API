fn factorize(n:u64) -> Vec<u64> {
    let mut factors:Vec<u64> = vec!();
    let mut target = n;
    //grab factors of two
    while target % 2 == 0 {
        factors.push(2);
        target /= 2;
    }
    //grab odd prime factors
    let mut factor = 3;
    while factor * factor <= target && target > 1 {
        if target % factor == 0 {
            factors.push(factor);
            target /= factor;
            factor = 3;
        }
        else {
            factor += 2;
        }
    }
    //if anything is left, `target` is also a factor (prime, too!)
    if target > 1 {
        factors.push(target);
    }
    //done!
    return factors;
}

fn get_largest_factor(n:u64) -> u64 {
    let mut largest_factor = 0;
    for factor in factorize(n) {
        if factor > largest_factor {
            largest_factor = factor;
        }
    }
    return largest_factor;
}

fn main() {
    let largest_factor = get_largest_factor(600851475143);
    println!("{}", largest_factor);
}
