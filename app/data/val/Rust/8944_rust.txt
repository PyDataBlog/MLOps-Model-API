//! An  wrapper for the RealSense library.
//!
//! # Example
//!
//! ```no_run
//! extern crate realsense;
//! use realsense as rs;
//!
//! fn main() {
//!     let context = rs::Context::new().unwrap();
//!     let device = context.get_device(0).unwrap();
//!     let property = {
//!         rs::Properties {
//!             format: rs::Format::Z16,
//!             ..Default::default()
//!         }
//!     };
//!     device.enable_stream(rs::Stream::DEPTH, property).unwrap();
//!
//!     let rs::Properties { width, height, .. } = Default::default();
//!     let (width, height) = (width as usize, height as usize);
//!
//!     device.start().unwrap();
//!
//!     loop {
//!         device.wait_for_frames().unwrap();
//!         let data = device.get_frame_data(rs::Stream::DEPTH).unwrap() as *const u16;
//!         let data = unsafe { ::std::slice::from_raw_parts(data, (width * height)) };
//!         for i in &data {
//!             print!("{} ", i);
//!         }
//!         println!("");
//!     }
//! }
//! ```

mod ffi;

mod error;
mod context;
mod device;

pub use error::*;
pub use context::*;
pub use device::*;
