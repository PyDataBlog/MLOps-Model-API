use crate::protocol::{Node, Digest, Nid, SignedMessage, Slot, View, StateMachine};
use std::sync::mpsc::{Sender, Receiver};
use crate::network::Network;

pub(crate) struct HonestNode<S: StateMachine> {
    pub(crate) state_machine: S,
    pub(crate) network: Network<SignedMessage>,
}

impl<S: StateMachine> Node<S> for HonestNode<S> {

    fn recv_message(&self, msg: SignedMessage) {
        unimplemented!()
    }

    fn prepared(&self, digest: Digest, view: View, slot: Slot, nid: Nid) {
        unimplemented!()
    }

    fn commited_local(&self, digest: Digest, view: View, slot: Slot, nid: Nid) {
        unimplemented!()
    }
}
