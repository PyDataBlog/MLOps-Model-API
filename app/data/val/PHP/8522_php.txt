<?php

class RequestController extends Controller {

    /**
     * @return array action filters
     */
    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
        );
    }

    /**
     * Specifies the access control rules.
     * This method is used by the 'accessControl' filter.
     * @return array access control rules
     */
    public function accessRules() {
        return array(
            array('allow', // allow authenticated user to perform 'create' and 'update' actions
                'actions' => array('index', 'success', 'view', 'approve', 'myrequests', 'approveRequest', 'disApproveRequest', 'allmyrequest', 'myunapprovedrequests', 'myapprovedrequests', 'tradeshiftrequests', 'approveTradeRequests', 'tradeshifts', 'pickUpShift'),
                'users' => array('@'),
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    public function actionIndex() {
        $request_model = new Request;
        $this->performAjaxValidation($request_model);
        $user = Yii::app()->getComponent('user');
        if (isset($_POST['Request'])) {
            $request_model->attributes = $_POST['Request'];
            $request_model->employee_id = Yii::app()->user->id;
            $request_model->date_requested = date('Y-m-d G:i:s', strtotime(Yii::app()->user->timeNow));
            try {
                if ($request_model->save()) {
                    $request_model->unsetAttributes();
                    $this->redirect(array('success'));
                }
            } catch (CDbException $exc) {
                echo $exc->getTraceAsString();
                echo $exc->getMessage();
            }
        }

        $this->render('index', array('request_model' => $request_model, 'user' => $user));
    }

    public function actionSuccess() {
        Yii::app()->user->setFlash('success', '<strong>Success!</strong> Request submitted for approval.');
        $this->render('success');
    }

    public function actionView() {
        $this->render('view');
    }

    public function loadModel($id) {
        $model = Request::model()->findByPk($id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'request-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    public function actionApprove() {
        $requests = Request::model()->getPendingRequests();
        $request_model = new Request;

        $this->render('approve', array(
            'requests' => $requests,
            'request_model' => $request_model,
        ));
    }

    public function actionMyRequests() {
        $requests = Request::model()->getPendingRequestsOf(Yii::app()->user->id);

        $this->render('myRequests', array(
            'requests' => $requests,
        ));
    }

    public function renderButtons($data, $row) {
        $this->widget('bootstrap.widgets.TbButtonGroup', array(
            'size' => 'small',
            'buttons' => array(
                array(
                    'icon' => 'ok white',
                    'htmlOptions' => array(
                        'request_id' => $data->id,
                        'id' => 'approve_button',
                        'data-toggle' => 'modal',
                        'data-target' => '#add_notes',
                    ),
                    'type' => 'primary'),
                array(
                    'label' => '',
                    'icon' => 'icon-remove white',
                    'htmlOptions' => array(
                        'request_id' => $data->id,
                        'id' => 'approve_button',
                        'data-toggle' => 'modal',
                        'data-target' => '#add_notes_disappove',
                    ),
                ),
            ),
        ));
    }

    public function cancelButton($data, $row) {
        $this->widget('bootstrap.widgets.TbButtonGroup', array(
            'size' => 'small',
            'buttons' => array(
                array(
                    'icon' => 'remove white',
                    'htmlOptions' => array(
                        'request_id' => $data->id,
                        'id' => 'approve_button',
                        'data-toggle' => 'modal',
                        'data-target' => '#cancel_request',
                    ),
                    'type' => 'primary'),
            ),
        ));
    }

    public function actionApproveRequest() {
        if (isset($_POST['Request'])) {
            $request = Request::model()->findByPk($_POST['Request']['id']);
            $request->approving_notes = $_POST['Request']['approving_notes'];
            $request->approver = Yii::app()->user->id;
            $request->approved = 1;
            $request->date_approved = date("Y-m-d G:i:s", strtotime(Yii::app()->user->timeNow));
            $request->update();
            Yii::app()->user->setFlash('success', '<b>Sucess!</b> Request Approved.');
            $this->redirect('approve');
        }
    }

    public function actiondisApproveRequest() {
        if (isset($_POST['Request'])) {
            $request = Request::model()->findByPk($_POST['Request']['id']);
            $request->approving_notes = $_POST['Request']['approving_notes'];
            $request->approver = Yii::app()->user->id;
            $request->approved = 0;
            $request->date_approved = date("Y-m-d G:i:s", strtotime(Yii::app()->user->timeNow));
            $request->update();
            Yii::app()->user->setFlash('success', '<b>Sucess!</b> Request disapproved.');
            $this->redirect('approve');
        }
    }

    public function actionAllMyRequest() {
        $data = Request::model()->getRequestsOf(Yii::app()->user->id);
        $this->render('AllMyRequest', array('requests' => $data));
    }

    public function actionmyunapprovedRequests() {
        $data = Request::model()->getUnapprovedRequestsOf(Yii::app()->user->id);
        $this->render('allMyRequest', array('requests' => $data));
    }

    public function actionmyapprovedRequests() {
        $data = Request::model()->getApprovedRequestsOf(Yii::app()->user->id);
        $this->render('allMyRequest', array('requests' => $data));
    }

    public function actionTradeShiftRequests() {
        $data = ShiftTradeRequest::model()->getPendingRequests();
        $this->render('pendingTradeShiftRequests', array('requests' => $data));
    }

    public function tradeRequestButtons($data, $row) {
        $this->widget('bootstrap.widgets.TbButtonGroup', array(
            'size' => 'small',
            'buttons' => array(
                array(
                    'icon' => 'ok white',
                    'url' => array('request/approveTradeRequests/' . $data->id),
                    'htmlOptions' => array(
                        'request_id' => $data->id,
                        'id' => 'approve_button',
                    ),
                    'type' => 'primary'),
                array(
                    'label' => '',
                    'icon' => 'icon-remove white',
                    'url' => array('request/disApproveTradeRequests'),
                    'htmlOptions' => array(
                        'request_id' => $data->id,
                        'id' => 'approve_button',
                    ),
                ),
            ),
        ));
    }

    public function pickUpTradeButton($data, $row) {
        $this->widget('bootstrap.widgets.TbButtonGroup', array(
            'size' => 'small',
            'buttons' => array(
                array(
                    'label' => 'Pick-up Shift',
                    'url' => array('request/pickUpShift/' . $data->id),
                    'htmlOptions' => array(
                        'request_id' => $data->id,
                        'id' => 'approve_button',
                    ),
                    'type' => 'primary'),
            ),
        ));
    }

    public function actionApproveTradeRequests($id) {
        $model = ShiftTradeRequest::model()->findByPk($id);
        $model->approved = 1;
        $model->date_approved = date("Y-m-d G:i:s", strtotime(Yii::app()->user->timeNow));
        $model->approved_by = Yii::app()->user->id;
        $model->update();
        Yii::app()->user->setFlash('success', '<b>Success!</b> Trade shift request approved for pick-up.');
        $this->redirect(Yii::app()->request->urlReferrer);
    }

    public function actionTradeShifts() {
        $model = ShiftTradeRequest::model()->getApprovedTradeShifts();
        $this->render('tradeShiftsAvailable', array(
            'model' => $model
        ));
    }

    public function actionPickUpShift($id) {
        $model = ShiftTradeRequest::model()->findByPk($id);
        $model->accepted_by = Yii::app()->user->id;
        $model->date_accepted = date("Y-m-d G:i:s", strtotime(Yii::app()->user->timeNow));
        $model->update();
        $shift_model = Schedule::model()->findByPk($model->shift_id);
        $shift_model->employee_id = Yii::app()->user->id;
        $shift_model->update();
        Yii::app()->user->setFlash('success', '<b>Success!</b> Shift Picked Up.');
        $this->redirect(Yii::app()->request->urlReferrer);
    }

}