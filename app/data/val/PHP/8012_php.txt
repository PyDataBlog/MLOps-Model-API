<?php
/**
 * Copyright (C) 2016 Addison Électronique, Inc - All Rights Reserved
 * This file is part of PhoenixToOgasysLib.
 * PhoenixToOgasysLib can not be copied and/or distributed without the express
 * permission of Addison Électronique, Inc.
 * Created  by : Yanick Lafontaine - <ylafontaine@addison-electronique.com>
 */

/**
 * Created by PhpStorm.
 * User: ylafontaine
 * Date: 2017-03-06
 * Time: 14:01
 */

namespace Ogasys\Invoices;

use Ogasys\Helpers;
use Ogasys\Writer;

class InvoicesDetail extends Writer
{

    public $IdCie;
    public $Nofacture;
    public $Sequence;
    public $Produit;
    public $CodeProdOrg;
    public $Description;
    public $Description2;
    public $Entrepot;
    public $TauxlTaxe1;
    public $TauxlTaxe2;
    public $CmUnite;
    public $CmPrixUnitaire;
    public $CmUnitePrix;
    public $Escompte;
    public $CmPrixNet;
    public $CmQteCommande;
    public $CmQteLivree;
    public $FaQteFacture;
    public $QteCommande;
    public $QteLivree;
    public $QteFacture;
    public $MeTotalAvantTaxe;
    public $MeTotalTaxe1;
    public $MeTotalTaxe2;
    public $MontantEscompte;
    public $MeTotalLigne;
    public $IsCourExterieur;
    public $IsEmporter;
    public $MessageImpr;
    public $IdFactureCred;
    public $IdDetailparentOption;
    public $QteOpt;
    public $HideImpCom;
    public $HideImpCueil;
    public $HideImpbl;
    public $HideImpFac;
    public $IsMultipleComOpt;
    public $OptionIsPrixIncl;
    public $AchIdfourn;
    public $AchPrix;
    public $AchMonnaie;
    public $AchCmqteAchat;
    public $AchCmunite;
    public $AchCmUnitePrix;

    /**
     * Custom field to add to file
     *
     * @var array
     */
    private $_customFields = [];
    /**
     * File to write
     *
     * @var string
     */
    private $_file;
    /**
     * Error message
     *
     * @var array
     */
    private $_msg = [];
    /**
     * Data error
     *
     * @var boolean
     */
    private $_error = false;

    /**
     * Build CustomersTaxes
     *
     * @param $file - File to write
     */
    public function __construct($file)
    {
        $this->_file = $file;
    }

    /**
     * Add custom field to file
     *
     * @param string $fieldName - Field Name
     * @param mixed $data - Data
     */
    public function addField($fieldName, $data)
    {
        $this->_customFields = Helpers::array_push_assoc($this->_customFields, $fieldName, $data);
    }

    /**
     * Validate object data and call xlsx writer.
     */
    public function ValidateAndWrite()
    {

        //Validate data
        $this->validate();

        //Data
        $data = [
            'file'  => $this->_file,
            'msg'   => $this->_msg,
            'field' => [
                    'IdCie'                => $this->IdCie,
                    'Nofacture'            => $this->Nofacture,
                    'Sequence'             => $this->Sequence,
                    'Produit'              => $this->Produit,
                    'CodeProdOrg'          => $this->CodeProdOrg,
                    'Description'          => $this->Description,
                    'Description2'         => $this->Description2,
                    'Entrepot'             => $this->Entrepot,
                    'TauxlTaxe1'           => $this->TauxlTaxe1,
                    'TauxlTaxe2'           => $this->TauxlTaxe2,
                    'CmUnite'              => $this->CmUnite,
                    'CmPrixUnitaire'       => $this->CmPrixUnitaire,
                    'CmUnitePrix'          => $this->CmUnitePrix,
                    'Escompte'             => $this->Escompte,
                    'CmPrixNet'            => $this->CmPrixNet,
                    'CmQteCommande'        => $this->CmQteCommande,
                    'CmQteLivree'          => $this->CmQteLivree,
                    'FaQteFacture'         => $this->FaQteFacture,
                    'QteCommande'          => $this->QteCommande,
                    'QteLivree'            => $this->QteLivree,
                    'QteFacture'           => $this->QteFacture,
                    'MeTotalAvantTaxe'     => $this->MeTotalAvantTaxe,
                    'MeTotalTaxe1'         => $this->MeTotalTaxe1,
                    'MeTotalTaxe2'         => $this->MeTotalTaxe2,
                    'MontantEscompte'      => $this->MontantEscompte,
                    'MeTotalLigne'         => $this->MeTotalLigne,
                    'IsCourExterieur'      => $this->IsCourExterieur,
                    'IsEmporter'           => $this->IsEmporter,
                    'MessageImpr'          => $this->MessageImpr,
                    'IdFactureCred'        => $this->IdFactureCred,
                    'IdDetailparentOption' => $this->IdDetailparentOption,
                    'QteOpt'               => $this->QteOpt,
                    'HideImpCom'           => $this->HideImpCom,
                    'HideImpCueil'         => $this->HideImpCueil,
                    'HideImpbl'            => $this->HideImpbl,
                    'HideImpFac'           => $this->HideImpFac,
                    'IsMultipleComOpt'     => $this->IsMultipleComOpt,
                    'OptionIsPrixIncl'     => $this->OptionIsPrixIncl,
                    'AchIdfourn'           => $this->AchIdfourn,
                    'AchPrix'              => $this->AchPrix,
                    'AchMonnaie'           => $this->AchMonnaie,
                    'AchCmqteAchat'        => $this->AchCmqteAchat,
                    'AchCmunite'           => $this->AchCmunite,
                    'AchCmUnitePrix'       => $this->AchCmUnitePrix
                ] + $this->_customFields,
        ];

        //Reset
        $this->_customFields = [];

        //Write files
        if (!$this->_error) {
            $this->write($data);
        } else {
            $this->writeException($data);
        }
    }

    /**
     * Validate Data
     */
    private function validate()
    {
        $this->_error = false;
        $this->_msg = [];

        $NoCieReflection = new \ReflectionClass("\\Ogasys\\Enum\\NoCie");
        if (!in_array($this->IdCie, $NoCieReflection->getConstants(), true)) {
            $this->_error = true;
            array_push($this->_msg, 'IdCie invalide');
        }

        if (empty($this->Nofacture)) {
            $this->_error = true;
            array_push($this->_msg, 'Nofacture obligatoire');
        }

        if (empty($this->Sequence)) {
            $this->_error = true;
            array_push($this->_msg, 'Sequence obligatoire');
        }

        if (empty($this->Produit)) {
            $this->_error = true;
            array_push($this->_msg, 'Produit obligatoire');
        }

        if (empty($this->Entrepot)) {
            $this->_error = true;
            array_push($this->_msg, 'Entrepot obligatoire');
        }

        if (empty($this->CmUnite)) {
            $this->_error = true;
            array_push($this->_msg, 'CmUnite obligatoire');
        }

        if (empty($this->CmPrixUnitaire)) {
            $this->_error = true;
            array_push($this->_msg, 'CmPrixUnitaire obligatoire');
        }

        if (empty($this->FaQteFacture)) {
            $this->_error = true;
            array_push($this->_msg, 'FaQteFacture obligatoire');
        }

        if (empty($this->QteFacture)) {
            $this->_error = true;
            array_push($this->_msg, 'QteFacture obligatoire');
        }
    }
}