<?php

namespace app\models\imperium\data;

use yii\base\Object;
use yii\helpers\Html;
use yii\helpers\Json;

/**
 * UnitData model
 *
 * @property string $id
 *
 * @property string $name
 * @property float $cost
 * @property int $capacity
 * @property int $battle
 * @property int $movement
 * @property RuleData[] $specials
 * @property string $info
 */
class UnitData extends Object
{
    const DOCK        = 'Space Dock';
    const GROUND      = 'Ground Force';
    const PDS         = 'PDS';
    const CARRIER     = 'Carrier';
    const CRUISER     = 'Cruiser';
    const DESTROYER   = 'Destroyer';
    const FIGHTER     = 'Fighter';
    const DREADNOUGHT = 'Dreadnought';
    const WARSUN      = 'War Sun';

    /**
     * @var array data
     */
    public static $data = [
        self::DOCK => [
            'name' => self::DOCK,
            'cost' => 4,
            'capacity' => 3,
            'battle' => 0,
            'movement' => 0,
            'specials' => [
                RuleData::PRODUCER,
                RuleData::LOCAL_AIR_DEFENCE,
            ]
        ],
        self::GROUND => [
            'name' => self::GROUND,
            'cost' => 0.5,
            'capacity' => 0,
            'battle' => 3,
            'movement' => 0,
            'specials' => []
        ],
        self::PDS => [
            'name' => self::PDS,
            'cost' => 2,
            'capacity' => 0,
            'battle' => 5,
            'movement' => 0,
            'specials' => [
                RuleData::PLANETARY_SHIELD,
                RuleData::SPACE_CANNON
            ]
        ],
        self::CARRIER => [
            'name' => self::CARRIER,
            'cost' => 3,
            'capacity' => 6,
            'battle' => 2,
            'movement' => 1,
            'specials' => []
        ],
        self::CRUISER => [
            'name' => self::CRUISER,
            'cost' => 2,
            'capacity' => 0,
            'battle' => 4,
            'movement' => 2,
            'specials' => []
        ],
        self::DESTROYER => [
            'name' => self::DESTROYER,
            'cost' => 1,
            'capacity' => 0,
            'battle' => 2,
            'movement' => 2,
            'specials' => [
                RuleData::BARRAGE
            ]
        ],
        self::FIGHTER => [
            'name' => self::FIGHTER,
            'cost' => 0.5,
            'capacity' => 0,
            'battle' => 2,
            'movement' => 0,
            'specials' => []
        ],
        self::DREADNOUGHT => [
            'name' => self::DREADNOUGHT,
            'cost' => 5,
            'capacity' => 0,
            'battle' => 6,
            'movement' => 1,
            'specials' => [
                RuleData::BOMBARDMENT,
                RuleData::SUSTAIN_DAMAGE,
            ]
        ],
        self::WARSUN => [
            'name' => self::WARSUN,
            'cost' => 12,
            'capacity' => 6,
            'battle' => 7,
            'movement' => 2,
            'specials' => [
                RuleData::BOMBARDMENT,
                RuleData::SUSTAIN_DAMAGE,
                RuleData::TRISHOT,
            ]
        ],
    ];

    /**
     * @var string unit name
     */
    public $id;

    /**
     * @var int number of units
     */
    public $count;

    /**
     * Sets Id ans count.
     * @param string $id
     * @param int $count
     * @param array $config
     */
    public function __construct($id, $count, $config = [])
    {
        parent::__construct($config);
        $this->id = $id;
        $this->count = $count;
    }

    /**
     * Returns unit name.
     * @return string
     */
    public function getName()
    {
        return static::$data[$this->id]['name'];
    }

    /**
     * Returns JSON info for tooltip.
     * @return string
     */
    public function getInfo()
    {
        $info = [implode(', ', [
            'Battle: ' . $this->battle,
            'Movement: ' . $this->movement,
            'Cost: ' . $this->cost,
            'Capacity: ' . $this->capacity,
        ])];
        $specials = [];
        foreach ($this->specials as $rule) {
            $specials[] = $rule->content;
        }
        return Html::encode(Json::encode(array_merge($info, $specials)));
    }

    /**
     * Returns unit capacity.
     * @return int
     */
    public function getCapacity()
    {
        return static::$data[$this->id]['capacity'];
    }

    /**
     * Returns unit battle value.
     * @return int
     */
    public function getBattle()
    {
        return static::$data[$this->id]['battle'];
    }

    /**
     * Returns unit movement value.
     * @return int
     */
    public function getMovement()
    {
        return static::$data[$this->id]['movement'];
    }

    /**
     * Returns unit cost value.
     * @return float
     */
    public function getCost()
    {
        return static::$data[$this->id]['cost'];
    }

    private $_specials;

    /**
     * Returns unit special rules.
     * @return RuleData[]
     */
    public function getSpecials()
    {
        if ($this->_specials === null) {
            $this->_specials = [];
            $data = static::$data[$this->id]['specials'];
            foreach ($data as $special) {
                $this->_specials[] = new RuleData($special);
            }
        }
        return $this->_specials;
    }
}
