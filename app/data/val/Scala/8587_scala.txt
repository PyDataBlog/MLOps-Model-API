/*
 * Copyright 2013 Akiyoshi Sugiki, University of Tsukuba
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package kumoi.core.actors.udp

import java.io._
import java.net._
import scala.actors._
import scala.actors.remote._
import scala.actors.Futures._
import kumoi.core.log._

/*
	override def !![A](msg: Any, f: PartialFunction[Any, A]) = {
		logging.warn("unimplemented - !!(m, f)") 
		future { f(msg) }
	}
	override def !!(msg: Any) = {
		logging.warn("unimplemented - !!(m)") 
		future { msg }
	}
	def !?(msg: Any): Any = {
		logging.warn("unimplemented - !?(m)") 
		null
	}
	def !?(msec: Long, msg: Any): Option[Any] = {
		logging.warn("unimplemented - !?(ms, m)") 
		null
	}
 
	def exit(from: AbstractActor, reason: AnyRef) { logging.warn("unimplemented - exit()") }
	def forward(msg: Any) { logging.warn("unimplemented - forward()") }
	def linkTo(to: AbstractActor) { logging.warn("unimplemented - linkTo()") }
 
	def receiver(): Actor = { 
		logging.warn("unimplemented - receiver()") 
		null
	}
 
	def send(msg: Any, replyCh: OutputChannel[Any]) {
		logging.warn("unimplemented - send()")    
	}
 
	def unlinkFrom(from: AbstractActor) { logging.warn("unimplemented - unlinkFrom()") }
 
	override def toString = "DatagramProxy@" + node + ":" + name
}
*/