\documentclass[11pt, oneside]{scrartcl}
\usepackage{hyperref}
\usepackage{mdwlist}  % for reduced space enumerations, itemizations (use {enumerate*} and {itemize*})
\usepackage{listings}        % Code listings

% Configure Hyperlinks appeareance
\hypersetup
{
  %draft = true,          % Shut off all hyperlinks
  colorlinks=true,        % Set off boxes around links (color text)
  linkcolor=blue,
  citecolor=blue,
  urlcolor=blue
}
\urlstyle{rm}             % Set www links text to default text

% Configure listing environment (for code listings):
\lstdefinelanguage{PseudoCode}   % Define language style for code listings
{
   morekeywords={do, while, end, if},     % Keywords highlighted
   sensitive=false                        % ??  
}
\lstset                          % general command to set parameter(s)
{  
   language=PseudoCode, % Use code style PseudoCode, others are C, C++, ...
   basicstyle=\small,            % print whole listing small
   keywordstyle=\color{black}\bfseries,
                                       % underlined bold black keywords
   identifierstyle=,             % nothing happens
   commentstyle=\color{black}, % black comments
   stringstyle=\ttfamily,      % typewriter type for strings
   showstringspaces=false, % no special string spaces
   tabsize=4,                 % number of spaces for one tabulator
   captionpos=b,              % position of caption b= bottom, t = top
   frame=lines,               % lines on top and bottom
   gobble=0,                 % ``eat'' the first 12 letters -> indentation in latex
   xleftmargin=5mm,        % margin to left page border
   xrightmargin=5mm,    % margin to rigth page border
   numbers=left,              % enumerate code lines on left side
   numbersep=10mm,       % distance from numbers to code
   numberstyle=\small%,     % number format and size
   %backgroundcolor=\color{Gray}  
}     

\newcommand{\backtocontents}{\hyperref[contents]{Back to Contents.\ref*{contents}}}

\title{\Large{preCICE} \\[5mm] \Huge{User's Guide}}

%\author{by Bernhard Gatzhammer}

\begin{document}

\maketitle
\tableofcontents \label{contents}

\section{Introduction}

preCICE stands for \textbf{pre}cise \textbf{c}ode \textbf{i}nteraction \textbf{c}oupling \textbf{e}nvironment. It has been written to facilitate partitioned coupled simulations, where partitioned is understood as a subdivisioning into separate systems of equations, surface coupled spatial discretization grids, and simulation softwares according to physical subproblems. preCICE has been written to deal with surface coupled problems, however, it is possible to perform volume coupling, too.

Another main task of preCICE is to support simulation programs using hexahedral grids. Surface representations of geometries read into preCICE can be queried to obtain positional (inside, outside, on geometry) and related information for points and hexahedrons (or rectangles in 2D). This functionality can be combined with the coupling functionality such that the surface representation is identical to the coupling surface.

This user's guide describes how to use preCICE to perform partitioned simulations, or as geometry interface.

\backtocontents

\section{Preparations}

In order to use preCICE, first, a library has to be created from its source code. The solvers need to use the application programming interface (API) of preCICE in order to access coupling functionality, and the solver executables (or their interfaces for user programming) need to be linked to the preCICE library. This section describes how to accomplish this.

\backtocontents

\subsection{Build Prerequesits under Linux}

\begin{itemize*} 
\item Obtain a current version of preCICE (\url{http://www5.in.tum.de/wiki/index.php/PreCICE_Download}).

\item The Boost C++ libraries (\url{http://www.boost.org/}) need to be available (no build or installation is necessary). To choose a suitable version of Boost, please check out the preCICE release notes. To make the location of Boost available to preCICE, set the environment variable \texttt{BOOST\_ROOT} to name the path to the Boost libraries root directory.

\item In order to build preCICE, Python (version smaller than 3.0, \url{http://www.python.org/}) and SCons (\url{http://www.scons.org/}) need to be installed. If the Python extensions are intended to be used, NumPy (\url{http://numpy.scipy.org/}) needs to be installed in addition.

\item If communication via MPI is required, a suitable  implementation of the MPI2.0 standard is required to be installed
(\url{http://www.mcs.anl.gov/research/projects/mpich2/}, e.g.).

\item The GNU g++/gcc compiler (\url{http://www.mingw.org/}) needs to be available.
\end{itemize*}

\backtocontents

\subsection{Build Prerequesits under Windows}

\begin{itemize*} 
\item Obtain a current version of preCICE (\url{http://www5.in.tum.de/wiki/index.php/PreCICE_Download}).

\item The Boost C++ libraries (\url{http://www.boost.org/}) need to be available, and the system and thread libraries need to be built when using socket communication. To choose a suitable version of Boost, please check out the preCICE release notes. To make the location of Boost available to preCICE, set the environment variable \texttt{BOOST\_ROOT} to name the path to the Boost libraries root directory.

\item In order to build preCICE, Python (version smaller than 3.0, \url{http://www.python.org/}) and SCons (\url{http://www.scons.org/}) need to be installed. If the Python extensions are intended to be used, NumPy (\url{http://numpy.scipy.org/}) needs to be installed in addition.

\item If communication via MPI is required, a suitable  implementation of the MPI2.0 standard is required to be installed
(\url{http://www.mcs.anl.gov/research/projects/mpich2/}, e.g.).

\item The MinGW g++/gcc compiler (\url{http://www.mingw.org/}) needs to be available. 
\end{itemize*}

\backtocontents

\subsection{Building preCICE}

Switch to the root directory of preCICE, containing the \texttt{SConstruct} files. On a Linux system type
\begin{verbatim}
scons
\end{verbatim}
On a Windows system type
\begin{verbatim}
scons -f SConstruct-windows
\end{verbatim}
This will start building a debug version of preCICE, and may take several minutes. To speed up the build, add the option \texttt{-jn}, where \texttt{n} is the number of cores
involved in the build and has to be larger than 1 in order to see speedup.

The following options can be enabled additionally, the first value is selected as default, when the option is not mentioned.
\begin{itemize*}
\item \texttt{build=debug/release} For a production scenario, release mode should be used.
\item \texttt{mpi=on/off} MPI is used as communication between solvers.
\item \texttt{python=on/off} Python is used to enable configurable Python actions scripts.
\item \texttt{sockets=on/off} Sockets are used as communication between solvers and recommended between solver and server.
\item \texttt{spirit2=on/off} Boost.Spirit is used for writing checkpoints and reading geometries from VRML 1.0 files.
\end{itemize*}

\backtocontents

\section{Running a Simulation with preCICE}

\subsection{Parallel Solvers}

When running a solver in parallel, currently a preCICE server executable has to be run in addition. The server has all coupling data and communicates with the coupled solver (or its server, when also running in parallel). The parallel solver processes have to communicate with the server in order to read/write data from/to the coupling interface. To configure this use-case, the XML-tag \texttt{<server/>} has to be used in the configuration of the parallel participant (see XML reference). There, a communication method between solver processes and server has to be specified. The server executable is created in the build directory of preCICE (also containing the library), and is named \texttt{binprecice}. The possible console options for \texttt{binprecice} are obtained by running it without parameters. To run it as server type
\begin{verbatim}
./binprecice server SolverName ConfigName
\end{verbatim}
The  \texttt{SolverName} is the name of the configured participant, which is used to identify the solver in preCICE. The \texttt{ConfigName} is the preCICE XML configuration file used for the simulation. Server and solver processes can be started in any order. The server executable can currently only be run by one process.

\subsection{Coupling Multiple Solvers}

One preCICE adapter, i.e., implementational link of a solver's interface with the preCICE API, can couple more than just two solvers. The multi-solver coupling is specified by the XML configuration of preCICE by a sequence of one-to-one solver couplings. In a simple two-solver coupling one XML tag \texttt{communication}, one tag \texttt{coupling-scheme}  as well as two tags \texttt{participant}, describing the solvers, are needed. In general, every solver needs to be described by an own tag \texttt{participant} and every coupling between two solver has to be described by a \texttt{communication} and \texttt{coupling-scheme} tag. 

We first consider an example of three solvers $S1, S2, S3$, where $S1$ should be coupled to $S2$ by an explicit coupling scheme and $S2$ should be coupled to $S3$ by an implicit coupling scheme. This implies that solver $S1$ is coupled only indirectly via $S2$ to solver $S3$. In the XML configuration, we describe the solvers by tags
\begin{verbatim}
<participant name="S1"> ... </participant>
<participant name="S2"> ... </participant>
<participant name="S3"> ... </participant>
\end{verbatim}
and we need to define communications between them
\begin{verbatim}
<communication:... from="S1" to="S2">
<communication:... from="S2" to="S3">\end{verbatim}
The association of the solvers in the same communication tag to attributes \texttt{from} and \texttt{to} does not matter here. Then, the coupling schemes need to be configured as
\begin{verbatim}
<coupling-scheme:implicit>
  <participants first="S2" second="S3"/>
  ...
</coupling-scheme:implicit>
<coupling-scheme:explicit>
  <participants first="S1" second="S2"/>
  ...
</coupling-scheme:explicit>
\end{verbatim}
where the association of solvers to the attributes \texttt{first} and \texttt{second} of tag \texttt{participants} determines the execution sequence relative to one coupling. This configuration will create an explicit coupling scheme for solver $S1$, an implicit coupling scheme for $S3$ and an explicit as well as an implicit coupling scheme for solver $S2$. While the sequence of first giving the implicit and then the explicit scheme has no importance for $S1$ and $S3$, it is crucial for the coupling sequence in $S2$. In the described setup, in $S2$ the implicit coupling scheme will first be iterated until convergence, before the explixit coupling scheme is executed (in every timestep). There will be no additional iteration necessary to execute the explicit scheme in $S2$, since it is triggered in the same iteration that leads to the convergence of the implicit scheme.

While the execution of the different coupling schemes of one solver is sequentialized, the overall execution is not. Thus, looking at the overall computation sequence of the coupled solvers, we would first observe one computation of $S1$ and $S2$, followed by repeated computations of $S3$ and $S2$ until the convergence of the implicit scheme. If in the expicit coupling scheme the first and second participant would be exchanged, $S1$ would have to wait until the convergence of the implicit coupling until it computes its timestep. This sequence ensures that a converged coupling state of $S2$ and $S3$ is achieved before the explicit coupling is executed in $S1$ which might be crucial to obtain stability also in the explicit coupling. 

If the sequence of coupling schemes would be inversed, first, the explicit coupling scheme would be executed in $S2$ and, in the following, implicit iterations would follow taking the results from the computation of $S1$ as fixed.

For a general setup of coupling schemes $C1, C2, C3, ...$, the following rules apply for one time step:
\begin{itemize*}
\item The sequence of schemes is executed from left to right.
\item Explicit schemes are executed once.
\item Implicit schemes are iterated until convergence.
\item When several explicit schemes are in a sequence not broken by implicit schemes, they are executed together.
\item When several implicit schemes are in a sequence not broken by explicit schemes, they are iterated together.
\item When one or several implicit schemes follow one or several expicit schemes, the first iteration of the implicit schemes is done in the same call to \texttt{advance()}.
\item When one or several explicit schemes follow one or several implicit schemes, the execution of the explicit schemes is done in the same call to \texttt{advance()} that lead to the convergence of all preceding implicit schemes.
\item When during the iteration of several implicit schemes an implicit scheme is converged but the others not, the converged scheme is hold back (in converged status) until all other implicit schemes iterating together are also converged.
\end{itemize*}






%\subsection{Using preCICE with your own program}

%\subsection{Using preCICE with Peano}

%\subsection{Using preCICE with Fluent}



%\subsection{Using preCICE with Comsol}




%\chapter{Simulations with preCICE}

%\section{Configuring preCICE}
      
\end{document}
