\documentclass[12pt,a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{graphicx}
\usepackage{listings} 
\usepackage{hyperref}
\usepackage{amssymb}
\usepackage{minted}
\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
\author{Darío Sierra, Ignacio Barragán}
\title{Introducción al protocolo XMPP}

\lstset{
	numbers=left, 
	numberstyle=\small, 
	numbersep=8pt, 
	frame = single, 
	language=c++, 
	framexleftmargin=15pt}


\begin{document}
	\definecolor{bg}{rgb}{0.95,0.95,0.95}
	
		
		
		\maketitle
		\tableofcontents
		
		\newpage
	
	\section{Envio de mensajes con Xmpp}
	Abordaremos la creación de una aplicación cliente que podamos usar para comunicarnos a traves de un servidor.
	
	El primer paso es encontrar el lenguaje que usaremos. En \url{https://xmpp.org/software/libraries.html} podemos encontrar una lista de varias bibliotecas de distintos lenguajes. Nosotros usaremos \textbf{Babbler} desde Java, una de las mejor documentadas.
	
	\hspace{0.25cm}
	
	Crearemos un bot muy simple, su función será la de establecer conexión con un servidor público, enviarle un ping para verificar dicha conexión e intentar mandarse un mensaje a si mismo a traves de este servicio.
	

	
	\hspace{0.25cm}
	
	Para el envío y la recepción de mensajes necesitamos tener creado un usuario en el servidor en cuestión. Sin embargo podemos establecer conexión sin necesidad de identificarnos como usuarios.
	
	\hspace{0.25cm}
	
	Recapitulando, antes de empezar a picar código necesitaremos: 
	
	\begin{enumerate}
		\item Localizar un servidor público.
		\item Crear por lo menos un usuario.
		\item Una bibioteca Xmpp.		
	\end{enumerate}
	
	\hspace{0.25cm}
	
	Aquí tenemos disponibles una lista de servidores públicos:
	
	 \url{https://xmpp.net/directory.php}.
	
	\hspace{0.5cm}
	
	Para este ejemplo concreto usaremos los siguientes los siguientes recursos:
	
	\begin{enumerate}
		\item Servidores: \textcolor{blue}{blah.im}, \textcolor{blue}{ch3kr.net}
		\item Usuario:	\textcolor{red}{fredes10ugr261017}	Contraseña: \textcolor{red}{0}.
		\item Babbler documentación:	\url{http://sco0ter.bitbucket.org/babbler/}.
		\item Descarga :\url{https://bitbucket.org/sco0ter/babbler/downloads/babbler-0.7.2.jar}
	\end{enumerate}	
	
	\newpage
	
	\subsection{Uso de Babbler}
	
	\hspace{0.25cm}
	
	\large{\textbf{Introducción}}
	
	\hspace{0.25cm}
	
	Lo primero es establecer conexión con el servidor. Una de las razones de la elección de babbler es la sencillez con la que esto se puede llevar a cabo.
	
	\hspace{0.25cm}
	
	\begin{minted}[bgcolor=bg,fontsize = \normalsize]{java}
		XmppClient xmppClient = XmppClient.create("Dominio");
	\end{minted}
	
	\hspace{0.25cm}
	
	Donde 'Dominio' es el nombre de Dominio del servidor que queramos usar.
	Con esto ya tendriamos un cliente creado.
	
	Recomendamos el uso de tratamiento de excepciones por la multitud de errores que pueden surgir en la conexión. De lo contrario detectar los errores y depurar el programa es inviable.
	
	\hspace{0.25cm}
	
	Nos conectamos al servidor:
	
	\hspace{0.25cm}

	\begin{minted}[bgcolor=bg,fontsize = \normalsize]{java}
	try{
		xmppClient.connect();
		if(xmppClient.isConnected())
			System.out.println("Conectado");
	} 
	catch (XmppException ex){
		System.out.println(ex.toString());
		System.out.println("FALLO EN LA CONEXION");
	}
	\end{minted}
		\\
	
	\hspace{0.5cm}
	
	Babbler encapsula muchas de la funciones de tratamiento de eventos bajo objetos de tipo \textcolor{red}{Manager}. Por ejemplo para mandar un ping necesitamos el Manager respectivo a este evento: \textcolor{red}{PingManager}. 
	
	\hspace{0.25cm}
	
	\begin{minted}[bgcolor=bg,fontsize = \normalsize]{java}
	 try {
		 PingManager P = xmppClient.getManager(PingManager.class);
		 System.out.println("Enviando Ping");
		 AsyncResult<Boolean> ping = P.pingServer();
		 return ping.get();
	 } 
	 catch (ExecutionException ex) {
	 Logger.getLogger(Bot.class.getName()).log(Level.SEVERE, null, ex);
	 }
	 
	\end{minted}
	
	\hspace{0.25cm}
	
	\hspace{0.25cm}
	
	Una vez mandado el \textcolor{red}{Ping} al servidor la función nos devuelve un booleano en el que se especifica si el servidor nos ha respondido.
	
	\newpage
	
	\large{\textbf{Envío de Mensajes}}
	
	\hspace{0.25cm}
	
	Una vez que ya tenemos creado el cliente y hemos verificado la conexión podemos plantearnos enviar un mensaje.
	
	Lo primero que tenemos que hacer ahora es identificarnos en el servidor:
	
	\hspace{0.25cm}
	
	\begin{minted}[bgcolor=bg,fontsize = \footnotesize]{java}
	try {
		xmppClient.login(username,pasword);
		System.out.println("Autentificación Correcta");
	} 
	catch (XmppException ex) {
		System.out.println(ex.toString());
		System.out.println("FALLO EN LA AUTENTIFICACION");
	}
	\end{minted}
	
	\hspace{0.25cm}
	
	\hspace{0.25cm}
	
	Babbler define los mensajes como una clase que cuenta  con un String y un enumerado TipoMensaje  y un \textcolor{red}{Jid} entre sus datos privados. 
	
	Se pueden crear mensajes de diversas maneras, nosotros creamos uno con un cuerpo, el mensaje en si, el identificador del distinatario, y el tipo chat.
	
	\hspace{0.25cm}
	
	\begin{minted}[bgcolor=bg,fontsize = \normalsize]{java}
	Jid j = Jid.of(Username);
	String Cuerpo = j+ " te envía un mensaje" +":hola";
	Message M = new Message(Jid.of(username),Message.Type.CHAT,Cuerpo);
	\end{minted}
	
	\hspace{0.25cm}	
	
	\hspace{0.25cm}
	
	El mensaje que hemos creado irá destinado al usuario propietario del Jid $j$.
	
	Ahora sólo tenemos que enviarlo:
	
	\hspace{0.25cm}

	\begin{minted}[bgcolor=bg,fontsize = \normalsize]{java}
			xmppClient.send(M);
	\end{minted}	
	
	\hspace{0.25cm}
	
	\large{\textbf{Recepción de Mensajes}}
		
	\hspace{0.25cm}
	
	Si bien enviar mensajes es bastante sencillo, recibirlos no lo es tanto. Tenemos que configurar un \textcolor{red}{listener}. Mediante una función $\lambda$ agregamos a nuestro cliente un manejador para el tratammiento de mensajes entrantes.
	
	\hspace{0.25cm}
	
	\begin{minted}[bgcolor = bg, fontsize = \normalsize]{java}
xmppClient.addInboundMessageListener(new Consumer<MessageEvent>() {
	@Override
	public void accept(MessageEvent e) {
		Message message = e.getMessage();
		System.out.println(message.getBody());
		mensajeRecibido = true;
		}
});
	\end{minted}
	
	\hspace{0.25cm}
	
	Una vez definido este manejador nos olvidamos de la recepción de mensajes. La función se llamará de manera automática.
	
	Podemos crear más de un manejador de mensaje, en este todos todos se ejecutarán en el momento de la recepción.
	
	Consumer$<MessageEvent>$ es una interfaz que debemos cuyo método \textcolor{blue}{accept} debemos sobrescribir. Esta es el procedimiento básico para establecer un manejador; ya que al recibir un mensaje \textcolor{blue}{accept} es el método al que se llama por defecto.
	
	
	\subsection{Manejo de presencias}
	
	Dado que uno de los usos de este protocolo es crear aplicaciones de mensajería instantanea, es de gran utilidad poder comunicarle a los demás nuestro estado. En \textbf{Babbler} el estado de un cliente se conoce comomo $presencia$.
	
	\hspace{0.25cm}
	
	Babbler nos permite tanto enviar nuestra presencia como recibir la de otros.
	Al igual que con los mensajes, existen varias formas de crear presencias, quizá la que más conviene a nuestro cliente es:
	
	\hspace{0.5cm}
	
	\begin{minted}[bgcolor = bg, fontsize = \normalsize]{java}
		Presence(Jid to,Presence.Show show, String status)
	\end{minted}
	
	\hspace{0.5cm}
	
	Nos permite enviar nuestro estado a otro cliente con un String como cuerpo.
	La forma de tratar las presencias entrantes es muy parecida a la de los mensajes:
	
	\hspace{0.5cm}

	\begin{minted}[bgcolor = bg, fontsize = \normalsize]{java}
	xmppClient.addInboundPresenceListener(e -> {
		Presence presencia = e.getPresence();
		// Tratamiento de la presencia recibida.
	});
	\end{minted}	
	
	\hspace{0.25cm}
	
	\hspace{0.25cm}
	
	De una manera muy simple hemos creado un cliente de chat, que usa el protocolo Xmpp y nos permite tanto mandar mensajes como percibir en que estado se encuentran los demás clientes con los que hemos estado hablando.
	
	
	
	
	
	
	
	
	
\end{document}