\section{Analyse et conception}

Comme tous projets de développement, il faut commencer par une phase d'analyse et de conception. Le projet Open Data Event a comme particularité d'avoir déjà eu plusieurs versions avant que je ne commence à travailler dessus. C'est pourquoi la partie d'analyse des versions précédentes étais très importante.

\subsection{Environnement de travail}

J'ai effectué mon stage dans les bureaux de l'entreprise \textbf{Les Polypodes}, situés au 7\up{ème} de l'immeuble \textit{Sigma 2000}. Avec une vue panoramique sur l'île de Nantes, il fallait cependant ne pas se laisser divertir par les différents utilisateurs du terrain multi-sport en bas de l'immeuble.

Côté technique, il a été mis à ma disposition un \textbf{iMac} 21" avec un second écran de la même taille. J'ai donc pu découvrir l'environnement de développement offert par \textbf{OS X}. Globalement, la connaissance de l'environnement \textbf{Linux} m'aura aidé tout au long de l'utilisation d'OS X.

Après m'avoir créé un compte administrateur sur l'ordinateur fourni, j'ai pu installer tout les logiciels nécessaire à la réalisation du projet. Pour des raisons personnels, j'ai choisi d'utiliser les outils suivants:

\begin{itemize}
    \item \textbf{iTerm} (Version 2.0.0)
    \item \textbf{Sublime Text 2} (Version 2.0.2)
    \item \textbf{Google Chrome} (Version 43)
    \item \textbf{Wireshark} (Version 1.12.5)
\end{itemize}

Pour l'utilisation de serveurs SabreDAV, Baïkal, ElasticSearch ou autre (XXX citer la section correspondante XXX), j'ai installé une machine virtuelle grâce à \textbf{Vagrant}.

\textbf{LiberTIC} étant une association militant pour les licences libres, il était évident que la majorité de mon travail (qu'il s'agisse de développement ou de compte-rendus) soit mis lui aussi sous licence libre. Ainsi, il est possible de retrouver mon travail sur \textbf{GitHub} à l'adresse suivante: \url{https://github.com/LiberTIC/ODEV2}.

En plus de mon environnement local, j'ai pu accéder à un serveur de pré-production hébergé par OVH.

\subsection{Mise à niveau préliminaire}

Dès le début de mon stage, il a été défini que le projet allait se construire sur des technologies que je ne connaissais pas et/ou ne maitrisais pas. C'est pourquoi il a été convenu que la première semaine de mon stage devais me servir pour effectuer une mise à niveau pour différentes technologies.

Premièrement, j'ai suivi un récapitulatif des commandes \textbf{Git} \cite{gitimmersion} puis lu un article sur les bonnes pratiques de l'utilisation de Git et de ses branches \cite{successfulgit}.

Ensuite, j'ai lu plusieurs articles sur les bonnes pratiques du développement \textbf{PHP} \cite{bestpracticephp} \cite{stupidvssolid}.

Enfin, j'ai lu et appliqué la totalité du \textbf{Symfony Book} \cite{symfonybook}.

\subsection{Analyse des RFC}

Avant de commencer le projet, il fallait déjà que je comprenne toutes les technologies abordés. \textbf{CalDAV} étant la base du projet, j'ai du appronfondir mes connaissances sur le sujet.

Pour re-situer \textbf{CalDAV}, il s'agit d'une extension de WebDAV, elle-même extension du protocol HTTP. Globalement, elle défini et précise la façon d'envoyer des données au format \textbf{iCalendar} sur le réseau Internet.

\textbf{iCalendar}, quand à lui, est un format de fichier (.ical ; .ics ; .icalendar ). Il permet de stocker des événements (tels que "Cinéma à 16h" ou "Réunion service compta' tous les lundi à 9h"). Ce format est ensuite utilisé par des logiciels (tels que iCal, Google Calendar, etc..) pour en faire un affichage plus adapté aux utilisateurs.

Pour plus d'informations sur CalDAV et iCalendar, j'ai établi un "tutoriel" pour expliquer l'utilisation de chacun: \url{https://github.com/LiberTIC/ODEV2/blob/master/doc/Thibaud_Printemps2015/Tutoriel_Comprendre_CalDAV.md}

Pour effectuer ce travail d'analyse, j'ai du lire la presque-totalité des RFC suivantes:
\begin{itemize}
    \item \textbf{RFC 4918}: \url{https://tools.ietf.org/html/rfc4918}
    \item \textbf{RFC 4791}: \url{https://tools.ietf.org/html/rfc4791}
    \item \textbf{RFC 2324}: \url{https://tools.ietf.org/html/rfc2324}
\end{itemize}

\subsection{Analyse des versions précédentes}

Avant que je ne commence à travailler dessus, ce projet à traversé de nombreuses phases d'analyses, de conceptions et de développement.

\subsubsection*{La première réunion}

L'élément déclencheur de ce projet est la réunion du 11 juin 2014 à Stéréolux avec l'association LiberTIC et quelques acteurs de l'événementiel à Nantes. Il est apparu qu'il y avait une nécessité d'améliorer la diffusion des données.

C'est ainsi qu'est né le projet ODE (Open Data Event). Il s'agit d'un aggrégateur d'événement permettant de relier les fournisseurs d'événements (les organisateurs de festivals, concerts, conférence, etc...) avec les réutilisateurs d'événements (les utilisateurs de l'API, les journaux, etc...).

Cette réunion a permis de produire un cahier des charges pour le projet (disponible à cette addresse: \url{https://github.com/LiberTIC/ODEV2/blob/master/doc/Documents/120622_ODE_cahierDesCharges_MakinaCorpus.pdf} )

\subsubsection*{La première version}

Makina Corpus ( \url{http://makina-corpus.com/} ), entreprise de développement de logiciels libres, a répondu au cahier des charges en proposant de réaliser le projet. Plusieurs mois plus tard, la première version était fini et fut présenté à des responsable de l'association LiberTIC.

Cependant, durant la réunion, il est apparu de nombreuses différences dans la direction du projet mené par Makina Corpus avec la direction voulu par l'association. A la fin de la réunion, il a été décidé de ne pas continuer la relation entre l'association et l'entreprise.

L'application développé par Makina Corpus est programmé en Python. Il s'agit d'une API REST qui permet aux clients d'intéragir avec les événements. Le code est basé sur le \textbf{Pyramid web framework} et \textbf{Cornice}.

Le problème de cette application est qu'elle ne répond pas aux attentes de LiberTIC par rapport à l'accessibilité et la facilité d'utilisation. En effet, il n'y a pas d'interface utilisateur disponible et l'utilisation d'une API REST est presque impossible sans connaissance en informatique.

\subsubsection*{La reprise par Les Polypodes}

Suite à une réunion de l'association LiberTIC abordant l'échec de la première version, Ronan Guilloux de l'entreprise Les Polypodes, présent à cette réunion, fit la proposition suivante: Les Polypodes serait prêt à accueillir des stagiaires pour effectuer le projet. Les stagiaires seraient accueilli par l'entreprise et l'association s'engagerait à faire un suivi plus approfondit du projet pour éviter la même fin que la version précédente.

\subsubsection*{Version 2 - Les premiers stagiaires}

En janvier 2015, deux stagiaires de BTS chez Les Polypodes ont commencé à travailler sur ODE version 2.

Leur travail a été de produire un prototype d'une application sous Symfony2 permettant une gestion des événements avec un serveur CalDAV. Ils ont fait un comparatif des serveurs CalDAV et fait une analyse des sémantiques disponibles pour les événements.

Sachant que la durée de leur stage n'était que de six semaines, ils n'ont pas pu faire évoluer le prototype ( disponible à cette adresse: \url{https://github.com/polypodes/CalDAVClientPrototype} )

\subsubsection*{Version 2 - Mon stage}

Depuis le 13 avril 2015, je travaille donc sur la version 2 du projet. Le but est de pouvoir réaliser le projet dans le temps qui m'est imparti ( 10 semaines ).

\subsection{Analyse cahier des charges}

Le 30 avril, j'ai participé à une réunion avec des représentants de l'association LiberTIC pour définir leurs besoins et leurs attentes quand à la réalisation de ce projet avec moi.

Durant cette réunion, je leur ai expliqué ce que j'avais effectué comme travail jusque là, je leur ai ensuite présenté plusieurs diagramme de conception UML, puis, nous avons discuté des points importants sur lesquels je devrai me focaliser durant mon stage.

\subsubsection*{La partie serveur}

J'ai longtemps refléchi sur la pertinence d'utiliser CalDAV pour le projet. En effet, il s'agit d'une extension du protocol HTTP datant de plus de 15 ans qui n'est pas très utilisé.

Cependant, sachant que le partage des données doit être encouragé, il faut s'assurer que n'importe qui puisse inscrire des données dans ODE, que ce soit un(e) commercial(e), un(e) responsable technique ou un(e) secrétaire. Or, l'avantage de CalDAV est que de nombreux clients calendrier (dont Google Calendar et Apple Calendar) permet l'ajout d'un compte compatible CalDAV.

Ainsi, en utilisant CalDAV, nous pourrions disposer d'interfaces utilisateurs déjà optimisé pour la création et la gestion d'événements.

Le deuxième point que j'ai abordé durant la réunion du 30 avril fut la façon dont les événements serait stockés. J'ai d'abord pensé qu'une base de données SQL serait la façon la plus simple et efficace de stocker des événements. Cependant, en réfléchissant à la structure d'un événement (dont je parlerais plus tard), je me suis rendu compte que la structure ne convenait pas à un stockage linéaire comme SQL.

Après m'être renseigné sur les différentes alternatives à SQL, j'ai opté pour ElasticSearch (\url{https://www.elastic.co/}). Il s'agit d'un moteur d'indexation permettant un stockage au format JSON, idéal pour la structure d'un événement. De plus, grâce à ElasticSearch, il sera possible d'implémenter facilement une recherche d'événements par mot-clés.

\subsubsection*{La partie application}

\subsection{Conception UML du projet}