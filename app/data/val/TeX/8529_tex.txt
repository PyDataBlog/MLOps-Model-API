\section{Programing}

\subsection{Language}

\begin{frame}{Matlab}
    \begin{itemize}
      \item Matlab
      \item Python
      \item Labview
    \end{itemize}

    \begin{figure}
        \includegraphics[width=0.2\textwidth]{../Images/Matlab.jpg}
        \caption{Matlab.}
    \end{figure}


\end{frame}

\subsection{Programming Paradigm}
\begin{footnotesize}

\begin{frame}{Tips - 1}

    \begin{itemize}
        \item Before you start programming, spell out the steps you have to do, and write them down as comments. For example:
        \begin{itemize}
          \item Set the parameters
          \item Select the input file
          \item Read in the data
          \item Filter the data
          \item Show the results
          \item Save the results to an outfile
          \item Show the user the location of the outfile.
        \end{itemize}

        Not only does this help you to organize your code, it also provides a first rudimentary documentation of your program.
    \end{itemize}
\end{frame}

\begin{frame}{Tips - 2}
\begin{itemize}

      \item<1-> Data analysis is an interactive task. Make use of the very powerful Matlab environment for interactive programming, and first develop your analysis step by step on the command-line.

      \item<2-> Once you have your data analysis - for the one block - going, grab the Matlab history, and turn it into a function. Think about what you want/need for the input, and what the output should be.

      \item<3-> Before you implement a mathematical algorithm, write it down on paper! This makes the implementation much quicker, because you have to spell out what you want to do.

      \item<4-> Use the Matlab Help - it is one of the best parts of Matlab. Especially, use the code samples from the Help and from the Demo examples.
    \end{itemize}
\end{frame}

\begin{frame}[fragile]{Tips - 3}
    \begin{itemize}
      \item<1-> If possible, use some simple dummy data to test your programming steps.

      \item<2-> Be careful with your choice of variable names. For example, never use "i" as a variable. Use "ii" instead (also "jj" instead of  "j", etc.)
        \begin{lstlisting}
            for ii = 1:10
                disp(ii);
            end
        \end{lstlisting}

      \item<3-> In the Matlab help browser it is often very helpful to narrow down the search-range to a few toolboxes. This can be done in $File | Preferences | Help | Enable Product Filter$.
    \end{itemize}
\end{frame}

\begin{frame}[fragile]{Tips - 4}
    \begin{itemize}
      \item<1-> When you write your own functions, stick to the Matlab-style of documentation: The first line starts with the name of the function or script, and contains a one-line description. The next section gives more detailed information.

      \item<2-> Never use generic words, such as $integer$, $line$, etc as variable name: you might hide existing Matlab functions to your program! As a specific example, test the effect of a variable named $line$: if you generate a variable $line$, then you don't see the function any more!
        \begin{lstlisting}
            which line
            >> built-in (C:\Program Files\MATLAB\R2012a\toolbox\matlab\graphics\line)
            line = 'This is a line.';
            which line
            >> line is a variable.
        \end{lstlisting}
    \end{itemize}

\end{frame}

\begin{frame}{Tips - 5}
    \begin{itemize}
      \item<1-> Know your editor well - you are going to work with it a lot! Especially, know the keyboard shortcuts!

      \item<2-> Make sure you know the basic Matlab syntax. Try to use matrix multiplications instead of loops wherever possible: this makes your code nicer, and your programs much faster.

      \item<3-> Once you know the Matlab basics, get to know the \emph{Debugger}. It really helps to find mistakes in your programs.

      \item<4-> Don't repeat code. If you have to use a piece of code more than two times, write a Function instead.

    \end{itemize}

\end{frame}
\end{footnotesize}

\begin{frame}{Matlab Scripts vs Functions}
    \begin{description}
      \item[Scripts] Executed in the main workspace
      \item[Functions] Each executed in its own workspace.
    \end{description}

    \begin{equation*}
        function \, outData = myFunction(inData)
    \end{equation*}

    \begin{figure}
        \includegraphics[width=0.5\textwidth]{../Images/workspace.jpg}
        \caption{Matlab.}
    \end{figure}


\end{frame}