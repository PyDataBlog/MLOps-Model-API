
# Grab target compiler and set corresponding variables.
###################################################################################################
# Check Compiler:
# USING_GCC  			: gcc is being used for C compiler
# USING_GPP  			: g++ is being used for C++ compiler
# USING_ICC  			: icc is being used for C compiler
# USING_ICPC 			: icpc is being used for C++ compiler
# USING_WINDOWS_MSVC 		: Visual Studio's compiler
# USING_WINDOWS_ICL 		: Intel's Windows compiler 
# USING_LLVM_CLANG 		: Mac OSX 10.8 and hieveer (XCode) compiler
include( ${BASE_SOURCE_PATH}/CMake/CheckCompiler.cmake )

# Visual Studio configuration.
###################################################################################################
if( USING_WINDOWS_MSVC )
	# Multi Proc Build
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
	
	# Warning Level 4, as error.
	set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   /W4 /wd4251")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /wd4251")
	
	set (CMAKE_CXX_FLAGS			"${CMAKE_CXX_FLAGS} 			/MP /bigobj /Gy /GT ")
	set (CMAKE_CXX_FLAGS_DEBUG		"${CMAKE_CXX_FLAGS_DEBUG} 		/MP /bigobj /Gy /GT ")
	set (CMAKE_CXX_FLAGS_RELWITHDEBINFO 	"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}  	/MP /bigobj /Gy /GT ")
	set (CMAKE_CXX_FLAGS_RELWITHDEBINFO 	"${CMAKE_CXX_FLAGS_RELEASE}  		/MP /bigobj /Gy /GT ")
	
	# # Edit and continue.
	# set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /ZI")
	# set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_DEBUG} /ZI")
	
	# Linker flags
	set( CMAKE_EXE_LINKER_FLAGS 	"${CMAKE_EXE_LINKER_FLAGS} 	/INCREMENTAL:NO") 
	set( CMAKE_SHARED_LINKER_FLAGS 	"${CMAKE_SHARED_LINKER_FLAGS} 	/INCREMENTAL:NO") 
	set( CMAKE_MODULE_LINKER_FLAGS 	"${CMAKE_MODULE_LINKER_FLAGS} 	/INCREMENTAL:NO") 

elseif( USING_GCC OR USING_LLVM_CLANG )

	message( "\nEclipse Debug: Please set CMAKE_BUILD_TYPE to Debug manually.\n" )

	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror" )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z" )

	if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")	
		# Address Sanitizer
		option( BUILD_ENABLE_ASAN "Enable Address Sanitizer" ON)
		if( BUILD_ENABLE_ASAN )
			set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address" )
		endif()
	
		# Memory Sanitizer.
		option( BUILD_ENABLE_MSAN "Enable Memory Sanitizer" OFF)
		if( BUILD_ENABLE_MSAN )
			set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=memory" )
		endif()
	
		# Thread Sanitizer.
		option( BUILD_ENABLE_TSAN "Enable Thread Sanitizer" OFF)
		if( BUILD_ENABLE_TSAN )
			set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=thread" )
		endif()
	
		# Undefined Behavior Sanitizer.
		option( BUILD_ENABLE_UBSAN "Enable Undefined Behavior Sanitizer" ON)
		if( BUILD_ENABLE_UBSAN )
			set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined" )
		endif()

	endif()

endif()

# Postfix
###################################################################################################
set(CMAKE_DEBUG_POSTFIX			"d" CACHE STRING "add a postfix, usually d on windows")
set(CMAKE_RELEASE_POSTFIX		"" CACHE STRING "add a postfix, usually empty on windows")
set(CMAKE_RELWITHDEBINFO_POSTFIX 	"rd" CACHE STRING "add a postfix, usually empty on windows")
set(CMAKE_MINSIZEREL_POSTFIX 		"s" CACHE STRING "add a postfix, usually empty on windows")

if( CMAKE_BUILD_TYPE MATCHES "Release" )
    set( CMAKE_BUILD_POSTFIX "${CMAKE_RELEASE_POSTFIX}" )

elseif( CMAKE_BUILD_TYPE MATCHES "MinSizeRel" )
    set( CMAKE_BUILD_POSTFIX "${CMAKE_MINSIZEREL_POSTFIX}" )

elseif( CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo" )
    set( CMAKE_BUILD_POSTFIX "${CMAKE_RELWITHDEBINFO_POSTFIX}" )

elseif( CMAKE_BUILD_TYPE MATCHES "Debug" )
    set( CMAKE_BUILD_POSTFIX "${CMAKE_DEBUG_POSTFIX}" )

else()
    set( CMAKE_BUILD_POSTFIX "" )
endif()

