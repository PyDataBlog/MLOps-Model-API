.SUFFIXES: .c .cpp .o .x .h .so .hpp
DIR = `basename $(PWD)`

NAME1 = main

EXEC1 = $(NAME1).cxx
OBJS1 = $(NAME1).o

LIBS1  = ###
HEADS1 = ###

#   -----------------
#   Compiler Flags
#   -----------------

CXX = g++
LD = $(CXX)
CXXFLAGS= -std=c++14 -lpthread -Wall
LXXFLAGS= -std=c++14 -lpthread
AR=ar
ARFLAGS = rv
%.o: %.cpp %.h %.hpp
	$(CXX) $(CXXFLAGS) -c $<

#   --------------------------------------------------
#   Passing the makefile arguments for the assignments
#   --------------------------------------------------

#   ------ (Example): If the first argument is "assignment3" prepare the arguments to pass ------
#ifeq (assignment3,$(firstword $(MAKECMDGOALS)))
#    RUN_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
#    $(eval $(RUN_ARGS):;@:)
#endif
#   ---------------------------------------------------------------------------------------------

#   -------------------------------------------
#   Prepare arguments for pass with all .PHONYs
#   -------------------------------------------

RUN_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(RUN_ARGS):;@:)

#   -----------------------------------------
#   Compilt the program for lunching the app
#   -----------------------------------------

.PHONY: all
all: $(EXEC1) 

$(EXEC1): $(OBJS1) $(LIBS1) 
	$(LD) -o $@ $(LXXFLAGS) $^

#   ------------------------------------------------------
#   Arguments for lunching the right assignment by number
#   ------------------------------------------------------

.PHONY: asd_demo
asd_demo: $(EXEC1)
	./$(EXEC1) 99 $(RUN_ARGS)

.PHONY: assignment1
assignment1: $(EXEC1)
	./$(EXEC1) 101 $(RUN_ARGS)

.PHONY: assignment3
assignment3: $(EXEC1)
	./$(EXEC1) 103 $(RUN_ARGS)

.PHONY: assignment4
assignment4: $(EXEC1)
	./$(EXEC1) 104 $(RUN_ARGS)

.PHONY: assignment5
assignment5: $(EXEC1)
	./$(EXEC1) 105 $(RUN_ARGS)

.PHONY: assignment6
assignment6: $(EXEC1)
	./$(EXEC1) 106 $(RUN_ARGS)

#   ----------------------------
#   Clean binarys and temp files
#   ----------------------------

.PHONY: clean tar
clean:                                                     
	rm -f *.fifo *.o *.cxx *~ *.a *.so *.x core core* a.out; rm -rf ${LIB_DIR}

#   ------------------------
#   Archive & compression
#   ------------------------

tar: clean
	(cd ../; tar -cvzf $(DIR).tar.gz  $(DIR) )
