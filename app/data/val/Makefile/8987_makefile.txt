# makefile for building Static Libary

#Ä¬ÈÏ¶¼´ò¿ªdebuginfo,optimize£¬GCCÕâµãºÍWINDOWSÍêÈ«²»Ò»Ñù
debuginfo ?=1
optimize ?= 1

#Build with thread support.
threads ?= 1

#½»²æ±àÒë ==32£¬Ö¸¶¨±àÒë32Î»µÄ³ÌÐò£¬==64£¬±àÒë64Î»³ÌÐò
buildbits ?= 0

# Õâ¸ö¸³Öµ?=ÊÇ±íÊ¾Ã»ÓÐ¶¨Òå¾Í¸³Öµ
AR        ?= ar

CC        ?= gcc
CXX       ?= g++
DLD       := $(CXX)
LD        := $(CXX)
RM        ?= rm -f
MKDIR     ?= mkdir -p
RMDIR     ?= rm -rf


INCLDIRS ?=
DEFFLAGS ?=

ifeq ($(buildbits),32)
CFLAGS += -m32
CCFLAGS += -m32
LDFLAGS  += -m32
endif
ifeq ($(buildbits),64)
CFLAGS += -m64
CCFLAGS += -m32
LDFLAGS  += -m64
endif

#ARFLAGSºÃÏñÍâ²¿ÓÐ¶¨Òå£¬¹îÒì
ARFLAGS   = rsuv

#±àÒëÑ¡Ïî
#±àÒëÑ¡Ïî
CFLAGS += -W -Wall -Wpointer-arith 
CCFLAGS += -std=c++0x -W -Wall -Wpointer-arith 

#Èç¹ûÓÐÓÅ»¯
ifeq ($(optimize),1)
CFLAGS  += -O2
CCFLAGS += -O2
endif # optimize

#-ggdbÕâ¸öµ÷ÊÔ¿ª¹Ø´ò¿ªºóµ÷ÊÔÐÅÏ¢Ó¦¸ÃºÃÓÚ-g,µ«ÊÇ²»ÄÜÊ¹ÓÃÆäËûµ÷ÊÔÆ÷µ÷ÊÔÁË
#Èç¹ûÐèÒªµ÷ÊÔÐÅÏ¢£¬linuxµÄ°æ±¾Ò»°ã»¹ÊÇ´øÉÏÁËµ÷ÊÔÐÅÏ¢£¬ÎÞÂÛ°æ±¾
ifeq ($(debuginfo),1)
  CFLAGS  += -ggdb
  CCFLAGS += -ggdb
endif # debuginfo

LIBARYS += -ldl

ifeq ($(threads),1)
  CFLAGS += -lpthread
  CCFLAGS += -lpthread
  LIBARYS += -lpthread -lrt
endif

DEFFLAGS += -D_GNU_SOURCE

C_FLIE   = $(wildcard ./*.c ) 
CPP_FILE = $(wildcard ./*.cpp )

O_CFILE   = $(patsubst ./%.c, ./%.o, $(C_FLIE))
O_CPPFILE = $(patsubst ./%.cpp, ./%.o, $(CPP_FILE))
#Õâ¸ö¸ù¾ÝÇé¿öµ÷Õû£¬
O_FILE  = $(O_CFILE) 

COMPILE.c  = $(CC)  $(CFLAGS)  $(DEFFLAGS) -c
COMPILE.cc = $(CXX) $(CCFLAGS) $(DEFFLAGS) -c

OUTFILE = libsqlite.a

.PHONY :all clean

all : $(OUTFILE) 

#Õâ¸öÊµÓÃGCC±àÒë
$(OUTFILE): $(O_FILE)
	$(AR) $(ARFLAGS) $(OUTFILE) $(O_FILE)
	
./%.o : ./%.c
	$(COMPILE.c) $(INCLDIRS) $< -o $@ 

#$(OUTFILE): $(O_FILE)
#	$(AR) $(ARFLAGS) $(OUTFILE) $(O_FILE)
#%.o : %.cpp
#	$(COMPILE.cc) $(INCLDIRS) $< -o $@ 

clean:
	$(RM)  $(OUTFILE) $(O_FILE)
