'use strict';

const _ = require('lodash');
const serviceUtils = require('../serviceUtils');

/**
 * @summary Retrieve a Coding System object.
 * @param  {String}   source  Abbreviation of the source coding system under test.
 * @param  {Function} callback Function called on process completion, with standard (err, result) signature.
 * @return {Object}   Coding System object
 *                           'sourceAbbreviation' {String} Abbreviated name of the coding system
 *                           'nomenclature'       {String} Longer description
 *                           'implementationDate' {String} Implementation date in ISO format
 *
 * @memberof LexiconService
 * @instance
 */
function lookupCodingSystem(source, cb) {
    if (!source) {
        return cb(this.error('INVALID_CODING_SYSTEM_SOURCE_VALUE'));
    }
    const findObject = {
        query: { sourceAbbreviation: source },
        projection: serviceUtils.createProjection(['sourceAbbreviation', 'implementationDate']),
    };
    this.find('CodingSystems', findObject, (err, res) => {
        if (err) {
            return cb(err);
        }

        const codingSystem = _.first(res);
        const impDate = _.get(codingSystem, 'implementationDate');

        if (_.isDate(impDate)) {
            _.set(codingSystem, 'implementationDate', impDate.toISOString());
        }

        cb(null, codingSystem);
    });
}

module.exports = {
    lookupCodingSystem,
};
