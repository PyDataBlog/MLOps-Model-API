
function Improvement(options) {
  this.name = options.name;
  this.image = options.image;

  this.depth = options.depth || 0;
  this.parent = options.parent;
  this.children = options.children || [];
  this.siblings = options.siblings || [];
  this.toDisplay = options.toDisplay || [];
  this.toBuild = options.toBuild || [];

  this.cost = options.cost;
  this.materials = options.materials;
  this.buildEvent = 'event:'+options.buildEvent;
}


Improvement.prototype = {

  /*
   * The build function will build the improvement, adding it to the list of
   * improvements built in the GameState and removing the needed materials
   * from the character's inventory.
   */
  build: function() {
    GameState.buildImprovement(this.code);

    var character = GameState.getCharacter();
    character.adjustCurrency(-this.cost);

    $.each(this.materials, function(key, value) {
      character.removeItem({ item:key, count:value });
    });
  },


  /*
   * An improvement is active when it has been built and none of its children
   * have been built.
   */
  isActive: function() {
    if (!GameState.isImprovementBuilt(this.code)) {
      return false;
    }
    for (var i=0; i<this.children.length; i++) {
      if (GameState.isImprovementBuilt(this.children[i])) {
        return false;
      }
    }
    return true;
  },


  /*
   * Function used to check to see if the improvement can be built regardless
   * of whether the character has the materials or not. If this improvement
   * has a parent location that hasn't been built then this improvement cannot
   * be built. If this improvement has any sibling improvements that have been
   * built then this improvement cannot be built.
   */
  canBuild: function() {
    if (this.canDisplay() == false) { return false; }

    for (var i=0; i<this.siblings.length; i++) {
      if (GameState.isImprovementBuilt(this.siblings[i])) {
        return false;
      }
    }

    return Resolver.meetsRequirements(this.toBuild);
  },


  /*
   * Function used to check to see if an improvement should be displayed in
   * the list of improvements. Improvements with parent improvements will not
   * be displayed until their parent improvements have been built.
   */
  canDisplay: function() {
    if (this.parent && !GameState.isImprovementBuilt(this.parent)) {
      return false;
    }
    return Resolver.meetsRequirements(this.toDisplay);
  },


  /*
   * Function used to check to see if the character has both the currency and
   * materials needed to build the improvement.
   */
  hasMaterials: function() {
    var character = GameState.getCharacter();
    if (character.getCurrency() < this.cost) {
      return false;
    }

    var result = true;
    $.each(this.materials, function(key, value) {
      if (character.getItemQuantity(key) < value) {
        result = false;
      }
    });

    return result;
  },


  /* Get the description of the improvement from the interface data. */
  getDescription: function() {
    return Data.getInterface('improvement_'+this.getCode());
  },


  getBuildEvent: function() { return this.buildEvent; },
  getCode: function() { return this.code; },
  getCost: function() { return this.cost; },
  getDepth: function() { return this.depth; },
  getImage: function() { return this.image; },
  getMaterials: function() { return this.materials; },
  getName: function() { return this.name; },

};