local next = next

local awful      = require('awful')
local gears      = require('gears')
local FontIcon   = require('sanity/util/fonticon')
local Container  = require('sanity/util/container')
local display    = require('sanity/util/display')

local boxes = setmetatable({}, {__mode = 'kv'})
local floating_tags = {'', '', '', '', ''}


local function create_screen_widgets(screen)
    boxes[screen] = {}

    local tag_name_font_icon = FontIcon {}
    local container = Container {
        widget = tag_name_font_icon,
        buttons = gears.table.join(
            awful.button({}, 1, function() awful.tag.viewnext(screen) end),
            awful.button({}, 3, function() awful.tag.viewprev(screen) end)
        ),
        no_tooltip = true
    }
    boxes[screen] = {
        tnfi   = tag_name_font_icon,
        c      = container,
        bubble = display.bubble(container, false, true)
    }
end

local function update(screen, container)
    local focused_screen = awful.screen.focused()

    local cache = boxes[screen] or boxes[focused_screen]
    if not cache then
        create_screen_widgets(screen)
        cache = boxes[screen]

        if container then
            container:reset()
            container:add(cache.bubble)
        end
    end

    local tag_idx = focused_screen.selected_tag and focused_screen.selected_tag.index or 1
    local tag = screen.tags[tag_idx]
    local tag_name = tag.name

    local fg_color = colors.yellow
    local bg_color = colors.background

    if tag.layout.name == 'floating' then
        tag_name = floating_tags[tag_idx]
    else
        bg_color = fg_color
        fg_color = colors.background
    end

    cache.tnfi:update(tag_name, fg_color)
    cache.bubble.background_container.bg = bg_color
end

local function get_screen(s)
    return s and screen[s]
end

local function update_from_tag(t)
    local s = get_screen(t.screen)
    if s and boxes[s] then
        update(s)
    end
end

tag.connect_signal('property::layout', update_from_tag)
tag.connect_signal('property::screen', function()
    for s, _ in next, boxes do
        if s.valid then
            update(s)
        end
    end
end)

local function factory(args)
    local s = args.screen

    return awful.widget.taglist {
        screen = s,
        filter = awful.widget.taglist.filter.all,
        update_function = function(c)
            update(s, c)
        end,
    }
end

return factory
