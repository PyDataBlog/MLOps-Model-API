--a flag component for the eating attempt state
class 'EatComponent' (engine.Component)

function EatComponent:__init()
  engine.Component.__init(self)
end

function EatComponent:getName()
  return "eat"
end

function load_Eat(node)
  return EatComponent()
end

--a component for food amount
class 'FoodComponent' (engine.Component)

function FoodComponent:__init(v)
  engine.Component.__init(self)
  self.value = v
end

function FoodComponent:getName()
  return "food"
end

function load_Food(node)
  return FoodComponent(node:child("Food"):attribute("Value"):as_float())
end

--a system to manage hunger increase
class 'HungerSystem' (engine.System)

function HungerSystem:__init()
  engine.System.__init(self)
  self.mask = engine.EntityMask() + engine.getComponentID("food")
end

function HungerSystem:run(pulse)
  for i=0,self.entities:size()-1 do
    local id = self.entities:at(i)
    local e = self.parent.mgr:getEntity(id)
    e:getComponent("food").value = math.max(0, e:getComponent("food").value - 0.5*pulse)
  end
end

--a system to manage eating plants
class 'PlantEatSystem' (engine.System)

local psid = 0

function PlantEatSystem:__init(mgr, mgrId)
  engine.System.__init(self)
  self.mgr = mgr
  self.mgrId = mgrId
  self.mask = engine.EntityMask() + engine.getComponentID("collision") + engine.getComponentID("organism") + engine.getComponentID("food")
end

function PlantEatSystem:run(pulse)
  for i=0,self.entities:size()-1 do
    local id = self.entities:at(i)
    local e = self.parent.mgr:getEntity(id)
    if e:hasComponent("eat") then
      for i2=0,e:getComponent("collision").collisions:size()-1 do
        local id2 = e:getComponent("collision").collisions:at(i2)
        local e2 = self.parent.mgr:getEntity(id)
        if e2:hasComponent("plant") then
          print("Ate plant!")
          local eps = self.parent:addEntity("plant_ps"..psid)
          local node = self.mgr:getRootSceneNode():createChildSceneNode("plant_ps"..psid)
          eps:addComponent(PositionComponent(e2:getComponent("position").pos))
          eps:addComponent(SceneNodeComponent(node, self.mgrId))
          eps:addComponent(LifetimeComponent(1))
          local s = self.mgr:createParticleSystem("plant_ps"..psid, "LeafExplosion")
          node:attachObject(s)
          self.parent:updateEntity("plant_ps"..psid)
          psid = psid+1

          --e2:removeComponent("plant")
          --e2:removeComponent("collision")
          --e2:addComponent(LifetimeComponent(0.5))
          self.parent.mgr:removeEntity(id2)
          self.parent:updateEntity(id2)

          e:getComponent("food").value = math.min(100, e:getComponent("food").value + 10)
        end
      end
    end
  end
end
