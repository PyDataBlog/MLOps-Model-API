#!/usr/bin/python3
import sys
import getpass
import helper
from argparse import ArgumentParser

if __name__ == "__main__":
    parser = ArgumentParser(description="Simple file password based encryption/decryption tools. When run as pipe, use standard in/out.")
    parser.add_argument("-a", "--action", choices=["encrypt", "decrypt"], required=True, help="encrypt/decrypt the file/stream")
    parser.add_argument("-p", "--password", required=False, help="password for operation or passphase for key")
    parser.add_argument("-k", "--key", required=False, help="key path")
    parser.add_argument("INPUT", default="", nargs="?", help="input file, default stdin")
    parser.add_argument("OUTPUT", default="", nargs="?", help="output file, default to stdout")
    parser.add_argument("-d", "--debug", action="store_true", help="debug print")
    args = parser.parse_args()

    if not args.password:
        passwd = getpass.getpass("Password: ")
        if args.action == "encrypt" and getpass.getpass("Verify password: ") != passwd:
            print("Password mismatch...")
            exit()
    else:
        passwd = args.password

    # setup params
    inF = sys.stdin.buffer if not sys.stdin.isatty() else args.INPUT
    if not sys.stdin.isatty():
        args.OUTPUT = args.INPUT
    outF = sys.stdout.buffer if not sys.stdout.isatty() or args.OUTPUT == "" else args.OUTPUT

    if inF == "":
        print("No input source provided...")
        exit()

    _log_out = None if outF is sys.stdout.buffer else sys.stdout

    op_type = helper.Type.with_password
    if args.key:
        op_type = helper.Type.with_rsa_key

    if inF is not sys.stdin.buffer:
        inF = open(inF, "rb")
    if outF is not sys.stdout.buffer:
        outF = open(outF, "wb")
    if args.action == "encrypt":
        helper.encrypt_stream(inF, outF, op_type, key_file=args.key, secret=passwd, log_out=_log_out)
    if args.action == "decrypt":
        helper.decrypt_stream(inF, outF, key_file=args.key, secret=passwd, log_out=_log_out)
