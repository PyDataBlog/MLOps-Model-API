#coding=utf-8
#author='Shichao-Dong'

import unittest
import Web_Method_Baspd
import Public_Base_Method
import requests
import time
import HTMLTestRunner

class ST_Bas_pd(unittest.TestCase):
    u'商品功能性测试'

    def setUp(self):
        global cookie
        r = Public_Base_Method.login_func("172.31.3.73:6020", "dongshichao", "dong", "a111111")
        cookie="WQSESSIONID="+"".join(r.cookies["WQSESSIONID"])
        print cookie
    def tearDown(self):
        pass

    def test_pd_queryData_all(self):
        u'查询所有商品'
        r=Web_Method_Baspd.pd_query(cookie)
        print r.status_code
        print r.content
        self.assertTrue('r.status_code==200',msg='获取商品数据失败')

    def test_pd_queryData_onsale(self):
        u'查询在售商品'
        r=Web_Method_Baspd.pd_query_onsale(cookie)
        print r.status_code
        print r.content
        self.assertTrue('r.status_code==200',msg='获取在售商品失败')

    def test_pd_queryData_offsale(self):
        u'查询停售商品'
        r=Web_Method_Baspd.pd_query_offsale(cookie)
        print r.status_code
        self.assertTrue('r.status_code==200',msg='获取停售商品失败')




if __name__=="__main__":
    suite=unittest.TestSuite()
    suite.addTest(ST_Bas_pd("test_pd_queryData_all"))
    suite.addTest(ST_Bas_pd("test_pd_queryData_onsale"))
    suite.addTest(ST_Bas_pd("test_pd_queryData_offsale"))

    runner=unittest.TextTestRunner()
    runner.run(suite)

    # #定义报告路径及名称
    # now = time.strftime("%Y-%m-%d-%H-%M-%S",time.localtime(time.time()))
    # filename=r'D://Ptest/Report/'+now+'result.html'
    # fp=open(filename,'wb')
    # runner=HTMLTestRunner.HTMLTestRunner(stream=fp,title='test result',description=u'测试情况:')
    #
    # #执行测试
    # runner.run(suite)
    # fp.close()