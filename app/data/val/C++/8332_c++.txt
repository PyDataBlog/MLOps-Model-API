/**********************************************************************
 *  Copyright (c) 2013-2014, The Pennsylvania State University.
 *  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **********************************************************************/
#include "prjspeciesimpl.h"

namespace prj
{

void SpeciesImpl::setDefaults()
{
    m_nr = 0;
    m_sflag = 0;
    m_ntflag = 0;
    m_molwt = RX7("0.0");
    m_mdiam = RX7("0.0");
    m_edens = RX7("0.0");
    m_decay = RX7("0.0");
    m_Dm = RX7("0.0");
    m_ccdef = RX7("0.0");
    m_Cp = RX7("0.0");
    m_ucc = 0;
    m_umd = 0;
    m_ued = 0;
    m_udm = 0;
    m_ucp = 0;
}

SpeciesImpl::SpeciesImpl()
{
    setDefaults();
}

SpeciesImpl::SpeciesImpl(int nr,int sflag,int ntflag,STRING molwt,STRING mdiam,STRING edens,STRING decay,
                         STRING Dm,STRING ccdef,STRING Cp,int ucc, int umd,int ued,int udm,int ucp,STRING name,
                         STRING desc)
{
    setDefaults();
    setNr(nr);
    setSflag(sflag);
    setNtflag(ntflag);
    setMolwt(molwt);
    setMdiam(mdiam);
    setEdens(edens);
    setDecay(decay);
    setDm(Dm);
    setCcdef(ccdef);
    setCp(Cp);
    setUcc(ucc);
    setUmd(umd);
    setUed(ued);
    setUdm(udm);
    setUcp(ucp);
    setName(name);
    setDesc(desc);
}

SpeciesImpl::SpeciesImpl(int nr,int sflag,int ntflag,double molwt,double mdiam,double edens,double decay,
                         double Dm,double ccdef,double Cp,int ucc,int umd,int ued,int udm,int ucp,STRING name,
                         STRING desc)
{
    setDefaults();
    setNr(nr);
    setSflag(sflag);
    setNtflag(ntflag);
    setMolwt(molwt);
    setMdiam(mdiam);
    setEdens(edens);
    setDecay(decay);
    setDm(Dm);
    setCcdef(ccdef);
    setCp(Cp);
    setUcc(ucc);
    setUmd(umd);
    setUed(ued);
    setUdm(udm);
    setUcp(ucp);
    setName(name);
    setDesc(desc);
}

void SpeciesImpl::read(Reader &input)
{
    setNr(input.read<int>(FILELINE));
    setSflag(input.read<int>(FILELINE));
    setNtflag(input.read<int>(FILELINE));
    setMolwt(input.read<STRING>(FILELINE));
    setMdiam(input.read<STRING>(FILELINE));
    setEdens(input.read<STRING>(FILELINE));
    setDecay(input.read<STRING>(FILELINE));
    setDm(input.read<STRING>(FILELINE));
    setCcdef(input.read<STRING>(FILELINE));
    setCp(input.read<STRING>(FILELINE));
    setUcc(input.read<int>(FILELINE));
    setUmd(input.read<int>(FILELINE));
    setUed(input.read<int>(FILELINE));
    setUdm(input.read<int>(FILELINE));
    setUcp(input.read<int>(FILELINE));
    setName(input.readString(FILELINE));
    setDesc(input.readLine(FILELINE));
}

STRING SpeciesImpl::write()
{
    STRING string;
    string += TO_STRING(m_nr) + ' ' + TO_STRING(m_sflag) + ' ' + TO_STRING(m_ntflag) + ' ' + TO_STRING(m_molwt) + ' ' + TO_STRING(m_mdiam) + ' ' + TO_STRING(m_edens) + ' ' + TO_STRING(m_decay) + ' ' + TO_STRING(m_Dm) + ' ' + TO_STRING(m_ccdef) + ' ' + TO_STRING(m_Cp) + ' ' + TO_STRING(m_ucc) + ' ' + TO_STRING(m_umd) + ' ' + TO_STRING(m_ued) + ' ' + TO_STRING(m_udm) + ' ' + TO_STRING(m_ucp) + ' ' + m_name + '\n';
    string += m_desc + '\n';
    return string;
}

int SpeciesImpl::nr() const
{
    return m_nr;
}

void SpeciesImpl::setNr(const int nr)
{
    m_nr = nr;
}

int SpeciesImpl::sflag() const
{
    return m_sflag;
}

void SpeciesImpl::setSflag(const int sflag)
{
    m_sflag = sflag;
}

int SpeciesImpl::ntflag() const
{
    return m_ntflag;
}

void SpeciesImpl::setNtflag(const int ntflag)
{
    m_ntflag = ntflag;
}

double SpeciesImpl::molwt() const
{
    return m_molwt.toDouble();
}

bool SpeciesImpl::setMolwt(const double molwt)
{
    m_molwt = QString::number(molwt);
    return true;
}

bool SpeciesImpl::setMolwt(const STRING &molwt)
{
    bool ok;
    FROM_STRING(molwt).toDouble(&ok);
    if(ok)
    {
        m_molwt = FROM_STRING(molwt);
        return true;
    }
    return false;
}

double SpeciesImpl::mdiam() const
{
    return m_mdiam.toDouble();
}

bool SpeciesImpl::setMdiam(const double mdiam)
{
    m_mdiam = QString::number(mdiam);
    return true;
}

bool SpeciesImpl::setMdiam(const STRING &mdiam)
{
    bool ok;
    FROM_STRING(mdiam).toDouble(&ok);
    if(ok)
    {
        m_mdiam = FROM_STRING(mdiam);
        return true;
    }
    return false;
}

double SpeciesImpl::edens() const
{
    return m_edens.toDouble();
}

bool SpeciesImpl::setEdens(const double edens)
{
    m_edens = QString::number(edens);
    return true;
}

bool SpeciesImpl::setEdens(const STRING &edens)
{
    bool ok;
    FROM_STRING(edens).toDouble(&ok);
    if(ok)
    {
        m_edens = FROM_STRING(edens);
        return true;
    }
    return false;
}

double SpeciesImpl::decay() const
{
    return m_decay.toDouble();
}

bool SpeciesImpl::setDecay(const double decay)
{
    m_decay = decay;
    return true;
}

bool SpeciesImpl::setDecay(const STRING &decay)
{
    bool ok;
    FROM_STRING(decay).toDouble(&ok);
    if(ok)
    {
        m_decay = FROM_STRING(decay);
        return true;
    }
    return false;
}

double SpeciesImpl::Dm() const
{
    return m_Dm.toDouble();
}

bool SpeciesImpl::setDm(const double Dm)
{
    m_Dm = QString::number(Dm);
    return true;
}

bool SpeciesImpl::setDm(const STRING &Dm)
{
    bool ok;
    FROM_STRING(Dm).toDouble(&ok);
    if(ok)
    {
        m_Dm = FROM_STRING(Dm);
        return true;
    }
    return false;
}

double SpeciesImpl::ccdef() const
{
    return m_ccdef.toDouble();
}

bool SpeciesImpl::setCcdef(const double ccdef)
{
    m_ccdef = QString::number(ccdef);
    return true;
}

bool SpeciesImpl::setCcdef(const STRING &ccdef)
{
    bool ok;
    FROM_STRING(ccdef).toDouble(&ok);
    if(ok)
    {
        m_ccdef = FROM_STRING(ccdef);
        return true;
    }
    return false;
}

double SpeciesImpl::Cp() const
{
    return m_Cp.toDouble();
}

bool SpeciesImpl::setCp(const double Cp)
{
    m_Cp = Cp;
    return true;
}

bool SpeciesImpl::setCp(const STRING &Cp)
{
    bool ok;
    FROM_STRING(Cp).toDouble(&ok);
    if(ok)
    {
        m_Cp = FROM_STRING(Cp);
        return true;
    }
    return false;
}

int SpeciesImpl::ucc() const
{
    return m_ucc;
}

void SpeciesImpl::setUcc(const int ucc)
{
    m_ucc = ucc;
}

int SpeciesImpl::umd() const
{
    return m_umd;
}

void SpeciesImpl::setUmd(const int umd)
{
    m_umd = umd;
}

int SpeciesImpl::ued() const
{
    return m_ued;
}

void SpeciesImpl::setUed(const int ued)
{
    m_ued = ued;
}

int SpeciesImpl::udm() const
{
    return m_udm;
}

void SpeciesImpl::setUdm(const int udm)
{
    m_udm = udm;
}

int SpeciesImpl::ucp() const
{
    return m_ucp;
}

void SpeciesImpl::setUcp(const int ucp)
{
    m_ucp = ucp;
}

STRING SpeciesImpl::name() const
{
    return m_name;
}

void SpeciesImpl::setName(const STRING &name)
{
    m_name = name;
}

STRING SpeciesImpl::desc() const
{
    return m_desc;
}

void SpeciesImpl::setDesc(const STRING &desc)
{
    m_desc = desc;
}

}
