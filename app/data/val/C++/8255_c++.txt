// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "foundgif.h"


FoundGif::FoundGif(QObject* parent) : TelegramObject(parent)
{
	this->_w = 0;
	this->_h = 0;
	this->_photo = NULL;
	this->_document = NULL;
}

void FoundGif::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == FoundGif::CtorFoundGif) ||
		 (this->_constructorid == FoundGif::CtorFoundGifCached));
	
	if(this->_constructorid == FoundGif::CtorFoundGif)
	{
		this->_url = mtstream->readTLString();
		this->_thumb_url = mtstream->readTLString();
		this->_content_url = mtstream->readTLString();
		this->_content_type = mtstream->readTLString();
		this->_w = mtstream->readTLInt();
		this->_h = mtstream->readTLInt();
	}
	else if(this->_constructorid == FoundGif::CtorFoundGifCached)
	{
		this->_url = mtstream->readTLString();
		TLInt photo_ctor = mtstream->peekTLConstructor();
		
		if(photo_ctor != TLTypes::Null)
		{
			this->resetTLType<Photo>(&this->_photo);
			this->_photo->read(mtstream);
		}
		else
		{
			this->nullTLType<Photo>(&this->_photo);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		TLInt document_ctor = mtstream->peekTLConstructor();
		
		if(document_ctor != TLTypes::Null)
		{
			this->resetTLType<Document>(&this->_document);
			this->_document->read(mtstream);
		}
		else
		{
			this->nullTLType<Document>(&this->_document);
			mtstream->readTLConstructor(); // Skip Null
		}
	}
}

void FoundGif::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == FoundGif::CtorFoundGif) ||
		 (this->_constructorid == FoundGif::CtorFoundGifCached));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == FoundGif::CtorFoundGif)
	{
		mtstream->writeTLString(this->_url);
		mtstream->writeTLString(this->_thumb_url);
		mtstream->writeTLString(this->_content_url);
		mtstream->writeTLString(this->_content_type);
		mtstream->writeTLInt(this->_w);
		mtstream->writeTLInt(this->_h);
	}
	else if(this->_constructorid == FoundGif::CtorFoundGifCached)
	{
		mtstream->writeTLString(this->_url);
		if(this->_photo != NULL)
			this->_photo->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(this->_document != NULL)
			this->_document->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
}

void FoundGif::compileFlags() 
{
	
}

TLString FoundGif::url() const
{
	return this->_url;
}

void FoundGif::setUrl(TLString url) 
{
	if(this->_url == url)
		return;

	this->_url = url;
	emit urlChanged();
}

TLString FoundGif::thumbUrl() const
{
	return this->_thumb_url;
}

void FoundGif::setThumbUrl(TLString thumb_url) 
{
	if(this->_thumb_url == thumb_url)
		return;

	this->_thumb_url = thumb_url;
	emit thumbUrlChanged();
}

TLString FoundGif::contentUrl() const
{
	return this->_content_url;
}

void FoundGif::setContentUrl(TLString content_url) 
{
	if(this->_content_url == content_url)
		return;

	this->_content_url = content_url;
	emit contentUrlChanged();
}

TLString FoundGif::contentType() const
{
	return this->_content_type;
}

void FoundGif::setContentType(TLString content_type) 
{
	if(this->_content_type == content_type)
		return;

	this->_content_type = content_type;
	emit contentTypeChanged();
}

TLInt FoundGif::w() const
{
	return this->_w;
}

void FoundGif::setW(TLInt w) 
{
	if(this->_w == w)
		return;

	this->_w = w;
	emit wChanged();
}

TLInt FoundGif::h() const
{
	return this->_h;
}

void FoundGif::setH(TLInt h) 
{
	if(this->_h == h)
		return;

	this->_h = h;
	emit hChanged();
}

Photo* FoundGif::photo() const
{
	return this->_photo;
}

void FoundGif::setPhoto(Photo* photo) 
{
	if(this->_photo == photo)
		return;

	this->deleteChild(this->_photo);
	this->_photo = photo;

	if(this->_photo)
		this->_photo->setParent(this);

	emit photoChanged();
}

Document* FoundGif::document() const
{
	return this->_document;
}

void FoundGif::setDocument(Document* document) 
{
	if(this->_document == document)
		return;

	this->deleteChild(this->_document);
	this->_document = document;

	if(this->_document)
		this->_document->setParent(this);

	emit documentChanged();
}

