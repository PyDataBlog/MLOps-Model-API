#include <cstdio>
#include <hare/base/current_thread.h>
#include <hare/base/singleton.h>
#include <hare/base/thread.h>
#include <hare/base/noncopyable.h>


class Test : public hare::NonCopyable {
public:
  Test() {
    printf("tid=%d, constructing %p\n", hare::CurrentThread::tid(), this);
  }

  ~Test() {
    printf("tid=%d, destructing %p %s\n", hare::CurrentThread::tid(), this,
           name_.c_str());
  }

  const hare::String &name() const { return name_; }
  void setName(const hare::String &n) { name_ = n; }

private:
  hare::String name_;
};

class TestNoDestroy : public hare::NonCopyable {
public:
  void no_destroy();

  TestNoDestroy() {
    printf("tid=%d, constructing TestNoDestroy %p\n",
           hare::CurrentThread::tid(), this);
  }

  ~TestNoDestroy() {
    printf("tid=%d, destructing TestNoDestroy %p\n", hare::CurrentThread::tid(),
           this);
  }
};

void threadFunc() {
  printf("tid=%d, %p name=%s\n", hare::CurrentThread::tid(),
         &hare::Singleton<Test>::instance(),
         hare::Singleton<Test>::instance().name().c_str());
  hare::Singleton<Test>::instance().setName("only one, changed");
}

int main() {
  hare::Singleton<Test>::instance().setName("only one");
  hare::Thread t1(threadFunc);
  t1.start();
  t1.join();
  printf("tid=%d, %p name=%s\n", hare::CurrentThread::tid(),
         &hare::Singleton<Test>::instance(),
         hare::Singleton<Test>::instance().name().c_str());
  hare::Singleton<TestNoDestroy>::instance();
  printf("with valgrind, you should see %zd-byte memory leak.\n",
         sizeof(TestNoDestroy));
}
