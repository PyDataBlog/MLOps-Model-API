#	plot a periodic orbit of the Rossler system
#
#	Requires: rosslerreturn.jl, PyPlot

function rosslerperiodicplot(eta_step, time_step, end_time_1, end_time_2)

	#	goal is to find fixed points of first return map

	#	use enough eta gridpoints to allow accurate interpolation

	y	=	rosslerreturn(eta_step, time_step, end_time_1)
	itp	=	interpolate(y, BSpline(Quadratic(Reflect())), OnCell())

	#	intersections of return map curve and diagonal are fixed points;
	#		these correspond to approximate periodic orbits


	#	first, build diagonal

	ydiag	=	[y[1, :]; y[1, :]]

	#	compute residual of each return map data point and corresponding point 
	#	on diagonal; intersection should be minimum of these resids

	resids		=	( y[2, :] - ydiag[2, :] ) .^2 / ( ydiag[2, :] ) .^2
	
	(fp, j_min)	=	findmin(resids)

	#	convert from parametrized coordinate eta to standard spatial coordinate

	fp	=	-22.0 + 14.0 * fp

	# 	convert fixed point of 1D return map to 3-vector

	initial_condition	=	[0; fp; 0]

	#	clean plot

	clf()

	#	used fixed point as guess for periodic orbit;
	#		integrate and plot trajectory from fixed point
	#
	#		best if end_time_2 is O(100) at least
	#		to avoid transients

	rosslerplot( initial_condition, end_time_2, time_step )


end
