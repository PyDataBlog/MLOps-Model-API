NameSpace Models.DMSCON

Partial Public Class FieldAccess_DataCard
   Inherits DMS.Base.Models.GenericEntity

#Region " Properties "

Public Overrides Property ID As String
   Get
      Return "{0}_{1}_{2}".FormatWith(Fieldname,SecurityMaskID,UserID)
   End Get
   Set(value as String)

   End Set
End Property

Private _Edit As Boolean = False ' Column 4
Public Property Edit As Boolean
   Get
      Return _Edit
   End Get
   Set(value as Boolean)
      SetProperty(_Edit,value,"Edit")
   End Set
End Property

Private _Fieldname As String = "" ' Column 0
Public Property Fieldname As String
   Get
      Return _Fieldname
   End Get
   Set(value as String)
      SetProperty(_Fieldname,value,"Fieldname",{"ID"})
   End Set
End Property

Private _SecurityMaskID As Integer = -1 ' Column 1
Public Property SecurityMaskID As Integer
   Get
      Return _SecurityMaskID
   End Get
   Set(value as Integer)
      SetProperty(_SecurityMaskID,value,"SecurityMaskID",{"ID"})
   End Set
End Property

Private _UserID As Integer = -1 ' Column 2
Public Property UserID As Integer
   Get
      Return _UserID
   End Get
   Set(value as Integer)
      SetProperty(_UserID,value,"UserID",{"ID"})
   End Set
End Property

Private _View As Boolean = False ' Column 3
Public Property View As Boolean
   Get
      Return _View
   End Get
   Set(value as Boolean)
      SetProperty(_View,value,"View")
   End Set
End Property

#End Region

Public Async Function Delete(dbAccess as DMS.Base.Data.IDBAccess) As Task
   Await Delete(dbAccess,Me)
End Function

Public Overrides Sub LoadFromEntity(genericEntity As DMS.Base.Models.GenericEntity)
   If Me Is genericEntity Then
      Return
   End If
   If Not (TypeOf (genericEntity) Is FieldAccess_DataCard) Then
      Return
   End If
   Dim Entity As FieldAccess_DataCard = DirectCast(genericEntity, FieldAccess_DataCard)

   Me.Fieldname = Entity.Fieldname
   Me.SecurityMaskID = Entity.SecurityMaskID
   Me.UserID = Entity.UserID
   Me.View = Entity.View
   Me.Edit = Entity.Edit
End Sub

Public Overrides Sub LoadFromReader(reader As IDataReader)
   Me.Fieldname = ToStringDB(reader(0))
   Me.SecurityMaskID = ToIntegerDB(reader(1))
   Me.UserID = ToIntegerDB(reader(2))
   Me.View = ToBooleanDB(reader(3))
   Me.Edit = ToBooleanDB(reader(4))
End Sub

Public Overrides Sub PopulateDataRow(ByRef dataRow As System.Data.DataRow)
   dataRow.Item(0) = Me.Fieldname
   dataRow.Item(1) = Me.SecurityMaskID
   dataRow.Item(2) = Me.UserID
   dataRow.Item(3) = Me.View
   dataRow.Item(4) = Me.Edit
End Sub

Public Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess) As Task
   Await Upsert(dbAccess, Me)
End Function

Public Overrides Function GetParameters() As IDictionary(Of String, Object)
   Dim Results As New Dictionary(Of String, Object)
Results.Add("Fieldname", Me.Fieldname)
Results.Add("SecurityMaskID", Me.SecurityMaskID)
Results.Add("UserID", Me.UserID)
Results.Add("View", Me.View)
Results.Add("Edit", Me.Edit)
   Return Results
End Function

#Region " Shared "

Private Shared _DBDetails As DMS.Base.Models.DBDetails = Nothing

Public Shared Async Function Delete(dbAccess As DMS.Base.Data.IDBAccess, entities As IEnumerable(Of FieldAccess_DataCard)) As Task
   Dim Tasks As New List(Of Task)
   For Each Entity As FieldAccess_DataCard In entities
      Tasks.Add(Delete(dbAccess, Entity))
   Next
   Await Task.WhenAll(Tasks)
End Function

Public Shared Async Function Delete(dbAccess As DMS.Base.Data.IDBAccess, entity As FieldAccess_DataCard) As Task
      Await dbAccess.ExecuteNonQuery(GetDBDetails.Delete, entity.GetParameters())
End Function

Public Shared Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess, entities As IEnumerable(Of FieldAccess_DataCard)) As Task
   If entities.Count = 1 Then
      Await Upsert(dbAccess, entities.FirstOrDefault())
   Else
         Dim DBDetails As DMS.Base.Models.DBDetails = GetDBDetails()
         Using DataTable As DataTable = GetDataTable()
            For Each Entity As FieldAccess_DataCard In entities
               Dim DataRow As DataRow = DataTable.NewRow
               Entity.PopulateDataRow(DataRow)
               DataTable.Rows.Add(DataRow)
            Next
            Await dbAccess.Merge(DBDetails.CreateTemp, DBDetails.DropTemp, DataTable, DBDetails.Merge, DBDetails.TableName)
         End Using
   End If
End Function

Public Shared Async Function Upsert(dbAccess As DMS.Base.Data.IDBAccess, entity As FieldAccess_DataCard) As Task
      Dim Parameters As IDictionary(Of String, Object) = entity.GetParameters()
      If String.IsNullOrEmpty(entity.ID) OrElse entity.ID.Equals("-1") OrElse ToIntegerDB(Await dbAccess.ExecuteScalar(GetDBDetails.CountSingle, Parameters)) <= 0 Then
         Await dbAccess.ExecuteNonQuery(GetDBDetails.Insert, Parameters)
      Else
         Await dbAccess.ExecuteNonQuery(GetDBDetails.Update, Parameters)
      End If
End Function

Public Shared Async Function GetAll(dbAccess As DMS.Base.Data.IDBAccess) As Threading.Tasks.Task(Of IEnumerable(Of FieldAccess_DataCard))
      Return Await dbAccess.ExecuteReader(Of FieldAccess_DataCard)(GetDBDetails.SelectAll)
End Function

Public Shared Function GetDataTable() As DataTable
   Dim DataTable As New DataTable
   DataTable.Columns.Add("Fieldname")
   DataTable.Columns.Add("SecurityMaskID")
   DataTable.Columns.Add("UserID")
   DataTable.Columns.Add("View")
   DataTable.Columns.Add("Edit")
   Return DataTable
End Function

Public Shared Function GetDBDetails() As DMS.Base.Models.DBDetails
   If _DBDetails Is Nothing Then
      _DBDetails = New DMS.Base.Models.DBDetails
      _DBDetails.CountAll = "SELECT COUNT(*) FROM [FieldAccess_DataCard]"
      _DBDetails.CountSingle = "SELECT COUNT(*) FROM [FieldAccess_DataCard] WHERE (([Fieldname]=@Fieldname) AND ([SecurityMaskID]=@SecurityMaskID) AND ([UserID]=@UserID))"
      _DBDetails.CreateTemp = "CREATE TABLE #FieldAccess_DataCard ([Fieldname] [varchar](250) NULL,[SecurityMaskID] [int] NULL,[UserID] [int] NULL,[View] [bit] NULL,[Edit] [bit] NULL)"
      _DBDetails.Delete = "DELETE FROM [FieldAccess_DataCard] WHERE (([Fieldname]=@Fieldname) AND ([SecurityMaskID]=@SecurityMaskID) AND ([UserID]=@UserID))"
      _DBDetails.DropTemp = "DROP TABLE #FieldAccess_DataCard"
      _DBDetails.GetDataTable = New DMS.Base.Delegates.GetDataTable(AddressOf GetDataTable)
      _DBDetails.Insert = "INSERT INTO [FieldAccess_DataCard] ([Fieldname],[SecurityMaskID],[UserID],[View],[Edit]) VALUES (@Fieldname,@SecurityMaskID,@UserID,@View,@Edit)"
      _DBDetails.Merge = "MERGE INTO [FieldAccess_DataCard] As [Target] USING #FieldAccess_DataCard As [Source] ON [Target].[Fieldname]=[Source].[Fieldname] AND [Target].[SecurityMaskID]=[Source].[SecurityMaskID] AND [Target].[UserID]=[Source].[UserID] WHEN MATCHED THEN UPDATE SET [Target].[View]=[Source].[View],[Target].[Edit]=[Source].[Edit] WHEN NOT MATCHED THEN INSERT ([Fieldname],[SecurityMaskID],[UserID],[View],[Edit]) VALUES ([Source].[Fieldname],[Source].[SecurityMaskID],[Source].[UserID],[Source].[View],[Source].[Edit]);"
      _DBDetails.ModelName = "FieldAccess_DataCard"
      _DBDetails.SelectAll = "SELECT [Fieldname],[SecurityMaskID],[UserID],[View],[Edit] FROM [FieldAccess_DataCard]"
      _DBDetails.TableName = "FieldAccess_DataCard"
      _DBDetails.Update = "UPDATE [FieldAccess_DataCard] SET [View]=@View,[Edit]=@Edit WHERE (([Fieldname]=@Fieldname) AND ([SecurityMaskID]=@SecurityMaskID) AND ([UserID]=@UserID))"
   End If
   Return _DBDetails
End Function

#End Region

End Class

End Namespace


