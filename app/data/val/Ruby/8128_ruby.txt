require 'sfba_transit/login_manager'

module SfbaTransit
  describe LoginManager do
    let(:email) { 'test@example.com' }
    let(:password) { 'test_password' }
    subject(:login_manager) { LoginManager.new(email, password, base_url: 'https://localhost') }
    VIEWSTATE = '3203655793599533872:3579969348273256144'.freeze
    TEMP_SESSION_ID = '!2cudABGzh9tqWp/nr85wKjrI+8zQDqcJqWKc5rdvcx21dLj1FA=='.freeze
    AUTHENTICATED_SESSION_ID = '!tH4b9U+J8XngdGeJMtP7Z+V9W3dnHYt7kHpIXX31LReSg=='.freeze
    before(:each) do
      stub_request(:get, 'https://localhost/ClipperCard/loginFrame.jsf')
        .to_return(body: "<input id=\"javax.faces.ViewState\" value=#{VIEWSTATE} />",
                   headers: { 'Set-Cookie' => "JSESSIONID=#{TEMP_SESSION_ID}" },
                   status: 200)

      stub_request(:post, 'https://localhost/ClipperCard/loginFrame.jsf')
        .with(headers: { 'Cookie' => "JSESSIONID=#{TEMP_SESSION_ID}" })
        .to_return(body: '<partial-response><redirect url="dashboard.jsf"></redirect></partial-response>',
                   headers: { 'set-cookie' => "JSESSIONID=#{AUTHENTICATED_SESSION_ID}" },
                   status: 200)
    end
    it 'stores email' do
      expect(login_manager.email).to eq email
    end

    it 'stores password' do
      expect(login_manager.password).to eq password
    end

    it 'logs in and returns session id' do
      login_manager.login!
      expect(login_manager.session_id).to eq AUTHENTICATED_SESSION_ID
    end

    it 'throws error if not logged in' do
      expect { login_manager.session_id }.to raise_error(RuntimeError)
    end
  end
end
